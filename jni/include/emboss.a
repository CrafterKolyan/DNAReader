!<arch>
//                                              542       `
ajresourcedata.h/
ajresourceread.h/
ajresourcewrite.h/
ensassemblyexception.h/
ensassemblymapper.h/
ensbaseadaptor.h/
enscoordsystem.h/
ensdatabaseadaptor.h/
ensdatabaseconnection.h/
ensdatabaseentry.h/
ensexternaldatabase.h/
ensgvattribute.h/
ensgvbaseadaptor.h/
ensgvdatabaseadaptor.h/
ensgvindividual.h/
ensgvpopulation.h/
ensgvvariation.h/
ensmetacoordinate.h/
ensmetainformation.h/
ensmiscellaneous.h/
ensprojectionsegment.h/
ensqcalignment.h/
ensqcdasfeature.h/
ensqcsubmission.h/
ensqcvariation.h/
enssequenceedit.h/
enstranslation.h/
ajacd.h/        1414437298  1010  513   100644  10450     `
/* @include ajacd *************************************************************
**
** These functions control all aspects of AJAX command definition
** syntax, command line handling and prompting of the user.
**
** The only major functions visible to callers are the initialisation
** function ajAcdInit and a series of retrieval functions ajGetAcdObject
** for each defined object type (integer, sequence, and so on).
**
** Future extensions are planned, including the ability to write out
** the ACD internal structures in a number of other interface formats.
**
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.17 $
** @modified Jun 25 pmr First version
** @modified May 06 2004 Jon Ison Minor mods.
** @modified $Date: 2012/09/03 14:15:18 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJACD_H
#define AJACD_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

#include "ajstr.h"
#include "ajlist.h"
#include "ajarr.h"
#include "ajrange.h"

#include "ajalign.h"
#include "ajcod.h"
#include "ajgraph.h"
#include "ajpat.h"
#include "ajphylo.h"
#include "ajreg.h"
#include "ajreport.h"

#include "ajassemdata.h"
#include "ajfeatdata.h"
#include "ajobodata.h"
#include "ajrefseqdata.h"
#include "ajresourcedata.h"
#include "ajseqdata.h"
#include "ajtaxdata.h"
#include "ajtextdata.h"
#include "ajurldata.h"
#include "ajvardata.h"
#include "ajxmldata.h"

AJ_BEGIN_DECLS


/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void          ajAcdExit (AjBool single);

AjPAlign      ajAcdGetAlign (const char *token);
AjPFloat      ajAcdGetArray (const char *token);
AjPAssemload  ajAcdGetAssembly (const char *token);
AjBool        ajAcdGetBoolean (const char *token);
AjPCod        ajAcdGetCodon (const char *token);
AjPFile       ajAcdGetCpdb (const char *token);
AjPFile       ajAcdGetDatafile (const char *token);
AjPDir        ajAcdGetDirectory (const char *token);
AjPStr        ajAcdGetDirectoryName (const char *token);
AjPList       ajAcdGetDirlist (const char *token);
AjPPhyloState* ajAcdGetDiscretestates (const char *token);
AjPPhyloState ajAcdGetDiscretestatesSingle (const char *token);
AjPPhyloDist* ajAcdGetDistances (const char *token);
AjPPhyloDist  ajAcdGetDistancesSingle (const char *token);
double        ajAcdGetFloatDouble (const char *token);
AjPFeattable  ajAcdGetFeatures (const char *token);
AjPFeattaball ajAcdGetFeaturesall (const char *token);
AjPFeattabOut ajAcdGetFeatout (const char *token);
AjPList       ajAcdGetFilelist (const char *token);
float         ajAcdGetFloat (const char *token);
AjPPhyloFreq  ajAcdGetFrequencies (const char *token);
AjPGraph      ajAcdGetGraph (const char *token);
AjPGraph      ajAcdGetGraphxy (const char *token);
AjPFile       ajAcdGetInfile (const char *token);
ajint         ajAcdGetInt (const char *token);
ajlong        ajAcdGetIntLong (const char *token);
AjPStr*       ajAcdGetList (const char *token);
AjPStr        ajAcdGetListSingle(const char *token);
AjPMatrix     ajAcdGetMatrix (const char *token);
AjPMatrixf    ajAcdGetMatrixf (const char *token);
AjPObo        ajAcdGetObo(const char *token);
AjPOboall     ajAcdGetOboall(const char *token);
AjPOutfile    ajAcdGetOutassembly(const char *token);
AjPOutfile    ajAcdGetOutcodon(const char *token);
AjPOutfile    ajAcdGetOutcpdb(const char *token);
AjPOutfile    ajAcdGetOutdata(const char *token);
AjPDirout     ajAcdGetOutdir (const char *token);
AjPStr        ajAcdGetOutdirName (const char *token);
AjPOutfile    ajAcdGetOutdiscrete(const char *token);
AjPOutfile    ajAcdGetOutdistance(const char *token);
AjPFile       ajAcdGetOutfile (const char *token);
AjPStr        ajAcdGetOutfileName (const char *token);
AjPOutfile    ajAcdGetOutfreq(const char *token);
AjPOutfile    ajAcdGetOutmatrix(const char *token);
AjPOutfile    ajAcdGetOutmatrixf(const char *token);
AjPOutfile    ajAcdGetOutobo(const char *token);
AjPOutfile    ajAcdGetOutproperties(const char *token);
AjPOutfile    ajAcdGetOutrefseq(const char *token);
AjPOutfile    ajAcdGetOutresource(const char *token);
AjPOutfile    ajAcdGetOutscop(const char *token);
AjPOutfile    ajAcdGetOuttaxon(const char *token);
AjPOutfile    ajAcdGetOuttext(const char *token);
AjPOutfile    ajAcdGetOuttree(const char *token);
AjPOutfile    ajAcdGetOuturl(const char *token);
AjPOutfile    ajAcdGetOutvariation(const char *token);
AjPOutfile    ajAcdGetOutxml(const char *token);
AjPPatlistSeq ajAcdGetPattern (const char *token);
AjPPhyloProp  ajAcdGetProperties (const char *token);
AjPRange      ajAcdGetRange (const char *token);
AjPRefseq     ajAcdGetRefseq (const char *token);
AjPPatlistRegex ajAcdGetRegexp (const char *token);
AjPRegexp     ajAcdGetRegexpSingle (const char *token);
AjPReport     ajAcdGetReport (const char *token);
AjPResource   ajAcdGetResource(const char *token);
AjPResourceall  ajAcdGetResourceall(const char *token);
AjPFile       ajAcdGetScop (const char *token);
AjPStr*       ajAcdGetSelect (const char *token);
AjPStr        ajAcdGetSelectSingle (const char *token);
AjPSeq        ajAcdGetSeq (const char *token);
AjPSeqall     ajAcdGetSeqall (const char *token);
AjPSeqout     ajAcdGetSeqout (const char *token);
AjPSeqout     ajAcdGetSeqoutall (const char *token);
AjPSeqout     ajAcdGetSeqoutset (const char *token);
AjPSeqset     ajAcdGetSeqset (const char *token);
AjPSeqset*    ajAcdGetSeqsetall (const char *token);
AjPSeqset     ajAcdGetSeqsetallSingle (const char *token);
AjPStr        ajAcdGetString (const char *token);
AjPTax        ajAcdGetTaxon(const char *token);
AjPTaxall     ajAcdGetTaxonall(const char *token);
AjPText       ajAcdGetText(const char *token);
AjPTextall    ajAcdGetTextall(const char *token);
AjBool        ajAcdGetToggle (const char *token);
AjPPhyloTree* ajAcdGetTree (const char *token);
AjPPhyloTree  ajAcdGetTreeSingle (const char *token);
AjPUrl        ajAcdGetUrl(const char *token);
AjPUrlall     ajAcdGetUrlall(const char *token);
AjPVarload    ajAcdGetVariation(const char *token);
AjPXml        ajAcdGetXml(const char *token);
AjPXmlall     ajAcdGetXmlall(const char *token);

const AjPStr  ajAcdGetValue (const char* token);
const AjPStr  ajAcdGetValueDefault (const char* token);

void          ajAcdInit(const char *pgm, ajint argc, char * const argv[]);
void          ajAcdInitPV(const char *pgm, ajint argc, char * const argv[],
			  const char *package, const char *packversion);
AjBool        ajAcdIsUserdefinedC(const char* token);
AjBool        ajAcdIsUserdefinedS(const AjPStr);
const AjPStr  ajAcdGetpathC(const char *token);
const AjPStr  ajAcdGetpathS(const AjPStr);
void          ajAcdPrintAppl(AjPFile outf, AjBool full);
void          ajAcdPrintQual(AjPFile outf, AjBool full);
void          ajAcdPrintType (AjPFile outf, AjBool full);
AjBool        ajAcdSetControl (const char* optionName);
void          ajAcdUnused(void);
AjBool        ajAcdedamParse(const AjPStr relation, AjPStr* id,
                             AjPStr* namespace,  AjPStr* name);
const char*   ajAcdtypeGetGroup(const AjPStr type);

/*
** End of prototype definitions
*/

#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif
#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjBool         ajAcdIsUserdefined(const char* token);
__deprecated AjBool         ajAcdDebug (void);
__deprecated AjBool         ajAcdDebugIsSet (void);
__deprecated AjBool         ajAcdFilter (void);
__deprecated AjPPhyloState  ajAcdGetDiscretestatesI (const char *token,
						    ajint num);
__deprecated AjPStr         ajAcdGetListI (const char *token, ajint num);
__deprecated AjPStr         ajAcdGetSelectI (const char *token, ajint num);
__deprecated AjPSeqset      ajAcdGetSeqsetallI (const char *token, ajint num);
__deprecated AjPPhyloTree   ajAcdGetTreeI (const char *token, ajint num);
__deprecated const AjPStr   ajAcdValue (const char* token);
__deprecated AjBool         ajAcdStdout (void);

__deprecated AjBool        ajAcdGetBool (const char *token);
__deprecated AjPFeattable  ajAcdGetFeat (const char *token);

__deprecated void          ajAcdGraphicsInit(const char *pgm,
                                             ajint argc, char * const argv[]);
__deprecated void          ajAcdGraphicsInitPV(const char *pgm,
                                               ajint argc,char * const argv[],
                                               const char *package,
                                               const char *packversion);

__deprecated void          ajGraphicsInit(const char *pgm,
					  ajint argc, char * const argv[]);
__deprecated void          ajGraphicsInitPV(const char *pgm,
					    ajint argc,char * const argv[],
					    const char *package,
					    const char *packversion);

#endif

AJ_END_DECLS

#endif  /* !AJACD_H */
ajalign.h/      1414437288  1010  513   100644  9940      `
/* @include ajalign ***********************************************************
**
** AJAX ALIGN (ajax alignment output) functions
**
** These functions align AJAX sequences and report them in a variety
** of formats.
**
** @author Copyright (C) 2001 Peter Rice, LION Bioscience Ltd.
** @version $Revision: 1.40 $
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJALIGN_H
#define AJALIGN_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"
#include "ajlist.h"
#include "ajmatrices.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPAlign *************************************************************
**
** Ajax Align Output object.
**
** Holds definition of feature align output.
**
** @alias AjSAlign
** @alias AjOAlign
**
** @new ajAlignNew Default constructor
** @delete ajAlignDel Default destructor
** @modify ajAlignReset Resets ready for reuse.
** @output ajAlignWrite Master alignment output routine
** @output ajAlignWriteHeader Master header output routine
** @output ajAlignWriteTail Master footer output routine
** @cast ajAlignGetFormat Returns the format of an alignment
**
** @other AjPSeqout Sequence output
** @other AjPFeatout Feature output
** @other AjPReport Report output
** @other AjPFile Input and output files
**
** @attr Type [AjPStr] "P" Protein or "N" Nucleotide
** @attr Formatstr [AjPStr] Report format (-aformat qualifier)
** @attr File [AjPFile] Output file object
** @attr Header [AjPStr] Text to add to header with newlines
** @attr SubHeader [AjPStr] Text to add to align subheader with newlines
** @attr Tail [AjPStr] Text to add to tail with newlines
** @attr SubTail [AjPStr] Text to add to subtail with newlines
** @attr Showacc [AjBool] Report accession number if ajTrue
** @attr Showdes [AjBool] Report sequence description if ajTrue
** @attr Showusa [AjBool] Report full USA (-ausa qualifier) if ajTrue
**                        or only seqname if ajFalse
** @attr Multi [AjBool] if true, assume >1 alignment
** @attr Global [AjBool] if true, show full sequence beyond match
** @attr Format [AjEnum] Report format (index number)
** @attr Data [AjPList] Alignment specific data - see ajalign.c
** @attr Nseqs [ajint] Number of sequences in all alignments
** @attr Nmin [ajint] Minimum number of sequences e.g. 2
** @attr Nmax [ajint] Maximum number of sequences e.g. 2
** @attr Width [ajint] Output width (minimum 10)
** @attr IMatrix [AjPMatrix] Integer matrix (see also FMatrix)
** @attr FMatrix [AjPMatrixf] Floating point matrix (see also IMatrix)
** @attr Matrix [AjPStr] Matrix name
** @attr GapPen [AjPStr] Gap penalty (converted to string)
** @attr ExtPen [AjPStr] Gap extend penalty (converted to string)
** @attr SeqOnly [AjBool] Sequence output only, no head or tail
** @attr SeqExternal [AjBool] Sequence is non-local, do not delete
** @attr Count [ajint] Use count
** @attr RefSeq [ajint] Index of the reference sequences in AlignOData objects
**                      of the Data list
** @@
******************************************************************************/

typedef struct AjSAlign
{
    AjPStr Type;
    AjPStr Formatstr;
    AjPFile File;
    AjPStr Header;
    AjPStr SubHeader;
    AjPStr Tail;
    AjPStr SubTail;
    AjBool Showacc;
    AjBool Showdes;
    AjBool Showusa;
    AjBool Multi;
    AjBool Global;
    AjEnum Format;
    AjPList Data;
    ajint Nseqs;
    ajint Nmin;
    ajint Nmax;
    ajint Width;
    AjPMatrix  IMatrix;
    AjPMatrixf FMatrix;
    AjPStr Matrix;
    AjPStr GapPen;
    AjPStr ExtPen;
    AjBool SeqOnly;
    AjBool SeqExternal;
    ajint Count;
    ajint RefSeq;
} AjOAlign;

#define AjPAlign AjOAlign*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

void         ajAlignClose(AjPAlign thys);
AjBool       ajAlignConsAmbig(const AjPSeqset thys, AjPStr *cons);
AjBool       ajAlignConsAmbigNuc(const AjPSeqset thys, AjPStr *cons);
AjBool       ajAlignConsAmbigProt(const AjPSeqset thys, AjPStr *cons);
AjBool       ajAlignConsStats(const AjPSeqset thys, AjPMatrix mymatrix,
                              AjPStr *cons, ajint* retident,
                              ajint* retsim, ajint* retgap,
                              ajint* retlen);
AjBool       ajAlignDefine(AjPAlign pthys, AjPSeqset seqset);
AjBool       ajAlignDefineSS(AjPAlign pthys,
                             const AjPSeq seqa, const AjPSeq seqb);
AjBool       ajAlignDefineCC(AjPAlign pthys,
                             const char* seqa, const char* seqb,
                             const char* namea,const  char* nameb);
void         ajAlignDel(AjPAlign* pthys);
void         ajAlignExit(void);
AjBool       ajAlignFindFormat(const AjPStr format, ajint* iformat);
AjBool       ajAlignFormatDefault(AjPStr* pformat);
AjBool       ajAlignFormatShowsSequences(const AjPAlign thys);
ajint        ajAlignGetLen(const AjPAlign thys);
const char*  ajAlignGetFilename(const AjPAlign thys);
const AjPStr ajAlignGetFormat(const AjPAlign thys);
AjPAlign     ajAlignNew(void);
AjBool       ajAlignOpen(AjPAlign thys, const AjPStr name);
void         ajAlignPrintFormat(AjPFile outf, AjBool full);
void         ajAlignPrintbookFormat(AjPFile outf);
void         ajAlignPrinthtmlFormat(AjPFile outf);
void         ajAlignPrintwikiFormat(AjPFile outf);
void         ajAlignReset(AjPAlign thys);
void         ajAlignSetExternal(AjPAlign thys, AjBool external);
void         ajAlignSetHeader(AjPAlign thys, const AjPStr header);
void         ajAlignSetHeaderApp(AjPAlign thys, const AjPStr header);
void         ajAlignSetHeaderC(AjPAlign thys, const char* header);
void         ajAlignSetGapI(AjPAlign thys, ajint gappen, ajint extpen);
void         ajAlignSetGapR(AjPAlign thys, float gappen, float extpen);
void         ajAlignSetMatrixName(AjPAlign thys, const AjPStr matrix);
void         ajAlignSetMatrixNameC(AjPAlign thys, const char* matrix);
void         ajAlignSetMatrixInt(AjPAlign thys, AjPMatrix matrix);
void         ajAlignSetMatrixFloat(AjPAlign thys, AjPMatrixf matrix);
AjBool       ajAlignSetRange(AjPAlign thys,
                             ajint start1, ajint end1,
                             ajint len1, ajint off1,
                             ajint start2, ajint end2,
                             ajint len2, ajint off2);
void         ajAlignSetRefSeqIndx(AjPAlign thys, ajint refseq);
void         ajAlignSetScoreI(AjPAlign thys, ajint score);
void         ajAlignSetScoreL(AjPAlign thys, ajlong score);
void         ajAlignSetScoreR(AjPAlign thys, float score);
void         ajAlignSetStats(AjPAlign thys, ajint iali, ajint len,
                             ajint ident, ajint sim, ajint gaps,
                             const AjPStr score);
AjBool       ajAlignSetSubRange(AjPAlign thys,
                                ajint substart1, ajint start1,
                                ajint end1, AjBool rev1, ajint len1,
                                ajint substart2, ajint start2,
                                ajint end2, AjBool rev2, ajint len2);
void         ajAlignSetSubHeader(AjPAlign thys, const AjPStr subheader);
void         ajAlignSetSubHeaderApp(AjPAlign thys, const AjPStr subheader);
void         ajAlignSetSubHeaderC(AjPAlign thys, const char* subheader);
void         ajAlignSetSubHeaderPre(AjPAlign thys, const AjPStr subheader);
void         ajAlignSetSubStandard(AjPAlign thys, ajint iali);
void         ajAlignSetSubTail(AjPAlign thys, const AjPStr tail);
void         ajAlignSetSubTailC(AjPAlign thys, const char* tail);
void         ajAlignSetSubTailApp(AjPAlign thys, const AjPStr tail);
void         ajAlignSetTail(AjPAlign thys, const AjPStr tail);
void         ajAlignSetTailApp(AjPAlign thys, const AjPStr tail);
void         ajAlignSetTailC(AjPAlign thys, const char* tail);
void         ajAlignSetType(AjPAlign thys);
void         ajAlignTrace(const AjPAlign thys);
void         ajAlignTraceT(const AjPAlign thys, const char* title);
AjBool       ajAlignValid(AjPAlign thys);
void         ajAlignWrite(AjPAlign thys);
void         ajAlignWriteHeader(AjPAlign thys);
void         ajAlignWriteTail(AjPAlign thys);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJALIGN_H */
ajarch.h/       1414437288  1010  513   100644  9065      `
/* @include ajarch ************************************************************
**
** AJAX master architecture-specific include file
**
** @author Copyright (C) 1998 Peter Rice and Alan Bleasby
** @version $Revision: 1.26 $
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
**
******************************************************************************/

#ifndef AJARCH_H
#define AJARCH_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include <sys/types.h>
#include <stdio.h>





/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

#if defined(AJ_Linux64) || defined(AJ_Solaris64) || defined(AJ_IRIX64)  \
    || defined(AJ_OSF164) || defined(AJ_FreeBSD64)
#define HAVE64
#endif




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

#if !defined(AJ_LinuxLF) && !defined(AJ_SolarisLF) && !defined(AJ_IRIXLF) \
    && !defined(AJ_AIXLF) && !defined(AJ_HPUXLF) && !defined(AJ_MACOSXLF) \
    && !defined(AJ_FreeBSDLF) && !defined(__CYGWIN__) && !defined(WIN32)




/* @datatype ajint ************************************************************
**
** AJAX Signed Integer
**
** @attr typedef [int] Value
** @@
******************************************************************************/
typedef int ajint;




/* @datatype ajlong ***********************************************************
**
** AJAX Long Signed Integer
**
** @attr typedef [long] Value
** @@
******************************************************************************/
typedef long ajlong;




/* @datatype ajuint ***********************************************************
**
** AJAX Unsigned Integer
**
** @attr typedef [unsigned int] Value
** @@
******************************************************************************/
typedef unsigned int ajuint;




/* @datatype ajshort **********************************************************
**
** AJAX Short Signed Integer
**
** @attr typedef [short] Value
** @@
******************************************************************************/
typedef short ajshort;




/* @datatype ajushort *********************************************************
**
** AJAX Short Unsigned Integer
**
** @attr typedef [unsigned short] Value
** @@
******************************************************************************/
typedef unsigned short ajushort;




/* @datatype ajulong **********************************************************
**
** AJAX Long Unsigned Integer
**
** @attr typedef [unsigned long] Value
** @@
******************************************************************************/
typedef unsigned long ajulong;
#endif

#ifdef AJ_LinuxLF
#define HAVE64
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define ftell(a) ftello(a)
#define fseek(a,b,c) fseeko(a,b,c)
#endif /* AJ_LinuxLF */

#ifdef AJ_FreeBSDLF
#define HAVE64
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define ftell(a) ftello(a)
#define fseek(a,b,c) fseeko(a,b,c)
#endif /* AJ_FreeBSDLF */

#ifdef AJ_SolarisLF
#define HAVE64
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define ftell(a) ftello(a)
#define fseek(a,b,c) fseeko(a,b,c)
#endif /* AJ_SolarisLF */

#ifdef AJ_HPUXLF
#define HAVE64
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define ftell(a) ftello(a)
#define fseek(a,b,c) fseeko(a,b,c)
#if !defined(HPUX64PTRS)
#define fopen(a,b) (FILE*)fopen64(a,b)
#endif /* !HPUX64PTRS */
#endif /* AJ_HPUXLF */

#ifdef AJ_IRIXLF
#define HAVE64
typedef int ajint;
typedef off64_t ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long ajulong;
#define ftell(a) ftell64(a)
#define fseek(a,b,c) fseek64(a,b,c)
#endif /* AJ_IRIXLF */

#ifdef AJ_AIXLF
#define HAVE64
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define ftell(a) ftello(a)
#define fseek(a,b,c) fseeko(a,b,c)
#endif /* AJ_AIXLF */

#ifdef AJ_MACOSXLF
#define HAVE64
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define ftell(a) ftello(a)
#define fseek(a,b,c) fseeko(a,b,c)
#endif /* AJ_MACOSXLF */

#ifdef __CYGWIN__
#define __int64 long long
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define fseek(a,b,c) fseeko(a,b,c)
#endif /* __CYGWIN__ */

#ifdef WIN32
typedef int ajint;
typedef long long ajlong;
typedef unsigned int ajuint;
typedef short ajshort;
typedef unsigned short ajushort;
typedef unsigned long long ajulong;
#define fseek(a,b,c) _fseeki64(a,b,c)
#endif /* WIN32 */




/* @datatype AjBool ***********************************************************
**
** Boolean data type
**
** Used to store true (ajTrue) and false (ajFalse) values.
**
** ajFalse is defined as zero, and the data type is equivalent to "ajint".
**
** For definitions, macros AJTRUE and AJFALSE are also defined.
**
** On output, conversion code "%b" writes "Y" or "N"
** while conversion code "%B" writes "Yes" or "No".
**
** @attr typedef [ajint] Value
** @@
******************************************************************************/

typedef ajint AjBool;




/* @datatype AjStatus *********************************************************
**
** Status code returned with bit fields.
**
** Intended as a general return code for functions, but currently unused
** because AjBool is enough. Indicates OK, info,
** warning, error and fatal returns
**
** @attr typedef [ajint] Value
** @@
******************************************************************************/

typedef ajint AjStatus;




/* @datatype AjEnum ***********************************************************
**
** Undocumented
**
** @attr typedef [ajint] Value
** @@
******************************************************************************/

typedef ajint AjEnum;




/* @datatype AjMask ***********************************************************
**
** Undocumented
**
** @attr typedef [ajint] Value
** @@
******************************************************************************/

typedef ajint AjMask;




/* @datatype AjInt4 ***********************************************************
**
** 4 bytes integer
**
** @attr typedef [ajint] Value
** @@
******************************************************************************/

typedef ajint AjInt4;




/* @datatype AjIntArray *******************************************************
**
** Array of integers
**
** @attr typedef [ajint*] Value
** @@
******************************************************************************/

typedef ajint* AjIntArray;




/* @datatype AjFloatArray *****************************************************
**
** Array of floats
**
** @attr typedef [float*] Value
** @@
******************************************************************************/

typedef float* AjFloatArray;




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/





#endif /* !AJARCH_H */

ajarr.h/        1414437288  1010  513   100644  31261     `
/* @include ajarr *************************************************************
**
** AJAX ARRAY functions
**
** These functions control all aspects of AJAX array utilities
**
** @author Copyright (C) 1999 Alan Bleasby
** @version $Revision: 1.16 $
** @modified Mar 12 1999 ajb First version
** @modified May 10 2000 ajb added dynamically allocated numeric arrays
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJARR_H
#define AJARR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

#include <sys/types.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPChar **************************************************************
**
** Ajax character object.
**
** Holds a character array with additional data.
** The length is known and held internally.
**
** Saves on length calculation, and allows growth in reserved memory without
** changing the pointer in the calling routine.
**
** AjPChar is implemented as a pointer to a C data structure.
**
** @alias AjSChar
** @alias AjOChar
**
** @new    ajChararrNew Default constructor
** @new    ajChararrNewL Constructor with reserved size
** @delete ajChararrDel Default destructor
** @cast   ajChararrGet Retrieve a character from an array
** @modify ajChararrPut Load a character array element
** @cast   ajChararrChararr Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [char*] Array of characters
** @@
******************************************************************************/

typedef struct AjSChar
{
    ajuint Res;
    ajuint Len;
    char *Ptr;
} AjOChar;

#define AjPChar AjOChar*




/* @data AjPInt ***************************************************************
**
** Ajax integer object.
**
** Holds an integer array with additional data.
** The length is known and held internally.
**
** AjPInt is implemented as a pointer to a C data structure.
**
** @alias AjSInt
** @alias AjOInt
**
** @new    ajIntNew Default constructor
** @new    ajIntNewL Constructor with reserved size
** @delete ajIntDel Default destructor
** @cast   ajIntGet Retrieve an integer from an array
** @modify ajIntPut Load an integer array element
** @cast   ajIntInt Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [ajint*] Array of integers
** @@
******************************************************************************/

typedef struct AjSInt
{
    ajuint Res;
    ajuint Len;
    ajint *Ptr;
} AjOInt;

#define AjPInt AjOInt*




/* @data AjPInt2d *************************************************************
**
** Ajax 2d integer object.
**
** Holds an integer array with additional data.
** The length is known and held internally.
**
** AjPInt2d is implemented as a pointer to a C data structure.
**
** @alias AjSInt2d
** @alias AjOInt2d
**
** @new    ajInt2dNew Default constructor
** @new    ajInt2dNewL Constructor with reserved size
** @delete ajInt2dDel Default destructor
** @cast   ajInt2dGet Retrieve an integer from an array
** @modify ajInt2dPut Load an integer array element
** @cast   ajInt2dInt Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPInt*] Array of integer arrays
** @@
******************************************************************************/

typedef struct AjSInt2d
{
    ajuint Res;
    ajuint Len;
    AjPInt *Ptr;
} AjOInt2d;

#define AjPInt2d AjOInt2d*




/* @data AjPInt3d *************************************************************
**
** Ajax 3d integer object.
**
** Holds an integer array with additional data.
** The length is known and held internally.
**
** AjPInt3d is implemented as a pointer to a C data structure.
**
** @alias AjSInt3d
** @alias AjOInt3d
**
** @new    ajInt3dNew Default constructor
** @new    ajInt3dNewL Constructor with reserved size
** @delete ajInt3dDel Default destructor
** @cast   ajInt3dGet Retrieve an integer from an array
** @modify ajInt3dPut Load an integer array element
** @cast   ajInt3dInt Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPInt2d*] Array of 2d integer arrays
** @@
******************************************************************************/

typedef struct AjSInt3d
{
    ajuint Res;
    ajuint Len;
    AjPInt2d *Ptr;
} AjOInt3d;

#define AjPInt3d AjOInt3d*




/* @data AjPFloat *************************************************************
**
** Ajax float object.
**
** Holds a float array with additional data.
** The length is known and held internally.
**
** AjPFloat is implemented as a pointer to a C data structure.
**
** @alias AjSFloat
** @alias AjOFloat
**
** @new    ajFloatNew Default constructor
** @new    ajFloatNewL Constructor with reserved size
** @delete ajFloatDel Default destructor
** @cast   ajFloatGet Retrieve a float from an array
** @modify ajFloatPut Load a float array element
** @cast   ajFloatFloat Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [float*] Array of floats
** @@
******************************************************************************/

typedef struct AjSFloat
{
    ajuint Res;
    ajuint Len;
    float *Ptr;
} AjOFloat;

#define AjPFloat AjOFloat*




/* @data AjPFloat2d ***********************************************************
**
** Ajax 2d float object.
**
** Holds a 2d float array with additional data.
** The length is known and held internally.
**
** AjPFloat2d is implemented as a pointer to a C data structure.
**
** @alias AjSFloat2d
** @alias AjOFloat2d
**
** @new    ajFloat2dNew Default constructor
** @new    ajFloat2dNewL Constructor with reserved size
** @delete ajFloat2dDel Default destructor
** @cast   ajFloat2dGet Retrieve a float from an array
** @modify ajFloat2dPut Load a float array element
** @cast   ajFloat2dFloat Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPFloat*] Array of float arrays
** @@
******************************************************************************/

typedef struct AjSFloat2d
{
    ajuint Res;
    ajuint Len;
    AjPFloat *Ptr;
} AjOFloat2d;

#define AjPFloat2d AjOFloat2d*




/* @data AjPFloat3d ***********************************************************
**
** Ajax 3d float object.
**
** Holds a 3d float array with additional data.
** The length is known and held internally.
**
** AjPFloat3d is implemented as a pointer to a C data structure.
**
** @alias AjSFloat3d
** @alias AjOFloat3d
**
** @new    ajFloat3dNew Default constructor
** @new    ajFloat3dNewL Constructor with reserved size
** @delete ajFloat3dDel Default destructor
** @cast   ajFloat3dGet Retrieve a float from an array
** @modify ajFloat3dPut Load a float array element
** @cast   ajFloat3dFloat Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPFloat2d*] Array of 2d float arrays
** @@
******************************************************************************/

typedef struct AjSFloat3d
{
    ajuint Res;
    ajuint Len;
    AjPFloat2d  *Ptr;
} AjOFloat3d;

#define AjPFloat3d AjOFloat3d*




/* @data AjPDouble ************************************************************
**
** Ajax double object.
**
** Holds a double array with additional data.
** The length is known and held internally.
**
** AjPDouble is implemented as a pointer to a C data structure.
**
** @alias AjSDouble
** @alias AjODouble
**
** @new    ajDoubleNew Default constructor
** @new    ajDoubleNewL Constructor with reserved size
** @delete ajDoubleDel Default destructor
** @cast   ajDoubleGet Retrieve a double from an array
** @modify ajDoublePut Load a double array element
** @cast   ajDoubleDouble Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [double*] Array of doubles
** @@
******************************************************************************/

typedef struct AjSDouble
{
    ajuint Res;
    ajuint Len;
    double *Ptr;
} AjODouble;

#define AjPDouble AjODouble*




/* @data AjPDouble2d **********************************************************
**
** Ajax 2d double object.
**
** Holds a 2d double array with additional data.
** The length is known and held internally.
**
** AjPDouble2d is implemented as a pointer to a C data structure.
**
** @alias AjSDouble2d
** @alias AjODouble2d
**
** @new    ajDouble2dNew Default constructor
** @new    ajDouble2dNewL Constructor with reserved size
** @delete ajDouble2dDel Default destructor
** @cast   ajDouble2dGet Retrieve a double from an array
** @modify ajDouble2dPut Load a double array element
** @cast   ajDouble2dDouble Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPDouble*] Array of double arrays
** @@
******************************************************************************/

typedef struct AjSDouble2d
{
    ajuint Res;
    ajuint Len;
    AjPDouble *Ptr;
} AjODouble2d;

#define AjPDouble2d AjODouble2d*




/* @data AjPDouble3d **********************************************************
**
** Ajax 3d double object.
**
** Holds a 3d double array with additional data.
** The length is known and held internally.
**
** AjPDouble3d is implemented as a pointer to a C data structure.
**
** @alias AjSDouble3d
** @alias AjODouble3d
**
** @new    ajDouble3dNew Default constructor
** @new    ajDouble3dNewL Constructor with reserved size
** @delete ajDouble3dDel Default destructor
** @cast ajDouble3dGet Retrieve a double from an array
** @modify ajDouble3dPut Load a double array element
** @cast   ajDouble3dDouble Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPDouble2d*] Array of 2d double arrays
** @@
******************************************************************************/

typedef struct AjSDouble3d
{
    ajuint Res;
    ajuint Len;
    AjPDouble2d  *Ptr;
} AjODouble3d;

#define AjPDouble3d AjODouble3d*




/* @data AjPShort *************************************************************
**
** Ajax short object.
**
** Holds a short array with additional data.
** The length is known and held internally.
**
** AjPShort is implemented as a pointer to a C data structure.
**
** @alias AjSShort
** @alias AjOShort
**
** @new    ajShortNew Default constructor
** @new    ajShortNewL Constructor with reserved size
** @delete ajShortDel Default destructor
** @cast   ajShortGet Retrieve a short from an array
** @modify ajShortPut Load a short array element
** @cast   ajShortShort Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [short*] Array of shorts
** @@
******************************************************************************/

typedef struct AjSShort
{
    ajuint Res;
    ajuint Len;
    short *Ptr;
} AjOShort;

#define AjPShort AjOShort*




/* @data AjPShort2d ***********************************************************
**
** Ajax 2d short object.
**
** Holds a 2d short array with additional data.
** The length is known and held internally.
**
** AjPShort2d is implemented as a pointer to a C data structure.
**
** @alias AjSShort2d
** @alias AjOShort2d
**
** @new    ajShort2dNew Default constructor
** @new    ajShort2dNewL Constructor with reserved size
** @delete ajShort2dDel Default destructor
** @cast   ajShort2dGet Retrieve a short from an array
** @modify ajShort2dPut Load a short array element
** @cast   ajShort2dShort Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPShort*] Array of short arrays
** @@
******************************************************************************/

typedef struct AjSShort2d
{
    ajuint Res;
    ajuint Len;
    AjPShort *Ptr;
} AjOShort2d;

#define AjPShort2d AjOShort2d*




/* @data AjPShort3d ***********************************************************
**
** Ajax 3d short object.
**
** Holds a 3d short array with additional data.
** The length is known and held internally.
**
** AjPShort3d is implemented as a pointer to a C data structure.
**
** @alias AjSShort3d
** @alias AjOShort3d
**
** @new    ajShort3dNew Default constructor
** @new    ajShort3dNewL Constructor with reserved size
** @delete ajShort3dDel Default destructor
** @cast   ajShort3dGet Retrieve a short from an array
** @modify ajShort3dPut Load a short array element
** @cast   ajShort3dShort Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPShort2d*] Array of 2d short arrays
** @@
******************************************************************************/

typedef struct AjSShort3d
{
    ajuint Res;
    ajuint Len;
    AjPShort2d  *Ptr;
} AjOShort3d;

#define AjPShort3d AjOShort3d*




/* @data AjPLong **************************************************************
**
** Ajax ajlong object.
**
** Holds a ajlong array with additional data.
** The length is known and held internally.
**
** AjPLong is implemented as a pointer to a C data structure.
**
** @alias AjSLong
** @alias AjOLong
**
** @new    ajLongNew Default constructor
** @new    ajLongNewL Constructor with reserved size
** @delete ajLongDel Default destructor
** @cast   ajLongGet Retrieve a ajlong from an array
** @modify ajLongPut Load a ajlong array element
** @cast   ajLongLong Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [ajlong*] Array of longs
** @@
******************************************************************************/

typedef struct AjSLong
{
    ajuint Res;
    ajuint Len;
    ajlong *Ptr;
} AjOLong;

#define AjPLong AjOLong*




/* @data AjPLong2d ************************************************************
**
** Ajax 2d ajlong object.
**
** Holds a 2d ajlong array with additional data.
** The length is known and held internally.
**
** AjPLong2d is implemented as a pointer to a C data structure.
**
** @alias AjSLong2d
** @alias AjOLong2d
**
** @new    ajLong2dNew Default constructor
** @new    ajLong2dNewL Constructor with reserved size
** @delete ajLong2dDel Default destructor
** @cast   ajLong2dGet Retrieve a ajlong from an array
** @modify ajLong2dPut Load a ajlong array element
** @cast   ajLong2dLong Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPLong*] Array of long arrays
** @@
******************************************************************************/

typedef struct AjSLong2d
{
    ajuint Res;
    ajuint Len;
    AjPLong *Ptr;
} AjOLong2d;

#define AjPLong2d AjOLong2d*




/* @data AjPLong3d ************************************************************
**
** Ajax 3d ajlong object.
**
** Holds a 3d ajlong array with additional data.
** The length is known and held internally.
**
** AjPLong3d is implemented as a pointer to a C data structure.
**
** @alias AjSLong3d
** @alias AjOLong3d
**
** @new    ajLong3dNew Default constructor
** @new    ajLong3dNewL Constructor with reserved size
** @delete ajLong3dDel Default destructor
** @cast   ajLong3dGet Retrieve a ajlong from an array
** @modify ajLong3dPut Load a ajlong array element
** @cast   ajLong3dLong Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPLong2d*] Array of 2d long arrays
** @@
******************************************************************************/

typedef struct AjSLong3d
{
    ajuint Res;
    ajuint Len;
    AjPLong2d  *Ptr;
} AjOLong3d;

#define AjPLong3d AjOLong3d*




/* @data AjPUint **************************************************************
**
** Ajax unsigned integer object.
**
** Holds an unsigned integer array with additional data.
** The length is known and held internally.
**
** AjPUint is implemented as a pointer to a C data structure.
**
** @alias AjSUint
** @alias AjOUint
**
** @new    ajUintNew Default constructor
** @new    ajUintNewL Constructor with reserved size
** @delete ajUintDel Default destructor
** @cast   ajUintGet Retrieve an integer from an array
** @modify ajUintPut Load an integer array element
** @cast   ajUintUint Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [ajuint*] Array of integers
** @@
******************************************************************************/

typedef struct AjSUint
{
    ajuint Res;
    ajuint Len;
    ajuint *Ptr;
} AjOUint;

#define AjPUint AjOUint*




/* @data AjPUint2d ************************************************************
**
** Ajax 2d unsigned integer object.
**
** Holds an unsigned integer array with additional data.
** The length is known and held internally.
**
** AjPUint2d is implemented as a pointer to a C data structure.
**
** @alias AjSUint2d
** @alias AjOUint2d
**
** @new    ajUint2dNew Default constructor
** @new    ajUint2dNewL Constructor with reserved size
** @delete ajUint2dDel Default destructor
** @cast   ajUint2dGet Retrieve an integer from an array
** @modify ajUint2dPut Load an integer array element
** @cast   ajIUint2dUint Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPUint*] Array of integer arrays
** @@
******************************************************************************/

typedef struct AjSUint2d
{
    ajuint Res;
    ajuint Len;
    AjPUint *Ptr;
} AjOUint2d;

#define AjPUint2d AjOUint2d*




/* @data AjPUint3d ************************************************************
**
** Ajax 3d unsigned integer object.
**
** Holds an unsigned integer array with additional data.
** The length is known and held internally.
**
** AjPUint3d is implemented as a pointer to a C data structure.
**
** @alias AjSUint3d
** @alias AjOUint3d
**
** @new    ajUint3dNew Default constructor
** @new    ajUint3dNewL Constructor with reserved size
** @delete ajUint3dDel Default destructor
** @cast   ajUint3dGet Retrieve an integer from an array
** @modify ajUint3dPut Load an integer array element
** @cast   ajUint3dUint Retrieve internal pointer
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [AjPUint2d*] Array of 2d integer arrays
** @@
******************************************************************************/

typedef struct AjSUint3d
{
    ajuint Res;
    ajuint Len;
    AjPUint2d *Ptr;
} AjOUint3d;

#define AjPUint3d AjOUint3d*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void        ajArrExit(void);

void        ajDoubleDel(AjPDouble *thys);
double*     ajDoubleDouble(const AjPDouble thys);
double      ajDoubleGet(const AjPDouble thys, ajuint elem);
ajuint      ajDoubleLen(const AjPDouble thys);
AjPDouble   ajDoubleNew(void);
AjPDouble   ajDoubleNewRes(ajuint size);
AjBool      ajDoublePut(AjPDouble *thys, ajuint elem, double v);

void        ajDouble2dDel(AjPDouble2d *thys);
double      ajDouble2dGet(const AjPDouble2d thys, ajuint elem1, ajuint elem2);
double**    ajDouble2dDouble(const AjPDouble2d thys);
void        ajDouble2dLen(const AjPDouble2d thys, ajuint *len1, ajuint *len2);
AjPDouble2d ajDouble2dNew(void);
AjPDouble2d ajDouble2dNewRes(ajuint size);
AjBool      ajDouble2dPut(AjPDouble2d *thys,
                          ajuint elem1, ajuint elem2, double v);

void        ajDouble3dDel(AjPDouble3d *thys);
double      ajDouble3dGet(const AjPDouble3d thys,
                          ajuint elem1, ajuint elem2, ajuint elem3);
double***   ajDouble3dDouble(const AjPDouble3d thys);
void        ajDouble3dLen(const AjPDouble3d thys,
                          ajuint* len1, ajuint* len2, ajuint* len3);
AjPDouble3d ajDouble3dNew(void);
AjPDouble3d ajDouble3dNewRes(ajuint size);
AjBool      ajDouble3dPut(AjPDouble3d *thys,
                          ajuint elem1, ajuint elem2, ajuint elem3,
                          double v);

void        ajFloatDel(AjPFloat *thys);
float*      ajFloatFloat(const AjPFloat thys);
float       ajFloatGet(const AjPFloat thys, ajuint elem);
ajuint      ajFloatLen(const AjPFloat thys);
AjPFloat    ajFloatNew(void);
AjPFloat    ajFloatNewRes(ajuint size);
AjBool      ajFloatPut(AjPFloat *thys, ajuint elem, float v);

void        ajFloat2dDel(AjPFloat2d *thys);
float       ajFloat2dGet(const AjPFloat2d thys, ajuint elem1, ajuint elem2);
float**     ajFloat2dFloat(const AjPFloat2d thys);
void        ajFloat2dLen(const AjPFloat2d thys, ajuint *len1, ajuint *len2);
AjPFloat2d  ajFloat2dNew(void);
AjPFloat2d  ajFloat2dNewRes(ajuint size);
AjBool      ajFloat2dPut(AjPFloat2d *thys,
                         ajuint elem1, ajuint elem2, float v);

void        ajFloat3dDel(AjPFloat3d *thys);
float       ajFloat3dGet(const AjPFloat3d thys,
                         ajuint elem1, ajuint elem2, ajuint elem3);
float***    ajFloat3dFloat(const AjPFloat3d thys);
void        ajFloat3dLen(const AjPFloat3d thys,
                         ajuint* len1, ajuint* len2, ajuint* len3);
AjPFloat3d  ajFloat3dNew(void);
AjPFloat3d  ajFloat3dNewRes(ajuint size);
AjBool      ajFloat3dPut(AjPFloat3d *thys,
                         ajuint elem1, ajuint elem2, ajuint elem3,
                         float v);

AjPChar     ajChararrNew(void);
AjPChar     ajChararrNewRes(ajuint size);
void        ajChararrDel(AjPChar *thys);
char        ajChararrGet(const AjPChar thys, ajuint elem);
AjBool      ajChararrPut(AjPChar *thys, ajuint elem, char v);
char*       ajChararrChararr(const AjPChar thys);
ajuint      ajChararrLen(const AjPChar thys);


void        ajIntDel(AjPInt *thys);
void        ajIntDec(AjPInt *thys, ajuint elem);
ajint       ajIntGet(const AjPInt thys, ajuint elem);
void        ajIntInc(AjPInt *thys, ajuint elem);
ajint*      ajIntInt(const AjPInt thys);
ajuint      ajIntLen(const AjPInt thys);
AjPInt      ajIntNew(void);
AjPInt      ajIntNewRes(ajuint size);
AjBool      ajIntPut(AjPInt *thys, ajuint elem, ajint v);

void        ajInt2dDel(AjPInt2d *thys);
ajint       ajInt2dGet(const AjPInt2d thys, ajuint elem1, ajuint elem2);
ajint**     ajInt2dInt(const AjPInt2d thys);
void        ajInt2dLen(const AjPInt2d thys, ajuint *len1, ajuint *len2);
AjPInt2d    ajInt2dNew(void);
AjPInt2d    ajInt2dNewRes(ajuint size);
AjPInt2d    ajInt2dNewResRes2(ajuint size, ajuint size2);
AjBool      ajInt2dPut(AjPInt2d *thys, ajuint elem1, ajuint elem2, ajint v);

void        ajInt3dDel(AjPInt3d *thys);
ajint       ajInt3dGet(const AjPInt3d thys, ajuint elem1, ajuint elem2,
                       ajuint elem3);
ajint***    ajInt3dInt(const AjPInt3d thys);
void        ajInt3dLen(const AjPInt3d thys,
                       ajuint* len1, ajuint* len2, ajuint* len3);
AjPInt3d    ajInt3dNew(void);
AjPInt3d    ajInt3dNewRes(ajuint size);
AjBool      ajInt3dPut(AjPInt3d *thys,
                       ajuint elem1, ajuint elem2, ajuint elem3, ajint v);

void        ajLongDel(AjPLong *thys);
ajlong      ajLongGet(const AjPLong thys, ajuint elem);
ajuint      ajLongLen(const AjPLong thys);
ajlong*     ajLongLong(const AjPLong thys);
AjPLong     ajLongNew(void);
AjPLong     ajLongNewRes(ajuint size);
AjBool      ajLongPut(AjPLong *thys, ajuint elem, ajlong v);

void        ajLong2dDel(AjPLong2d *thys);
ajlong      ajLong2dGet(const AjPLong2d thys, ajuint elem1, ajuint elem2);
ajlong**    ajLong2dLong(const AjPLong2d thys);
void        ajLong2dLen(const AjPLong2d thys, ajuint *len1, ajuint *len2);
AjPLong2d   ajLong2dNew(void);
AjPLong2d   ajLong2dNewRes(ajuint size);
AjBool      ajLong2dPut(AjPLong2d *thys, ajuint elem1, ajuint elem2, ajlong v);

void        ajLong3dDel(AjPLong3d *thys);
ajlong      ajLong3dGet(const AjPLong3d thys,
                        ajuint elem1, ajuint elem2, ajuint elem3);
void        ajLong3dLen(const AjPLong3d thys,
                        ajuint* len1, ajuint* len2, ajuint* len3);
ajlong***   ajLong3dLong(const AjPLong3d thys);
AjPLong3d   ajLong3dNew(void);
AjPLong3d   ajLong3dNewRes(ajuint size);
AjBool      ajLong3dPut(AjPLong3d *thys,
                        ajuint elem1, ajuint elem2, ajuint elem3,
                        ajlong v);

void        ajShortDel(AjPShort *thys);
short       ajShortGet(const AjPShort thys, ajuint elem);
ajuint      ajShortLen(const AjPShort thys);
short*      ajShortShort(const AjPShort thys);
AjPShort    ajShortNew(void);
AjPShort    ajShortNewRes(ajuint size);
AjBool      ajShortPut(AjPShort *thys, ajuint elem, short v);

void        ajShort2dDel(AjPShort2d *thys);
short       ajShort2dGet(const AjPShort2d thys, ajuint elem1, ajuint elem2);
short**     ajShort2dShort(const AjPShort2d thys);
void        ajShort2dLen(const AjPShort2d thys, ajuint *len1, ajuint *len2);
AjPShort2d  ajShort2dNew(void);
AjPShort2d  ajShort2dNewRes(ajuint size);
AjBool      ajShort2dPut(AjPShort2d *thys,
                         ajuint elem1, ajuint elem2, short v);

void        ajShort3dDel(AjPShort3d *thys);
short       ajShort3dGet(const AjPShort3d thys,
                         ajuint elem1, ajuint elem2, ajuint elem3);
void        ajShort3dLen(const AjPShort3d thys,
                         ajuint* len1, ajuint* len2, ajuint* len3);
short***    ajShort3dShort(const AjPShort3d thys);
AjPShort3d  ajShort3dNew(void);
AjPShort3d  ajShort3dNewRes(ajuint size);
AjBool      ajShort3dPut(AjPShort3d *thys,
                         ajuint elem1, ajuint elem2, ajuint elem3,
                         short v);


void        ajUintDel(AjPUint *thys);
void        ajUintDec(AjPUint *thys, ajuint elem);
ajuint      ajUintGet(const AjPUint thys, ajuint elem);
void        ajUintInc(AjPUint *thys, ajuint elem);
ajuint*     ajUintUint(const AjPUint thys);
ajuint      ajUintLen(const AjPUint thys);
AjPUint     ajUintNew(void);
AjPUint     ajUintNewRes(ajuint size);
AjBool      ajUintPut(AjPUint *thys, ajuint elem, ajuint v);

void        ajUint2dDel(AjPUint2d *thys);
ajuint      ajUint2dGet(const AjPUint2d thys, ajuint elem1, ajuint elem2);
ajuint**    ajUint2dUint(const AjPUint2d thys);
void        ajUint2dLen(const AjPUint2d thys, ajuint *len1, ajuint *len2);
AjPUint2d   ajUint2dNew(void);
AjPUint2d   ajUint2dNewRes(ajuint size);
AjPUint2d   ajUint2dNewResRes2(ajuint size, ajuint size2);
AjBool      ajUint2dPut(AjPUint2d *thys, ajuint elem1, ajuint elem2, ajuint v);

void        ajUint3dDel(AjPUint3d *thys);
ajuint      ajUint3dGet(const AjPUint3d thys, ajuint elem1, ajuint elem2,
                        ajuint elem3);
ajuint***   ajUint3dUint(const AjPUint3d thys);
void        ajUint3dLen(const AjPUint3d thys,
                        ajuint* len1, ajuint* len2, ajuint* len3);
AjPUint3d   ajUint3dNew(void);
AjPUint3d   ajUint3dNewRes(ajuint size);
AjBool      ajUint3dPut(AjPUint3d *thys,
                        ajuint elem1, ajuint elem2, ajuint elem3, ajuint v);

AjBool      ajFloatParse(const AjPStr str, AjPFloat *array);
void        ajFloatStr(const AjPFloat array, ajint precision, AjPStr* str);
void        ajFloatTrace(const AjPFloat array, ajint precision,
                         const char* text);

ajuint      ajArrCommaList(const  AjPStr s, AjPStr **a);
double*     ajArrDoubleLine(const AjPStr line, const char *delim,
                            ajuint startcol, ajuint endcol);
ajint*      ajArrIntLine(const AjPStr line, const char *delim,
                         ajuint startcol, ajuint endcol);
float*      ajArrFloatLine(const AjPStr line, const char *delim,
                           ajuint startcol, ajuint endcol);

/*
** End of prototype definitions
*/

#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjPChar     ajChararrNewL(ajuint size);
__deprecated AjPDouble   ajDoubleNewL(ajuint size);
__deprecated AjPDouble2d ajDouble2dNewL(ajuint size);
__deprecated AjPDouble3d ajDouble3dNewL(ajuint size);
__deprecated AjPFloat    ajFloatNewL(ajuint size);
__deprecated AjPFloat2d  ajFloat2dNewL(ajuint size);
__deprecated AjPFloat3d  ajFloat3dNewL(ajuint size);
__deprecated AjPInt      ajIntNewL(ajuint size);
__deprecated AjPInt2d    ajInt2dNewL(ajuint size);
__deprecated AjPInt2d    ajInt2dNewLL(ajuint size, ajuint size2);
__deprecated AjPInt3d    ajInt3dNewL(ajuint size);
__deprecated AjPLong     ajLongNewL(ajuint size);
__deprecated AjPLong2d   ajLong2dNewL(ajuint size);
__deprecated AjPLong3d   ajLong3dNewL(ajuint size);
__deprecated AjPShort    ajShortNewL(ajuint size);
__deprecated AjPShort2d  ajShort2dNewL(ajuint size);
__deprecated AjPShort3d  ajShort3dNewL(ajuint size);
__deprecated AjPUint     ajUintNewL(ajuint size);
__deprecated AjPUint2d   ajUint2dNewL(ajuint size);
__deprecated AjPUint2d   ajUint2dNewLL(ajuint size, ajuint size2);
__deprecated AjPUint3d   ajUint3dNewL(ajuint size);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJARR_H */

ajassem.h/      1414437288  1010  513   100644  3777      `
/* @include ajassem ***********************************************************
**
** AJAX assembly functions
**
** These functions control all aspects of AJAX assembly
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.12 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/03/12 17:42:29 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJASSEM_H
#define AJASSEM_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajassemdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPAssem         ajAssemNew(void);
void             ajAssemDel(AjPAssem *Passem);
void             ajAssemClear(AjPAssem assem);
void             ajAssemReset(AjPAssem assem);
const AjPStr     ajAssemGetId(const AjPAssem assem);
const char*      ajAssemGetQryC(const AjPAssem assem);
const AjPStr     ajAssemGetQryS(const AjPAssem assem);
void             ajAssemExit(void);


const char*      ajAssemreadgroupGetPlatformname(const AjPAssemReadgroup rg);
AjEAssemPlatform ajAssemplatformGetType(const char* platfname);

const char*       ajAssemGetSortorderC(const AjPAssem assem);
AjEAssemSortOrder ajAssemsortorderGetType(const char* name);

void             ajAssemSetContigattributes(AjPAssem assem,
                                            const AjPTable tags);
void             ajAssemSetReadgroups(AjPAssem assem,
                                      const AjPTable tags);

void    ajAssemreadDel(AjPAssemRead *Passemread);
ajint   ajAssemreadGetAlignmentend(const AjPAssemRead r);
ajint   ajAssemreadGetAlignmentstart(const AjPAssemRead r);
AjBool  ajAssemreadGetFlagFirstofpair(const AjPAssemRead r);
AjBool  ajAssemreadGetFlagNegativestrand(const AjPAssemRead r);
AjBool  ajAssemreadGetFlagPaired(const AjPAssemRead r);
AjBool  ajAssemreadGetFlagUnmapped(const AjPAssemRead r);
AjPList ajAssemreadSetAlignblocks(AjPAssemRead read);


/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJASSEM_H */

ajassemdata.h/  1414437288  1010  513   100644  17614     `
/* @include ajassemdata *******************************************************
**
** AJAX assembly datatypes
**
** These functions control all aspects of AJAX assembly
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.29 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/07/02 16:44:55 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJASSEMDATA_H
#define AJASSEMDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajtable.h"
#include "ajtime.h"
#include "ajtextdata.h"
#include "ajseqbam.h"
#include "ajbamindex.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum AjEAssemSortOrder ****************************************************
**
** Assembly reads sort order Type enumeration.
**
** @value ajEAssemSortOrderUnknown Unknown - default in SAM/BAM formats
** @value ajEAssemSortOrderUnsorted Unsorted - unsorted
** @value ajEAssemSortOrderQueryname Queryname - sorted by query/read names
** @value ajEAssemSortOrderCoordinate Coordinate - major sort key is the
**        the reference/contig name, order defined by the order of @SQ lines
**        in header in SAM/BAM assemblies.
** @@
******************************************************************************/

typedef enum AjOAssemSortOrder
{
    ajEAssemSortOrderUnknown,
    ajEAssemSortOrderUnsorted,
    ajEAssemSortOrderQueryname,
    ajEAssemSortOrderCoordinate
} AjEAssemSortOrder;




/* @enum AjEAssemPlatform *****************************************************
**
** Platforms/technologies to produce reads, as enumerated in SAM specv1.4.
**
** @value ajEAssemPlatformUnknown Unknown
** @value ajEAssemPlatformCapillary Capillary
** @value ajEAssemPlatformLS454 LS 454
** @value ajEAssemPlatformIllumina Illumina
** @value ajEAssemPlatformSolid Solid
** @value ajEAssemPlatformHelicos Helicos
** @value ajEAssemPlatformIontorrent IonTorrent
** @value ajEAssemPlatformPacbio Pacific Biosciences
** @@
******************************************************************************/

typedef enum AjOAssemPlatform
{
    ajEAssemPlatformUnknown,
    ajEAssemPlatformCapillary,
    ajEAssemPlatformLS454,
    ajEAssemPlatformIllumina,
    ajEAssemPlatformSolid,
    ajEAssemPlatformHelicos,
    ajEAssemPlatformIontorrent,
    ajEAssemPlatformPacbio
} AjEAssemPlatform;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPAssemRead *********************************************************
**
** Store individual alignments of reads in assemblies.
**
** In some assemblies some reads can align to more than one contig
** or reference sequence, so current name of the data type is not perfect.
**
** For storing read information as part of an assembly object.
** Current version of this data type is MIRA/SAM oriented,
** it needs to be improved to be a proper common data type,
** some of the current fields are used by MIRA MAF format only
** while few others are used by the SAM format only.
**
** @alias AjSAssemRead
** @alias AjOAssemRead
**
**
** In it's simplest form, a DNA template is sequenced only once.
** In paired-end sequencing, a DNA template is sequenced once in forward
** and once in reverse direction (Sanger, 454, Solexa).
** In Sanger sequencing, several forward and/or reverse reads
** can be sequenced from a DNA template.
** In PacBio sequencing, a DNA template can be sequenced
** in several "strobes", leading to multiple reads on a DNA template.
** (ref:MAF format specification on mira web site)
**
**
** @attr Name       [AjPStr]  Name
** @attr Seq        [AjPStr]  Sequence
** @attr SeqQ       [AjPStr]  Sequence quality string
** @attr Template   [AjPStr]  Name of the DNA template a sequence comes from
** @attr File       [AjPStr]  Name of the sequencing file
**                            which contains raw data for this read
** @attr Technology [AjPStr]  Sequencing technology
** @attr Cigar      [AjPStr]  CIGAR string
** @attr Tags       [AjPList] List of AjPAssemTag objects
** @attr AlignmentBlocks [AjPList] Alignment blocks
** @attr Rnext      [ajlong]  Reference number of the mate/next fragment
** @attr Reference  [ajlong]  Reference sequence
** @attr Pnext      [ajlong]  Position of the mate/next fragment
** @attr Tlen       [ajint]   Observed template length
** @attr Flag       [ajint]   Flag
** @attr MapQ       [ajint]   Map quality
** @attr TemplateSizeMin [ajint] Minimum template size
** @attr TemplateSizeMax [ajint] Maximum template size
** @attr ClipLeft     [ajint] Clip left
** @attr ClipRight    [ajint] Clip right
** @attr VectorLeft   [ajint] Clip left due to sequencing vector
** @attr VectorRight  [ajint] Clip right due to sequencing vector
** @attr QualLeft     [ajint] Clip left due to quality
** @attr QualRight    [ajint] Clip right due to quality
** @attr x1      [ajint] interval of the contig (1-based as in SAM and MAF)
** @attr y1      [ajint] end of contig interval
** @attr x2      [ajint] interval of the read
** @attr y2      [ajint] end of read interval
** @attr Reversed  [AjBool] true: has been reverse-complemented
** @attr Direction [char] Direction of the read with respect to the template
** @attr Padding [char[7]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSAssemRead
{
    AjPStr  Name;
    AjPStr  Seq;
    AjPStr  SeqQ;
    AjPStr  Template;
    AjPStr  File;
    AjPStr  Technology;
    AjPStr  Cigar;
    AjPList Tags;
    AjPList AlignmentBlocks;
    ajlong  Rnext;
    ajlong  Reference;
    ajlong  Pnext;
    ajint  Tlen;
    ajint  Flag;
    ajint  MapQ;
    ajint  TemplateSizeMin;
    ajint  TemplateSizeMax;
    ajint  ClipLeft;
    ajint  ClipRight;
    ajint  VectorLeft;
    ajint  VectorRight;
    ajint  QualLeft;
    ajint  QualRight;
    ajint  x1;
    ajint  y1;
    ajint  x2;
    ajint  y2;
    AjBool Reversed;
    char   Direction;
    char   Padding[7];
} AjOAssemRead;

#define AjPAssemRead AjOAssemRead*




/* @data AjPAssemContig *******************************************************
**
** Ajax AssemContig object to store contigs in assemblies.
**
** In mapping assemblies consensus sequence refers to the reference sequence.
**
** @attr Name       [AjPStr]  Name
** @attr Consensus  [AjPStr]  Consensus/reference sequence
** @attr ConsensusQ [AjPStr]  Quality string for the consensus sequence
** @attr Tags       [AjPList] Tags for the consensus sequence
** @attr Length     [ajint]   Length of the consensus sequence
** @attr Nreads     [ajint]   Number of reads
** @attr AssemblyID [AjPStr]  Assembly ID
** @attr MD5        [AjPStr]  MD5 checksum of the consensus sequence
**                            in the uppercase, with gaps and spaces removed
** @attr Species    [AjPStr]  Species
** @attr URI        [AjPStr]  URI of the consensus sequences
**
** @@
******************************************************************************/

typedef struct AjSContig
{
    AjPStr  Name;
    AjPStr  Consensus;
    AjPStr  ConsensusQ;
    AjPList Tags;
    ajint   Length;
    ajint   Nreads;
    AjPStr  AssemblyID;
    AjPStr  MD5;
    AjPStr  Species;
    AjPStr  URI;
} AjOContig;

#define AjPAssemContig AjOContig*




/* @data AjPAssemin ***********************************************************
**
** Ajax Assembly Input object.
**
** Holds the input specification and information needed to read
** the assembly and possible further entries
**
** @alias AjSAssemin
** @alias AjOAssemin
**
** @attr Input    [AjPTextin] General text input object
** @attr BamIdx   [AjPBamIndex] BAM index
** @attr BamInput [AjBool] BAM file input
** @attr cbegin   [ajint]     Contig start position
** @attr cend     [ajint]     Contig end position
** @attr Loading  [AjBool] True if data is now loading
** @@
******************************************************************************/

typedef struct AjSAssemin
{
    AjPTextin Input;
    AjPBamIndex BamIdx;
    AjBool BamInput;
    ajint cbegin;
    ajint cend;
    AjBool Loading;
} AjOAssemin;

#define AjPAssemin AjOAssemin*




/* @data AjPAssem *************************************************************
**
** Ajax Assembly object.
**
** Holds the assembly itself, plus associated information.
**
** @alias AjSAssem
** @alias AjOAssem
**
** @attr Id           [AjPStr]   Id of term
** @attr Db           [AjPStr]   Database name from input
** @attr Setdb        [AjPStr]   Database name from command line
** @attr Full         [AjPStr]   Full name
** @attr Qry          [AjPStr]   Query for re-reading
** @attr Formatstr    [AjPStr]   Input format name
** @attr Filename     [AjPStr]   Original filename
** @attr Textptr      [AjPStr]   Full text
** @attr BamHeader    [AjPSeqBamHeader] BAM header
** @attr Contigs      [AjPTable] Contigs table, storing contigs by name
** @attr ContigsIgnored [AjPTable]  Contigs named as '*' because of
** 				    missing header '@SQ' entries
** @attr ContigsOrder [AjPList] Order of contigs in the assembly
** @attr ContigArray  [AjPAssemContig*] Contigs array for fast access
** @attr Reads        [AjPList]  List of reads in the assembly
** @attr Readgroups   [AjPTable] Table of read-groups in the assembly
** @attr rec          [AjPAssemRead] Current/last read/alignment record read
** @attr Fpos         [ajlong]   File position
** @attr Format       [AjEnum]   Input format enum
** @attr Count        [ajuint]   Number of lines read (contigs in case of BAM)
** @attr Hasdata      [AjBool]  True when data has been loaded
** @attr SO           [AjEAssemSortOrder] Reads sort order in the assembly
**
** @@
******************************************************************************/

typedef struct AjSAssem
{
    AjPStr  Id;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr  Textptr;
    AjPSeqBamHeader BamHeader;
    AjPTable Contigs;
    AjPTable ContigsIgnored;
    AjPList ContigsOrder;
    AjPAssemContig* ContigArray;
    AjPList Reads;
    AjPTable Readgroups;
    AjPAssemRead rec;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint  Count;
    AjBool Hasdata;
    AjEAssemSortOrder SO;
} AjOAssem;

#define AjPAssem AjOAssem*




/* @data AjPAssemload *********************************************************
**
** Ajax assembly loader object.
**
** Inherits an AjPAssem but allows more assembly data to be read from the
** same input by also inheriting the AjPVarin input object.
**
** @alias AjSAssemload
** @alias AjOAssemload
**
** @attr Assem [AjPAssem] Current variation
** @attr Assemin [AjPAssemin] Assembly input for reading next
** @attr Count [ajuint] Count of terms so far
** @attr Loading [AjBool] True if data is now loading
** @attr Returned [AjBool] if true: Assembly object has been returned to a new
**                         owner and is not to be deleted by the destructor
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSAssemload
{
    AjPAssem Assem;
    AjPAssemin Assemin;
    ajuint Count;
    AjBool Loading;
    AjBool Returned;
    ajuint Padding;
} AjOAssemload;

#define AjPAssemload AjOAssemload*




/* @data AjPAssemAccess *******************************************************
**
** Ajax assembly access database reading object.
**
** Holds information needed to read an assembly entry from a database.
** Access methods are defined for each known database type.
**
** Assembly entries are read from the database using the defined
** database access function, which is usually a static function
** within ajassemdb.c
**
** This should be a static data object but is needed for the definition
** of AjPAssemin.
**
** @alias AjSAssemAccess
** @alias AjOAssemAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSAssemAccess
{
    const char *Name;
    AjBool (*Access) (AjPAssemin assemin);
    AjBool (*AccessFree) (void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOAssemAccess;

#define AjPAssemAccess AjOAssemAccess*




/* @data AjPAssemTag **********************************************************
**
** Ajax AssemTag object to store MIRA tags for the read sequences as well as
** the contig consensus sequences.
**
** SAM format also allows a set of predefined tags
** as well as it reserves lowercase tags for end users.
**
** @attr Name    [AjPStr] Name
** @attr Comment [AjPStr] Tag comment in case of MAF,
**			  or tag value in case of SAM
** @attr x1      [ajuint] X value
** @attr y1      [ajuint] Y value
** @attr type    [char]   Value type: AcCsSiIfZHB
** @attr Padding [char[7]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSAssemTag
{
    AjPStr  Name;
    AjPStr  Comment;
    ajuint  x1;
    ajuint  y1;
    char    type;
    char    Padding[7];
} AjOAssemTag;

#define AjPAssemTag AjOAssemTag*




/* @data AjPAssemReadalignmentblock *******************************************
**
** read alignment block
**
** @attr readStart      [int] Read start
** @attr referenceStart [int] Reference start
** @attr length         [int] alignment length
** @@
******************************************************************************/

typedef struct AjSAssemReadalignmentblock
{
    int readStart;
    int referenceStart;
    int length;
} AjOAssemReadalignmentblock;

#define AjPAssemReadalignmentblock AjOAssemReadalignmentblock*




/* @data AjPAssemReadgroup ****************************************************
**
** read-group object to store information about read groups as described
** in SAM spec.
**
** @attr ID        [AjPStr] Read group identifier
** @attr CN        [AjPStr] Name of the sequencing center producing the read
** @attr Desc      [AjPStr] Description
** @attr Date      [AjPStr] Date the run was produced
** @attr FlowOrder [AjPStr] The array of nucleotide bases that correspond to
**                          the nucleotides used for each flow of each record
** @attr KeySeq    [AjPStr] The array of nucleotide bases that correspond to
**                          the key sequence of each read
** @attr Library   [AjPStr] Library
** @attr Programs  [AjPStr] Programs used for processing the read group
** @attr Unit      [AjPStr] Platform unit (e.g. flowcell-barcode for Illumina)
** @attr Sample    [AjPStr] Sample name, or pool name when a pool was sequenced
** @attr Isize     [ajint]  Predicted median insert size
**
**
** @attr Platform [AjEAssemPlatform] Instrument platform
** @@
******************************************************************************/

typedef struct AjSAssemReadgroup
{
    AjPStr  ID;
    AjPStr  CN;
    AjPStr  Desc;
    AjPStr  Date;
    AjPStr  FlowOrder;
    AjPStr  KeySeq;
    AjPStr  Library;
    AjPStr  Programs;
    AjPStr  Unit;
    AjPStr  Sample;
    ajint   Isize;
    AjEAssemPlatform Platform;
} AjOAssemReadgroup;

#define AjPAssemReadgroup AjOAssemReadgroup*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJASSEMDATA_H */
ajassemdb.h/    1414437296  1010  513   100644  2540      `
/* @include ajassemdb *********************************************************
**
** AJAX ASSEMDB (Assemby database) functions
**
** These functions control all aspects of AJAX assembly database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.5 $
** @modified Oct 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJASSEMDB_H
#define AJASSEMDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS


/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void           ajAssemdbExit(void);
void           ajAssemdbInit(void);
void           ajAssemdbPrintAccess(AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJASSEMDB_H */
ajassemread.h/  1414437288  1010  513   100644  3848      `
/* @include ajassemread *******************************************************
**
** AJAX assembly reading functions
**
** These functions control all aspects of AJAX assembly reading
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.10 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/07/02 16:44:55 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJASSEMREAD_H
#define AJASSEMREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajtable.h"
#include "ajfile.h"
#include "ajassemdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

void             ajAssemloadClear(AjPAssemload thys);
void             ajAssemloadDel(AjPAssemload* pthis);
AjPAssemload     ajAssemloadNew(void);


void             ajAsseminClear(AjPAssemin thys);
void             ajAsseminDel(AjPAssemin* pthis);
AjPAssemin       ajAsseminNew(void);
void             ajAsseminQryC(AjPAssemin thys, const char* txt);
void             ajAsseminQryS(AjPAssemin thys, const AjPStr str);
void             ajAsseminTrace(const AjPAssemin thys);

void             ajAsseminprintBook(AjPFile outf);
void             ajAsseminprintHtml(AjPFile outf);
void             ajAsseminprintText(AjPFile outf, AjBool full);
void             ajAsseminprintWiki(AjPFile outf);

AjBool           ajAssemloadMore(AjPAssemload thys, AjPAssem *Pvar);
AjBool           ajAssemloadNext(AjPAssemload thys, AjPAssem *Pvar);

AjBool           ajAsseminLoad(AjPAssemin assemin, AjPAssem thys);

AjBool           ajAsseminformatTerm(const AjPStr format);
AjBool           ajAsseminformatTest(const AjPStr format);
void             ajAsseminExit(void);
const char*      ajAsseminTypeGetFields(void);
const char*      ajAsseminTypeGetQlinks(void);

AjPTable         ajAssemaccessGetDb(void);
const char*      ajAssemaccessMethodGetQlinks(const AjPStr method);
ajuint           ajAssemaccessMethodGetScope(const AjPStr method);
AjBool           ajAssemaccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJASSEMREAD_H */
ajassemwrite.h/ 1414437288  1010  513   100644  2867      `
/* @include ajassemwrite ******************************************************
**
** AJAX assembly writing functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.9 $
** @modified Oct 25 2010 pmr First AJAX version
** @modified $Date: 2011/12/19 16:34:01 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJASSEMWRITE_H
#define AJASSEMWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajassemdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajAssemoutWrite(AjPOutfile outf, const AjPAssem assem);
AjBool        ajAssemoutWriteNext(AjPOutfile outf, const AjPAssem assem);

void          ajAssemoutprintBook(AjPFile outf);
void          ajAssemoutprintHtml(AjPFile outf);
void          ajAssemoutprintText(AjPFile outf, AjBool full);
void          ajAssemoutprintWiki(AjPFile outf);

AjBool        ajAssemoutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajAssemoutformatTest(const AjPStr format);

void          ajAssemoutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif  /* !AJASSEMWRITE_H */

ajassert.h/     1414437288  1010  513   100644  2439      `
/* @include ajassert **********************************************************
**
** AJAX assert functions
**
** Functions to handle assert statements.
**
** @author Copyright (C) 1998 Ian Longden
** @version $Revision: 1.4 $
** @modified Jun 25 pmr First version
** @modified $Date: 2011/10/02 10:11:48 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJASSERT_H
#define AJASSERT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

#undef assert
#ifdef NDEBUG
#define assert(e) ((void)0)
#else
#include "ajexcept.h"
extern void assert(ajint e);
#define assert(e) ((void)((e)||(AJRAISE(Assert_Failed),0)))
#endif




AJ_END_DECLS

#endif  /* !AJASSERT_H */

ajax.h/         1414437288  1010  513   100644  4486      `
/* @include ajax **************************************************************
**
** AJAX master include file
**
** @author Copyright (C) 1998 Peter Rice and Alan Bleasby
** @version $Revision: 1.48 $
** @modified $Date: 2012/09/03 14:15:56 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
**
******************************************************************************/

#ifndef AJAX_H
#define AJAX_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajarch.h"

#include <stdio.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ajassert.h"
#include "ajstr.h"

#include "ajfile.h"
#include "ajfiledata.h"
#include "ajfileio.h"

#include "ajfmt.h"
#include "ajmath.h"
#include "ajmem.h"
#include "ajtime.h"
#include "ajutil.h"
#include "ajmess.h"
#include "ajexcept.h"
#include "ajreg.h"
#include "ajsys.h"

#include "ajlist.h"
#include "ajtable.h"
#include "ajarr.h"
#include "ajsort.h"

#include "ajquerydata.h"

#include "ajnam.h"
#include "ajtagval.h"

/* input and output data types */

#include "ajtextdata.h"
#include "ajfeatdata.h"
#include "ajseqdata.h"
#include "ajobodata.h"
#include "ajassemdata.h"
#include "ajrefseqdata.h"
#include "ajtaxdata.h"
#include "ajresourcedata.h"
#include "ajurldata.h"
#include "ajvardata.h"
#include "ajxmldata.h"

/* input and output data type I/O */

#include "ajquery.h"

#include "ajtextread.h"
#include "ajtextwrite.h"
#include "ajtext.h"

#include "ajfeat.h"
#include "ajfeatread.h"
#include "ajfeatwrite.h"

#include "ajseq.h"
#include "ajseqtype.h"
#include "ajseqread.h"
#include "ajseqwrite.h"
#include "ajseqabi.h"

#include "ajmatrices.h"

#include "ajobo.h"
#include "ajoboread.h"
#include "ajobowrite.h"

#include "ajassem.h"
#include "ajassemread.h"
#include "ajassemwrite.h"

#include "ajrefseq.h"
#include "ajrefseqread.h"
#include "ajrefseqwrite.h"

#include "ajtax.h"
#include "ajtaxread.h"
#include "ajtaxwrite.h"

#include "ajresource.h"
#include "ajresourceread.h"
#include "ajresourcewrite.h"

#include "ajurl.h"
#include "ajurlread.h"
#include "ajurlwrite.h"

#include "ajvar.h"
#include "ajvarread.h"
#include "ajvarwrite.h"

#include "ajxml.h"
#include "ajxmlread.h"
#include "ajxmlwrite.h"

#include "ajalign.h"

#include "ajnexus.h"
#include "ajreport.h"
#include "ajindex.h"

#include "ajtranslate.h"
#include "ajrange.h"
#include "ajcod.h"
#include "ajtree.h"

#include "ajphylo.h"
#include "ajbase.h"
#include "ajdan.h"
#include "ajpdb.h"
#include "ajdomain.h"
#include "ajpdbio.h"
#include "ajdmx.h"
#include "ajpat.h"
#include "ajcall.h"
#include "ajjava.h"
#include "ajvector.h"
#include "ajdom.h"
#include "ajsql.h"
#include "ajhttp.h"
#include "ajftp.h"
#include "ajcigar.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJAX_H */
ajbamindex.h/   1414437288  1010  513   100644  5898      `
/* @include ajbamindex ********************************************************
**
** AJAX BAM files indexing/querying functions
**
** @version $Revision: 1.4 $
** @modified 2011 Mahmut Uludag ported from samtools (samtools.sf.net)
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

/* The MIT License
**
**   Copyright (c) 2008 Genome Research Ltd (GRL).
**
**   Permission is hereby granted, free of charge, to any person obtaining
**   a copy of this software and associated documentation files (the
**   "Software"), to deal in the Software without restriction, including
**   without limitation the rights to use, copy, modify, merge, publish,
**   distribute, sublicense, and/or sell copies of the Software, and to
**   permit persons to whom the Software is furnished to do so, subject to
**   the following conditions:
**
**   The above copyright notice and this permission notice shall be
**   included in all copies or substantial portions of the Software.
**
**   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
**   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
**   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
**   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
**   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
**   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
**   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**   SOFTWARE.
*/

#ifndef AJBAMINDEX_H
#define AJBAMINDEX_H

#include "ajdefine.h"
#include "ajseqbam.h"


/* @data pair64_t *************************************************************
**
** A [start,stop) file pointer pairing into the BAM file, stored
** as a BAM file index.  A chunk is represented as a single 64-bit
** value where the high-order 48 bits point to the location of the
** start of a compressed BGZF block within a BGZF file and the
** low-order 16 bits point to a position within the decompressed
** data in the BGZF block.
** ref: Chunk.java in picard project
**
** @attr u [ajulong] virtual file offset of the start of the chunk
** @attr v [ajulong] virtual file offset of the end of the chunk
******************************************************************************/

typedef struct pair64_t
{
    ajulong u;
    ajulong v;
} pair64_t;


/* @data bam_binlist_t ********************************************************
**
** bin object in a binning index for a reference sequence
**
** @attr m [ajuint] allocated size of the chunk array
**                  and is always >= n
** @attr n [ajuint] number of chunks
** @attr list [pair64_t*] array of BAM file chunk start/stop offsets
******************************************************************************/

typedef struct bam_binlist_t
{
    ajuint m;
    ajuint n;
    pair64_t *list;
} bam_binlist_t;


/* @data bam_lidx_t ***********************************************************
**
** linear index for a reference sequence
**
** @attr n [ajint] number of chunks
** @attr m [ajint] allocated size of the list or offset array
**                 and is always >= n
** @attr offset [ajulong*] Array of offsets
**
******************************************************************************/

typedef struct bam_lidx_t
{
    ajint n;
    ajint m;
    ajulong *offset;
} bam_lidx_t;




/* @data AjPBamIndex ********************************************************
**
** Structure for BAM indexes. (samtools name: bam_index_t)
**
** @attr  Padding [ajuint] Padding to alignment boundary
** @attr  n     [ajint]  number of reference sequences
** @attr  n_no_coor [ajulong]  unmapped reads without coordinate
** @attr  bindex    [AjPTable*]  list of binning indices
** @attr  index2    [bam_lidx_t*]  list of intervals for the linear index
******************************************************************************/

typedef struct AjSBamIndex
{
    ajuint Padding;
    ajint n;
    ajulong n_no_coor;
    AjPTable* bindex;
    bam_lidx_t *index2;
} AjOBamIndex;

#define AjPBamIndex AjOBamIndex*




/*
 * Return a virtual file pointer to the current location in the file.
 * No interpretation of the value should be made, other than a subsequent
 * call to ajSeqBamBgzfSeek can be used to position the file at the same point.
 * Return value is non-negative on success.
 * Returns -1 on error.
 */
#define bgzf_tell(fp) ((fp->block_address << 16) | (fp->block_offset & 0xFFFF))
#define bam_tell(fp) bgzf_tell(fp)




/* @datatype bam_fetch_f ******************************************************
**
**  Type of function to be called by ajBamFetch().
**
**  @attr typedef [int] Value returned
**
******************************************************************************/
typedef int (*bam_fetch_f)(AjPSeqBam b, void *data);



int ajBamFetch(AjPSeqBamBgzf fp, const AjPBamIndex idx, int tid,
	       int beg, int end, void *data, bam_fetch_f func);

int ajBamIndexBuild(const char *fn);
void ajBamIndexDel(AjPBamIndex* idx);
AjPBamIndex ajBamIndexLoad(const char *fn);


#endif /* !AJBAMINDEX_H */
ajbase.h/       1414437288  1010  513   100644  4105      `
/* @include ajbase ************************************************************
**
** AJAX IUB base nucleic acid functions
**
** @author Copyright (C) 1999 Alan Bleasby
** @version $Revision: 1.15 $
** @modified Feb 28 ajb First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJBASE_H
#define AJBASE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

#include <ctype.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

const AjPStr  ajBaseGetCodes(ajint ibase);
const AjPStr  ajBaseGetMnemonic(ajint base);
char          ajBaseAlphacharComp(char base);
void          ajBaseExit(void);
float         ajBaseAlphaCompare(ajint base1, ajint base2);

ajint         ajBaseAlphaToBin(ajint c);
char          ajBaseBinToAlpha(ajint c);

char          ajBaseAlphacharToBin(char c);
float         ajBaseAlphacharCompare(char c, char c2);
AjBool        ajBaseFromDoublet(const AjPStr nuc2, char* Pc);

ajint         ajBasecodeToInt(ajint c);
ajint         ajBasecodeFromInt(ajint n);

ajint         ajResidueAlphaToBin(ajint c);
char          ajResidueBinToAlpha(ajint c);
const AjPStr  ajResidueGetCodes(ajint ires);
const AjPStr  ajResidueGetMnemonic(ajint base);
AjBool        ajResidueFromTriplet(const AjPStr aa3, char *Pc);
AjBool        ajResidueToTriplet(char c, AjPStr *Paa3);
AjBool        ajBaseExistsBin(ajint base);
AjBool        ajBaseExistsChar(char c);
AjBool        ajResidueExistsBin(ajint base);
AjBool        ajResidueExistsChar(char c);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjBool        ajBaseAa1ToAa3(char aa1, AjPStr *aa3);
__deprecated AjBool        ajBaseAa3ToAa1(char *aa1, const AjPStr aa3);
__deprecated const AjPStr  ajBaseCodes(ajint ibase);
__deprecated char          ajSeqBaseComp(char base);
__deprecated ajint         ajAZToInt(ajint c);
__deprecated ajint         ajAZToBin(ajint c);
__deprecated char          ajAZToBinC(char c);
__deprecated char          ajBinToAZ(ajint c);
__deprecated ajint         ajIntToAZ(ajint n);
__deprecated char          ajBaseComp(char base);
__deprecated float         ajBaseProb(ajint base1, ajint base2);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJBASE_H */

ajcall.h/       1414437288  1010  513   100644  2815      `
/* @include ajcall ************************************************************
**
** General routines for function callback
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.11 $
** @modified $Date: 2011/10/23 20:09:49 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJCALL_H
#define AJCALL_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajtable.h"
#include <stdarg.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




typedef void* (*CallFunc)(const char *name, va_list args);




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void     ajCallRegister(const char *name, CallFunc func);
void     ajCallRegisterOld(const char *name, CallFunc func);
void     ajCallTableRegister(AjPTable table, const char *name, void* func);

AjPTable ajCallTableNew(void);
void*    ajCall(const char *name, ...);
void*    ajCallTableGetC(const AjPTable table, const char *name);
void*    ajCallTableGetS(const AjPTable table, const AjPStr namestr);
void     ajCallExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJCALL_H */

ajcigar.h/      1414437288  1010  513   100644  2631      `
/* @include ajcigar ************************************************************
**
** Handling of CIGAR strings
**
** @version $Revision: 1.5 $
** @modified Nov 2011 uludag First version
** @modified $Date: 2012/07/14 14:52:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJCIGAR_H
#define AJCIGAR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */


typedef struct AjSCigar
{
    ajint* length;
    char* cigoperator;
    ajint n;
    ajuint Padding;
} AjOCigar;

#define AjPCigar AjOCigar*



/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPCigar ajCigarNewS(const AjPStr cigar);
void     ajCigarDel(AjPCigar *Pcigar);
ajint	 ajCigarGetReferenceLength(const AjPCigar c);
ajint    ajCigarCountInsertedBases(const AjPCigar c);
ajint    ajCigarCountDeletedBases(const AjPCigar c);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJIGAR_H */

ajcod.h/        1414437288  1010  513   100644  8300      `
/* @include ajcod *************************************************************
**
** AJAX codon functions
**
** @author Copyright (C) 1999 Alan Bleasby
** @version $Revision: 1.27 $
** @modified Aug 07 ajb First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJCOD_H
#define AJCOD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPCod ***************************************************************
**
** Ajax codon object.
**
** Holds arrays describing codon usage
** The length is known and held internally.
**
** AjPCod is implemented as a pointer to a C data structure.
**
** @alias AjSCod
** @alias AjOCod
**
** @attr Name [AjPStr] Name of codon file
** @attr Species [AjPStr] Species
** @attr Division [AjPStr] Division (gbbct etc.)
** @attr Release [AjPStr] Database name and release
** @attr Desc [AjPStr] Description
** @attr CdsCount [ajint] Number of coding sequences used
** @attr CodonCount [ajint] Number of individual codons used
** @attr aa [ajint*] Amino acid represented by codon
** @attr num [ajint*] Number of codons
** @attr tcount [double*] Codons per thousand
** @attr fraction [double*] Fraction of amino acids of this type
** @attr back [ajint*] Index of favoured amino acid for back translation
** @attr GeneticCode [ajint] Genetic code NCBI number to match
**                           amino acids to codons.
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSCod
{
    AjPStr Name;
    AjPStr Species;
    AjPStr Division;
    AjPStr Release;
    AjPStr Desc;
    ajint CdsCount;
    ajint CodonCount;
    ajint *aa;
    ajint *num;
    double *tcount;
    double *fraction;
    ajint *back;
    ajint GeneticCode;
    char Padding[4];
} AjOCod;

#define AjPCod AjOCod*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void         ajCodSetCodenum(AjPCod thys, ajint geneticcode);
void         ajCodSetDescC(AjPCod thys, const char* desc);
void         ajCodSetDescS(AjPCod thys, const AjPStr desc);
void         ajCodSetDivisionC(AjPCod thys, const char* division);
void         ajCodSetDivisionS(AjPCod thys, const AjPStr division);
void         ajCodSetNameC(AjPCod thys, const char* name);
void         ajCodSetNameS(AjPCod thys, const AjPStr name);
void         ajCodSetNumcds(AjPCod thys, ajint numcds);
void         ajCodSetNumcodons(AjPCod thys, ajint numcodon);
void         ajCodSetReleaseC(AjPCod thys, const char* release);
void         ajCodSetReleaseS(AjPCod thys, const AjPStr release);
void         ajCodSetSpeciesC(AjPCod thys, const char* species);
void         ajCodSetSpeciesS(AjPCod thys, const AjPStr species);
void         ajCodBacktranslate(AjPStr *b, const AjPStr a, const AjPCod thys);
void         ajCodBacktranslateAmbig(AjPStr *b, const AjPStr a,
                                     const AjPCod thys);
ajint        ajCodBase(ajint c);
double       ajCodCalcCaiCod(const AjPCod thys);
double       ajCodCalcCaiSeq(const AjPCod cod, const AjPStr str);
void         ajCodCalcGribskov(AjPCod thys, const AjPStr s);
double       ajCodCalcNc(const AjPCod thys);
void         ajCodCalcUsage(AjPCod thys, ajint c);
void         ajCodClear(AjPCod thys);
void         ajCodClearData(AjPCod thys);
void         ajCodComp(ajint *NA, ajint *NC, ajint *NG, ajint *NT,
                       const char *str);
void         ajCodSetTripletsS(AjPCod thys, const AjPStr s, ajint *c);
void         ajCodDel(AjPCod *thys);
ajint        ajCodGetCode(const AjPCod thys);
const AjPStr ajCodGetDesc(const AjPCod thys);
const char*  ajCodGetDescC(const AjPCod thys);
const AjPStr ajCodGetDivision(const AjPCod thys);
const char*  ajCodGetDivisionC(const AjPCod thys);
void         ajCodExit(void);
void         ajCodGetCodonlist(const AjPCod cod, AjPList list);
const AjPStr ajCodGetName(const AjPCod thys);
const char*  ajCodGetNameC(const AjPCod thys);
ajint        ajCodGetNumcds(const AjPCod thys);
ajint        ajCodGetNumcodon(const AjPCod thys);
const AjPStr ajCodGetRelease(const AjPCod thys);
const char*  ajCodGetReleaseC(const AjPCod thys);
const AjPStr ajCodGetSpecies(const AjPCod thys);
const char*  ajCodGetSpeciesC(const AjPCod thys);
ajint        ajCodIndex(const AjPStr s);
ajint        ajCodIndexC(const char *codon);
AjPCod       ajCodNew(void);
AjPCod       ajCodNewCodenum(ajint code);
AjPCod       ajCodNewCod(const AjPCod thys);
AjBool       ajCodRead(AjPCod thys, const AjPStr fn, const AjPStr format);
void         ajCodSetBacktranslate(AjPCod thys);
char*        ajCodTriplet(ajint idx);
void         ajCodWrite(AjPCod thys, AjPFile outf);
void         ajCodWriteOut(const AjPCod thys, AjPOutfile outf);
AjBool       ajCodoutformatFind(const AjPStr name, ajint *iformat);
void         ajCodPrintFormat(AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated ajint        ajCodOutFormat(const AjPStr name);
__deprecated AjPCod       ajCodDup(const AjPCod thys);
__deprecated AjPCod       ajCodNewCode(ajint code);
__deprecated void         ajCodAssCode(AjPCod thys, ajint geneticcode);
__deprecated void         ajCodAssDesc(AjPCod thys, const AjPStr desc);
__deprecated void         ajCodAssDescC(AjPCod thys, const char* desc);
__deprecated void         ajCodAssDivision(AjPCod thys, const AjPStr division);
__deprecated void         ajCodAssDivisionC(AjPCod thys, const char* division);
__deprecated void         ajCodAssNumcds(AjPCod thys, ajint numcds);
__deprecated void         ajCodAssNumcodon(AjPCod thys, ajint numcodon);
__deprecated void         ajCodAssRelease(AjPCod thys, const AjPStr release);
__deprecated void         ajCodAssReleaseC(AjPCod thys, const char* release);
__deprecated void         ajCodAssSpecies(AjPCod thys, const AjPStr species);
__deprecated void         ajCodAssSpeciesC(AjPCod thys, const char* species);
__deprecated void         ajCodAssName(AjPCod thys, const AjPStr name);
__deprecated void         ajCodAssNameC(AjPCod thys, const char* name);
__deprecated void         ajCodCountTriplets(AjPCod thys,
                                             const AjPStr s, ajint *c);
__deprecated double       ajCodCalcCai(const AjPCod cod, const AjPStr str);
__deprecated void         ajCodCalculateUsage(AjPCod thys, ajint c);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJCOD_H */
ajdan.h/        1414437288  1010  513   100644  4456      `
/* @include ajdan *************************************************************
**
** AJAX nucleic acid functions
**
** @author Copyright (C) 1999 Alan Bleasby
** @version $Revision: 1.14 $
** @modified Feb 25 ajb First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJDAN_H
#define AJDAN_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPMelt **************************************************************
**
** Melting values for di-nucleotides
**
** @alias AjSMelt
** @alias AjOMelt
**
** @attr pair [AjPStr] Di-nucleotide
** @attr enthalpy [float] Enthalpy
** @attr entropy [float] Entropy
** @attr energy [float] Free energy
** @attr Padding [char[4]] Padding
** @@
******************************************************************************/

typedef struct AjSMelt
{
    AjPStr pair;
    float enthalpy;
    float entropy;
    float energy;
    char Padding[4];
} AjOMelt;

#define AjPMelt AjOMelt*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void  ajMeltExit(void);
void  ajMeltInit(AjBool isdna, ajint savesize);
float ajMeltEnergy(const AjPStr strand, ajint len,
                   ajint shift, AjBool isDNA,
                   AjBool maySave, float *enthalpy, float *entropy);
float ajMeltEnergy2(const char *strand, ajint pos, ajint len,
                    AjBool isDNA,
                    float *enthalpy, float *entropy,
                    float **saveentr, float **saveenth, float **saveener);
float ajMeltTemp(const AjPStr strand, ajint len, ajint shift, float saltconc,
                 float DNAconc, AjBool isDNA);
float ajMeltTempSave(const char *strand, ajint pos, ajint len, float saltconc,
                     float DNAconc, AjBool isDNA,
                     float **saveentr, float **saveenth, float **saveener);
float ajMeltGC(const AjPStr strand, ajint len);
float ajMeltTempProd(float gc, float saltconc, ajint len);
float ajAnneal(float tmprimer, float tmproduct);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated float ajTm(const AjPStr strand, ajint len,
                        ajint shift, float saltconc,
                        float DNAconc, AjBool isDNA);
__deprecated float ajTm2(const char *strand, ajint pos,
                         ajint len, float saltconc,
                         float DNAconc, AjBool isDNA,
                         float **saveentr, float **saveenth, float **saveener);
__deprecated float ajProdTm(float gc, float saltconc, ajint len);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJDAN_H */
ajdas.h/        1414437296  1010  513   100644  7427      `
/* @include ajdas *************************************************************
**
** support for DAS sequence data sources
**
** @author Copyright (c) 2009 Mahmut Uludag
** @version $Revision: 1.6 $
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
******************************************************************************/

#ifndef AJDAS_H
#define AJDAS_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajfile.h"
#include "ajquerydata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPDasCoordinate *****************************************************
**
** Description of the namespace/coordinate of a DAS source
**
** @attr uri [AjPStr] the unique URI for a DAS source. For a DAS registration
**                    server it should allow to access more information
**                    about the coordinate/namespace
** @attr taxid [AjPStr] NCBI taxonomy id of the organism, as a number
** @attr source [AjPStr] type of the sources for the coordinate system,
**                      such as chromosome, scaffold, supercontig
** @attr authority [AjPStr] name of the organization that determined
**                          the coordinate system
** @attr test_range [AjPStr] example id with start/stop positions
** @attr version [AjPStr] version of the build upon which
**                        the coordinate system is based
** @@
******************************************************************************/

typedef struct AjSDasCoordinate
{
    AjPStr uri;
    AjPStr taxid;
    AjPStr source;
    AjPStr authority;
    AjPStr test_range;
    AjPStr version;
} AjODasCoordinate;

#define AjPDasCoordinate AjODasCoordinate*




/* @data AjPDasSource *********************************************************
**
** DAS Source
**
** @attr uri [AjPStr] a unique URI for the DAS source
** @attr title [AjPStr] nickname
** @attr description [AjPStr] description
** @attr entry_points_uri [AjPStr] URI for the DAS 'entry_points' command
** @attr sequence_query_uri [AjPStr] URI for the DAS 'sequence' command
** @attr features_query_uri [AjPStr] URI for the DAS 'features' command
** @attr coordinates [AjPList] list of supported coordinates
** @attr sequence [AjBool] whether 'sequence' queries are supported
** @attr stylesheet [AjBool] whether 'stylesheet' queries are supported
** @attr features [AjBool] whether 'features' queries are supported
** @attr entry_points [AjBool] whether 'entry_points' queries are supported
**
** @@
******************************************************************************/

typedef struct AjSDasSource
{
    AjPStr uri;
    AjPStr title;
    AjPStr description;
    AjPStr entry_points_uri;
    AjPStr sequence_query_uri;
    AjPStr features_query_uri;
    AjPList coordinates;
    AjBool sequence;
    AjBool stylesheet;
    AjBool features;
    AjBool entry_points;
} AjODasSource;

#define AjPDasSource AjODasSource*




/* @data AjPDasSegment ********************************************************
**
** DAS Segment
**
** segment elements are returned by DAS 'entry_points' query
**
** @attr id [AjPStr] unique identifier
** @attr type [AjPStr] type of the segment, such as "chromosome" or "scaffold"
** @attr start [ajuint] start position of the segment
** @attr stop [ajuint] stop position of the segment
** @attr orientation [AjPStr] orientation is one of "+" or "-"
**                            and indicates the strandedness of the segment
**                            ("+" if the segment is not intrinsically ordered)
** @attr subparts [AjBool] "yes" indicates that the segment has subparts
** @attr padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSDasSegment
{
    AjPStr id;
    AjPStr type;
    ajuint start;
    ajuint stop;
    AjPStr orientation;
    AjBool subparts;
    char   padding[4];
} AjODasSegment;

#define AjPDasSegment AjODasSegment*





/* @data AjPDasServer **********************************************************
**
** DAS server object
**
** @attr host [AjPStr] host-name
** @attr path [AjPStr] path to DAS service on host
** @attr port [ajuint] URL port
** @attr padding [char[4]] Padding to alignment boundary
** @attr sources [AjPList] list of available DAS sources on the server
** @@
******************************************************************************/

typedef struct AjSDasServer
{
    AjPStr host;
    AjPStr path;
    ajuint port;
    char padding[4];
    AjPList sources;
} AjODasServer;
#define AjPDasServer AjODasServer*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/


AjPStr       ajDasGetSequenceQueryURI(const AjPQuery qry,
                                      const AjPStr sourceURI);

void         ajDasPrintCachefile(const AjPDasServer server, AjPFile cachef);


void         ajDasSegmentDel(AjPDasSegment* segment);
void         ajDasServerDel(AjPDasServer *thys);
void         ajDasServerGetSources(AjPDasServer server, const AjPStr cmd);
AjPDasServer ajDasServerNew(void);
AjBool       ajDasServerSethostS(AjPDasServer server, const AjPStr host);
AjBool       ajDasServerSetpathS(AjPDasServer server, const AjPStr path);
AjBool       ajDasServerSetport(AjPDasServer server, ajuint port);

AjPStr       ajDasSourceGetDBname(const AjPDasSource source,
				  AjBool titleAndURI);

AjPStr       ajDasTestrangeParse(const AjPStr testrange, AjPStr* id,
                                 ajint* ibegin, ajint* iend);

/* parsing DAS XML outputs */

AjBool       ajDasParseRegistry(AjPFilebuff buff, AjPList sources);
AjBool       ajDasParseEntrypoints(AjPFilebuff buff, AjPList segments);


/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJDAS_H */

ajdefine.h/     1414437288  1010  513   100644  3692      `
/* @include ajdefine **********************************************************
**
** AJAX master definitions include file
**
** @author Copyright (C) 1998 Peter Rice and Alan Bleasby
** @version $Revision: 1.29 $
** @modified $Date: 2012/04/12 20:35:29 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
**
******************************************************************************/

#ifndef AJDEFINE_H
#define AJDEFINE_H

#if defined(__cplusplus)
#define AJ_BEGIN_DECLS extern "C" {
#define AJ_END_DECLS }
#else /* !__cplusplus */
#define AJ_BEGIN_DECLS
#define AJ_END_DECLS
#endif /* !__cplusplus */




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "ajarch.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

#ifdef __GNUC__
#define __deprecated __attribute__((deprecated))
#define __noreturn __attribute__((noreturn))
#define __warn_unused_result __attribute__((warn_unused_result))
#else /* !__GNUC__ */
#define __deprecated
#define __noreturn
#define __warn_unused_result
#endif /* !__GNUC__ */

#ifndef WIN32
#define SLASH_CHAR   '/'
#define SLASH_STRING "/"
#define CURRENT_DIR  "./"
#define UP_DIR       "../"
#define PATH_SEPARATOR ":"
#define _BLACKHOLE "/dev/null"
#else
#define SLASH_CHAR   '\\'
#define SLASH_STRING "\\"
#define CURRENT_DIR  ".\\"
#define UP_DIR       "..\\"
#define PATH_SEPARATOR ";"
#define _BLACKHOLE "nul:"
#endif

#define AJAXLONGDOUBLE double

#define AJBOOL(b) (b ? "TRUE" : "FALSE")

#define AJFALSE 0
#define AJTRUE 1

#define ajFalse 0
#define ajTrue 1

#define CASE2(a,b) ((a << 8) + b)
#define CASE3(a,b,c) ((a << 16) + (b << 8) + c)
#define CASE4(a,b,c,d) ((a << 24) + (b << 16) + (c << 8) + d)

#define STRCASE2(a) ((a[0] << 8) + a[1])

#define U_FEPS 1.192e-6F          /* 1.0F + E_FEPS != 1.0F */
#define U_DEPS 2.22e-15           /* 1.0 +  E_DEPS != 1.0  */

#define E_FPEQ(a,b,e) (((b - e) < a) && (a < (b + e)))

#define E_FPZERO(a,e) (fabs((double)a) <= (double) e)




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJDEFINE_H */
ajdmx.h/        1414437288  1010  513   100644  13053     `
/* @include ajdmx *************************************************************
**
** AJAX objects for some of the DOMAINATRIX EMBASSY applications.
** Scophit and Scopalg objects.
**
** @author: Copyright (C) 2004 Ranjeeva Ranasinghe (rranasin@hgmp.mrc.ac.uk)
** @author: Copyright (C) 2004 Jon Ison (jison@hgmp.mrc.ac.uk)
** @version $Revision: 1.23 $
** @modified $Date: 2012/04/12 20:36:03 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJDMX_H
#define AJDMX_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajfile.h"
#include "ajpdb.h"
#include "ajdomain.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPScophit ***********************************************************
**
** AJAX SCOP Hit object
**
** Holds data associated with a protein / domain sequence. Includes SCOP
** classification records.
**
** AjPScophit is implemented as a pointer to a C data structure.
**
** @alias AjSScophit
** @alias AjOScophit
**
** @attr Class [AjPStr] Class name
** @attr Architecture [AjPStr] CATH classification.
** @attr Topology [AjPStr] CATH classification.
** @attr Fold [AjPStr] Fold name
** @attr Superfamily [AjPStr] Superfamily name
** @attr Family [AjPStr] Family name
** @attr Type [AjEDomainType] AJAX Domain Type enumeration
** @attr Sunid_Family [ajuint] Domain identifier of node (e.g. family or
** superfamily) represented.
** @attr Seq [AjPStr] Sequence as string
** @attr Start [ajuint] Start of sequence or signature alignment
**       relative to full length swissprot sequence
** @attr End [ajuint] End of sequence or signature alignment relative
**       to full length swissprot sequence
** @attr Acc [AjPStr] Accession number of sequence entry
** @attr Spr [AjPStr] Swissprot code of sequence entry
** @attr Dom [AjPStr] SCOP or CATH database identifier code of entry.
** @attr Typeobj [AjPStr] Bibliographic information ... objective
** @attr Typesbj [AjPStr] Bibliographic information ... subjective
** @attr Model [AjPStr] String for model type (HMM, Gribskov etc)
** @attr Group [AjPStr] 'REDUNDANT' or 'NON_REDUNDANT'
** @attr Rank [ajuint] Rank order of hit
** @attr Score [float] Score of hit
** @attr Eval [float] E-value of hit
** @attr Pval [float] p-value of hit
** @attr Alg [AjPStr] Alignment, e.g. of a signature to the sequence
** @attr Target [AjBool] True if the Scophit is targeted for removal
**       from a list of Scophit objects
** @attr Target2 [AjBool] Also used for garbage collection
** @attr Priority [AjBool] True if the Scop hit is high priority
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new    ajDmxScophitNew Default Scophit object constructor.
** @delete ajDmxScophitDel Default Scophit object destructor.
** @delete ajDmxScophitDelWrap Wrapper to destructor for Scophit object
**         for use with generic functions.
** @assign ajDmxScophitListCopy Reads a list of Scophit structures and
**         returns a pointer to a duplicate of the list.
** @use    ajDmxScophitCheckTarget Checks to see if the Target element of a
**         Scophit object == ajTrue.
** @modify ajDmxScophitTarget Sets the Target element of a Scophit object
**         to True.
** @modify ajDmxScophitTarget2 Sets the Target2 element of a Scophit object
**         to True.
** @modify ajDmxScophitTargetLowPriority Sets the Target element of a
**         Scophit object to True if its Priority is low.
** @use    ajDmxScophitCompSpr Function to sort Scophit object by Spr element.
** @use    ajDmxScophitCompStart Function to sort Scophit object by Spr
**         element.
** @use    ajDmxScophitCompEnd Function to sort Scophit object by End element.
** @use    ajDmxScophitCompClass Function to sort Scophit object by Class
**         element.
** @use    ajDmxScophitCompFold Function to sort Scophit object by Fold
**         element.
** @use    ajDmxScophitCompSfam Function to sort Scophit object by Superfamily
**         element.
** @use    ajDmxScophitCompFam Function to sort Scophit object by Family
**         element.
** @use    ajDmxScophitCompAcc Function to sort Scophit objects by Acc element.
** @use    ajDmxScophitCompSunid Function to sort Scophit objects by Sunid
**         element.
** @use    ajDmxScophitCompScore Function to sort Scophit objects by Score
**         element.
** @use    ajDmxScophitCompPval Function to sort Scophit objects by Pval
**         element.
** @use    ajDmxScopSeqFromSunid Writes a sequence corresponding to a Scop
**         domain given a Sunid for the domain. The sequence is taken from one
**         of a list of Scop objects that is provided.
** @output ajDmxScophitsWrite Write contents of a list of Scophits to an output
**         file.
** @output ajDmxScophitsWriteFasta Write contents of a list of Scophits to an
**         output file in extended FASTA format.
** @input  ajDmxScophitReadFasta Read a Scophit object from a file in
**         extended FASTA format.
** @assign ajDmxScophitCopy Copies the contents from one Scophit object to
**         another.
** @@
******************************************************************************/

typedef struct AjSScophit
{
    AjPStr Class;
    AjPStr Architecture;
    AjPStr Topology;
    AjPStr Fold;
    AjPStr Superfamily;
    AjPStr Family;
    AjEDomainType Type;
    ajuint Sunid_Family;
    AjPStr Seq;
    ajuint Start;
    ajuint End;
    AjPStr Acc;
    AjPStr Spr;
    AjPStr Dom;
    AjPStr Typeobj;
    AjPStr Typesbj;
    AjPStr Model;
    AjPStr Group;
    ajuint Rank;
    float Score;
    float Eval;
    float Pval;
    AjPStr Alg;
    AjBool Target;
    AjBool Target2;
    AjBool Priority;
    char Padding[4];
} AjOScophit, *AjXScophit;

#define AjPScophit AjOScophit*
#define AjPPScophit AjXScophit*




/* @data AjPScopalg ***********************************************************
**
** AJAX SCOP Alignment object
**
** Holds data associated with a structure alignment.
** Now adapted to hold CATH domain data also by addition of Type,
** Architecture and Topology elements.
**
** AjPScopalg is implemented as a pointer to a C data structure.
**
** @alias AjSScopalg
** @alias AjOScopalg
**
** @attr Class [AjPStr] Class name
** @attr Architecture [AjPStr] CATH classification.
** @attr Topology [AjPStr] CATH classification.
** @attr Fold [AjPStr] Fold name
** @attr Superfamily [AjPStr] Superfamily name
** @attr Family [AjPStr] Family name (SCOP only)
** @attr Sunid_Family [ajuint] SCOP sunid for family
** @attr Width [ajuint] Width (residues) of widest part of alignment
** @attr Type [AjEDomainType] AJAX Domain Type enumeration
** @attr Number [ajuint] No. of sequences in alignment
** @attr Codes [AjPStr*] Array of domain id codes of sequences
** @attr Seqs [AjPStr*] Array of sequences
** @attr Post_similar [AjPStr] Post_similar line from alignment
** @attr Positions [AjPStr] Array of integers from 'Position' line in
**                            alignment, used for manual specification of
**                            signature positions
**
**
**
** @new    ajDmxScopalgRead Read a Scopalg object from a file.
** @output ajDmxScopalgWrite Write a Scopalg object to file in clustal format
**         annotated with SCOP classification info.
** @output ajDmxScopalgWriteClustal Writes a Scopalg object to file in clustal
**         format (just the alignment without the SCOP classification
**         information).
** @output ajDmxScopalgWriteClustal2 Writes a Scopalg object to file in clustal
**         format (just the alignment without the SCOP classification
**         information).
** @output ajDmxScopalgWriteFasta Writes a Scopalg object to file in clustal
**         format (just the alignment without the SCOP classification
**         information).
** @new    ajDmxScopalgNew Scopalg object constructor.
** @delete ajDmxScopalgDel Scopalg object destructor.
** @input  ajDmxScopalgGetseqs Read a Scopalg object and writes an array of
**         AjPStr containing the sequences without gaps.
** @@
******************************************************************************/

typedef struct AjSScopalg
{
    AjPStr Class;
    AjPStr Architecture;
    AjPStr Topology;
    AjPStr Fold;
    AjPStr Superfamily;
    AjPStr Family;
    ajuint Sunid_Family;
    ajuint Width;
    AjEDomainType Type;
    ajuint Number;
    AjPStr *Codes;
    AjPStr *Seqs;
    AjPStr Post_similar;
    AjPStr Positions;
} AjOScopalg;

#define AjPScopalg AjOScopalg*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void          ajDmxDummyFunction(void);
void          ajDmxExit(void);




/* ======================================================================= */
/* ========================== Scophit object ============================= */
/* ======================================================================= */




AjPScophit    ajDmxScophitNew(void);
void          ajDmxScophitDel(AjPScophit *Pscophit);
void          ajDmxScophitDelWrap(void **Pitem);
AjPList       ajDmxScophitListCopy(const AjPList scophits);

AjBool        ajDmxScophitCheckTarget(const AjPScophit scophit);
AjBool        ajDmxScophitTarget(AjPScophit *Pscophit);
AjBool        ajDmxScophitTarget2(AjPScophit *Pscophit);
AjBool        ajDmxScophitTargetLowPriority(AjPScophit *Pscophit);

ajint         ajDmxScophitCompSpr(const void *item1, const void *item2);
ajint         ajDmxScophitCompStart(const void *item1, const void *item2);
ajint         ajDmxScophitCompEnd(const void *item1, const void *item2);
ajint         ajDmxScophitCompClass(const void *item1, const void *item2);
ajint         ajDmxScophitCompFold(const void *item1, const void *item2);
ajint         ajDmxScophitCompSfam(const void *item1, const void *item2);
ajint         ajDmxScophitCompFam(const void *item1, const void *item2);
ajint         ajDmxScophitCompAcc(const void *item1, const void *item2);
ajint         ajDmxScophitCompSunid(const void *item1, const void *item2);
ajint         ajDmxScophitCompScore(const void *item1, const void *item2);
ajint         ajDmxScophitCompPval(const void *item1, const void *item2);

AjBool        ajDmxScopSeqFromSunid(ajint identifier, AjPStr *seq,
                                    const AjPList scops);
AjBool        ajDmxScophitsWrite(AjPFile outf, const AjPList scophits);
AjBool        ajDmxScophitsWriteFasta(AjPFile outf, const AjPList scophits);
AjPScophit    ajDmxScophitReadFasta(AjPFile inf);
AjBool        ajDmxScophitCopy(AjPScophit *Pto, const AjPScophit from);




/* ======================================================================= */
/* ========================== Scopalg object ============================= */
/* ======================================================================= */




AjBool        ajDmxScopalgRead(AjPFile inf, AjPScopalg *Pscopalg);
AjBool        ajDmxScopalgWrite(const AjPScopalg scopalg, AjPFile outf);
AjBool        ajDmxScopalgWriteClustal(const AjPScopalg scopalg, AjPFile outf);
AjBool        ajDmxScopalgWriteClustal2(const AjPScopalg scopalg, AjPFile outf);
AjBool        ajDmxScopalgWriteFasta(const AjPScopalg scopalg, AjPFile outf);
AjPScopalg    ajDmxScopalgNew(ajuint n);
void          ajDmxScopalgDel(AjPScopalg *Pscopalg);
ajuint        ajDmxScopalgGetseqs(const AjPScopalg scopalg, AjPStr **array);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJDMX_H */

ajdom.h/        1414437288  1010  513   100644  20035     `
/* @include ajdom *************************************************************
**
** AJAX Document Object Model (DOM) functions
**
** @author Copyright (C) 2006 Alan Bleasby
** @version $Revision: 1.17 $
** @modified Jul 03 2006 ajb First version
** @modified $Date: 2012/09/03 14:24:14 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJDOM_H
#define AJDOM_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajtable.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum AjEDomNodeType *******************************************************
**
** AJAX DOM Node Type enumeration
**
** @value ajEDomNodeTypeNULL NULL
** @value ajEDomNodeTypeElement Element
** @value ajEDomNodeTypeAttribute Attribute
** @value ajEDomNodeTypeText Text
** @value ajEDomNodeTypeCdataSection CDATA Section
** @value ajEDomNodeTypeEntityReference Entity Reference
** @value ajEDomNodeTypeEntityNode Entity
** @value ajEDomNodeTypeProcessingInstruction Processing Instruction
** @value ajEDomNodeTypeComment Comment
** @value ajEDomNodeTypeDocumentNode Document
** @value ajEDomNodeTypeDocumentType Document Type
** @value ajEDomNodeTypeDocumentFragment Document Fragment
** @value ajEDomNodeTypeNotation Notation
** @@
******************************************************************************/

typedef enum AjODomNodeType
{
    ajEDomNodeTypeNULL,
    ajEDomNodeTypeElement,
    ajEDomNodeTypeAttribute,
    ajEDomNodeTypeText,
    ajEDomNodeTypeCdataSection,
    ajEDomNodeTypeEntityReference,
    ajEDomNodeTypeEntityNode,
    ajEDomNodeTypeProcessingInstruction,
    ajEDomNodeTypeComment,
    ajEDomNodeTypeDocumentNode,
    ajEDomNodeTypeDocumentType,
    ajEDomNodeTypeDocumentFragment,
    ajEDomNodeTypeNotation
} AjEDomNodeType;




#define AJDOMDESTROY 1
#define AJDOMKEEP 0




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjSDomNode ***********************************************************
**
** DOM parsing node
**
** @alias AjODomNode
** @alias AjPDomNode
** @alias AjPDomDocument
** @alias AjPDomDocumentType
** @alias AjPDomElement
** @alias AjPDomText
** @alias AjPDomCharacterData
** @alias AjPDomDocumentFragment
** @alias AjPDomCDATASection
** @alias AjPDomComment
** @alias AjPDomAttr
** @alias AjPDomEntityReference
** @alias AjPDomEntity
** @alias AjPDomPi
** @alias AjPDomNotation
**
** @attr name [AjPStr] name of node
** @attr value [AjPStr] value associated with name
** @attr parentnode [struct AjSDomNode*] ancestor
** @attr childnodes [struct AjSDomNodeList*] children
** @attr firstchild [struct AjSDomNode*] first child in list
** @attr lastchild [struct AjSDomNode*] last child in list
** @attr previoussibling [struct AjSDomNode*] last node at this level
** @attr nextsibling [struct AjSDomNode*] next node at this level
** @attr attributes [struct AjSDomNodeList*] attributes
** @attr ownerdocument [struct AjSDomNode*] document owner
** @attr sub [union] substructure depending on node type
** @attr type [AjEDomNodeType] AJAX DOM Node enumeration
** @attr subtreeModified [ajuint] internal flag
**
******************************************************************************/

typedef struct AjSDomNode
{
    AjPStr name;
    AjPStr value;

    struct AjSDomNode     *parentnode;
    struct AjSDomNodeList *childnodes;
    struct AjSDomNode     *firstchild;
    struct AjSDomNode     *lastchild;
    struct AjSDomNode     *previoussibling;
    struct AjSDomNode     *nextsibling;

    struct AjSDomNodeList *attributes;

    struct AjSDomNode     *ownerdocument;

    union
    {
        struct
        {
            struct AjSDomNode   *doctype;
            struct AjSDomNode   *documentelement;
            struct AjSDomNode   *document;
            struct AjSDomNode   *defaultview;
            struct AjSDomNode   *commonparent;
            AjPStr version;
            AjPStr encoding;
            ajint standalone;
            char  Padding[4];
        } Document;

        struct
        {
            AjPStr name;
            struct AjSDomNodeList *entities;
            struct AjSDomNodeList *notations;
            AjPStr publicid;
            AjPStr systemid;
            AjPStr internalsubset;
        } DocumentType;

        struct
        {
            AjPStr tagname;
        } Element;

        struct
        {
            AjPStr name;
            AjPStr value;
            struct AjSDomNode *ownerelement;
            ajint specified;
            char Padding[4];
        } Attr;

        struct
        {
            AjPStr data;
            ajint length;
            char Padding[4];
        } CharacterData;

        struct
        {
            AjPStr publicid;
            AjPStr systemid;
        } Notation;

        struct
        {
            AjPStr publicid;
            AjPStr systemid;
            AjPStr notationname;
        } Entity;

        struct
        {
            AjPStr target;
            AjPStr data;
        } ProcessingInstruction;
    } sub;

    AjEDomNodeType type;
    ajuint subtreeModified;

} AjODomNode;

#define AjPDomNode AjODomNode*




/* @data AjSDomNodeEntry ******************************************************
**
** DOM parsing node entry
**
** @alias AjODomNodeEntry
** @alias AjPDomNodeEntry
**
** @attr prev [struct AjSDomNodeEntry*] previous node
** @attr next [struct AjSDomNodeEntry*] next node
** @attr node [AjPDomNode] linked list node
**
******************************************************************************/

typedef struct AjSDomNodeEntry
{
    struct AjSDomNodeEntry *prev;
    struct AjSDomNodeEntry *next;
    AjPDomNode node;
} AjODomNodeEntry;

#define AjPDomNodeEntry AjODomNodeEntry*




/* @data AjSDomNodeList *******************************************************
**
** DOM parsing node list
**
** @alias AjODomNodeList
** @alias AjPDomNodeList
** @alias AjPDomNodeMap
**
** @attr ownerdocument [AjPDomNode] document owner
** @attr ownerelement [AjPDomNode] element owner
** @attr first [AjPDomNodeEntry] first in list
** @attr last [AjPDomNodeEntry] last in list
** @attr length [ajint] length
** @attr filter [ajuint] filter
** @attr list [struct AjSDomNodeList*] list
** @attr table [AjPTable] fast lookup table
**
******************************************************************************/

typedef struct AjSDomNodeList
{
    AjPDomNode ownerdocument;
    AjPDomNode ownerelement;
    AjPDomNodeEntry first;
    AjPDomNodeEntry last;
    ajint length;
    ajuint filter;
    struct AjSDomNodeList *list;
    AjPTable table;
} AjODomNodeList;

#define AjPDomNodeList AjODomNodeList*




/* @data AjSDomUserdata *******************************************************
**
** DOM Userdata used when reading XML
**
** @alias AjODomUserdata
** @alias AjPDomUserdata
**
** @attr Buffer [AjPStr] Utility string
** @attr Stack [AjPList] Stack
** @attr Cdata [AjBool] Cdata
** @attr Padding [AjBool] Pad to alignment boundary
**
******************************************************************************/

typedef struct AjSDomUserdata
{
    AjPStr  Buffer;
    AjPList Stack;
    AjBool  Cdata;
    AjBool  Padding;
} AjODomUserdata;

#define AjPDomUserdata AjODomUserdata*




#define AjPDomDocument AjPDomNode
#define AjPDomNodeMap AjPDomNodeList
#define AjPDomDocumentType AjPDomNode
#define AjPDomElement AjPDomNode
#define AjPDomText AjPDomNode
#define AjPDomCharacterData AjPDomNode
#define AjPDomDocumentFragment AjPDomNode
#define AjPDomCDATASection AjPDomNode
#define AjPDomComment AjPDomNode
#define AjPDomAttr AjPDomNode
#define AjPDomEntityReference AjPDomNode
#define AjPDomEntity AjPDomNode
#define AjPDomPi AjPDomNode
#define AjPDomNotation AjPDomNode




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPDomNode      ajDomDocumentCreateNode(AjPDomDocument doc,
                                        AjEDomNodeType nodetype);

AjPDomDocumentType ajDomImplementationCreateDocumentType(const AjPStr qualname,
                                                         const AjPStr publicid,
                                                         const AjPStr systemid);
AjPDomDocumentType ajDomImplementationCreateDocumentTypeC(const char *qualname,
                                                          const char *publicid,
                                                          const char *systemid);

AjPDomDocument  ajDomImplementationCreateDocument(const AjPStr uri,
                                                  const AjPStr qualname,
                                                  AjPDomDocumentType doctype);
AjPDomDocument  ajDomImplementationCreateDocumentC(const char *uri,
                                                   const char *qualname,
                                                   AjPDomDocumentType doctype);

ajint           ajDomNodeListGetLen(const AjPDomNodeList list);

AjPDomNodeEntry ajDomNodeListAppend(AjPDomNodeList list,
                                    AjPDomNode child);

AjPStr          ajDomElementGetAttribute(const AjPDomElement element,
                                         const AjPStr name);
AjPStr          ajDomElementGetAttributeC(const AjPDomElement element,
                                          const char *name);

void            ajDomElementSetAttribute(const AjPDomElement element,
                                         const AjPStr name,
                                         const AjPStr value);
void            ajDomElementSetAttributeC(const AjPDomElement element,
                                          const char *name,
                                          const char *value);
void            ajDomElementRemoveAttribute(AjPDomElement element,
                                            const AjPStr name);
void            ajDomElementRemoveAttributeC(AjPDomElement element,
                                             const char *name);

AjPDomNode      ajDomElementRemoveAttributeNode(AjPDomElement element,
                                                AjPDomNode oldattr);
AjPDomNode      ajDomElementGetAttributeNode(const AjPDomElement element,
                                             const AjPStr name);
AjPDomNode      ajDomElementGetAttributeNodeC(const AjPDomElement element,
                                              const char *name);

AjPDomNode      ajDomElementSetAttributeNode(AjPDomElement element,
                                             AjPDomNode newattr);
AjPDomNodeList  ajDomElementGetElementsByTagName(AjPDomElement element,
                                                 const AjPStr name);
AjPDomNodeList  ajDomElementGetElementsByTagNameC(AjPDomElement element,
                                                  const char *name);

void            ajDomElementNormalise(AjPDomElement element);
AjPStr          ajDomCharacterDataSubstringData(const AjPDomCharacterData data,
                                                ajint offset, ajint count);
void            ajDomCharacterDataAppendData(AjPDomCharacterData data,
                                             const AjPStr arg);
void            ajDomCharacterDataAppendDataC(AjPDomCharacterData data,
                                              const char *arg);
void            ajDomCharacterDataInsertData(AjPDomCharacterData data,
                                             ajint offset, const AjPStr arg);
void            ajDomCharacterDataInsertDataC(AjPDomCharacterData data,
                                              ajint offset, const char *arg);

void            ajDomCharacterDataDeleteData(AjPDomCharacterData data,
                                             ajint offset, ajint count);
void            ajDomCharacterDataReplaceData(AjPDomCharacterData data,
                                              ajint offset, ajint count,
                                              const AjPStr arg);
void            ajDomCharacterDataReplaceDataC(AjPDomCharacterData data,
                                               ajint offset, ajint count,
                                               const char *arg);

ajint           ajDomCharacterDataGetLength(const AjPDomCharacterData data);
AjPDomText      ajDomTextSplitText(AjPDomText text, ajint offset);
AjPDomElement   ajDomDocumentCreateElement(AjPDomDocument doc,
                                           const AjPStr tagname);
AjPDomElement   ajDomDocumentCreateElementC(AjPDomDocument doc,
                                            const char *tagname);

AjPDomDocumentFragment ajDomDocumentCreateDocumentFragment(AjPDomDocument doc);

AjPDomText      ajDomDocumentCreateTextNode(AjPDomDocument doc,
                                            const AjPStr data);
AjPDomText      ajDomDocumentCreateTextNodeC(AjPDomDocument doc,
                                             const char *data);

AjPDomComment   ajDomDocumentCreateComment(AjPDomDocument doc,
                                           const AjPStr data);
AjPDomComment   ajDomDocumentCreateCommentC(AjPDomDocument doc,
                                            const char *data);

AjPDomCDATASection ajDomDocumentCreateCDATASection(AjPDomDocument doc,
                                                   const AjPStr data);
AjPDomCDATASection ajDomDocumentCreateCDATASectionC(AjPDomDocument doc,
                                                    const char *data);

AjPDomAttr      ajDomDocumentCreateAttribute(AjPDomDocument doc,
                                             const AjPStr name);
AjPDomAttr      ajDomDocumentCreateAttributeC(AjPDomDocument doc,
                                              const char *name);

AjPDomEntityReference ajDomDocumentCreateEntityReference(AjPDomDocument doc,
                                                         const AjPStr name);
AjPDomEntityReference ajDomDocumentCreateEntityReferenceC(AjPDomDocument doc,
                                                          const char *name);

AjPDomPi        ajDomDocumentCreateProcessingInstruction(AjPDomDocument doc,
                                                         const AjPStr target,
                                                         const AjPStr data);
AjPDomPi        ajDomDocumentCreateProcessingInstructionC(AjPDomDocument doc,
                                                          const char *target,
                                                          const char *data);



AjPDomNodeList  ajDomDocumentGetElementsByTagName(AjPDomDocument doc,
                                                  const AjPStr name);
AjPDomNodeList  ajDomDocumentGetElementsByTagNameC(AjPDomDocument doc,
                                                   const char *name);

AjPDomDocumentType ajDomDocumentGetDoctype(const AjPDomDocument doc);
AjPDomElement   ajDomDocumentGetDocumentElement(const AjPDomDocument doc);

AjPDomNode      ajDomNodeAppendChild(AjPDomNode node,
                                     AjPDomNode extrachild);
AjPDomNode      ajDomNodeInsertBefore(AjPDomNode node, AjPDomNode newchild,
                                      AjPDomNode refchild);
AjPDomNode      ajDomRemoveChild(AjPDomNode node, AjPDomNode child);
void            ajDomDocumentDestroyNode(AjPDomDocument doc,
                                         AjPDomNode *Pnode);
void            ajDomDocumentDestroyNodeList(AjPDomDocument doc,
                                             AjPDomNodeList *Plist,
                                             AjBool donodes);
AjPDomNode      ajDomNodeReplaceChild(AjPDomNode node, AjPDomNode newchild,
                                      AjPDomNode oldchild);
AjPDomNode      ajDomNodeCloneNode(AjPDomNode node, AjBool deep);
AjPDomNode      ajDomNodeListItem(const AjPDomNodeList list, ajint indexnum);
AjBool          ajDomNodeListExists(AjPDomNodeList list,
                                    const AjPDomNode child);
AjPDomNodeEntry ajDomNodeListRemove(AjPDomNodeList list, AjPDomNode child);
AjPDomNodeList  ajDomCreateNodeList(AjPDomDocument doc);

AjPDomNode      ajDomNodeMapGetItem(const AjPDomNodeMap map,
                                    const AjPStr name);
AjPDomNode      ajDomNodeMapGetItemC(const AjPDomNodeMap map,
                                     const char *name);
AjPDomNode      ajDomNodeMapSetItem(AjPDomNodeMap map, AjPDomNode arg);

AjPDomNode      ajDomNodeMapRemoveItem(AjPDomNodeMap map,
                                       const AjPStr name);
AjPDomNode      ajDomNodeMapRemoveItemC(AjPDomNodeMap map,
                                        const char *name);
AjPDomNode      ajDomNodeMapItem(const AjPDomNodeMap map, ajint indexnum);

AjPDomNodeEntry ajDomNodeListInsert(AjPDomNodeList list, AjPDomNode newchild,
                                    AjPDomNode refchild);
AjPDomNodeEntry ajDomNodeListReplace(AjPDomNodeList list, AjPDomNode newchild,
                                     AjPDomNode oldchild);

AjBool          ajDomNodeHasChildNodes(const AjPDomNode node);


ajint           ajDomWrite(const AjPDomDocument node, AjPFile outf);
ajint           ajDomWriteIndent(const AjPDomDocument node, AjPFile outf,
                                 ajint indent);



void            ajDomPrintNode(const AjPDomNode node, ajint indent);
void            ajDomPrintNode2(const AjPDomNode node);
void            ajDomNodePrintNode(const AjPDomNode node);


ajint           ajDomReadFp(AjPDomDocument node, FILE *stream);
ajint           ajDomReadFilebuff(AjPDomDocument node, AjPFilebuff buff);
ajint           ajDomReadFilebuffText(AjPDomDocument node, AjPFilebuff buff,
                                      AjBool dotext, AjPStr *Pstr);
ajint           ajDomReadString(AjPDomDocument node, AjPStr str);

AjPStr          ajDomTextGetText(AjPDomText text);
AjPStr          ajDomElementGetText(AjPDomElement element);

AjPDomElement   ajDomElementGetNthChildByTagNameC(AjPDomDocument doc,
                                                  AjPDomElement element,
                                                  const char *name,
                                                  ajint n);

AjPDomElement   ajDomElementGetFirstChildByTagNameC(AjPDomDocument doc,
                                                    AjPDomElement element,
                                                    const char *name);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJDOM_H */

ajdomain.h/     1414437288  1010  513   100644  17174     `
/* @include ajdomain **********************************************************
**
** AJAX objects for handling protein domain data.
** Scop, Cath and Domain objects.
**
** @author: Copyright (C) 2004 Jon Ison (jison@hgmp.mrc.ac.uk)
** @version $Revision: 1.26 $
** @modified $Date: 2012/04/12 20:36:39 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJDOMAIN_H
#define AJDOMAIN_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajfile.h"
#include "ajpdb.h"
#include "ajreg.h"
#include "ajseqwrite.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum AjEDomainType ********************************************************
**
** AJAX Domain Type enumeration
**
** @value ajEDomainTypeNULL NULL
** @value ajEDomainTypeCATH CATH
** @value ajEDomainTypeSCOP SCOP
** @@
******************************************************************************/

typedef enum AjODomainType
{
    ajEDomainTypeNULL,
    ajEDomainTypeCATH,
    ajEDomainTypeSCOP
} AjEDomainType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPScop **************************************************************
**
** AJAX SCOP object
**
** Holds SCOP database data
**
** @alias AjSScop
** @alias AjOScop
**
** @attr Entry [AjPStr] Domain identifier code
** @attr Pdb [AjPStr] Corresponding pdb identifier code
** @attr Class [AjPStr] SCOP class name as an AjPStr
** @attr Fold [AjPStr] SCOP fold  name as an AjPStr
** @attr Superfamily [AjPStr]  SCOP superfamily name as an AjPStr
** @attr Family [AjPStr] SCOP family name as an AjPStr
** @attr Domain [AjPStr] SCOP domain name as an AjPStr
** @attr Source [AjPStr] SCOP source (species) as an AjPStr
** @attr Chain [char*] Chain identifiers
** @attr Start [AjPStr*] PDB residue number of first residue in domain
** @attr End [AjPStr*] PDB residue number of last residue in domain
** @attr Sse [AjPStr] Secondary structure element map
** @attr Sss [AjPStr] Secondary structure element string
** @attr Number [ajuint] Number of chains from which this domain is comprised
** @attr Sunid_Class [ajint] SCOP sunid for class
** @attr Sunid_Fold [ajint] SCOP sunid for fold
** @attr Sunid_Superfamily [ajint] SCOP sunid for superfamily
** @attr Sunid_Family [ajint] SCOP sunid for family
** @attr Sunid_Domain [ajint] SCOP sunid for domain
** @attr Sunid_Source [ajint] SCOP sunid for species
** @attr Sunid_Domdat [ajint] SCOP sunid for domain data
**
** @attr Acc [AjPStr] Accession number of sequence entry
** @attr Spr [AjPStr] Swissprot code of sequence entry
** @attr SeqPdb [AjPStr] Sequence (from PDB) as string
** @attr SeqSpr [AjPStr] Sequence (from swissprot) as string
** @attr Startd [ajint] Start of sequence relative to full
** length swissprot sequence
** @attr Endd [ajint] End of sequence relative to full length
** swissprot sequence
** @attr Score [float] Used by misc. algorithms for scoring the domain
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new    ajScopNew Scop default constructor
** @new    ajScopReadNew Scop constructor from reading DCF format file
** @new    ajScopReadCNew Scop constructor from reading DCF format file
** @delete ajScopDel Default Scop destructor
** @assign ajScopCopy Replicates a Scop object
** @use    ajScopMatchSunid Sort Scop objects by Sunid_Family element
** @use    ajScopMatchScopid Sort Scop objects by Entry element
** @use    ajScopMatchPdbId Sort Scop objects by Pdb element
** @use    embScopToPdbid  Read a scop identifier code and writes the
**         equivalent PDB identifier code
** @use    embScopToSp  Read a scop identifier code and writes the
**         equivalent swissprot identifier code
** @use    embScopToAcc  Read a scop identifier code and writes the
**         equivalent accession number
** @use    ajScopArrFindScopid Binary search for Entry element over array
**         of Scop objects
** @use    ajScopArrFindSunid Binary search for Sunid_Family element over
**         array of Scop objects
** @use    ajScopArrFindPdbid Binary search for Pdb element over array of
**         Scop objects
** @new    ajScopReadAllNew Construct list of Scop objects from reading DCF
**         format file
** @new  ajScopReadAllRawNew Construct list of Scop objects from reading
**         raw SCOP parsable files
** @output ajScopWrite Write Scop object to DCF format file
** @output ajPdbWriteDomain Writes a CCF format file for a SCOP domain
** @output ajPdbWriteDomainRaw Writes a PDB-format file for a SCOP domain
** @output ajPdbWriteDomainRecordRaw Writes lines to a PDB format file for
**         a domain
** @@
******************************************************************************/

typedef struct AjSScop
{
    AjPStr Entry;
    AjPStr Pdb;
    AjPStr Class;
    AjPStr Fold;
    AjPStr Superfamily;
    AjPStr Family;
    AjPStr Domain;
    AjPStr Source;

    char   *Chain;
    AjPStr *Start;
    AjPStr *End;

    AjPStr Sse;
    AjPStr Sss;

    ajuint Number;

    ajint Sunid_Class;
    ajint Sunid_Fold;
    ajint Sunid_Superfamily;
    ajint Sunid_Family;
    ajint Sunid_Domain;
    ajint Sunid_Source;
    ajint Sunid_Domdat;

    AjPStr Acc;
    AjPStr Spr;
    AjPStr SeqPdb;
    AjPStr SeqSpr;
    ajint Startd;
    ajint Endd;

    float Score;
    char Padding[4];
} AjOScop;

#define AjPScop AjOScop*




/* @data AjPCath **************************************************************
**
** Ajax cath object
**
** Holds cath database data
**
** AjPScop is implemented as a pointer to a C data structure.
**
**
**
** @alias AjSCath
** @alias AjOCath
**
**
**
** @attr DomainID       [AjPStr]  Domain identifier code
** @attr Pdb            [AjPStr]  Corresponding PDB identifier code
** @attr Class          [AjPStr]  CATH class name as an AjPStr
** @attr Architecture   [AjPStr]  CATH architecture name as an AjPStr
** @attr Topology       [AjPStr]  CATH topology name as an AjPStr
** @attr Superfamily    [AjPStr]  CATH homologous superfamily name as an AjPStr
** @attr Length         [ajint]   No. of residues in domain
** @attr NSegment       [ajuint]  Number of chain segments domain is comprised of
** @attr Start          [AjPStr*] PDB residue number of 1st residue in segment
** @attr End            [AjPStr*] PDB residue number of last residue in segment
** @attr Class_Id       [ajint]   CATH class no. as an ajint
** @attr Arch_Id        [ajint]   CATH architecture no.as an ajint
** @attr Topology_Id    [ajint]   CATH topology no. as an ajint
** @attr Superfamily_Id [ajint]   CATH superfamily no. as an ajint
** @attr Family_Id      [ajint]   CATH family no. as an ajint
** @attr NIFamily_Id    [ajint]   CATH near identical family no. as an ajint
**
** @attr Acc                [AjPStr]  Accession number of sequence entry.
** @attr Spr                [AjPStr]  Swissprot code of sequence entry.
** @attr SeqPdb             [AjPStr]  Sequence (from PDB) as string.
** @attr SeqSpr             [AjPStr]  Sequence (from swissprot) as string.
** @attr IFamily_Id     [ajint]   CATH identical family no. as an ajint
**
** @attr Startd             [ajint]   Start of sequence relative to full
**                                    length swissprot sequence.
** @attr Endd               [ajint]   End of sequence relative to full length
**                                    swissprot sequence.
** @attr Chain              [char]    Chain identifier
** @attr Padding            [char[3]] Padding to alignment boundary
**
**
** @new    ajCathNew Default Cath constructor
** @new    ajCathReadCNew Cath constructor from reading DCF format file.
** @new    ajCathReadNew Cath constructor from reading DCF format file.
** @delete ajCathDel Default Cath destructor
** @assign ajCathCopy Replicates a Scop object.
** @use    ajCathArrFindPdbid Binary search for Pdb element over array of
**         Cath objects.
** @use    ajCathMatchPdbId Sort Cath objects by Pdb element.
** @new    ajCathReadAllNew Construct list of Cath objects from reading DCF
**         format file.
** @new    ajCathReadAllRawNew Construct list of Cath objects from reading
**         raw CATH parsable files.
** @other  ajCathWrite Write Cath object to DCF format file.
**
** @@
******************************************************************************/

typedef struct AjSCath
{
    AjPStr  DomainID;
    AjPStr  Pdb;
    AjPStr  Class;
    AjPStr  Architecture;
    AjPStr  Topology;
    AjPStr  Superfamily;

    ajint   Length;

    ajuint  NSegment;
    AjPStr *Start;
    AjPStr *End;

    ajint   Class_Id;
    ajint   Arch_Id;
    ajint   Topology_Id;
    ajint   Superfamily_Id;
    ajint   Family_Id;
    ajint   NIFamily_Id;

    AjPStr Acc;
    AjPStr Spr;
    AjPStr SeqPdb;
    AjPStr SeqSpr;
    ajint  IFamily_Id;
    ajint  Startd;
    ajint  Endd;
    char   Chain;
    char   Padding[3];
} AjOCath;

#define AjPCath AjOCath*




/* @data AjPDomain ************************************************************
**
** Ajax Domain object.
**
** Holds an entry from a DCF file (domain classification file)
**
** AjPDomain is implemented as a pointer to a C data structure.
**
** @alias AjSDomain
** @alias AjODomain
**
** @attr Scop    [AjPScop] Scop object pointer.
** @attr Cath    [AjPCath] Cath object pointer.
** @attr Type    [AjEDomainType] AJAX Domain Type enumeration
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new    ajDomainNew Default Domain constructor.
** @new    ajDomainReadNew Domain constructor from reading DCF format file.
** @new    ajDomainReadCNew Domain constructor from reading DCF format file.
** @new    ajDomainReadAllNew Construct list of Domain objects from reading DCF
**         format file.
** @delete ajDomainDel Default Domain destructor.
** @output ajDomainWrite Write Domain object to DCF format file.
** @other  ajDomainDCFType Ascertains type of domains (ajEDomainTypeSCOP
**         or ajEDomainTypeCATH) in a DCF file.
** @assign ajDomainCopy Replicates a Domain object.
** @cast   ajDomainGetId Returns domain id, either DomainID element
**                      (Cath object) or Entry (Scop object).
** @cast   ajDomainGetSeqPdb Returns the PDB sequence from a Domain object.
** @cast   ajDomainGetSeqSpr Returns the swissprot sequence from a
**                           Domain object.
** @cast   ajDomainGetPdb Returns the PDB identifier code corresponding to the
**                        domain
** @cast   ajDomainGetAcc Returns the accession number corresponding to the
**                        domain.
** @cast   ajDomainGetSpr Returns the swissprot code corresponding to the
**                        domain.
** @cast   ajDomainGetN  Returns no. chains or chain segments in a domain,
** either NSegment element (Cath domains) or N element (Scop domains).
** @@
******************************************************************************/

typedef struct AjSDomain
{
    AjPScop Scop;
    AjPCath Cath;
    AjEDomainType Type;
    char Padding[4];
} AjODomain;

#define AjPDomain AjODomain*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/* ======================================================================= */
/* =========================== Scop object =============================== */
/* ======================================================================= */

void     ajDomainDummyFunction(void);
AjPScop  ajScopNew(ajuint n);
void     ajScopDel(AjPScop *Pscop);
AjBool   ajScopCopy(AjPScop *Pto, const AjPScop from);

ajint    ajScopArrFindScopid(AjPScop const *array, ajint size,
                             const AjPStr identifier);
ajint    ajScopArrFindSunid(AjPScop const *array, ajint size,
                            ajint identifier);
ajint    ajScopArrFindPdbid(AjPScop const *array, ajint size,
                            const AjPStr identifier);

ajint    ajScopMatchScopid(const void *item1, const void *item2);
ajint    ajScopMatchPdbId(const void *item1, const void *item2);
ajint    ajScopMatchSunid(const void *item1, const void *item2);

AjPScop  ajScopReadCNew(AjPFile inf, const char *entry);
AjPScop  ajScopReadNew(AjPFile inf, const AjPStr entry);
AjPList  ajScopReadAllNew(AjPFile inf);
AjPList  ajScopReadAllRawNew(AjPFile claf, AjPFile desf, AjBool omit);
AjBool   ajScopWrite(AjPFile outf, const AjPScop scop);

AjBool   ajPdbWriteDomain(AjPFile outf, const AjPPdb pdb,
                          const AjPScop scop, AjPFile errf);




/* ======================================================================= */
/* =========================== Cath object =============================== */
/* ======================================================================= */

AjPCath   ajCathNew(ajuint n);
void      ajCathDel(AjPCath *Pcath);
AjBool    ajCathCopy(AjPCath *Pto, const AjPCath from);

ajint     ajCathArrFindPdbid(AjPCath const *array, ajint size,
                             const AjPStr identifier);
ajint     ajCathMatchPdbId(const void *item1, const void *item2);

AjPCath   ajCathReadCNew(AjPFile inf, const char *entry);
AjPCath   ajCathReadNew(AjPFile inf, const AjPStr entry);
AjPList   ajCathReadAllNew(AjPFile inf);
AjPList   ajCathReadAllRawNew(AjPFile cathf, AjPFile domf,
                              AjPFile namesf, AjPFile flog);
AjBool    ajCathWrite(AjPFile outf, const AjPCath cath);




/* ======================================================================= */
/* =========================== Domain object ============================= */
/* ======================================================================= */

AjPDomain       ajDomainNew(ajuint n, AjEDomainType type);
AjPDomain       ajDomainReadNew(AjPFile inf, const AjPStr entry);
AjPDomain       ajDomainReadCNew(AjPFile inf, const char *entry,
                                 AjEDomainType type);
AjPList         ajDomainReadAllNew(AjPFile inf);
void            ajDomainDel(AjPDomain *Pdomain);
AjBool          ajDomainWrite(AjPFile outf, const AjPDomain domain);
AjEDomainType   ajDomainDCFType(AjPFile inf);
AjBool          ajDomainCopy(AjPDomain *Pto, const AjPDomain from);

AjPStr          ajDomainGetId(const AjPDomain domain);
AjPStr          ajDomainGetSeqPdb(const AjPDomain domain);
AjPStr          ajDomainGetSeqSpr(const AjPDomain domain);
AjPStr          ajDomainGetPdb(const AjPDomain domain);
AjPStr          ajDomainGetAcc(const AjPDomain domain);
AjPStr          ajDomainGetSpr(const AjPDomain domain);
ajint           ajDomainGetN(const AjPDomain domain);

void ajDomainExit(void);

/*
** End of prototype definitions
*/




/******************************************************************************
 **
 ** Macros for returning elements from an instance of a
 **
 ** Domain object
 **
 ******************************************************************************/

#define DOMAIN_S_Entry(ptr) ptr->Scop->Entry
#define DOMAIN_S_Pdb(ptr) ptr->Scop->Pdb
#define DOMAIN_S_Class(ptr) ptr->Scop->Class
#define DOMAIN_S_Fold(ptr) ptr->Scop->Fold
#define DOMAIN_S_Superfamily(ptr) ptr->Scop->Superfamily
#define DOMAIN_S_Family(ptr) ptr->Scop->Family
#define DOMAIN_S_Sunid_Class(ptr) ptr->Scop->Sunid_Class
#define DOMAIN_S_Sunid_Fold(ptr) ptr->Scop->Sunid_Fold
#define DOMAIN_S_Sunid_Superfamily(ptr) ptr->Scop->Sunid_Superfamily
#define DOMAIN_S_Sunid_Family(ptr) ptr->Scop->Sunid_Family
#define DOMAIN_S_Acc(ptr) ptr->Scop->Acc
#define DOMAIN_S_Spr(ptr) ptr->Scop->Spr
#define DOMAIN_S_SeqPdb(ptr) ptr->Scop->SeqPdb
#define DOMAIN_S_SeqSpr(ptr) ptr->Scop->SeqSpr
/* #define DOMAIN_S_(ptr) ptr->Scop-> */




AJ_END_DECLS

#endif /* !AJDOMAIN_H */
ajexcept.h/     1414437288  1010  513   100644  5400      `
/* @include ajexcept **********************************************************
**
** AJAX exception handling functions
**
** These functions control exception handling
**
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.13 $
** @modified Dec 31 pmr First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJEXCEPT_H
#define AJEXCEPT_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

#include <setjmp.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data Except_T *************************************************************
**
** Exception data structure
**
** @attr reason [const char*] Reason for the exception
** @@
******************************************************************************/

typedef struct Except_T
{
    const char *reason;
} Except_T;




/* @data Except_Frame *********************************************************
**
** Exception frame data structure
**
** @attr env [jmp_buf] Environment jump buffer
** @attr prev [struct Except_Frame*] Previous exception if any
** @attr file [const char*] source filename usually from __FILE__
** @attr exception [const Except_T*] Exception data (reason)
** @attr line [ajint] source line number usually from __LINE__
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct Except_Frame
{
    jmp_buf env;
    struct Except_Frame *prev;
    const char *file;
    const Except_T *exception;
    ajint line;
    char Padding[4];
} Except_Frame;

enum { Except_entered=0, Except_raised,
       Except_handled,   Except_finalized };
extern Except_Frame *Except_stack;


extern const Except_T Assert_Failed;




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void ajExceptRaise(const Except_T *e, const char *file, ajint line);

/*
** End of prototype definitions
*/




#define AJRAISE(e) ajExceptRaise(&(e), __FILE__, __LINE__)
#define AJRERAISE ajExceptRaise(Except_frame.exception,                 \
                                Except_frame.file, Except_frame.line)
#define AJRETURN switch (Except_stack = Except_stack->prev,0) default: return
#define AJTRY do {                              \
    volatile ajint Except_flag;                 \
    Except_Frame Except_frame;                  \
    Except_frame.prev = Except_stack;           \
    Except_stack = &Except_frame;               \
    Except_flag = setjmp(Except_frame.env);     \
    if (Except_flag == Except_entered) {
#define AJEXCEPT(e)                                                     \
    if (Except_flag == Except_entered) Except_stack = Except_stack->prev; \
    } else if (Except_frame.exception == &(e)) {                        \
    Except_flag = Except_handled;
#define ELSE                                                            \
    if (Except_flag == Except_entered) Except_stack = Except_stack->prev; \
    } else {                                                            \
    Except_flag = Except_handled;
#define FINALLY                                                         \
    if (Except_flag == Except_entered) Except_stack = Except_stack->prev; \
    } {                                                                 \
    if (Except_flag == Except_entered)                                  \
        Except_flag = Except_finalized;
#define END_TRY                                                         \
    if (Except_flag == Except_entered) Except_stack = Except_stack->prev; \
    } if (Except_flag == Except_raised) AJRERAISE;                      \
    } while (0)
#undef T




AJ_END_DECLS

#endif  /* !AJEXCEPT_H */
ajfeat.h/       1414437288  1010  513   100644  19900     `
/* @include ajfeat ************************************************************
**
** A genome feature (in AJAX program context) is a description of a
** genomic entity which was determined by some 'source' analysis
** (which may be of 'wet lab' experimental or 'in silico'
** computational nature), has a 'primary' descriptor ('Primary_Tag'),
** may have some 'score' asserting the level of analysis confidence in
** its identity (e.g. log likelihood relative to a null hypothesis or
** other similar entity), has a 'Position' in the genome, and may have
** any arbitrary number of descriptor tags associated with it.
**
** @author Copyright (C) 1999 Richard Bruskiewich
** @version $Revision: 1.80 $
** @modified 2000 Ian Longden.
** @modified 2001 Peter Rice.
** @modified $Date: 2013/06/29 22:31:59 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
******************************************************************************/

#ifndef AJFEAT_H
#define AJFEAT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajexcept.h"
#include "ajmem.h"
#include "ajreg.h"
#include "ajstr.h"
#include "ajtagval.h"
#include "ajfile.h"
#include "ajtime.h"
#include "ajfmt.h"
#include "ajfeatdata.h"
#include "ajseqdata.h"
#include <stdlib.h>
#include <stdio.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

ajint          ajFeatCompByEnd(const void *a, const void *b);
ajint          ajFeatCompByGroup(const void *a, const void *b);
ajint          ajFeatCompByStart(const void *a, const void *b);
ajint          ajFeatCompByType(const void *a, const void *b);

const AjPTable ajFeatVocabGetTags(const char* name);
const AjPTable ajFeatVocabGetTagsNuc(const char* name);
const AjPTable ajFeatVocabGetTagsProt(const char* name);
const AjPTable ajFeatVocabGetTypes(const char* name);
const AjPTable ajFeatVocabGetTypesNuc(const char* name);
const AjPTable ajFeatVocabGetTypesProt(const char* name);
const AjPTable ajFeatVocabInit(const char* name);
const AjPTable ajFeatVocabInitNuc(const char* name);
const AjPTable ajFeatVocabInitProt(const char* name);
AjPFeature    ajFeatNewFeat(const AjPFeature orig);
void          ajFeatDel(AjPFeature *pthis);
void          ajFeatExit(void);
ajuint        ajFeatGetEnd(const AjPFeature thys);
char          ajFeatframeGetFrame(ajint frame);
char          ajFeatframeGetFrameNuc(ajint frame);
char          ajFeatstrandGetStrand(ajint strand);
AjBool        ajFeatGetForward(const AjPFeature thys);
ajint         ajFeatGetFrame(const AjPFeature thys);
ajuint        ajFeatGetLength(const AjPFeature thys);
AjBool        ajFeatGetNoteC(const AjPFeature thys, const char* name,
                             AjPStr* val);
AjBool        ajFeatGetNoteCI(const AjPFeature thys, const char* name,
                              ajint count, AjPStr* val);
AjBool        ajFeatGetNoteSI(const AjPFeature thys, const AjPStr name,
                              ajint count, AjPStr* val);
AjBool        ajFeatGetNoteS(const AjPFeature thys, const AjPStr name,
                             AjPStr* val);
AjBool        ajFeatGetRemoteseq(const AjPFeature thys, const AjPStr usa,
                                 AjPSeq seq);
float         ajFeatGetScore(const AjPFeature thys);
AjBool        ajFeatGetScorerange(const AjPFeature thys,
                                  float *minscore, float *maxscore);
const AjPStr  ajFeatGetSubtype(const AjPFeature thys);
const AjPStr  ajFeatGetSource(const AjPFeature thys);
AjBool        ajFeatGetFlags(const AjPFeature thys,  AjPStr* Pflagstr);
AjBool        ajFeatGetSeq(const AjPFeature feat,
                           const AjPSeq seq, AjPStr* seqstr);
AjBool        ajFeatGetSeqJoin(const AjPFeature thys,
                               const AjPSeq seq, AjPStr* Pseqstr);
ajuint        ajFeatGetStart(const AjPFeature thys);
char          ajFeatGetStrand(const AjPFeature thys);
AjBool        ajFeatGetTagC(const AjPFeature thys, const char* tname,
                            ajint num, AjPStr* val);
AjBool        ajFeatGetTagS(const AjPFeature thys, const AjPStr name,
                            ajint num, AjPStr* val);
AjBool        ajFeatGetTranslation(const AjPFeature feat, AjPStr* seqstr);
const AjPStr  ajFeatGetType(const AjPFeature thys);
AjBool        ajFeatGetXrefs(const AjPFeature thys, AjPList *Pxreflist);
AjBool        ajFeatIsCompMult(const AjPFeature gf);
AjBool        ajFeatIsLocal(const AjPFeature gf);
AjBool        ajFeatIsLocalRange(const AjPFeature gf,
                                 ajuint start, ajuint end);
AjBool        ajFeatIsMultiple(const AjPFeature gf);
AjBool        ajFeatLocMark(const AjPFeature thys, const AjPFeattable table,
                            AjPStr* Pseqstr);
AjPFeature    ajFeatNew(AjPFeattable thys,
                        const AjPStr source, const AjPStr type,
                        ajint Start, ajint End, float score,
                        char strand, ajint frame);
AjPFeature    ajFeatNewII(AjPFeattable thys,
                          ajint Start, ajint End);
AjPFeature    ajFeatNewIIRev(AjPFeattable thys,
                             ajint Start, ajint End);
AjPFeature    ajFeatNewBetween(AjPFeattable thys,
                               ajint Start);
AjPFeature   ajFeatNewNuc(AjPFeattable thys,
                          const AjPStr source, const AjPStr type,
                          ajint Start, ajint End,
                          float score, char  strand,
                          ajint frame, ajint exon,
                          ajint Start2, ajint End2,
                          const AjPStr entryid,  const AjPStr label);
AjPFeature   ajFeatNewNucFlags(AjPFeattable thys,
                               const AjPStr source, const AjPStr type,
                               ajint Start, ajint End,
                               float score, char  strand,
                               ajint frame, ajint exon,
                               ajint Start2, ajint End2,
                               const AjPStr entryid,  const AjPStr label,
                               ajuint flags);
AjPFeature    ajFeatNewProt(AjPFeattable thys,
                            const AjPStr source, const AjPStr type,
                            ajint Start, ajint End,
                            float score);
AjPFeature    ajFeatNewProtFlags(AjPFeattable thys,
                                 const AjPStr source, const AjPStr type,
                                 ajint Start, ajint End,
                                 float score,
                                 ajuint flags);
AjPFeature    ajFeatNewSub(AjPFeattable thys, AjPFeature parent,
                           const AjPStr source, const AjPStr type,
                           ajint Start, ajint End, float score,
                           char strand, ajint frame);
AjPFeature    ajFeatNewIISub(AjPFeattable thys, AjPFeature parent,
                             ajint Start, ajint End);
AjPFeature    ajFeatNewIIRevSub(AjPFeattable thys, AjPFeature parent,
                                ajint Start, ajint End);
AjPFeature   ajFeatNewNucSub(AjPFeattable thys, AjPFeature parent,
                             const AjPStr source, const AjPStr type,
                             ajint Start, ajint End,
                             float score, char  strand,
                             ajint frame, ajint exon,
                             ajint Start2, ajint End2,
                             const AjPStr entryid,  const AjPStr label);
AjPFeature   ajFeatNewNucFlagsSub(AjPFeattable thys, AjPFeature parent,
                                  const AjPStr source, const AjPStr type,
                                  ajint Start, ajint End,
                                  float score, char  strand,
                                  ajint frame, ajint exon,
                                  ajint Start2, ajint End2,
                                  const AjPStr entryid,  const AjPStr label,
                                  ajuint flags);
AjPFeature    ajFeatNewProtSub(AjPFeattable thys, AjPFeature parent,
                               const AjPStr source, const AjPStr type,
                               ajint Start, ajint End,
                               float score);
AjPFeature    ajFeatNewProtFlagsSub(AjPFeattable thys, AjPFeature parent,
                                    const AjPStr source, const AjPStr type,
                                    ajint Start, ajint End,
                                    float score,
                                    ajuint flags);
void          ajFeatReverse(AjPFeature thys, ajint ilen);
void          ajFeatSetDesc(AjPFeature thys, const AjPStr desc);
void          ajFeatSetDescApp(AjPFeature thys, const AjPStr desc);
void          ajFeatSetScore(AjPFeature thys, float score);
void          ajFeatSetSource(AjPFeature thys, const AjPStr source);
void          ajFeatSetStrand(AjPFeature thys, AjBool rev);
void          ajFeatSortByEnd(AjPFeattable Feattab);
void          ajFeatSortByStart(AjPFeattable Feattab);
void          ajFeatSortByType(AjPFeattable Feattab);
void          ajFeattableAdd(AjPFeattable thys, AjPFeature feature);
void          ajFeattableAddNew(AjPFeattable thys, AjPFeature feature);
void          ajFeattableClear(AjPFeattable thys);
void          ajFeattableDel(AjPFeattable *pthis);
ajint         ajFeattableGetBegin(const AjPFeattable thys);
ajint         ajFeattableGetEnd(const AjPFeattable thys);
const AjPStr  ajFeattableGetEntry(const AjPFeattable thys);
ajint         ajFeattableGetLen(const AjPFeattable thys);
const AjPStr  ajFeattableGetName(const AjPFeattable thys);
const char*   ajFeattableGetQryC(const AjPFeattable ftable);
const AjPStr  ajFeattableGetQryS(const AjPFeattable ftable);
AjBool        ajFeattableGetScorerange(const AjPFeattable thys,
                                       float *minscore, float *maxscore);
ajuint        ajFeattableGetSize(const AjPFeattable thys);
const char*   ajFeattableGetTypeC(const AjPFeattable thys);
const AjPStr  ajFeattableGetTypeS(const AjPFeattable thys);
AjBool        ajFeattableGetXrefs(const AjPFeattable thys, AjPList *Pxreflist,
                                  ajuint *Ptaxid);
AjBool        ajFeattableIsCircular(const AjPFeattable thys);
AjBool        ajFeattableIsNuc(const AjPFeattable thys);
AjBool        ajFeattableIsProt(const AjPFeattable thys);
ajuint        ajFeattableMerge(AjPFeattable thys, const AjPFeattable srctable);
AjPFeattable  ajFeattableNew(const AjPStr name);
AjPFeattable  ajFeattableNewDna(const AjPStr name);
AjPFeattable  ajFeattableNewFtable(const AjPFeattable orig);
AjPFeattable  ajFeattableNewFtableLimit(const AjPFeattable orig, ajint limit);
AjPFeattable  ajFeattableNewProt(const AjPStr name);
AjPFeattable  ajFeattableNewSeq(const AjPSeq seq);
ajuint        ajFeattablePos(const AjPFeattable thys, ajint ipos);
ajuint        ajFeattablePosI(const AjPFeattable thys,
                              ajuint imin, ajint ipos);
ajuint        ajFeattablePosII(ajuint ilen, ajuint imin, ajint ipos);
void          ajFeattableReset(AjPFeattable thys, const AjPStr name);
void          ajFeattableReverse(AjPFeattable  thys);
void          ajFeattableSetCircular(AjPFeattable thys);
void          ajFeattableSetDefname(AjPFeattable thys, const AjPStr setname);
void          ajFeattableSetLength(AjPFeattable thys, ajuint len);
void          ajFeattableSetLinear(AjPFeattable thys);
void          ajFeattableSetNuc(AjPFeattable thys);
void          ajFeattableSetProt(AjPFeattable thys);
void          ajFeattableSetRange(AjPFeattable thys,
                                  ajint fbegin, ajint fend);
void          ajFeattableSetReverse(AjPFeattable thys);
void          ajFeattableTrace(const AjPFeattable thys);
AjBool        ajFeattableTrim(AjPFeattable thys);
AjBool        ajFeattableTrimOff(AjPFeattable thys,
                                 ajuint ioffset, ajuint ilen);
AjPFeatGfftags ajFeatGfftagsNew(void);
void           ajFeatGfftagsDel(AjPFeatGfftags*Pthys);
AjPFeatGfftags ajFeatGetGfftags(const AjPFeature thys);
void           ajFeatGfftagTrace(const AjPFeature thys);
const AjPStr   ajFeatGetId(const AjPFeature thys);
const AjPStr   ajFeatGetParent(const AjPFeature thys);

ajuint        ajFeatGfftagAddSS(AjPFeature thys,
                                const AjPStr tag, const AjPStr value);
ajuint        ajFeatGfftagAddCS(AjPFeature thys,
                                const char* tag, const AjPStr value);
AjBool        ajFeatGfftagAddTag(AjPFeature thys, const AjPTagval tagval);

AjBool        ajFeatTagAddSS(AjPFeature thys,
                             const AjPStr tag, const AjPStr value);
AjBool        ajFeatTagAddCS(AjPFeature thys,
                             const char* tag, const AjPStr value);
AjBool        ajFeatTagAddCC(AjPFeature thys,
                             const char* tag, const char* value);
AjBool        ajFeatTagAddTag(AjPFeature thys, const AjPTagval tagval);
AjIList       ajFeatSubIter(const AjPFeature thys);
AjIList       ajFeatTagIter(const AjPFeature thys);
AjBool        ajFeatTagSet(AjPFeature thys,
                           const AjPStr tag, const AjPStr value);
AjBool        ajFeatTagSetC(AjPFeature thys,
                            const char* tag, const AjPStr value);
void          ajFeatTagTrace(const AjPFeature thys);
AjBool        ajFeatTagval(AjIList iter, AjPStr* tagnam,
                           AjPStr* tagval);
void          ajFeatTest(void);
void          ajFeatTrace(const AjPFeature thys);
AjBool        ajFeatTrimOffRange(AjPFeature ft, ajuint ioffset,
                                 ajuint begin, ajuint end,
                                 AjBool dobegin, AjBool doend);
const AjPStr  ajFeatTypeGetCategory(const AjPStr type);
AjBool        ajFeatTypeIsCds(const AjPFeature gf);
AjBool        ajFeatTypeMatchC(const AjPFeature gf, const char* txt);
AjBool        ajFeatTypeMatchS(const AjPFeature gf, const AjPStr str);
AjBool        ajFeatTypeMatchWildS(const AjPFeature gf, const AjPStr str);
const AjPStr  ajFeatTypeNuc(const AjPStr type);
const AjPStr  ajFeatTypeProt(const AjPStr type);
AjBool        ajFeattagIsNote(const AjPStr tag);

void          ajFeatUnused(void);
void          ajFeatWarn(const char* fmt, ...);
const AjPStr  ajFeattypeGetExternal(const AjPStr type, const AjPTable table);
const AjPStr  ajFeattypeGetInternal(const AjPStr type);
const AjPStr  ajFeattypeGetInternalEmbl(const AjPStr type);
const AjPStr  ajFeattypeGetInternalNuc(const AjPStr type);
const AjPStr  ajFeattypeGetInternalPir(const AjPStr type);
const AjPStr  ajFeattypeGetInternalProt(const AjPStr type);
const AjPStr  ajFeattypeGetInternalRefseqp(const AjPStr type);
AjBool        ajFeattagSpecial(const AjPStr tag, AjPStr* pval);
AjBool        ajFeattagSpecialGff2(const AjPStr tag, AjPStr* pval);
AjBool        ajFeattagSpecialGff3(const AjPStr tag, AjPStr* pval);
void          ajFeattagFormat(const AjPStr name, const AjPTable table,
                              AjPStr* retstr);
const AjPStr  ajFeattagGetNameC(const char *tag, const AjPTable table,
                                AjBool* known);
const AjPStr  ajFeattagGetNameS(const AjPStr name, const AjPTable table,
                                AjBool* known);
void          ajFeattagGetLimit(const AjPStr name, const AjPTable table,
                                AjPStr* retstr);

/*
** End of prototype definitions
*/

/*
//#define       MAJFEATOBJVERIFY(p,c) ajFeatObjAssert((p), (c), \
//      __FILE__, __LINE__)
//#define       MAJFEATSETSCORE(p,s) (((AjPFeature)(p))->Score=(s))
//#define       MAJFEATSCORE(p)    ((p)->Score)
//#define       MAJFEATSOURCE(p)   ((p)->Source)
//#define       MAJFEATTYPE(p)     ((p)->Type)
//#define       MAJFEATTABSETVERSION(p,v) ((p)->Version=(v))
//#define       MAJFEATTABSETDATE(p,d)    ((p)->Date=(d))
//#define       MAJFEATTABDEFFORMAT(p,f)  ((p)->DefFormat=(f))
//#define       MAJFEATTABFORMAT(p)       ((p)->Format)
//#define       MAJFEATTABVERSION(p)      ((p)->Version)
//#define       MAJFEATTABDATE(p)         ((p)->Date)
//#define       MAJFEATTABDICTIONARY(p)   ((p)->Dictionary)
//#define       MAJFEATVOCABREADONLY(p,f) ((p)?(p)->ReadOnly=(f):AjTrue)
*/


#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjBool        ajFeatGetNoteI(const AjPFeature thys,
                                          const AjPStr name,
                                          ajint count, AjPStr* val);
__deprecated AjPFeature    ajFeatCopy(const AjPFeature orig);
__deprecated AjPFeattable  ajFeattableCopy(const AjPFeattable orig);
__deprecated AjPFeattable  ajFeattableCopyLimit(const AjPFeattable orig,
                                                ajint limit);
__deprecated AjPFeattable  ajFeatUfoRead(AjPFeattabIn tabin, const AjPStr Ufo);
__deprecated AjPFeattable  ajFeatRead(AjPFeattabIn ftin);
__deprecated ajint         ajFeattableBegin(const AjPFeattable thys);
__deprecated ajint         ajFeattableEnd(const AjPFeattable thys);
__deprecated ajint         ajFeattableLen(const AjPFeattable thys);
__deprecated ajint         ajFeattableSize(const AjPFeattable thys);
__deprecated void          ajFeatDefName(AjPFeattable thys,
                                         const AjPStr setname);
__deprecated AjBool        ajFeatGetNote(const AjPFeature thys,
                                         const AjPStr name, AjPStr* val);

__deprecated ajuint        ajFeatGfftagAdd(AjPFeature thys,
                                           const AjPStr tag,
                                           const AjPStr value);
__deprecated ajuint        ajFeatGfftagAddC(AjPFeature thys,
                                            const char* tag,
                                            const AjPStr value);

__deprecated AjBool        ajFeatTagAdd(AjPFeature thys,
                                        const AjPStr tag, const AjPStr value);
__deprecated AjBool        ajFeatTagAddC(AjPFeature thys,
                                         const char* tag, const AjPStr value);
__deprecated AjBool        ajFeatIsChild(const AjPFeature gf);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* AJFEAT_H */
ajfeatdata.h/   1414437288  1010  513   100644  16445     `
/* @include ajfeatdata ********************************************************
**
** AJAX feature data include file
**
** @author Copyright (C) 1999 Richard Bruskiewich
** @version $Revision: 1.35 $
** @modified 2000 Ian Longden.
** @modified 2001 Peter Rice.
** @modified $Date: 2013/06/29 22:31:59 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
******************************************************************************/

#ifndef AJFEATDATA_H
#define AJFEATDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define DEFAULT_GFF_VERSION 3

/*
** some featflag values are retained for reading in old output files
*/

#define AJFEATFLAG_START_BEFORE_SEQ 0x0001  /* <start */
#define AJFEATFLAG_END_AFTER_SEQ    0x0002  /* >end */
#define AJFEATFLAG_GENERATED        0x0004  /* generated for GFF3 */
#define AJFEATFLAG_BETWEEN_SEQ      0x0008  /* x^y */
#define AJFEATFLAG_START_TWO        0x0010  /* x.y.. */
#define AJFEATFLAG_END_TWO          0x0020  /* ..x.y */
#define AJFEATFLAG_POINT            0x0040  /* x */
#define AJFEATFLAG_COMPLEMENT_MAIN  0x0080  /* complement around the join */
#define AJFEATFLAG_MULTIPLE         0x0100  /* part of a multiple i.e. join*/
#define AJFEATFLAG_GROUP            0x0200  /* group */
#define AJFEATFLAG_ORDER            0x0400  /* order */
#define AJFEATFLAG_ONEOF            0x0800  /* one_of */
#define AJFEATFLAG_REMOTEID         0x1000  /* AB012345.6: */
#define AJFEATFLAG_LABEL            0x2000  /* label as location */
#define AJFEATFLAG_START_UNSURE     0x4000  /* unsure position: SwissProt '?' */
#define AJFEATFLAG_END_UNSURE       0x8000  /* unsure position: SwissProt '?' */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPFeattable *********************************************************
**
** Ajax data type for collecting AjPFeatures in a 'feature table'.
** The features themselves may be accessed via iteration methods.
**
** @alias AjSFeattable
** @alias AjOFeattable
**
** @new    ajFeattableNew        Constructor
** @delete ajFeattableDel        Default destructor
** @modify ajFeattableAdd        Adds an AjPFeature to a set
** @new    ajFeatRead            Reads in a feature set in a specified format
**
** @attr Seqid [AjPStr] Sequence name
** @attr Type [AjPStr] Sequence type: P or N
** @attr Features [AjPList] List of AjPFeatures...
** @attr Groups [ajuint] Maximum group number
** @attr Start [ajuint] First position used (like sequence begin)
** @attr End [ajuint] Last position used (like sequence end)
** @attr Len [ajuint] Maximum length
** @attr Offset [ajuint] Offset when trimmed
** @attr Rev [AjBool] reversed if true
** @attr Reversed  [AjBool] true: has been reverse-complemented
** @attr Trimmed   [AjBool] true: has been trimmed
** @attr Db [AjPStr] Database name from input
** @attr Setdb [AjPStr] Database name from command line
** @attr Full [AjPStr] Full name
** @attr Qry [AjPStr] UFO query for re-reading
** @attr Formatstr [AjPStr] Input format name
** @attr Filename [AjPStr] Original filename
** @attr TextPtr [AjPStr] Full text
** @attr Fpos [ajlong] File position (fseek) for Query
** @attr Format [AjEnum] Input format enum
** @attr Circular [AjBool] true: circular nucleotide molecule
** @@
******************************************************************************/

typedef struct AjSFeattable
{
    AjPStr  Seqid;
    AjPStr  Type;
    AjPList Features;
    ajuint  Groups;
    ajuint  Start;
    ajuint  End;
    ajuint  Len;
    ajuint  Offset;
    AjBool  Rev;
    AjBool  Reversed;
    AjBool  Trimmed;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr  TextPtr;
    ajlong  Fpos;
    AjEnum  Format;
    AjBool Circular;
}  AjOFeattable;

#define AjPFeattable AjOFeattable*




/* @data AjPFeattabin *********************************************************
**
** Ajax class for feature table input
**
** @alias AjSFeattabin
** @alias AjOFeattabin
** @alias AjPFeattabIn
**
** @new    ajFeattabinNew Constructor
** @new    ajFeattabinNewSS Constructor with format, name and type
** @new    ajFeattabinNewSSF Constructor with format, name, type and input file
** @delete ajFeattabinDel Destructor
**
** @attr Input     [AjPTextin] Text file input object
** @attr Ufo [AjPStr] Original UFO
** @attr Formatstr [AjPStr] Input format name
** @attr Filename [AjPStr] Original filename
** @attr Seqid [AjPStr] Sequence entryname
** @attr Type [AjPStr] Type N or P
** @attr Seqname [AjPStr] name of AjPSeq assoc. with feature table
** @attr Local [AjBool] Opened as a local file if ajTrue
** @attr Rev       [AjBool]    Reverse/complement if true
** @attr Start     [ajint]     Start position
** @attr End       [ajint]     End position
** @attr Circular [AjBool] true: circular nucleotide molecule
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSFeattabin
{
    AjPTextin     Input;
    AjPStr        Ufo;
    AjPStr        Formatstr;
    AjPStr        Filename;
    AjPStr        Seqid;
    AjPStr        Type;
    AjPStr        Seqname;
    AjBool        Local;
    AjBool        Rev;
    ajint         Start;
    ajint         End;
    AjBool        Circular;
    char Padding[4];
}  AjOFeattabin;

#define AjPFeattabin AjOFeattabin*
#define AjPFeattabIn AjOFeattabin*




/* @data AjPFeattaball ********************************************************
**
** Ajax feature all (stream) object.
**
** Inherits an AjPFeattable but allows more data resources to be read from the
** same input by also inheriting the AjPFeattabin input object.
**
** @alias AjSFeattaball
** @alias AjOFeattaball
**
** @attr Feattable [AjPFeattable] Current feature table
** @attr Feattabin [AjPFeattabin] Feature input for reading next
** @attr Totfeattables [ajulong] Count of feature tables so far
** @attr Count [ajuint] Count of feature tables so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: featuure table object has been returned
**                         to a new owner
**                         and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSFeattaball
{
    AjPFeattable Feattable;
    AjPFeattabin Feattabin;
    ajulong Totfeattables;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjOFeattaball;

#define AjPFeattaball AjOFeattaball*




/* @data AjPFeattabAccess *****************************************************
**
** Ajax feature table access database reading object.
**
** Holds information needed to read a feature table from a database.
** Access methods are defined for each known database type.
**
** Feature tables are read from the database using the defined
** database access function, which is usually a static function
** within ajtextdb.c or ajfeatdb.c
**
** This should be a static data object but is needed for the definition
** of AjPFeatin.
**
** @alias AjSFeattabAccess
** @alias AjOFeattabAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSFeattabAccess
{
    const char *Name;
    AjBool (*Access) (AjPFeattabin ftabin);
    AjBool (*AccessFree) (void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOFeattabAccess;

#define AjPFeattabAccess AjOFeattabAccess*




/* @data AjPFeattabOut ********************************************************
**
** Ajax class for feature table output
**
** @alias AjSFeattabOut
** @alias AjOFeattabOut
**
** @new    ajFeattabOutNew Constructor
** @new    ajFeattabOutNewSSF Constructor with format, name, type and
**                            output file
** @delete ajFeattabOutDel Destructor
**
** @attr Ufo [AjPStr] Original output UFO
** @attr Formatstr [AjPStr] Output format name
** @attr Filename [AjPStr] Output filename
** @attr Directory [AjPStr] Output directory
** @attr Seqid [AjPStr] Output entryname
** @attr Type [AjPStr] Type N or P
** @attr Handle [AjPFile] Output file
** @attr Seqname [AjPStr] AjPSeq assoc. with feature table
** @attr Basename [AjPStr] Basename for output file
** @attr Format [ajint] Output format index
** @attr Local [AjBool] Opened as a local file if ajTrue
** @attr Count [ajuint] Number of feature tables written
** @attr Padding [char[4]] Padding to alignment boundary
** @attr Cleanup [void function] Function to write remaining lines on closing
** @@
******************************************************************************/

typedef struct AjSFeattabOut
{
    AjPStr        Ufo;
    AjPStr        Formatstr;
    AjPStr        Filename;
    AjPStr        Directory;
    AjPStr        Seqid;
    AjPStr        Type;
    AjPFile       Handle;
    AjPStr        Seqname;
    AjPStr        Basename;
    ajint         Format;
    AjBool        Local;
    ajuint        Count;
    char          Padding[4];
    void (*Cleanup) (AjPFile filethys);
}  AjOFeattabOut;

#define AjPFeattabOut AjOFeattabOut*




/* @data AjPFeature ***********************************************************
**
** Ajax Biological Feature object superclass.
**
** Holds generic data describing a single genome feature.
**
** A feature is a description of a
** sequence location which was determined by some 'source' analysis
** (which may be of 'wet lab' experimental or 'in silico'
** computational nature), has a 'primary' descriptor ('Type'),
** may have some 'score' asserting the level of analysis confidence in
** its identity (e.g. log likelihood relative to a null hypothesis or
** other similar entity), has a 'Location' in the genome, and may have
** any arbitrary number of descriptor Tags and TagValues associated with it.
**
**
** @alias AjSFeature
** @alias AjOFeature
**
** @new    ajFeatNew             Constructor - must specify the associated
**                               (non-null) AjPFeattable
** @new    ajFeatNewII           Simple constructor with only start and end
**                               positions
** @new    ajFeatNewIIRev        Simple constructor with only start and end
**                               positions, sets feature to be
**                               on the reverse strand
** @new    ajFeatNewProt         Protein-specific constructor -
**                               must specify the associated
**                               (non-null) AjPFeattable
** @delete ajFeatDel             Default destructor
** @new    ajFeatCopy            Copy constructor
**
** @attr Source [AjPStr] Source program name (or EMBL)
** @attr Type [AjPStr] Feature type (feature key) from internal list
**                    for protein or nucleotide
** @attr Subfeatures [AjPList] Subfeatures
** @attr Tags [AjPList] Tag-value list (qualifier list)
** @attr GffTags [AjPList] GFF3 Tag-value list (qualifier list)
** @attr Protein [AjBool] true for a protein feature
** @attr Start [ajuint] Start position
** @attr End [ajuint] End position
** @attr Start2 [ajuint] Second start position - EMBL (a.b)
** @attr End2 [ajuint] Second end position - EMBL ..(a.b)
** @attr Frame [ajint] Frame 1..3, -1..-3 or 0
** @attr Flags [ajuint] Flag bit mask for EMBL location
** @attr Group [ajuint] Group for join/order/one-of
** @attr Remote [AjPStr] Remote ID - EMBL Remote:a.b
** @attr Label [AjPStr] Label name for location - EMBL legacy
** @attr Exon [ajuint] Exon number
** @attr Score [float] Score or 0.0 if none
** @attr Strand [char] Strand +/- or NULL
** @attr Padding [char[7]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSFeature
{
    AjPStr            Source;
    AjPStr            Type;
    AjPList           Subfeatures;
    AjPList           Tags;
    AjPList           GffTags;
    AjBool            Protein;
    ajuint            Start;
    ajuint            End;
    ajuint            Start2;
    ajuint            End2;
    ajint             Frame;
    ajuint            Flags;
    ajuint            Group;
    AjPStr            Remote;
    AjPStr            Label;
    ajuint            Exon;
    float             Score;
    char              Strand;
    char              Padding[7];
} AjOFeature;

#define AjPFeature AjOFeature*




/* @data AjPFeatGfftags *******************************************************
**
** Biological feature GFF3 special tags
**
** @alias AjSFeatGfftags
** @alias AjOFeatGfftags
**
** @attr Id [AjPStr] Identifier attribute. Features with the same id are
**                   one feature with multiple locations
** @attr Name [AjPStr] Display name attribute, can be shared
** @attr Alias [AjPStr] Alias attribute (list) e.g. locus name, can be shared
** @attr Parent [AjPStr] Parent attribute (list) for part_of grouping
** @attr Target [AjPStr] Target attribute "target_id start end [strand]"
** @attr Gap [AjPStr] Gap attribute in exonerate CIGAR format
** @attr DerivesFrom [AjPStr] Derives_from attribute for relations
** @attr Note [AjPStr] Note attribute (list)
** @attr Dbxref [AjPStr] Dbxref attribute (list) in format DBTAG:ID
** @attr OntologyTerm [AjPStr] Ontology_term attribute (list) in format DBTAG:ID
** @attr IsCircular [AjPStr] Is_circular attribute
** @@
******************************************************************************/

typedef struct AjSFeatGfftags
{
    AjPStr            Id;
    AjPStr            Name;
    AjPStr            Alias;
    AjPStr            Parent;
    AjPStr            Target;
    AjPStr            Gap;
    AjPStr            DerivesFrom;
    AjPStr            Note;
    AjPStr            Dbxref;
    AjPStr            OntologyTerm;
    AjPStr            IsCircular;
} AjOFeatGfftags;

#define AjPFeatGfftags AjOFeatGfftags*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJFEATDATA_H */

ajfeatdb.h/     1414437296  1010  513   100644  2527      `
/* @include ajfeatdb **********************************************************
**
** AJAX feature database access functions
**
** These functions control all aspects of AJAX feature database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.5 $
** @modified Sep 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFEATDB_H
#define AJFEATDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void         ajFeatdbExit(void);
void         ajFeatdbInit(void);
void         ajFeatdbPrintAccess(AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/


AJ_END_DECLS

#endif  /* !AJFEATDB_H */

ajfeatread.h/   1414437289  1010  513   100644  5903      `
/* @include ajfeatread ********************************************************
**
** AJAX feature reading functions
**
** These functions control all aspects of AJAX feature reading
**
** @author Copyright (C) 1999 Richard Bruskiewich
** @version $Revision: 1.10 $
** @modified 2000 Ian Longden.
** @modified 2001 Peter Rice.
** @modified $Date: 2013/06/29 22:31:59 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFEATREAD_H
#define AJFEATREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajtable.h"
#include "ajfeatdata.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




extern AjPTable feattabDbMethods;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void          ajFeattaballClear(AjPFeattaball thys);
void          ajFeattaballDel(AjPFeattaball* pthis);
AjPFeattaball ajFeattaballNew(void);
const AjPStr  ajFeattaballGetfeattableId(const AjPFeattaball thys);

void          ajFeattabinClear(AjPFeattabin thys);
void          ajFeattabinDel(AjPFeattabin* pthis);
AjPFeattabin  ajFeattabinNew(void);
AjPFeattabin  ajFeattabinNewCSF(const char* fmt, const AjPStr name,
                                const char* type, AjPFilebuff buff);
AjPFeattabin  ajFeattabinNewSS(const AjPStr fmt, const AjPStr name,
                               const char* type);
AjPFeattabin  ajFeattabinNewSSF(const AjPStr fmt, const AjPStr name,
                                const char* type, AjPFilebuff buff);
AjPFeattabin  ajFeattabinNewSeqinSSF(const AjPSeqin seqin, const AjPStr fmt,
                                     const AjPStr name, const char* type,
                                     AjPFilebuff buff);
AjPFeattabin  ajFeattabinNewSeqinSS(const AjPSeqin seqin, const AjPStr fmt,
                                    const AjPStr name, const char* type);
void          ajFeattabinSetRange(AjPFeattabin thys,
                                  ajint fbegin, ajint fend);
AjBool        ajFeattabinSetTypeC(AjPFeattabin thys, const char* type);
AjBool        ajFeattabinSetTypeS(AjPFeattabin thys, const AjPStr type);

void          ajFeatinPrintFormat(AjPFile outf, AjBool full);
void          ajFeatinPrinthtmlFormat(AjPFile outf);
void          ajFeatinPrintbookFormat(AjPFile outf);
void          ajFeatinPrintwikiFormat(AjPFile outf);
void          ajFeatreadExit(void);
const char*   ajFeattabinTypeGetFields(void);
const char*   ajFeattabinTypeGetQlinks(void);

AjPTable      ajFeattabaccessGetDb(void);
const char*   ajFeattabaccessMethodGetQlinks(const AjPStr method);
ajuint        ajFeattabaccessMethodGetScope(const AjPStr method);
AjBool        ajFeattabaccessMethodTest(const AjPStr method);
AjBool        ajFeattabinformatTerm(const AjPStr term);
AjBool        ajFeattabinformatTest(const AjPStr format);

void          ajFeattabinQryC(AjPFeattabin thys, const char* txt);
void          ajFeattabinQryS(AjPFeattabin thys, const AjPStr txt);

AjBool        ajFeattabinRead(AjPFeattabin ftin, AjPFeattable ftable);

AjBool        ajFeattaballNext(AjPFeattaball thys, AjPFeattable *Pfeattable);
AjPFeattable  ajFeattableNewRead(AjPFeattabin ftin);
AjPFeattable  ajFeattableNewReadUfo(AjPFeattabin tabin, const AjPStr Ufo);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif
#ifdef AJ_COMPILE_DEPRECATED

__deprecated void          ajFeattabInClear(AjPFeattabIn thys);
__deprecated void          ajFeattabInDel(AjPFeattabIn* pthis);
__deprecated AjPFeattabIn  ajFeattabInNew(void);
__deprecated AjPFeattabIn  ajFeattabInNewCSF(const char* fmt, const AjPStr name,
                                             const char* type, AjPFilebuff buff);
__deprecated AjPFeattabIn  ajFeattabInNewSS(const AjPStr fmt, const AjPStr name,
                                            const char* type);
__deprecated AjPFeattabIn  ajFeattabInNewSSF(const AjPStr fmt, const AjPStr name,
                                             const char* type, AjPFilebuff buff);
__deprecated AjBool        ajFeattabInSetType(AjPFeattabIn thys, const AjPStr type);
__deprecated AjBool        ajFeattabInSetTypeC(AjPFeattabIn thys, const char* type);

#endif




AJ_END_DECLS

#endif /* !AJFEATREAD_H */

ajfeatwrite.h/  1414437289  1010  513   100644  6258      `
/* @include ajfeatwrite *******************************************************
**
** AJAX feature writing functions
**
** These functions control all aspects of AJAX feature writing
**
** @author Copyright (C) 1999 Richard Bruskiewich
** @modified 2000 Ian Longden.
** @modified 2001-2011 Peter Rice.
** @version $Revision: 1.6 $
** @modified $Date: 2011/12/19 16:39:37 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFEATWRITE_H
#define AJFEATWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajfeatdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajFeatOutFormatDefault(AjPStr* pformat);
void          ajFeatoutPrintFormat(AjPFile outf, AjBool full);
void          ajFeatoutPrinthtmlFormat(AjPFile outf);
void          ajFeatoutPrintbookFormat(AjPFile outf);
void          ajFeatoutPrintwikiFormat(AjPFile outf);
void          ajFeatwriteExit(void);
AjBool        ajFeattableWriteDebug(AjPFeattabOut ftout,
                                    const AjPFeattable ftable);
AjBool        ajFeattablePrint(const AjPFeattable ftable,
                               AjPFile file);
AjBool        ajFeattableWriteBed(AjPFeattabOut ftout,
                                  const AjPFeattable features);
AjBool        ajFeattableWriteDasgff(AjPFeattabOut ftout,
                                     const AjPFeattable features);
AjBool        ajFeattableWriteDdbj(AjPFeattabOut ftout,
                                   const AjPFeattable features);
AjBool        ajFeattableWriteDraw(AjPFeattabOut ftout,
                                   const AjPFeattable thys);
AjBool        ajFeattableWriteEmbl(AjPFeattabOut ftout,
                                   const AjPFeattable features);
AjBool        ajFeattableWriteGenbank(AjPFeattabOut ftout,
                                      const AjPFeattable features);
AjBool        ajFeattableWriteRefseq(AjPFeattabOut ftout,
                                     const AjPFeattable features);
AjBool        ajFeattableWriteRefseqp(AjPFeattabOut ftout,
                                      const AjPFeattable features);
AjBool        ajFeattableWriteGff2(AjPFeattabOut ftout,
                                   const AjPFeattable features);
AjBool        ajFeattableWriteGff3(AjPFeattabOut ftout,
                                   const AjPFeattable features);
AjBool        ajFeattableWritePir(AjPFeattabOut ftout,
                                  const AjPFeattable features);
AjBool        ajFeattableWriteSwiss(AjPFeattabOut ftout,
                                    const AjPFeattable features);
void          ajFeattabOutClear(AjPFeattabOut *thys);
void          ajFeattabOutDel(AjPFeattabOut* pthis);
AjPFile       ajFeattabOutFile(const AjPFeattabOut thys);
AjPStr        ajFeattabOutFilename(const AjPFeattabOut thys);
AjBool        ajFeattabOutIsLocal(const AjPFeattabOut thys);
AjBool        ajFeattabOutIsOpen(const AjPFeattabOut thys);
AjPFeattabOut ajFeattabOutNew(void);
AjPFeattabOut ajFeattabOutNewCSF(const char* fmt, const AjPStr name,
                                 const char* type, AjPFile buff);
AjPFeattabOut ajFeattabOutNewSSF(const AjPStr fmt, const AjPStr name,
                                 const char* type, AjPFile buff);
AjBool        ajFeattabOutOpen(AjPFeattabOut thys, const AjPStr ufo);
AjBool        ajFeattabOutSet(AjPFeattabOut thys, const AjPStr ufo);
void          ajFeattabOutSetBasename(AjPFeattabOut thys,
                                      const AjPStr basename);
AjBool        ajFeattabOutSetSeqname(AjPFeattabOut thys, const AjPStr name);
AjBool        ajFeattabOutSetType(AjPFeattabOut thys, const AjPStr type);
AjBool        ajFeattabOutSetTypeC(AjPFeattabOut thys, const char* type);
AjBool        ajFeattableWriteUfo(AjPFeattabOut ftout, const AjPFeattable ft,
                                  const AjPStr Ufo);
AjBool        ajFeattableWrite(AjPFeattabOut ftout, const AjPFeattable ft);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjBool ajFeatUfoWrite(const AjPFeattable thys,
                                   AjPFeattabOut featout,
                                   const AjPStr ufo);

__deprecated AjBool ajFeatWrite(AjPFeattabOut ftout,
                                const AjPFeattable features);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* AJFEATWRITE_H */
ajfile.h/       1414779423  1010  513   100755  29475     `
/* @include ajfile ************************************************************
**
** AJAX file routines
**
** @author Copyright (C) 1999 Peter Rice
** @version $Revision: 1.89 $
** @modified May 14 Jon Ison Added ajFileExtnTrim & ajFileDirExtnTrim
** @modified $Date: 2013/01/31 13:25:12 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFILE_H
#define AJFILE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"

#include <sys/stat.h>

#undef WIN32

#ifdef WIN32
#include "win32.h"
#endif /* WIN32 */

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#ifndef WIN32
#define AJ_FILE_R S_IRUSR
#define AJ_FILE_W S_IWUSR
#define AJ_FILE_X S_IXUSR
#define HANDLE void*
#else /* WIN32 */
#define AJ_FILE_R S_IREAD
#define AJ_FILE_W S_IWRITE
#define AJ_FILE_X S_IEXEC
#define pid_t void*
#endif /* !WIN32 */

#define MAJFILETELL(file) (file->fp ? ftell(file->fp) : 0L)




/* @enum AjEOutfileType *******************************************************
**
** AJAX Outfile Type enumeration
**
** @value ajEOutfileTypeUnknown Unknown - none of these
** @value ajEOutfileTypeAssembly Assembly
** @value ajEOutfileTypeCodon Codon usage
** @value ajEOutfileTypeCPDB Clean PDB
** @value ajEOutfileTypeDiscrete Discrete data
** @value ajEOutfileTypeDistance Distance matrix data
** @value ajEOutfileTypeFrequency Frequency data
** @value ajEOutfileTypeMatrix Integer matrix data
** @value ajEOutfileTypeMatrixF Floating point matrix data
** @value ajEOutfileTypeOBO OBO ontology data
** @value ajEOutfileTypeProperties Phylogenetic properties
** @value ajEOutfileTypeRefseq Reference sequence data
** @value ajEOutfileTypeResource Data resource catalogue data
** @value ajEOutfileTypeSCOP SCOP data
** @value ajEOutfileTypeTaxon NCBI taxonomy data
** @value ajEOutfileTypeText Text data
** @value ajEOutfileTypeTree Phylogenetic tree data
** @value ajEOutfileTypeURL URL data
** @value ajEOutfileTypeVariation Variation data
** @value ajEOutfileTypeXml XML data
** @@
******************************************************************************/

typedef enum AjOOutfileType
{
    ajEOutfileTypeUnknown,
    ajEOutfileTypeAssembly,
    ajEOutfileTypeCodon,
    ajEOutfileTypeCPDB,
    ajEOutfileTypeDiscrete,
    ajEOutfileTypeDistance,
    ajEOutfileTypeFrequency,
    ajEOutfileTypeMatrix,
    ajEOutfileTypeMatrixF,
    ajEOutfileTypeOBO,
    ajEOutfileTypeProperties,
    ajEOutfileTypeRefseq,
    ajEOutfileTypeResource,
    ajEOutfileTypeSCOP,
    ajEOutfileTypeTaxon,
    ajEOutfileTypeText,
    ajEOutfileTypeTree,
    ajEOutfileTypeURL,
    ajEOutfileTypeVariation,
    ajEOutfileTypeXml
} AjEOutfileType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPFile **************************************************************
**
** Ajax file object. Holds information for an open (unbuffered)
** input or output file.
**
** On output, conversion code "%F" writes the filename.
**
** @alias AjSFile
** @alias AjOFile
**
** @attr fp [FILE*] C file pointer
** @attr Name [AjPStr] File name as used when opening
** @attr Printname [AjPStr] File name in a clean form for reporting
** @attr List [AjPList] List of file names (first is open)
** @attr End [AjBool] True if EOF has been reached
** @attr App [AjBool] True if file was opened for append.
** @attr Buff [AjPStr] Buffer for latest line read
** @attr Workbuffer [char*] Block as a buffer for fgets etc
** @attr Readblock [char*] Block as a buffer for fread
** @attr Filepos [ajlong] File offset for start of latest read
** @attr Blocksize [ajuint] Read block maximum size
** @attr Blockpos [ajuint] Read block position
** @attr Blocklen [ajuint] Read block length used
** @attr Buffsize [ajuint] Buffer size (zero for default size)
** @attr Handle [ajint] AJAX file number 0 if unused
** @attr Pid [pid_t] Process PID if any (non-WIN32 only)
** @attr Process [HANDLE] Process handle (WIN32 only)
** @attr Thread [HANDLE] Thread handle (WIN32 only)
** @@
******************************************************************************/

typedef struct AjSFile
{
    FILE *fp;
    AjPStr Name;
    AjPStr Printname;
    AjPList List;
    AjBool End;
    AjBool App;
    AjPStr Buff;
    char *Workbuffer;
    char *Readblock;
    ajlong Filepos;
    ajuint Blocksize;
    ajuint Blockpos;
    ajuint Blocklen;
    ajuint Buffsize;
    ajint Handle;
    pid_t Pid;
    HANDLE Process;
    HANDLE Thread;
} AjOFile;

#define AjPFile AjOFile*




/* @data AjPFilebufflist ******************************************************
**
** Ajax file buffer, holding a simple linked list of buffered lines.
** This does not use the AjPList objects.
**
** This is a substructure of the AjPFilebuff object.
**
** @alias AjSFilebufflist
** @alias AjSOilebufflist
**
** @attr Line [AjPStr] String : this line
** @attr Next [struct AjSFilebufflist*] Next line in the list, NULL for last
** @attr Fpos [ajlong] File offset for start of this line
** @@
******************************************************************************/

typedef struct AjSFilebufflist
{
    AjPStr Line;
    struct AjSFilebufflist* Next;
    ajlong Fpos;
} AjOFilebufflist;

#define AjPFilebufflist AjOFilebufflist*




/* @data AjPFilebuff **********************************************************
**
** Ajax buffered file object. Holds information for a buffered input file.
**
** @alias AjSFilebuff
** @alias AjOFilebuff
**
** @attr File [AjPFile] The input file - data to be buffered
** @attr Lines [AjPFilebufflist] All lines ... where the data really is
** @attr Freelines [AjPFilebufflist] Free list of lines for reuse
** @attr Curr [AjPFilebufflist] Current line in Lines list
** @attr Prev [AjPFilebufflist] Previous line (points to Curr for delete)
** @attr Last [AjPFilebufflist] Last line for quick appending
** @attr Freelast [AjPFilebufflist] Last free line for quick append
** @attr Nobuff [AjBool] if true, do not buffer the file
** @attr Pos [ajint] Position in list
** @attr Size [ajint] Size of list
** @attr FreeSize [ajint] Size of free list
** @attr Fpos [ajlong] File position in File
** @@
******************************************************************************/

typedef struct AjSFilebuff
{
    AjPFile File;
    AjPFilebufflist Lines;
    AjPFilebufflist Freelines;
    AjPFilebufflist Curr;
    AjPFilebufflist Prev;
    AjPFilebufflist Last;
    AjPFilebufflist Freelast;
    AjBool Nobuff;
    ajint Pos;
    ajint Size;
    ajint FreeSize;
    ajlong Fpos;
} AjOFilebuff;

#define AjPFilebuff AjOFilebuff*




/* @data AjPDir ***************************************************************
**
** Ajax directory object. Holds information for an open
** input directory.
**
** @alias AjSDir
** @alias AjODir
**
** @attr Name [AjPStr] Path
** @attr Printname [AjPStr] Directory path in a clean form for reporting
** @attr Prefix [AjPStr] Default filename prefix
** @attr Extension [AjPStr] Default file extension
** @@
******************************************************************************/

typedef struct AjSDir
{
    AjPStr Name;
    AjPStr Printname;
    AjPStr Prefix;
    AjPStr Extension;
} AjODir;

#define AjPDir AjODir*




/* @data AjPDirout ************************************************************
**
** Ajax output directory object. Holds information for an open
** output directory.
**
** @alias AjSDirout
** @alias AjODirout
**
** @attr Name [AjPStr] Path
** @attr Printname [AjPStr] Directory path in a clean form for reporting
** @attr Extension [AjPStr] Default file extension
** @attr Created   [AjBool] New directory created
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSDirout
{
    AjPStr Name;
    AjPStr Printname;
    AjPStr Extension;
    AjBool Created;
    char Padding[4];
} AjODirout;

#define AjPDirout AjODirout*




/* @data AjPOutfile ***********************************************************
**
** Ajax file object. Holds information for an open (unbuffered)
** input or output file.
**
** On output, conversion code "%F" writes the filename.
**
** @alias AjSOutfile
** @alias AjOOutfile
**
** @attr File [AjPFile] File object
** @attr Type [AjPStr] Named data file type
** @attr Formatstr [AjPStr] Format specific for this data type
** @attr Cleanup [void function] Function to write remaining lines on closing
** @attr OutData [void*] Format data for reuse, e.g. multiple entry output
** @attr Itype [ajuint] Index number for Type
** @attr Format [ajint] Index for Formatstr for this data type
** @attr Records [ajuint] Number of records written
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSOutfile
{
    AjPFile File;
    AjPStr Type;
    AjPStr Formatstr;
    void (*Cleanup) (struct AjSOutfile *outf);
    void *OutData;
    ajuint Itype;
    ajint Format;
    ajuint Records;
    char Padding[4];
} AjOOutfile;

#define AjPOutfile AjOOutfile*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void           ajDirDel(AjPDir* pthis);
void           ajDiroutDel(AjPDirout* pthis);
const AjPStr   ajDirGetExt(const AjPDir thys);
const AjPStr   ajDirGetPath(const AjPDir thys);
const AjPStr   ajDirGetPrintpath(const AjPDir thys);
const AjPStr   ajDirGetPrefix(const AjPDir thys);
const AjPStr   ajDiroutGetExt(const AjPDirout thys);
const AjPStr   ajDiroutGetPath(const AjPDirout thys);
const AjPStr   ajDiroutGetPrintpath(const AjPDirout thys);
AjPDir         ajDirNewPath(const AjPStr path);
AjPDir         ajDirNewPathExt(const AjPStr path, const AjPStr ext);
AjPDir         ajDirNewPathPreExt(const AjPStr path, const AjPStr prefix,
                                  const AjPStr ext);
AjBool         ajDiroutCreated(AjPDirout thys);
AjBool         ajDiroutExists(AjPDirout thys);
AjPDirout      ajDiroutNewPath(const AjPStr name);
AjPDirout      ajDiroutNewPathExt(const AjPStr name, const AjPStr ext);
AjBool         ajDiroutOpen(AjPDirout thys);
ajint          ajFilelistAddDirectory(AjPList list,
                                      const AjPDir dir);
ajint          ajFilelistAddPathWildRecursiveIgnore(AjPList list,
                                                    const AjPStr path,
                                                    const AjPStr wildname,
                                                    AjPList ignorelist);
void           ajDirnamePrintRecursiveIgnore(const AjPStr path,
                                             AjPList ignorelist,
                                             AjPFile outfile);
ajint          ajFilelistAddPath(AjPList list,
                                 const AjPStr path);
ajint          ajFilelistAddPathDir(AjPList list,
                                    const AjPStr path);
ajint          ajFilelistAddPathWild(AjPList list,
                                     const AjPStr path,
                                     const AjPStr filename);
ajint          ajFilelistAddPathWildDir(AjPList list,
                                        const AjPStr path,
                                        const AjPStr filename);

void           ajFilebuffDel(AjPFilebuff* pthis);
AjPFilebuff    ajFilebuffNewNofile(void);
AjPFilebuff    ajFilebuffNewNameS(const AjPStr name);
AjPFilebuff    ajFilebuffNewNamePathC(const char* filename, const AjPStr dir);
AjPFilebuff    ajFilebuffNewNamePathS(const AjPStr filename, const AjPStr dir);
AjPFilebuff    ajFilebuffNewPathWild(const AjPStr path,
                                     const AjPStr wildname);
AjPFilebuff    ajFilebuffNewPathWildExclude(const AjPStr path,
                                            const AjPStr wildname,
                                            const AjPStr exclude);
AjPFilebuff    ajFilebuffNewFromCfile(FILE *fp);
AjPFilebuff    ajFilebuffNewFromFile(AjPFile file);
AjPFilebuff    ajFilebuffNewLine(const AjPStr line);
AjPFilebuff    ajFilebuffNewListinList(AjPList list);
AjBool         ajFilebuffSetBuffered(AjPFilebuff thys);
void           ajFilebuffClear(AjPFilebuff thys, ajint lines);
void           ajFilebuffClearStore(AjPFilebuff thys, ajint lines,
                                    const AjPStr rdline, AjBool store,
                                    AjPStr *astr);
AjBool         ajFilebuffIsEmpty(const AjPFilebuff thys);
AjBool         ajFilebuffIsEnded(const AjPFilebuff thys);
AjBool         ajFilebuffIsEof(const AjPFilebuff thys);
AjPFile        ajFilebuffGetFile(const AjPFilebuff thys);
void           ajFilebuffFix(AjPFilebuff thys);
FILE*          ajFilebuffGetFileptr(const AjPFilebuff thys);
const AjPStr   ajFilebuffGetFirst(const AjPFilebuff thys);
AjBool         ajFilebuffIsBuffered(const AjPFilebuff thys);
void           ajFilebuffLoadAll(AjPFilebuff buff);
AjBool         ajFilebuffLoadReadurl(AjPFilebuff buff, const AjPStr url);
void           ajFilebuffLoadC(AjPFilebuff thys, const char* str);
void           ajFilebuffLoadS(AjPFilebuff thys, const AjPStr str);
AjBool         ajFilebuffSetUnbuffered(AjPFilebuff thys);
void           ajFilebuffTraceTitle(const AjPFilebuff thys, const char* title);
void           ajFilebuffReset(AjPFilebuff thys);
void           ajFilebuffResetPos(AjPFilebuff thys);
void           ajFilebuffResetStore(AjPFilebuff thys,
                                    AjBool store, AjPStr *astr);
AjBool         ajFilebuffReopenFile(AjPFilebuff* Pbuff, AjPFile file);
ajuint         ajFilebuffHtmlNoheader(AjPFilebuff buff);
void           ajFilebuffHtmlStrip(AjPFilebuff thys);
AjBool         ajFilebuffHtmlPre(AjPFilebuff thys);
void           ajFilebuffTrace(const AjPFilebuff thys);
void           ajFilebuffTraceFull(const AjPFilebuff thys, size_t nlines,
                                   size_t nfree);
void           ajFileClose(AjPFile *pthis);
AjBool         ajDirnameFixExists(AjPStr* dir);
void           ajDirnameFix(AjPStr* dir);
AjBool         ajDirnameUp(AjPStr* dir);
AjBool         ajDirnameFillPath(AjPStr* dir);
AjBool         ajFileIsEof(const AjPFile thys);
void           ajFileExit(void);
ajint          ajFilelistAddListname(AjPList list, const AjPStr files);
FILE*          ajFileGetFileptr(const AjPFile thys);
const AjPStr   ajFileValueCwd(void);
AjBool         ajFileIsAppend(const AjPFile thys);
AjBool         ajFilenameHasPath(const AjPStr name);
ajlong         ajFilenameGetSize(const AjPStr fname);
AjBool         ajFilenameTrimAll(AjPStr *fname);
AjBool         ajFilenameTrimExt(AjPStr* Pfilename);
AjBool         ajFilenameTrimPath(AjPStr* Pfilename);
AjBool         ajFilenameTrimPathExt(AjPStr* Pfilename);
const char*    ajFileGetNameC(const AjPFile thys);
const AjPStr   ajFileGetNameS(const AjPFile thys);
const char*    ajFileGetPrintnameC(const AjPFile thys);
const AjPStr   ajFileGetPrintnameS(const AjPFile thys);
AjBool         ajFilenameReplacePathS(AjPStr* filename, const AjPStr dir);
AjBool         ajFilenameReplacePathC(AjPStr* filename, const char* dir);
AjBool         ajFilenameReplaceExtC(AjPStr* filename, const char* extension);
AjBool         ajFilenameReplaceExtS(AjPStr* filename,
                                     const AjPStr extension);
AjBool         ajFilenameSetExtC(AjPStr* filename, const char* extension);
AjBool         ajFilenameSetExtS(AjPStr* filename,
                                 const AjPStr extension);
AjPFile        ajFileNewOutappendNameS(const AjPStr name);
AjPFile        ajFileNewListinList(AjPList list);
AjPFile        ajFileNewListinDirPre(const AjPDir dir, const AjPStr prefix);
AjPFile        ajFileNewListinNameDirS(const AjPStr name, const AjPDir dir);
AjPFile        ajFileNewListinPathWild(const AjPStr path,
                                       const AjPStr wildname);
AjPFile        ajFileNewListinPathWildExclude(const AjPStr path,
                                              const AjPStr wildname,
                                              const AjPStr exclude);

AjPFile        ajFileNewFromCfile(FILE* file);
AjPFile        ajFileNewInNameC(const char *name);
AjPFile        ajFileNewInNameS(const AjPStr name);
AjPFile        ajFileNewInBlockS(const AjPStr name, ajuint blocksize);
AjPFile        ajFileNewInPipe(const AjPStr name);
AjPFile        ajFileNewInNamePathC(const char* name, const AjPStr path);
AjPFile        ajFileNewInNamePathS(const AjPStr name, const AjPStr path);
AjPFile        ajFileNewOutNameC(const char *name);
AjPFile        ajFileNewOutNameS(const AjPStr name);
AjPFile        ajFileNewOutNameDirS(const AjPStr name, const AjPDirout dir);
AjPFile        ajFileNewOutNamePathS(const AjPStr name, const AjPStr path);
AjBool         ajFileReopenName(AjPFile thys, const AjPStr name);
AjBool         ajFileReopenNext(AjPFile thys);
ajint          ajFileSeek(AjPFile thys, ajlong offset, ajint wherefrom);
AjBool         ajFilenameExists(const AjPStr filename);
AjBool         ajFilenameExistsDir(const AjPStr filename);
AjBool         ajFilenameExistsExec(const AjPStr filename);
AjBool         ajFilenameExistsRead(const AjPStr filename);
AjBool         ajFilenameExistsWrite(const AjPStr filename);
AjBool         ajFilewildnameExists(const AjPStr wildname);
AjBool         ajFilewildnameExistsDir(const AjPStr wildname,
                                       const AjPStr path);
AjBool         ajFileValueRedirectStderr(void);
AjBool         ajFileValueRedirectStdin(void);
AjBool         ajFileValueRedirectStdout(void);
AjBool         ajFileIsFile(const AjPFile file);
AjBool         ajFileIsStderr(const AjPFile file);
AjBool         ajFileIsStdin(const AjPFile file);
AjBool         ajFileIsStdout(const AjPFile file);
AjBool         ajFileFix(AjPFile file);
AjBool         ajFileResetEof(AjPFile thys);
ajlong         ajFileResetPos(AjPFile thys);
AjBool         ajFileSetEof(AjPFile thys);
AjBool         ajFilenameSetTempname(AjPStr* Pfilename);
AjBool         ajFilenameSetTempnamePathC(AjPStr* Pfilename,const char* txt);
AjBool         ajFilenameSetTempnamePathS(AjPStr* Pfilename, const AjPStr str);
AjBool         ajFilenameTestExclude(const AjPStr filename,
                                     const AjPStr exclude,
                                     const AjPStr include);
AjBool         ajFilenameTestInclude(const AjPStr filename,
                                     const AjPStr exclude,
                                     const AjPStr include);
AjBool         ajFilenameTestExcludePath(const AjPStr filename,
                                         const AjPStr exclude,
                                         const AjPStr include);
AjBool         ajFilenameTestIncludePath(const AjPStr filename,
                                         const AjPStr exclude,
                                         const AjPStr include);
void           ajFileTrace(const AjPFile thys);
void           ajFileSetUnbuffer(AjPFile thys);

ajuint         ajFileValueBuffsize(void);


AjPOutfile     ajOutfileNewNameS(const AjPStr name);
void           ajOutfileClose(AjPOutfile* pthis);
AjPFile        ajOutfileGetFile(const AjPOutfile thys);
FILE*          ajOutfileGetFileptr(const AjPOutfile thys);
const AjPStr   ajOutfileGetFormat(const AjPOutfile thys);
ajuint         ajOutfileGetFormatindex(const AjPOutfile file);
void           ajOutfileReset(AjPOutfile outf);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjBool         ajFileDirTrim(AjPStr* name);
__deprecated ajint          ajFileBuffSize(void);
__deprecated void           ajFileBuffClearStore(AjPFilebuff buff, ajint lines,
                                                 const AjPStr rdline,
                                                 AjBool store, AjPStr *astr);
__deprecated AjBool         ajFileBuffBuff(AjPFilebuff thys);
__deprecated AjBool         ajFileBuffEmpty(const AjPFilebuff thys);
__deprecated AjBool         ajFileBuffEnd(const AjPFilebuff thys);
__deprecated AjBool         ajFileBuffEof(const AjPFilebuff thys);
__deprecated AjPFile        ajFileBuffFile(const AjPFilebuff thys);
__deprecated void           ajFileBuffFix(AjPFilebuff thys);
__deprecated AjBool         ajFileBuffIsBuffered(const AjPFilebuff thys);
__deprecated FILE*          ajFileBuffFp(const AjPFilebuff thys);
__deprecated void           ajFileBuffTrace(const AjPFilebuff thys);
__deprecated void           ajFileBuffLoadC(AjPFilebuff thys, const char* str);
__deprecated void           ajFileBuffLoadS(AjPFilebuff thys, const AjPStr str);
__deprecated AjBool         ajFileBuffNobuff(AjPFilebuff thys);
__deprecated void           ajFileBuffPrint(const AjPFilebuff thys,
                                            const char* title);
__deprecated void           ajFileBuffReset(AjPFilebuff thys);
__deprecated void           ajFileBuffResetPos(AjPFilebuff thys);
__deprecated void           ajFileBuffResetStore(AjPFilebuff thys,
                                                 AjBool store, AjPStr *astr);
__deprecated void           ajFileBuffTraceFull(const AjPFilebuff thys,
                                                size_t nlines,
                                                size_t nfree);
__deprecated const AjPStr   ajFileGetName(const AjPFile thys);
__deprecated AjBool         ajFileGetwd(AjPStr* dir);
__deprecated AjBool         ajFileHasDir(const AjPStr name);
__deprecated ajlong         ajFileLength(const AjPStr fname);
__deprecated AjBool         ajFileNameShorten(AjPStr *fname);
__deprecated AjBool         ajFileNameTrim(AjPStr *fname);
__deprecated const char*    ajFileTempName(const char *dir);
__deprecated AjBool         ajFileTestSkip(const AjPStr fullname,
                                           const AjPStr exc, const AjPStr inc,
                                           AjBool keep,
                                           AjBool ignoredirectory);
__deprecated AjBool         ajFileDir(AjPStr* dir);
__deprecated AjBool         ajFileDirExtnTrim(AjPStr* name);
__deprecated void           ajFileOutHeader(AjPFile thys);
__deprecated ajint          ajFileScan(const AjPStr path, const AjPStr filename,
                                       AjPList *result,
                                       AjBool show, AjBool dolist,
                                       AjPList *list,
                                       AjPList rlist, AjBool recurs,
                                       AjPFile outf);

__deprecated void           ajFileDirFix(AjPStr* dir);
__deprecated AjBool         ajFileDirPath(AjPStr* dir);
__deprecated AjBool         ajFileDirUp(AjPStr* dir);
__deprecated AjBool         ajFileExtnTrim(AjPStr* name);
__deprecated ajint          ajDirScan(const AjPStr path,
                                      const AjPStr filename,
                                      AjPList *result);

__deprecated AjBool         ajFileSetDir(AjPStr *pname, const AjPStr dir);
__deprecated FILE*          ajOutfileFp(const AjPOutfile thys);
__deprecated AjBool         ajFileNameValid(const AjPStr filename);
__deprecated AjBool         ajFileStat(const AjPStr filename, ajint mode);
__deprecated AjPFile        ajOutfileFile(const AjPOutfile thys);
__deprecated AjPStr         ajOutfileFormat(const AjPOutfile thys);
__deprecated void           ajOutfileDel(AjPOutfile* pthis);
__deprecated AjPOutfile     ajOutfileNew(const AjPStr name);
__deprecated void           ajFileBuffStripHtml(AjPFilebuff thys);
__deprecated AjBool         ajFileBuffStripHtmlPre(AjPFilebuff thys);
__deprecated const AjPStr   ajFileNameS(const AjPFile thys);
__deprecated const char*    ajFileName(const AjPFile thys);
__deprecated AjPFilebuff ajFileBuffNewS(const AjPStr data);
__deprecated AjPFilebuff ajFileBuffNewList(AjPList list);
__deprecated AjBool         ajFileEof(const AjPFile thys);
__deprecated FILE*          ajFileFp(const AjPFile thys);
__deprecated AjBool         ajFileStderr(const AjPFile file);
__deprecated AjBool         ajFileStdin(const AjPFile file);
__deprecated AjBool         ajFileStdout(const AjPFile file);
__deprecated void           ajFileBuffDel(AjPFilebuff* pthis);
__deprecated AjPFilebuff    ajFileBuffNew(void);
__deprecated AjPFilebuff    ajFileBuffNewF(FILE *fp);
__deprecated void           ajFileBuffClear(AjPFilebuff thys, ajint lines);
__deprecated AjBool ajFileBuffSetFile(AjPFilebuff* pthys, AjPFile file,
                                      AjBool samefile);
__deprecated AjBool         ajFileGetApp(const AjPFile thys);
__deprecated ajlong         ajFileTell(AjPFile thys);
__deprecated AjBool         ajFileNext(AjPFile thys);
__deprecated FILE*          ajFileReopen(AjPFile thys, const AjPStr name);
__deprecated const AjPStr      ajDirExt(const AjPDir thys);
__deprecated const AjPStr      ajDirName(const AjPDir thys);
__deprecated AjPDir      ajDirNew(const AjPStr name);
__deprecated AjPDir      ajDirNewS(const AjPStr name, const AjPStr ext);
__deprecated AjPDir      ajDirNewSS(const AjPStr name, const AjPStr prefix,
                                    const AjPStr ext);
__deprecated AjPFile     ajFileNew(void);
__deprecated AjPFilebuff ajFileBuffNewIn(const AjPStr name);
__deprecated AjPFile     ajFileNewIn(const AjPStr name);
__deprecated AjPFile     ajFileNewInList(AjPList list);
__deprecated AjPFile     ajFileNewDW(const AjPStr dir, const AjPStr wildfile);
__deprecated AjPFile     ajFileNewDWE(const AjPStr dir, const AjPStr wildfile,
                                      const AjPStr exclude);


__deprecated AjPFilebuff ajFileBuffNewFile(AjPFile file);
__deprecated AjPFilebuff ajFileBuffNewDW(const AjPStr dir,
                                         const AjPStr wildfile);
__deprecated AjPFilebuff ajFileBuffNewDWE(const AjPStr dir,
                                          const AjPStr wildfile,
                                          const AjPStr exclude);

__deprecated AjPFile     ajFileNewApp(const AjPStr name);

__deprecated AjPFile ajFileNewOut(const AjPStr name);

__deprecated AjPFile     ajFileNewOutD(const AjPStr dir, const AjPStr name);
__deprecated AjPFile     ajFileNewOutDir(const AjPDirout dir,
                                         const AjPStr name);
__deprecated AjPFile     ajFileNewF(FILE* file);
__deprecated AjPDir ajDirOutNew(const AjPStr name);
__deprecated AjPDir ajDirOutNewS(const AjPStr name, const AjPStr ext);
__deprecated AjPDir ajDirOutNewSS(const AjPStr name,
                                  const AjPStr prefix, const AjPStr ext);

__deprecated AjPFilebuff  ajFileBuffNewDC(const AjPStr dir,
                                          const char* filename);
__deprecated AjPFilebuff  ajFileBuffNewDF(const AjPStr dir,
                                          const AjPStr filename);
__deprecated AjPFile      ajFileNewDC(const AjPStr dir,
                                      const char* filename);
__deprecated AjPFile      ajFileNewDF(const AjPStr dir,
                                      const AjPStr filename);

__deprecated AjBool       ajFileNameDirSet(AjPStr* filename,
                                           const AjPStr dir);
__deprecated AjBool       ajFileNameDirSetC(AjPStr* filename,
                                            const char* dir);
__deprecated AjBool       ajFileNameExt(AjPStr* filename,
                                        const AjPStr extension);
__deprecated AjBool       ajFileNameExtC(AjPStr* filename,
                                         const char* extension);

__deprecated AjPFile      ajFileNewDirF(const AjPDir dir,
                                        const AjPStr filename);

__deprecated void         ajFileUnbuffer(AjPFile thys);
__deprecated AjPFile        ajFileNewInC(const char *name);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJFILE_H */

ajfiledata.h/   1414437289  1010  513   100644  3396      `
/* @include ajfiledata ********************************************************
**
** AJAX datafile routines
**
** @author Copyright (C) 1999 Peter Rice
** @version $Revision: 1.5 $
** @modified Peter Rice pmr@ebi.ac.uk Data file functions from ajfile.c
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFILEDATA_H
#define AJFILEDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"

#include <sys/stat.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPFile  ajDatafileNewInNamePathS(const AjPStr name, const AjPStr dir);
AjPFile  ajDatafileNewInNameC(const char *s);
AjPFile  ajDatafileNewInNameS(const AjPStr filename);
AjPFile  ajDatafileNewOutNameS(const AjPStr name);


const AjPStr ajDatafileValuePath(void);

void        ajDatafileExit(void);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /** AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void    ajFileDataDirNew(const AjPStr tfile,
                                      const AjPStr dir, AjPFile *fnew);
__deprecated void    ajFileDataDirNewC(const char *s, const char* d,
                                       AjPFile *f);
__deprecated void    ajFileDataNew(const AjPStr filename,
                                   AjPFile *newfileptr);
__deprecated void    ajFileDataNewC(const char *s, AjPFile *f);
__deprecated void    ajFileDataNewWrite(const AjPStr tfile, AjPFile *fnew);


__deprecated AjBool  ajFilePathData(AjPStr *Ppath);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJFILEDATA_H */
ajfileio.h/     1414437289  1010  513   100644  7863      `
/* @include ajfileio **********************************************************
**
** AJAX file routines
**
** @author Copyright (C) 1999 Peter Rice
** @version $Revision: 1.9 $
** @modified Peter Rice pmr@ebi.ac.uk I/O file functions from ajfile.c
** @modified $Date: 2011/12/19 16:35:36 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFILEIO_H
#define AJFILEIO_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"
#include <sys/stat.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

size_t         ajReadbinBinary(AjPFile thys, size_t count,
                               size_t element_size, void* ptr);
size_t         ajReadbinChar(AjPFile file, size_t len, char* buffer);
size_t         ajReadbinCharTrim(AjPFile file, size_t len, char* buffer);
size_t         ajReadbinInt(AjPFile thys, ajint *val);
size_t         ajReadbinIntEndian(AjPFile thys, ajint *val);
size_t         ajReadbinIntLocal(AjPFile thys, ajint *val);
size_t         ajReadbinInt2(AjPFile thys, ajshort *val);
size_t         ajReadbinInt2Endian(AjPFile thys, ajshort *val);
size_t         ajReadbinInt2Local(AjPFile thys, ajshort *val);
size_t         ajReadbinInt4(AjPFile thys, ajint *val);
size_t         ajReadbinInt4Endian(AjPFile thys, ajint *val);
size_t         ajReadbinInt4Local(AjPFile thys, ajint *val);
size_t         ajReadbinInt8(AjPFile thys, ajlong *val);
size_t         ajReadbinInt8Endian(AjPFile thys, ajlong *val);
size_t         ajReadbinInt8Local(AjPFile thys, ajlong *val);
size_t         ajReadbinStr(AjPFile file, size_t len, AjPStr* buffer);
size_t         ajReadbinStrTrim(AjPFile file, size_t len, AjPStr* buffer);
size_t         ajReadbinUint(AjPFile thys, ajuint *val);
size_t         ajReadbinUint2(AjPFile thys, ajushort *val);
size_t         ajReadbinUint4(AjPFile thys, ajuint *val);
size_t         ajReadbinUint8(AjPFile thys, ajulong *val);
size_t         ajReadbinUintEndian(AjPFile thys, ajuint *val);
size_t         ajReadbinUint2Endian(AjPFile thys, ajushort *val);
size_t         ajReadbinUint4Endian(AjPFile thys, ajuint *val);
size_t         ajReadbinUint8Endian(AjPFile thys, ajulong *val);
size_t         ajReadbinUintLocal(AjPFile thys, ajuint *val);
size_t         ajReadbinUint2Local(AjPFile thys, ajushort *val);
size_t         ajReadbinUint4Local(AjPFile thys, ajuint *val);
size_t         ajReadbinUint8Local(AjPFile thys, ajulong *val);

size_t         ajWritebinBinary(AjPFile file, size_t count,
                                size_t size, const void* buffer);
size_t         ajWritebinByte(AjPFile thys, char ch);
size_t         ajWritebinChar(AjPFile thys, const char* txt, size_t len);
size_t         ajWritebinInt2(AjPFile thys, ajshort i);
size_t         ajWritebinInt4(AjPFile thys, ajint i);
size_t         ajWritebinInt8(AjPFile thys, ajlong i);
size_t         ajWritebinNewline(AjPFile thys);
size_t         ajWritebinStr(AjPFile thys, const AjPStr str, size_t len);
size_t         ajWritebinUint2(AjPFile thys, ajushort u);
size_t         ajWritebinUint4(AjPFile thys, ajuint u);
size_t         ajWritebinUint8(AjPFile thys, ajulong iu);
AjBool         ajWriteline(AjPFile file, const AjPStr line);
AjBool         ajWritelineNewline(AjPFile file, const AjPStr line);
AjBool         ajWritelineSpace(AjPFile file, const AjPStr line);

AjBool         ajReadline(AjPFile file, AjPStr *Pdest);
AjBool         ajReadlinePos(AjPFile file, AjPStr *Pdest, ajlong* Ppos);
AjBool         ajReadlineTrim(AjPFile file, AjPStr *Pdest);
AjBool         ajReadlineTrimPos(AjPFile file, AjPStr *Pdest, ajlong* Ppos);
AjBool         ajReadlineAppend(AjPFile file, AjPStr* Pdest);

AjBool         ajBuffreadLine(AjPFilebuff buff, AjPStr *pdest);
AjBool         ajBuffreadLinePos(AjPFilebuff buff, AjPStr *pdest,
                                 ajlong* Ppos);
AjBool         ajBuffreadLineStore(AjPFilebuff buff, AjPStr* pdest,
                                   AjBool store, AjPStr *astr);
AjBool         ajBuffreadLinePosStore(AjPFilebuff buff, AjPStr* pdest,
                                      ajlong* Ppos, AjBool store, AjPStr *astr);
AjBool         ajBuffreadLineTrim(AjPFilebuff buff, AjPStr* pdest);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void    ajFileBuffLoad(AjPFilebuff thys);
__deprecated AjBool  ajFileBuffGet(AjPFilebuff thys, AjPStr *pdest);
__deprecated AjBool  ajFileBuffGetL(AjPFilebuff thys, AjPStr *pdest,
                                    ajlong* fpos);
__deprecated AjBool  ajFileBuffGetStore(AjPFilebuff thys, AjPStr* pdest,
                                        AjBool store, AjPStr *astr);
__deprecated AjBool  ajFileBuffGetStoreL(AjPFilebuff thys,
                                         AjPStr* pdest, ajlong* fpos,
                                         AjBool store, AjPStr *astr);
__deprecated AjBool  ajFileBuffGetTrim(AjPFilebuff thys, AjPStr* pdest);

__deprecated AjBool  ajFileGets(AjPFile thys, AjPStr *pdest);
__deprecated AjBool  ajFileGetsL(AjPFile thys,
                                 AjPStr *pdest, ajlong* fpos);
__deprecated AjBool  ajFileGetsTrim(AjPFile thys, AjPStr *pdest);
__deprecated AjBool  ajFileGetsTrimL(AjPFile thys,
                                     AjPStr *pdest, ajlong* fpos);
__deprecated AjBool  ajFileReadAppend(AjPFile thys, AjPStr* pbuff);
__deprecated AjBool  ajFileReadLine(AjPFile thys, AjPStr *pdest);
__deprecated ajint   ajFileWriteByte(AjPFile thys, char ch);
__deprecated ajint   ajFileWriteInt2(AjPFile thys, ajshort i);
__deprecated ajint   ajFileWriteInt4(AjPFile thys, ajint i);
__deprecated size_t  ajFileRead(void* ptr, size_t element_size,
                                size_t count, AjPFile thys);
__deprecated size_t  ajFileWrite(AjPFile file, const void* ptr,
                                 size_t element_size, size_t count);
__deprecated ajint   ajFileWriteStr(AjPFile thys,
                                    const AjPStr str, ajuint len);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJFILEIO_H */

ajfmt.h/        1414437289  1010  513   100644  5093      `
/* @include ajfmt *************************************************************
**
** AJAX format functions
**
** String formatting routines. Similar to printf, fprintf, vprintf
** etc but the set of conversion specifiers is not fixed, and cannot
** store more characters than it can hold.
** There is also ajFmtScanS / ajFmtScanC which is an extended sscanf.
**
** Special formatting provided here:
**   %B : AJAX boolean
**   %D : AJAX date
**   %S : AJAX string
**   %z : Dynamic char* allocation in ajFmtScanS
**
** Other differences are:
**   %s : accepts null strings and prints null in angle brackets
**
** @author Copyright (C) 1998 Ian Longden
** @author Copyright (C) 1998 Peter Rice
** @author Copyright (C) 1999 Alan Bleasby
** @version $Revision: 1.22 $
** @modified Copyright (C) 2001 Alan Bleasby. Added ajFmtScanS functions
** @modified Copyright (C) 2003 Jon Ison. Added ajFmtScanC functions
** @modified $Date: 2012/03/22 21:19:08 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFMT_H
#define AJFMT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"
#include "ajstr.h"

#include <stdarg.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void   ajFmtFmt(int (*put) (int c, void *cl), void *cl,
                const char *fmt, ...);
void   ajFmtVfmt(int (*put) (int c, void *cl), void *cl,
                 const char *fmt, va_list ap);
void   ajFmtError(const char *fmt, ...);
void   ajFmtVError(const char *fmt, va_list ap);
void   ajFmtPrint(const char *fmt, ...);
void   ajFmtVPrint(const char *fmt, va_list ap);
void   ajFmtPrintFp(FILE *stream,
                    const char *fmt, ...);
void   ajFmtVPrintFp(FILE *stream,
                     const char *fmt, va_list ap);
void   ajFmtPrintF(AjPFile file,
                   const char *fmt, ...);
void   ajFmtVPrintF(AjPFile file,
                    const char *fmt, va_list ap);
ajint  ajFmtPrintCL(char *buf, ajint size,
                    const char *fmt, ...);
ajint  ajFmtVPrintCL(char *buf, ajint size,
                     const char *fmt, va_list ap);
void   ajFmtPrintSplit(AjPFile outf, const AjPStr str,
                       const char *prefix, ajint len,
                       const char *delim);
char*  ajFmtString(const char *fmt, ...);
char*  ajFmtVString(const char *fmt, va_list ap);
void   ajFmtPutd(const char *str, ajint len,
                 int (*put) (int c, void *cl), void *cl,
                 const ajuint *flags, ajint width, ajint precision);
void   ajFmtPuts(const char *str, ajint len,
                 int (*put) (int c, void *cl), void *cl,
                 const ajuint *flags, ajint width, ajint precision);
AjPStr ajFmtStr(const char *fmt, ...);
AjPStr ajFmtPrintS(AjPStr *pthis, const char *fmt, ...);
AjPStr ajFmtVPrintS(AjPStr *pthis, const char *fmt, va_list ap);
AjPStr ajFmtPrintAppS(AjPStr *pthis, const char *fmt, ...);
ajint  ajFmtVfmtCL(char *buf, ajint size, const char *fmt,
                   va_list ap);
ajint  ajFmtVfmtStrCL(char **buf, ajint pos, size_t *size,
                      const char *fmt, va_list ap);

ajint  ajFmtScanS(const AjPStr thys, const char *fmt, ...);
ajint  ajFmtScanC(const char *thys, const char *fmt, ...);
ajint  ajFmtScanF(AjPFile thys, const char *fmt, ...);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJFMT_H */

ajftp.h/        1414437289  1010  513   100644  2778      `
/* @include ajftp ************************************************************
**
** AJAX FTP (database) functions
**
** These functions control all aspects of AJAX ftp access
** via SEND/GET/POST protocols
**
** @author Copyright (C) 2010 Alan Bleasby
** @version $Revision: 1.2 $
** @modified $Date: 2011/11/17 13:04:31 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJFTP_H
#define AJFTP_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajsys.h"
#include "ajquery.h"
#include "ajhttp.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

FILE*  ajFtpOpen(const AjPStr dbname, const AjPStr host, ajint iport,
                 const AjPStr get, ajlong fpos, AjPSysSocket Psock);

AjPFilebuff ajFtpRead(const AjPStr dbname,
                      const AjPStr host,
                      ajint port,
                      ajlong fpos,
                      const AjPStr dbpath);


/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJFTP_H */
ajgraph.h/      1414437292  1010  513   100644  36186     `
/* @include ajgraph ***********************************************************
**
** General Plot/Printing routines.
**
** @version $Revision: 1.42 $
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/


#ifndef AJGRAPH_H
#define AJGRAPH_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "plplot.h"
#include "ajgraphstruct.h"
#include "ajdefine.h"
#include "ajstr.h"
#include "ajseqdata.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define GRAPH_XGAP      60
#define GRAPH_YGAP      60
#define GRAPH_TITLE_GAP 60

#define AJGRAPH_X_BOTTOM   0x0001  /* print xaxis bottom line */
#define AJGRAPH_Y_LEFT     0x0002  /* print yaxis left line */
#define AJGRAPH_X_TOP      0x0004  /* print xaxis top line */
#define AJGRAPH_Y_RIGHT    0x0008  /* printf y axis on the right*/
#define AJGRAPH_X_TICK     0x0010  /* add tick marks for x axis (bottom) */
#define AJGRAPH_Y_TICK     0x0020  /* add tick marks for y axis (left) */
#define AJGRAPH_X_LABEL    0x0040  /* add x axis label */
#define AJGRAPH_Y_LABEL    0x0080  /* add y axis label */
#define AJGRAPH_TITLE      0x0100  /* add title */
#define AJGRAPH_JOINPOINTS 0x0200  /* join the point data by a line */
#define AJGRAPH_OVERLAP    0x0400  /* write plots on top of each other */
#define AJGRAPH_Y_NUMLABEL_LEFT   0x0800
#define AJGRAPH_Y_INVERT_TICK     0x1000
#define AJGRAPH_Y_GRID            0x2000
#define AJGRAPH_X_NUMLABEL_ABOVE  0x4000
#define AJGRAPH_X_INVERT_TICK     0x8000
#define AJGRAPH_X_GRID            0x10000
#define AJGRAPH_CIRCLEPOINTS      0x20000
#define AJGRAPH_SUBTITLE          0x40000
#define AJGRAPH_GAPS              0x80000

#define GRAPH_XY (AJGRAPH_X_BOTTOM + AJGRAPH_Y_LEFT + AJGRAPH_X_TOP + \
		  AJGRAPH_Y_RIGHT + AJGRAPH_X_TICK + AJGRAPH_Y_TICK + \
		  AJGRAPH_Y_LABEL + AJGRAPH_JOINPOINTS + AJGRAPH_X_LABEL + \
		  AJGRAPH_TITLE + AJGRAPH_SUBTITLE + AJGRAPH_OVERLAP)

#define GRAPH_XY_MAIN (AJGRAPH_X_BOTTOM + AJGRAPH_Y_LEFT + AJGRAPH_Y_RIGHT + \
		       AJGRAPH_X_TOP + AJGRAPH_Y_TICK + AJGRAPH_X_LABEL + \
		       AJGRAPH_Y_LABEL + AJGRAPH_JOINPOINTS + AJGRAPH_TITLE + \
		       AJGRAPH_SUBTITLE + AJGRAPH_OVERLAP)



/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void          ajGraphicsListDevices (AjPList list);
void          ajGraphicsxyListDevices (AjPList list);
ajint*        ajGraphicsBasecolourNewNuc(const AjPStr codes);
ajint*        ajGraphicsBasecolourNewProt(const AjPStr codes);
ajint         ajGraphicsCheckColourC(const char* text);
ajint         ajGraphicsCheckColourS(const AjPStr colour);

void          ajGraphicsGetCharsize(float *defheight, float *currentscale);
ajint         ajGraphicsGetFgcolour(void);
ajuint        ajGraphicsGetOutfiles(AjPList* files);
void          ajGraphGetParamsPage(const AjPGraph thys,
                                   float *xp,float *yp, ajint *xleng,
                                   ajint *yleng, ajint *xoff, ajint *yoff);
void          ajGraphicsGetParamsPage(float *xp,float *yp, ajint *xleng,
                                      ajint *yleng, ajint *xoff, ajint *yoff);

void          ajGraphicsResetBgcolour(void);
void          ajGraphicsResetFgcolour(void);

void          ajGraphicsSetBgcolourBlack(void);
void          ajGraphicsSetBgcolourWhite(void);
float         ajGraphicsSetCharscale(float scale);
float         ajGraphicsSetCharsize(float size);
float         ajGraphicsSetDefcharsize(float size);
void          ajGraphicsSetDevice(const AjPGraph graph);
ajint         ajGraphicsSetFgcolour(ajint colour);
void          ajGraphicsSetPortrait(AjBool set);
void          ajGraphicsSetPenwidth(float width);
ajint         ajGraphicsSetFillpat (ajint style);
ajint         ajGraphicsSetLinestyle (ajint style);
void          ajGraphicsSetLabelsC(const char *x, const char *y,
                                   const char *title, const char *subtitle);
void          ajGraphicsSetLabelsS(const AjPStr x, const AjPStr y,
                                   const AjPStr title, const AjPStr subtitle);

void          ajGraphicsPlenv (float xmin, float xmax, float ymin, float ymax,
                               ajint flags);
void          ajGraphicsPrintType(AjPFile outf, AjBool full);
void          ajGraphicsSetPagesize(ajuint pagewidth, ajuint pageheight);

void          ajGraphicsClose (void);
void          ajGraphicsCloseWin (void);

void          ajGraphicsDumpDevices (void);
void          ajGraphicsxyDumpDevices (void);

void          ajGraphicsCalcRange(const float *array, ajuint npoints,
                                  float *min, float *max);

PLFLT         *ajGraphicsCalcCoord(PLFLT xcentre, PLFLT ycentre, PLFLT Radius,
                                   PLFLT Angle);
PLFLT         ajGraphicsCalcTextlengthC(const char *text);
PLFLT         ajGraphicsCalcTextlengthS(const AjPStr str);
PLFLT         ajGraphicsCalcTextheight(void);
PLFLT         ajGraphicsCalcDistance(PLFLT xx1, PLFLT yy1,
                                     PLFLT xx2, PLFLT yy2);
PLFLT         ajGraphicsCalcCharsize(PLFLT xx1, PLFLT yy1,
                                     PLFLT xx2, PLFLT yy2,
                                     const char *text, PLFLT TextHeight);

void          ajGraphicsDrawarcArc(PLFLT xcentre, PLFLT ycentre, PLFLT radius,
                                   PLFLT startangle, PLFLT endangle);
void          ajGraphicsDrawbarsHoriz(ajuint num, PLFLT *y,
                                      PLFLT *xmin, PLFLT *xmax);
void          ajGraphicsDrawbarsVert(ajuint num, PLFLT *x,
                                     PLFLT *ymin, PLFLT *ymax);
void          ajGraphicsDrawposBox(PLFLT xx0, PLFLT yy0,PLFLT size);
void          ajGraphicsDrawposBoxFill(PLFLT xx0, PLFLT yy0, PLFLT size);
void          ajGraphicsDrawposCircle(PLFLT xcentre, PLFLT ycentre,
                                      float radius);
void          ajGraphicsDrawposDia(PLFLT xx0, PLFLT yy0, PLFLT size);
void          ajGraphicsDrawposDiaFill(PLFLT xx0, PLFLT yy0, PLFLT size);
void          ajGraphicsDrawsetDots(ajuint nhum, PLFLT *xx1,PLFLT *yy1);
void          ajGraphicsDrawposLine(PLFLT xx1,PLFLT yy1,PLFLT xx2,PLFLT yy2);
void          ajGraphicsDrawsetLines(ajuint num, PLFLT *xx,PLFLT *yy,
                                     PLFLT *xx2,PLFLT *yy2);
void          ajGraphicsDrawsetPoly(ajuint num, PLFLT *x, PLFLT *y);
void          ajGraphicsDrawsetPolyFill(ajuint num, PLFLT *x, PLFLT *y);
void          ajGraphicsDrawposRect(PLFLT x, PLFLT y,PLFLT xx1, PLFLT yy1) ;
void          ajGraphicsDrawposRectFill(PLFLT x, PLFLT y,
                                     PLFLT xx1, PLFLT yy1) ;
void          ajGraphicsDrawarcRect(PLFLT xcentre, PLFLT ycentre, PLFLT radius,
                                    PLFLT startangle, PLFLT endangle,
                                    PLFLT height);
void          ajGraphicsDrawarcRectFill(PLFLT xcentre, PLFLT ycentre,
                                        PLFLT radius,
                                        PLFLT startangle, PLFLT endangle,
                                        PLFLT height);
void          ajGraphicsSetRlabelC(const char *text);
void          ajGraphicsSetRlabelS(const AjPStr str);
void          ajGraphicsDrawsetSymbols(ajuint num, PLFLT *xx,PLFLT *yy,
                                       ajuint symbol);
void          ajGraphicsDrawposTextJustify(PLFLT x, PLFLT y,
                                           const char *txt,
                                           PLFLT just);
void          ajGraphicsDrawarcTextJustify(PLFLT xcentre, PLFLT ycentre,
                                           PLFLT radius, PLFLT startangle,
                                           PLFLT endangle,
                                           const char *txt, PLFLT just);
void          ajGraphicsDrawposTextAtend(PLFLT x, PLFLT y, const char *txt);
void          ajGraphicsDrawposTextAtmid(PLFLT x, PLFLT y, const char *txt);
void          ajGraphicsDrawposTextAtstart(PLFLT x, PLFLT y,
                                           const char *txt);
void          ajGraphicsDrawposTextAtlineJustify(PLFLT x, PLFLT y,
                                                 PLFLT x2, PLFLT y2,
                                                 const char *txt, PLFLT just);
void          ajGraphicsDrawposTri(PLFLT x, PLFLT y, PLFLT x2, PLFLT y2,
                                   PLFLT x3, PLFLT y3);
void          ajGraphicsDrawposTriFill(PLFLT x, PLFLT y, PLFLT x2, PLFLT y2,
                                       PLFLT x3, PLFLT y3);

AjPGraph      ajGraphNew (void);
AjPGraph      ajGraphxyNewI (ajuint numofpoints);

void          ajGraphClear(AjPGraph thys);

const char*   ajGraphGetSubtitleC(const AjPGraph thys);
const AjPStr  ajGraphGetSubtitleS(const AjPGraph thys);
const char*   ajGraphGetTitleC(const AjPGraph thys);
const AjPStr  ajGraphGetTitleS(const AjPGraph thys);
const char*   ajGraphGetXlabelC(const AjPGraph thys);
const AjPStr  ajGraphGetXlabelS(const AjPGraph thys);
const char*   ajGraphGetYlabelC(const AjPGraph thys);
const AjPStr  ajGraphGetYlabelS(const AjPGraph thys);

void          ajGraphInitSeq (AjPGraph thys, const AjPSeq seq);
AjBool        ajGraphIsData(const AjPGraph thys);


void          ajGraphNewpage (AjPGraph thys, AjBool resetdefaults);
void          ajGraphAddLine (AjPGraph thys, float x, float y,
                                 float x2, float y2, ajint colour);
void          ajGraphAddRect (AjPGraph thys, float x, float y,
                                 float x2, float y2, ajint colour,
                                 ajint fill);
void          ajGraphAddTextC (AjPGraph thys, float x, float y,
				 ajint colour, const char *text);
void          ajGraphAddTextScaleC (AjPGraph thys, float x, float y,
                                       ajint colour, float scale,
                                       const char *text);
void          ajGraphAddTextS (AjPGraph thys, float x, float y,
                                  ajint colour, const AjPStr str);
void          ajGraphAddTextScaleS (AjPGraph thys, float x, float y,
                                       ajint colour, float scale,
                                       const AjPStr str);
void          ajGraphOpenFlags(AjPGraph thys, PLFLT xmin, PLFLT xmax,
                               PLFLT ymin, PLFLT ymax, ajint flags);
void          ajGraphOpenPlotset (AjPGraph thys, ajuint numofsets);
void          ajGraphOpenWin  (AjPGraph thys, float xmin, float xmax,
			       float ymin, float ymax);
void          ajGraphOpenMm(AjPGraph thys, float * xmm, float *ymm);
AjBool        ajGraphSetDevicetype(AjPGraph thys, const AjPStr type);
void          ajGraphSetMulti (AjPGraph thys, ajuint numsets);
void          ajGraphicsSetFilename (const AjPGraph graph);
void          ajGraphTrace (const AjPGraph thys);
AjBool        ajGraphDataAdd (AjPGraph thys, AjPGraphdata graphdata);
AjBool        ajGraphDataReplace (AjPGraph thys, AjPGraphdata graphdata);
AjBool        ajGraphDataReplaceI (AjPGraph thys, AjPGraphdata graphdata,
				   ajuint num);
void          ajGraphAppendTitleC(AjPGraph thys, const char* txt);
void          ajGraphAppendTitleS(AjPGraph thys, const AjPStr str);
void          ajGraphxyDel (AjPGraph* pmult);
void          ajGraphxyDisplay (AjPGraph thys, AjBool closeit );
void          ajGraphxySetRanges (AjPGraph thys);
AjBool        ajGraphxySetDevicetype (AjPGraph thys, const AjPStr devicetype);
void          ajGraphxyShowPointsCircle (AjPGraph thys, AjBool set);
void          ajGraphSetFlag (AjPGraph thys, ajint flag, AjBool istrue);
void          ajGraphxyShowPointsJoin (AjPGraph thys, AjBool set);
void          ajGraphxySetMinmax(AjPGraph thys,float xmin,float xmax,
				 float ymin,float ymax);
void          ajGraphSetOutfileS (AjPGraph thys, const AjPStr txt);
void          ajGraphSetOutfileC (AjPGraph thys, const char *txt);
void          ajGraphxySetflagOverlay (AjPGraph thys, AjBool set);

void          ajGraphShowSubtitle (AjPGraph thys, AjBool set);
void          ajGraphShowTitle (AjPGraph thys, AjBool set);

void          ajGraphSetDatanameC(AjPGraph thys, const char *name);
void          ajGraphSetDatanameS(AjPGraph thys, const AjPStr name);
void          ajGraphSetDescC(AjPGraph thys, const char* txt);
void          ajGraphSetDescS(AjPGraph thys, const AjPStr str);

void          ajGraphSetOutdirS(AjPGraph thys, const AjPStr str);
void          ajGraphSetTitleC(AjPGraph thys, const char *title);
void          ajGraphSetTitleS(AjPGraph thys, const AjPStr title);
void          ajGraphSetSubtitleC(AjPGraph thys, const char *title);
void          ajGraphSetSubtitleS(AjPGraph thys, const AjPStr title);
void          ajGraphSetXlabelC(AjPGraph thys, const char *title);
void          ajGraphSetXlabelS(AjPGraph thys, const AjPStr title);
void          ajGraphSetYlabelC(AjPGraph thys, const char *title);
void          ajGraphSetYlabelS(AjPGraph thys, const AjPStr title);

void          ajGraphxySetflagGaps(AjPGraph thys, AjBool overlap);

void          ajGraphxyShowRaxis(AjPGraph thys, AjBool set);
void          ajGraphxyShowUaxis(AjPGraph thys, AjBool set);
void          ajGraphxyShowUnum(AjPGraph thys, AjBool set);
void          ajGraphxyShowXaxis(AjPGraph thys, AjBool set);
void          ajGraphxyShowXlabel(AjPGraph thys, AjBool set);
void          ajGraphxyShowXtick(AjPGraph thys, AjBool set);
void          ajGraphxyShowYaxis(AjPGraph thys, AjBool set);
void          ajGraphxyShowYlabel(AjPGraph thys, AjBool set);
void          ajGraphxyShowYnum(AjPGraph thys, AjBool set);
void          ajGraphxyShowYtick(AjPGraph thys, AjBool set);

void          ajGraphxySetXendF(AjPGraph thys, float val);
void          ajGraphxyShowXgrid(AjPGraph thys, AjBool set);
void          ajGraphxyShowXinvert(AjPGraph thys, AjBool set);
void          ajGraphxySetXrangeII(AjPGraph thys, ajint start, ajint end);
void          ajGraphxySetXstartF(AjPGraph thys, float val);
void          ajGraphxySetYendF(AjPGraph thys, float val);
void          ajGraphxyShowYgrid(AjPGraph thys, AjBool set);
void          ajGraphxyShowYinvert(AjPGraph thys, AjBool set);
void          ajGraphxySetYrangeII(AjPGraph thys, ajint start, ajint end);
void          ajGraphxySetYstartF(AjPGraph thys, float val);

AjPGraphdata  ajGraphdataNew (void);
AjPGraphdata  ajGraphdataNewI (ajuint numsets);

void          ajGraphdataDel(AjPGraphdata *thys);
void          ajGraphdataAddposLine (AjPGraphdata graphs,
				     float x, float y,
				     float x2, float y2, ajint colour);
void          ajGraphdataAddposRect (AjPGraphdata graphs,
				     float x, float y,
				     float x2, float y2,
				     ajint colour, ajint fill);
void          ajGraphdataAddposTextC (AjPGraphdata graphs,
				     float x, float y,
				     ajint colour, const char *text);
void          ajGraphdataAddposTextS (AjPGraphdata graphs,
				     float x, float y,
				     ajint colour, const AjPStr str);
void          ajGraphdataAddposTextScaleC (AjPGraphdata graphs,
					  float x, float y,
					  ajint colour, float scale,
					  const char *text);
void          ajGraphdataAddposTextScaleS (AjPGraphdata graphs,
					  float x, float y,
					  ajint colour, float scale,
					  const AjPStr str);
void          ajGraphdataSetMinmax (AjPGraphdata graphdata, float xmin,
                                    float xmax, float ymin, float ymax);

void          ajGraphdataSetTruescale(AjPGraphdata graphdata, float xmin,
				     float xmax, float ymin, float ymax);
void          ajGraphdataSetTypeC(AjPGraphdata graphdata,
				     const char *txt);
void          ajGraphdataSetTypeS(AjPGraphdata graphdata,
				     const AjPStr str);

void          ajGraphdataCalcXY (AjPGraphdata graphdata,
                                 ajuint numofpoints,
				    float start, float incr,
				    const float* y);
void          ajGraphdataAddXY (AjPGraphdata graphdata,
                                const float *x, const float *y);
void          ajGraphdataSetDatanameC (AjPGraphdata graphdata,
					  const char *title);
void          ajGraphdataSetDatanameS (AjPGraphdata graphdata,
					  const AjPStr title);
void          ajGraphdataSetSubtitleC (AjPGraphdata graphdata,
					  const char *title);
void          ajGraphdataSetSubtitleS (AjPGraphdata graphdata,
					  const AjPStr title);
void          ajGraphdataSetTitleC (AjPGraphdata graphdata,
				       const char *title);
void          ajGraphdataSetTitleS (AjPGraphdata graphdata,
				       const AjPStr title);
void          ajGraphdataSetXlabelC (AjPGraphdata graphdata,
				       const char *title);
void          ajGraphdataSetXlabelS (AjPGraphdata graphdata,
				       const AjPStr title);
void          ajGraphdataSetYlabelC (AjPGraphdata graphdata,
				       const char *title);
void          ajGraphdataSetYlabelS (AjPGraphdata graphdata,
				       const AjPStr title);
void          ajGraphdataSetColour (AjPGraphdata graphdata,
				       ajint colour);
void          ajGraphdataSetLinetype (AjPGraphdata graphdata,
					 ajint type);
void          ajGraphdataTrace (const AjPGraphdata thys);

void          ajGraphicsExit(void);
void          ajGraphicsUnused(void);

/*
** End of prototype definitions
*/


#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif
#ifdef AJ_COMPILE_DEPRECATED

__deprecated void          ajGraphPlenv (float xmin, float xmax,
                                         float ymin, float ymax,
                                         ajint flags);
__deprecated void          ajGraphPrintType(AjPFile outf, AjBool full);
__deprecated void          ajGraphDumpDevices (void);
__deprecated void          ajGraphxyDumpDevices (void);
__deprecated void          ajGraphListDevices (AjPList list);
__deprecated void          ajGraphxyListDevices (AjPList list);

__deprecated void          ajGraphOpenPlot(AjPGraph thys, ajuint numofsets);
__deprecated void          ajGraphOpen (AjPGraph thys, PLFLT xmin, PLFLT xmax,
                                        PLFLT ymin, PLFLT ymax, ajint flags);
__deprecated void          ajGraphClose (void);
__deprecated void          ajGraphCloseWin (void);
__deprecated void          ajGraphdataAddLine (AjPGraphdata graphs,
                                               float x, float y,
                                               float x2, float y2,
                                               ajint colour);
__deprecated void          ajGraphdataAddRect (AjPGraphdata graphs,
                                               float x, float y,
                                               float x2, float y2,
                                               ajint colour, ajint fill);
__deprecated void          ajGraphdataSetXY (AjPGraphdata graphdata,
                                             const float *x, const float *y);
__deprecated void          ajGraphdataAddTextScale (AjPGraphdata graphs,
                                                    float xx1, float yy1,
                                                    ajint colour, float scale,
                                                    const char *text);
__deprecated void          ajGraphdataAddText (AjPGraphdata graphs,
                                               float xx1, float yy1,
                                               ajint colour, const char *text);
__deprecated void          ajGraphdataSetMaxima(AjPGraphdata graphdata,
                                                float xmin, float xmax,
                                                float ymin, float ymax);
__deprecated void          ajGraphdataSetMaxMin (AjPGraphdata graphdata,
                                                 float xmin, float xmax,
                                                 float ymin, float ymax);

__deprecated void          ajGraphdataSetLineType (AjPGraphdata graphdata,
                                                   ajint type);
__deprecated void          ajGraphxySetXinvert(AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXgrid(AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetGaps(AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetOverLap (AjPGraph thys, AjBool overlap);
__deprecated void          ajGraphxySetMaxMin(AjPGraph thys,
                                              float xmin,float xmax,
                                              float ymin,float ymax);
__deprecated void          ajGraphxySetJoinPoints (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetCirclePoints (AjPGraph thys, AjBool set);
__deprecated void          ajGraphAddText (AjPGraph thys, float xx1, float yy1,
                                           ajint colour, const char *text);
__deprecated void          ajGraphAddTextScale (AjPGraph thys,
                                                float xx1, float yy1,
                                                ajint colour, float scale,
                                                const char *text);
__deprecated void          ajGraphxyCheckMaxMin (AjPGraph thys);
__deprecated void          ajGraphdataSetXTitleC (AjPGraphdata graphdata,
                                                  const char *title);
__deprecated void          ajGraphdataSetXTitleS (AjPGraphdata graphdata,
                                                  const AjPStr title);
__deprecated void          ajGraphdataSetYTitleC (AjPGraphdata graphdata,
                                                  const char *title);
__deprecated void          ajGraphdataSetYTitleS (AjPGraphdata graphdata,
                                                  const AjPStr title);
__deprecated const char*   ajGraphGetXTitleC(const AjPGraph thys);
__deprecated const AjPStr  ajGraphGetXTitleS(const AjPGraph thys);
__deprecated const char*   ajGraphGetYTitleC(const AjPGraph thys);
__deprecated const AjPStr  ajGraphGetYTitleS(const AjPGraph thys);
__deprecated void          ajGraphdataSetSubTitleC (AjPGraphdata graphdata,
                                                    const char *title);
__deprecated void          ajGraphdataSetSubTitleS (AjPGraphdata graphdata,
                                                    const AjPStr title);
__deprecated const char*   ajGraphGetSubTitleC(const AjPGraph thys);
__deprecated const AjPStr  ajGraphGetSubTitleS(const AjPGraph thys);
__deprecated void          ajGraphdataSetYTitle  (AjPGraphdata graphdata,
                                                  const AjPStr title);
__deprecated void          ajGraphdataSetXTitle  (AjPGraphdata graphdata,
                                                  const AjPStr title);
__deprecated void          ajGraphdataSetTitle  (AjPGraphdata graphdata,
                                                 const AjPStr title);
__deprecated void          ajGraphdataSetSubTitle  (AjPGraphdata graphdata,
                                                    const AjPStr title);
__deprecated const AjPStr  ajGraphGetSubTitle(const AjPGraph thys);
__deprecated const AjPStr  ajGraphGetTitle(const AjPGraph thys);
__deprecated const AjPStr  ajGraphGetXTitle(const AjPGraph thys);
__deprecated const AjPStr  ajGraphGetYTitle(const AjPGraph thys);
__deprecated PLFLT         ajGraphTextLength(PLFLT xx1, PLFLT yy1,
                                             PLFLT xx2, PLFLT yy2,
                                             const char *text);
__deprecated PLFLT         ajGraphTextHeight(PLFLT xx1, PLFLT xx2,
                                             PLFLT yy1, PLFLT yy2);
__deprecated PLFLT         ajGraphFitTextAtline(PLFLT xx1, PLFLT yy1,
                                                PLFLT xx2, PLFLT yy2,
                                                const char *text,
                                                PLFLT TextHeight);
__deprecated PLFLT         ajGraphDistPts(PLFLT xx1, PLFLT yy1,
                                          PLFLT xx2, PLFLT yy2);
__deprecated void          ajGraphArrayMaxMin(const float *array,
                                              ajint npoints,
                                              float *min, float *max);
__deprecated PLFLT         *ajComputeCoord(PLFLT xcentre, PLFLT ycentre,
                                           PLFLT Radius,  PLFLT Angle);
__deprecated ajint         ajGraphicsGetColourFore(void);
__deprecated void          ajGraphicsDrawRlabelC(const char *text);
__deprecated void          ajGraphicsDrawRlabelS(const AjPStr str);
__deprecated void          ajGraphNewPage (AjPGraph thys,
                                           AjBool resetdefaults);
__deprecated void          ajGraphSetTitlePlus(AjPGraph thys,
                                               const AjPStr title);
__deprecated AjBool        ajGraphxySet (AjPGraph thys, const AjPStr type);
__deprecated void          ajGraphSetOutputDirS(AjPGraph thys,
                                                const AjPStr str);
__deprecated void          ajGraphSetOut (AjPGraph thys, const AjPStr txt);
__deprecated void          ajGraphSetOutC (AjPGraph thys, const char *txt);
__deprecated void          ajGraphSetName (const AjPGraph thys);
__deprecated void          ajGraphSetPage(ajuint width, ajuint height);
__deprecated AjBool        ajGraphSet (AjPGraph thys, const AjPStr type);
__deprecated void          ajGraphSetPenWidth(float width);
__deprecated ajint         ajGraphSetFillPat (ajint style);
__deprecated ajint         ajGraphSetLineStyle (ajint style);

__deprecated void          ajGraphSetDevice(const AjPGraph thys);
__deprecated ajint         ajGraphInfo(AjPList* files);
__deprecated void          ajGraphGetOut (float *xp,float *yp,
                                          ajint *xleng, ajint *yleng,
                                          ajint *xoff, ajint *yoff);
__deprecated ajint         ajGraphGetColour(void);
__deprecated ajint*        ajGraphGetBaseColour (void);
__deprecated ajint*        ajGraphGetBaseColourNuc(const AjPStr codes);
__deprecated ajint*        ajGraphGetBaseColourProt(const AjPStr codes);
__deprecated float         ajGraphSetCharScale (float scale);
__deprecated float         ajGraphSetCharSize(float size);
__deprecated void          ajGraphGetCharSize(float *defheight,
                                              float *currentscale);
__deprecated float         ajGraphSetDefCharSize (float size);
__deprecated void          ajGraphxySetXBottom (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXLabelTop (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXTop (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXEnd (AjPGraph thys, float val);
__deprecated void          ajGraphxySetXGrid (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXInvTicks (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXLabel (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXRangeII (AjPGraph thys,
                                                 ajint start, ajint end);
__deprecated void          ajGraphxySetXStart (AjPGraph thys, float val);
__deprecated void          ajGraphxySetYEnd (AjPGraph thys, float val);
__deprecated void          ajGraphxySetYGrid (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetYInvTicks (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetYStart (AjPGraph thys, float val);
__deprecated void          ajGraphxySetYLeft (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetYLabel (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetXTick (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetYLabelLeft (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetYRangeII (AjPGraph thys,
                                                 ajint start, ajint end);
__deprecated void          ajGraphxySetYTick (AjPGraph thys, AjBool set);
__deprecated void          ajGraphxySetYRight(AjPGraph thys, AjBool set);
__deprecated void          ajGraphSetDir(AjPGraph thys, const AjPStr txt);
__deprecated void          ajGraphSetDesc(AjPGraph thys, const AjPStr title);
__deprecated void          ajGraphSetSubTitle (AjPGraph thys,
                                               const AjPStr title);
__deprecated void          ajGraphSetSubTitleC (AjPGraph thys,
                                                const char *title);
__deprecated void          ajGraphSetXTitle  (AjPGraph thys,
                                              const AjPStr title);
__deprecated void          ajGraphSetXTitleC (AjPGraph thys,
                                              const char *title);
__deprecated void          ajGraphSetYTitle  (AjPGraph thys,
                                              const AjPStr title);
__deprecated void          ajGraphSetYTitleC (AjPGraph thys,
                                              const char *title);
__deprecated void          ajGraphSetSubTitleDo (AjPGraph thys, AjBool set);
__deprecated void          ajGraphSetTitleDo (AjPGraph thys, AjBool set);
__deprecated void          ajGraphSetTitle (AjPGraph thys, const AjPStr title);
__deprecated void          ajGraphLabel (const char *x, const char *y,
                                         const char *title,
                                         const char *subtitle);
__deprecated void          ajGraphDrawTextOnCurve(PLFLT xcentre, PLFLT ycentre,
                                                  PLFLT Radius,
                                                  PLFLT StartAngle,
                                                  PLFLT EndAngle,
                                                  const char *Text, PLFLT just);
__deprecated void          ajGraphFillRectangleOnCurve(PLFLT xcentre,
                                                       PLFLT ycentre,
                                                       PLFLT Radius,
                                                       PLFLT BoxHeight,
                                                       PLFLT StartAngle,
                                                       PLFLT EndAngle);

__deprecated void          ajGraphRectangleOnCurve(PLFLT xcentre, PLFLT ycentre,
                                                   PLFLT Radius,
                                                   PLFLT BoxHeight,
                                                   PLFLT StartAngle,
                                                   PLFLT EndAngle);
__deprecated void          ajGraphPartCircle(PLFLT xcentre, PLFLT ycentre,
                                             PLFLT Radius,
                                             PLFLT StartAngle, PLFLT EndAngle);
__deprecated void          ajGraphBox (PLFLT xx0, PLFLT yy0,PLFLT size);
__deprecated void          ajGraphBoxFill (PLFLT xx0, PLFLT yy0, PLFLT size);
__deprecated void          ajGraphRectFill (PLFLT xx0, PLFLT yy0,
                                            PLFLT xx1, PLFLT yy1) ;
__deprecated void          ajGraphRect (PLFLT xx0, PLFLT yy0,
                                        PLFLT xx1, PLFLT yy1) ;
__deprecated void          ajGraphLine (PLFLT xx1,PLFLT yy1,
                                        PLFLT xx2,PLFLT yy2);
__deprecated void          ajGraphCircle (PLFLT xcentre, PLFLT ycentre,
                                          float radius);
__deprecated void          ajGraphDia (PLFLT xx0, PLFLT yy0, PLFLT size);
__deprecated void          ajGraphDiaFill (PLFLT xx0, PLFLT yy0, PLFLT size);
__deprecated void          ajGraphPoly (ajuint n, PLFLT *x, PLFLT *y);
__deprecated void          ajGraphPolyFill (ajuint n, PLFLT *x, PLFLT *y);
__deprecated void          ajGraphLines (PLFLT *xx1,PLFLT *yy1,
                                         PLFLT *xx2,PLFLT *yy2,
                                         ajuint numoflines);
__deprecated void          ajGraphTextLine (PLFLT xx1, PLFLT yy1,
                                            PLFLT xx2, PLFLT yy2,
                                            const char *text, PLFLT just);
__deprecated void          ajGraphTri (PLFLT xx1, PLFLT yy1,
                                       PLFLT xx2, PLFLT yy2,
                                       PLFLT x3, PLFLT y3);
__deprecated void          ajGraphTriFill (PLFLT xx1, PLFLT yy1,
                                           PLFLT xx2, PLFLT yy2,
                                           PLFLT x3, PLFLT y3);
__deprecated void          ajGraphDots (PLFLT *xx1,PLFLT *yy1,
                                        ajuint numofdots);
__deprecated void          ajGraphSymbols( ajuint numofdots,
                                           PLFLT *xx1,PLFLT *yy1,
                                           ajuint symbol);
__deprecated void          ajGraphText (PLFLT xx1, PLFLT yy1,
                                        const char *text, PLFLT just);
__deprecated void          ajGraphTextEnd (PLFLT xx1, PLFLT yy1,
                                           const char *text);
__deprecated void          ajGraphTextMid (PLFLT xx1, PLFLT yy1,
                                           const char *text);
__deprecated void          ajGraphTextStart (PLFLT xx1, PLFLT yy1,
                                             const char *text);

__deprecated void          ajGraphHoriBars (ajuint numofpoints, PLFLT *y,
                                            PLFLT *xmin, PLFLT *xmax);
__deprecated void          ajGraphVertBars (ajuint numofpoints, PLFLT *x,
                                            PLFLT *ymin, PLFLT *ymax);

__deprecated void          ajGraphSetBackBlack (void);
__deprecated void          ajGraphSetBackWhite (void);
__deprecated void          ajGraphColourBack (void);
__deprecated void          ajGraphColourFore(void);
__deprecated ajint         ajGraphSetFore (ajint colour);

__deprecated void          ajGraphInit (const char *pgm,
                                        ajint argc, char * const argv[]);
__deprecated void          ajGraphInitPV(const char *pgm,
                                         ajint argc, char * const argv[],
                                         const char *package,
                                         const char *packversion);
__deprecated void          ajGraphLabelYRight (const char *text);

__deprecated void          ajGraphSetOri(ajint ori);

__deprecated ajint         ajGraphCheckColour (const AjPStr colour);

#endif

AJ_END_DECLS

#endif  /* !AJGRAPH_H */
ajgraphstruct.h/1414437292  1010  513   100644  7521      `
/* @include ajgraphstruct *****************************************************
**
** General Plot/Printing data structure
**
** @version $Revision: 1.10 $
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJGRAPHSTRUCT_H
#define AJGRAPHSTRUCT_H

#define MAX_STRING 180


/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajmess.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPGraphobj *******************************************************
**
** AJAX data structure for graph objects, contained as a substructure
** in AjPGraphdata
**
** @attr type [ajuint] Object type in AjEGraphObjectTypes
** @attr colour [ajuint] See AjEGraphColour for plplot colours
** @attr text [AjPStr] Text to plot
** @attr xx1 [float] x start
** @attr xx2 [float] x end
** @attr yy1 [float] y start
** @attr yy2 [float] y end
** @attr next [struct AjSGraphobj*] link to next object in the list
** @attr scale [float] scale for text (0.0 to use the default)
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSGraphobj {
  ajuint type;
  ajuint colour;
  AjPStr text;
  float xx1;
  float xx2;
  float yy1;
  float yy2;
  struct AjSGraphobj *next;
  float scale;
  char Padding[4];
} AjOGraphobj;
#define AjPGraphobj AjOGraphobj*




/* @data AjPGraphdata ******************************************************
**
** Graph data object. Substructure of AjPGraph.
**
** @attr x [float*] x coordinates
** @attr y [float*] y coordinates
** @attr Dataobj [AjPGraphobj] First graph object - links to rest
** @attr title [AjPStr] Plot title
** @attr subtitle [AjPStr] Plot subtitle
** @attr xaxis [AjPStr] Plot x axis title
** @attr yaxis [AjPStr] Plot y axis title
** @attr gtype [AjPStr] Graph type: 2D, Tick etc
** @attr dataname [AjPStr] Source data name
** @attr xcalc [AjBool] if x calculated then delete after
** @attr ycalc [AjBool] as with x. So we do not delete data if it was
**                      passed as a ptr
** @attr truescale [AjBool] if true xy scale has been set
** @attr numofpoints [ajuint] Number of points in x and y
** @attr numofobjects [ajuint] Number of graph objects starting at Obj
** @attr minX [float] Lowest x value
** @attr maxX [float] Highest x value
** @attr minY [float] Lowest y value
** @attr maxY [float] Highest y value
** @attr tminX [float] First x value to plot
** @attr tmaxX [float] Last x value to plot
** @attr tminY [float] First y value to plot
** @attr tmaxY [float] Last y value to plot
** @attr colour [ajint] See AjEGraphColour for plplot colours
** @attr lineType [ajint] Line type for plplot
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSGraphdata {
  float *x;
  float *y;
  AjPGraphobj Dataobj;
  AjPStr title;
  AjPStr subtitle;
  AjPStr xaxis;
  AjPStr yaxis;
  AjPStr gtype;
  AjPStr dataname;
  AjBool xcalc;
  AjBool ycalc;
  AjBool truescale;
  ajuint numofpoints;
  ajuint numofobjects;
  float minX;
  float maxX;
  float minY;
  float maxY;
  float tminX;
  float tmaxX;
  float tminY;
  float tmaxY;
  ajint colour;
  ajint lineType;
  char Padding[4];
} AjOGraphdata;
#define AjPGraphdata AjOGraphdata*




/* @data AjPGraph *************************************************************
**
** Graph object.
**
** @attr displaytype [ajuint] Displaytype index to graphType
** @attr numsets [ajuint] Number of sets in a multiple graph
** @attr numofgraphs [ajuint] Number of graphs in graphs
** @attr numofobjects [ajuint] Number of objects in Mainobj
** @attr numofgraphsmax [ajuint] Maximum number of graphs expected
** @attr flags [ajuint] over rides the EmbGraphData flags
** @attr minX [float] Lowest x value for all graphs
** @attr maxX [float] Highest x value for all graphs
** @attr minY [float] Lowest y value for all graphs
** @attr maxY [float] Highest y value for all graphs
** @attr xstart [float] First x value to plot
** @attr xend [float] Last x value to plot
** @attr ystart [float] First y value to plot
** @attr yend [float] Last y value to plot
** @attr ready [AjBool] Set by plplot device init
** @attr minmaxcalc [AjBool] Set true when (xy)start/end are set
** @attr windowset [AjBool] Set true when (xy) window coordinates are set
** @attr isdata [AjBool] True for a data type graph
** @attr desc [AjPStr] Plot description, used to set default title
** @attr title [AjPStr] Plot title
** @attr subtitle [AjPStr] Plot subtitle
** @attr xaxis [AjPStr] Plot x axis title
** @attr yaxis [AjPStr] Plot y axis title
** @attr outputfile [AjPStr] Output filename
** @attr dataname [AjPStr] Data source name for datafile outputs
** @attr graphs [AjPGraphdata*] XY Data to plot for Graph(s)
** @attr Mainobj [AjPGraphobj] Objects to plot for single graph
** @@
******************************************************************************/

typedef struct AjSGraph {

  ajuint displaytype;
  ajuint numsets;
  ajuint numofgraphs;
  ajuint numofobjects;
  ajuint numofgraphsmax;
  ajuint flags;
  float minX;
  float maxX;
  float minY;
  float maxY;
  float xstart;
  float xend;
  float ystart;
  float yend;
  AjBool ready;
  AjBool minmaxcalc;
  AjBool windowset;
  AjBool isdata;
  AjPStr desc;
  AjPStr title;
  AjPStr subtitle;
  AjPStr xaxis;
  AjPStr yaxis;
  AjPStr outputfile;
  AjPStr dataname;
  AjPGraphdata *graphs;
  AjPGraphobj Mainobj;
} AjOGraph;
#define AjPGraph AjOGraph*

enum AjEGraphColours {BLACK, RED, YELLOW, GREEN, AQUAMARINE,
		      PINK, WHEAT, GREY, BROWN, BLUE, BLUEVIOLET,
		      CYAN, TURQUOISE, MAGENTA, SALMON, WHITE};


#define MAXCOL 15

/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



AJ_END_DECLS

#endif  /* !AJGRAPHSTRUCT_H */

ajhist.h/       1414437292  1010  513   100644  8408      `
/* @include ajhist ************************************************************
**
** AJAX GRAPH (ajax histogram) functions
**
** These functions control all aspects of AJAX histogram.
**
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.25 $
** @modified 1988-11-12 pmr First version
** @modified 1999 ajb ANSIfication
** @modified $Date: 2011/09/27 11:19:27 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJHIST_H
#define AJHIST_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajgraph.h"
#include "ajstr.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define HIST_ONTOP      0
#define HIST_SIDEBYSIDE 1
#define HIST_SEPARATE   2

#define GRAPH_HIST (AJGRAPH_X_BOTTOM + AJGRAPH_Y_LEFT + AJGRAPH_Y_RIGHT + \
AJGRAPH_Y_INVERT_TICK + AJGRAPH_X_INVERT_TICK + AJGRAPH_Y_TICK + \
AJGRAPH_X_TICK + AJGRAPH_X_LABEL + AJGRAPH_Y_LABEL + AJGRAPH_TITLE )

#ifndef WIN32
extern ajint aj_hist_mark;
#else
#ifdef AJAXGDLL_EXPORTS
__declspec(dllexport) ajint aj_hist_mark;
#else
__declspec(dllimport) ajint aj_hist_mark;
#endif
#endif




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPHistdata **********************************************************
**
** AJAX data structure for histogram graph data
**
** @attr data [float*] y coordinates
** @attr deletedata [AjBool] if true, delete data
** @attr colour [ajint] colour code
** @attr title [AjPStr] graph title
** @attr subtitle [AjPStr] graph subtitle
** @attr xaxis [AjPStr] x axis title
** @attr yaxis [AjPStr] y axis title
** @attr pattern [ajint] pattern code
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSHistdata {
  float *data;
  AjBool deletedata;
  ajint colour;
  AjPStr title;
  AjPStr subtitle;
  AjPStr xaxis;
  AjPStr yaxis;
  ajint pattern;
  char Padding[4];
} AjOHistdata;
#define AjPHistdata AjOHistdata*




/* @data AjPHist **************************************************************
**
** AJAX data structure for histogram graph objects
**
**
** @attr numofsets [ajuint] number of current sets
** @attr numofsetsmax [ajuint] maximum number of sets
** @attr numofdatapoints [ajuint] number of data points
** @attr xmin [float] Lowest x value
** @attr xmax [float] Highest x value
** @attr displaytype [ajuint] Display type index
** @attr bins [ajuint] Number of histogram bins
** @attr BaW [AjBool] Black and white rendering if ajTrue
** @attr title [AjPStr] Plot title
** @attr subtitle [AjPStr] Plot subtitle
** @attr xaxis [AjPStr] x axis title
** @attr yaxisleft [AjPStr] y axis title
** @attr yaxisright [AjPStr] second y axis title for right side
** @attr graph [AjPGraph] Graph
** @attr hists [AjPHistdata*] Histogram bin data
** @@
******************************************************************************/

typedef struct AjSHist {
  ajuint numofsets;
  ajuint numofsetsmax;
  ajuint numofdatapoints;
  float xmin;
  float xmax;
  ajuint displaytype;
  ajuint bins;
  AjBool BaW;
  AjPStr title;
  AjPStr subtitle;
  AjPStr xaxis;
  AjPStr yaxisleft;
  AjPStr yaxisright;
  AjPGraph graph;
  AjPHistdata *hists;
} AjOHist;
#define AjPHist AjOHist*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void    ajHistogramClose (void);
void    ajHistDataCopy (AjPHist hist, ajuint indexnum, PLFLT const *data);
void    ajHistDel (AjPHist* hist);
void    ajHistDisplay (const AjPHist hist);
AjPHist ajHistNew (ajuint numofsets, ajuint numofpoints);
AjPHist ajHistNewG (ajuint numofsets, ajuint numofpoints, AjPGraph graph);
void    ajHistSetMono (AjPHist hist, AjBool set);
void    ajHistSetmultiColour(AjPHist hist, ajuint indexnum, ajint colour);
void    ajHistSetmultiTitleS (AjPHist hist, ajuint indexnum,
                              const AjPStr title);
void    ajHistSetmultiTitleC (AjPHist hist, ajuint indexnum, const char *title);
void    ajHistSetmultiXlabelS (AjPHist hist, ajuint indexnum,
                               const AjPStr title);
void    ajHistSetmultiXlabelC (AjPHist hist, ajuint indexnum,
                               const char *title);
void    ajHistSetmultiYlabelS (AjPHist hist, ajuint indexnum,
                               const AjPStr title);
void    ajHistSetmultiYlabelC (AjPHist hist, ajuint indexnum,
                               const char *title);
void    ajHistSetmultiPattern (AjPHist hist, ajuint indexnum, ajint style);
void    ajHistDataAdd (AjPHist hist, ajuint indexnum, PLFLT *data);
void    ajHistSetTitleC (AjPHist hist, const char* strng);
void    ajHistSetXlabelC (AjPHist hist, const char* strng);
void    ajHistSetYlabelC (AjPHist hist,const  char* strng);
void    ajHistSetRlabelC (AjPHist hist, const char* strng);

void    ajHistogramSetMark(ajint mark);

/*
** End of prototype definitions
*/

#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif
#ifdef AJ_COMPILE_DEPRECATED

__deprecated void    ajHistSetColour(AjPHist hist, ajuint indexnum,
                                     ajint colour);
__deprecated void    ajHistSetPattern (AjPHist hist, ajuint indexnum,
                                       ajint style);
__deprecated void    ajHistSetBlackandWhite (AjPHist hist, AjBool set);
__deprecated void    ajHistSetXAxisC (AjPHist hist, const char* strng);
__deprecated void    ajHistSetYAxisLeftC (AjPHist hist,const  char* strng);
__deprecated void    ajHistSetYAxisRightC (AjPHist hist, const char* strng);
__deprecated void    ajHistCopyData (AjPHist hist, ajuint indexnum,
                                     const PLFLT *data);
__deprecated void    ajHistSetPtrToData (AjPHist hist,
                                         ajint indexnum, PLFLT *data);
__deprecated void    ajHistSetMark(ajint mark);
__deprecated void    ajHistClose (void);
__deprecated void    ajHistDelete (AjPHist* hist);
__deprecated void    ajHistSetMultiTitle  (AjPHist hist, ajint indexnum,
                                           const AjPStr title);
__deprecated void    ajHistSetMultiTitleC (AjPHist hist, ajint indexnum,
                                           const char *title);
__deprecated void    ajHistSetMultiXTitle  (AjPHist hist, ajint indexnum,
                                            const AjPStr title);
__deprecated void    ajHistSetMultiXTitleC (AjPHist hist, ajint indexnum,
                                            const char *title);
__deprecated void    ajHistSetMultiYTitle  (AjPHist hist, ajint indexnum,
                                            const AjPStr title);
__deprecated void    ajHistSetMultiYTitleC (AjPHist hist, ajint indexnum,
                                            const char *title);

#endif

AJ_END_DECLS

#endif  /* !AJHIST_H */
ajhttp.h/       1414437289  1010  513   100644  4910      `
/* @include ajhttp ************************************************************
**
** AJAX HTTP (database) functions
**
** These functions control all aspects of AJAX http access
** via SEND/GET/POST protocols
**
** @author Copyright (C) 2010 Alan Bleasby
** @version $Revision: 1.16 $
** @modified $Date: 2011/11/23 09:56:06 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJHTTP_H
#define AJHTTP_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajsys.h"
#include "ajquery.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPUrlref ************************************************************
**
** Structure to hold parts of a URL
**
** @alias AjSUrlref
** @alias AjOUrlref
**
** @attr Method [AjPStr] Method of access (e.g. http)
** @attr Host [AjPStr] host
** @attr Port [AjPStr] Port
** @attr Absolute [AjPStr] Absolute path
** @attr Relative [AjPStr] Relative path
** @attr Fragment [AjPStr] Fragment/section
** @attr Username [AjPStr] Username
** @attr Password [AjPStr] Password
** @@
******************************************************************************/

typedef struct AjSUrlref
{
    AjPStr Method;
    AjPStr Host;
    AjPStr Port;
    AjPStr Absolute;
    AjPStr Relative;
    AjPStr Fragment;
    AjPStr Username;
    AjPStr Password;
} AjOUrlref;

#define AjPUrlref AjOUrlref*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool ajHttpGetProxyinfo(const AjPStr dbproxy, ajint* proxyport,
                          AjPStr* proxyname, AjPStr* proxyauth,
                          AjPStr* proxycreds);
AjBool ajHttpGetVersion(const AjPStr version, AjPStr* httpver);
FILE*  ajHttpOpen(const AjPStr dbname, const AjPStr host, ajint iport,
                  const AjPStr get, AjPSysSocket Psock);
FILE*  ajHttpOpenProxy(const AjPStr dbname, const AjPStr proxyname,
                       ajint proxyport, const AjPStr proxyauth,
                       const AjPStr proxycreds, const AjPStr host,
                       ajint iport, const AjPStr get, AjPSysSocket Psock);
AjPFilebuff ajHttpRead(const AjPStr dbhttpver, const AjPStr dbname,
                       const AjPStr dbproxy, const AjPStr host,
                       ajint port, const AjPStr dbpath);
AjPFilebuff ajHttpReadPos(const AjPStr dbhttpver, const AjPStr dbname,
                          const AjPStr dbproxy, const AjPStr host,
                          ajint port, const AjPStr dbpath, ajlong fpos);
AjBool ajHttpRedirect(AjPFilebuff buff, AjPStr* host, ajint* port,
                      AjPStr* get, ajuint *httpcode);

AjPUrlref ajHttpUrlrefNew(void);
void   ajHttpUrlrefDel(AjPUrlref *thys);
void   ajHttpUrlrefParseC(AjPUrlref *parts, const char *url);
void   ajHttpUrlrefParseS(AjPUrlref *parts, const AjPStr surl);
void   ajHttpUrlrefSplitPort(AjPUrlref urli);
void   ajHttpUrlrefSplitUsername(AjPUrlref urli);

AjBool ajHttpQueryUrl(const AjPQuery qry, ajint* iport, AjPStr* host,
                      AjPStr* urlget);

void   ajHttpUrlDeconstruct(const AjPStr url, ajint* iport, AjPStr* host,
                            AjPStr* urlget);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJHTTP_H */
ajindex.h/      1414437289  1010  513   100644  44518     `
/* @include ajindex ***********************************************************
**
** B+ Tree Indexing plus Disc Cache.
**
** @author Copyright (c) 2003 Alan Bleasby
** @version $Revision: 1.44 $
** @modified  subsequently heavily modified by Peter Rice
** @modified $Date: 2013/01/24 15:30:42 $ by $Author: rice $
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJINDEX_H
#define AJINDEX_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajtable.h"
#include "ajlist.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define BT_PAGESIZE BUFSIZ      /* Default cache page size
                                **  use C default buffer size */
#define BT_CACHESIZE 100

#define BT_MAXRETRIES   100     /* Maximum number of read/write attempts */
#define BT_KWLIMIT     15

#define BT_LOCK  2
#define BT_DIRTY 1
#define BT_CLEAN 0

#define BT_READ  ajTrue
#define BT_WRITE ajFalse


#define BT_ROOT           1
#define BT_INTERNAL       2
#define BT_LEAF           4
#define BT_IDBUCKET       8
#define BT_OVERFLOW      16
#define BT_PRIBUCKET     32
#define BT_SECBUCKET     64
#define BT_NUMBUCKET    128
#define BT_FREEPAGE     256
#define BT_SECFREEPAGE  512
#define BT_SECROOT     1024
#define BT_SECINTERNAL 2048
#define BT_SECLEAF     4096
#define BT_SECOVERFLOW 8192
#define BT_MAXTYPE     8192

#define BTNO_BALANCE 100L
#define BTNO_NODE    100L


#define ID_EXTENSION "xid"
#define AC_EXTENSION "xac"
#define SV_EXTENSION "xsv"
#define DE_EXTENSION "xde"
#define KW_EXTENSION "xkw"
#define TX_EXTENSION "xtx"


/* Useful page filling values */

/*
 *  Length of integers after the ID string in a primary bucket
 *  i.e. dbno + dups + offset
 * then later add refoffset
 */
#define BT_DDOFF (sizeof(ajuint) + sizeof(ajuint) + sizeof(ajulong))

/*
 *  Preamble before key lengths in an internal node
 * i.e. nodetype+blocknumber+nkeys+totlen+left+right+overflow+prev
 */
#define BT_NODEPREAMBLE (sizeof(ajuint) + sizeof(ajulong) + sizeof(ajuint) + \
                         sizeof(ajuint) + sizeof(ajulong) + sizeof(ajulong) + \
                         sizeof(ajulong) + sizeof(ajulong))

/*
 *  This is the length of extra pointer required in primary index
 *  page space calculations i.e. the total space taken by
 *  key/pointer pairs in an internal page is:
 *  BT_PTRLEN + ((keylenmax + sizeof(long))*nkeys)
 *  This is because there is one more pointer than the
 *  value of 'order' in a B+ tree.
 */
#define BT_PTRLEN sizeof(ajulong)


/*
 *  Length of extra space, on top of a key string, taken up by a
 *  key in an internal node. This is an ajuint holding the length
 *  of a string plus the length of a block pointer (ajulong)
 */
#define BT_IDKEYEXTRA (sizeof(ajuint) + sizeof(ajulong))


/*
 *  Preamble before key lengths in an id bucket
 *  i.e. nodetype+nentries+overflow
 */
#define BT_BUCKPREAMBLE (sizeof(ajuint) + sizeof(ajuint) + sizeof(ajulong))


/*
 *  Size of a key in a key length table block in an internal node or bucket
 */
#define BT_KEYLENENTRY sizeof(ajuint)

/*
 *  Size of an offset key
 */
#define BT_OFFKEYLEN sizeof(ajulong)

/*
 *  Length of integers per entry in a num bucket
 *  i.e. dbno + offset
 * then later add refoffsets
 */
#define BT_DOFF (sizeof(ajuint) + sizeof(ajulong))

#define BT_EXTRA (sizeof(ajulong))


/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPBtNode ************************************************************
**
** Btree node
**
** @attr BlockOffset [ajulong] Offset within main index
** @attr Nkeys [ajuint] Number of keys filled
** @attr TotLen [ajuint] Total length of keys
** @attr Left [ajulong] Left Sibling
** @attr Right [ajulong] Right Sibling
** @attr Overflow [ajulong] Offset to overflow block
** @attr PrevNode [ajulong] Previous node
** @attr NodeType [ajuint] Root, Internal or Leaf
** @attr Padding [char[4]] Padding to alignment boundary
******************************************************************************/

typedef struct AjSBtNode
{
    ajulong BlockOffset;
    ajuint  Nkeys;
    ajuint  TotLen;
    ajulong Left;
    ajulong Right;
    ajulong Overflow;
    ajulong PrevNode;
    ajuint  NodeType;
    char Padding[4];
} AjOBtNode;

#define AjPBtNode AjOBtNode*




/* @data AjPBtMem *************************************************************
**
** Dynamic list for btree memory arrays
**
** @attr next [struct AjSBtMem*] next node
** @attr prev [struct AjSBtMem*] previous node
** @attr karray [AjPStr*] key array (primary trees)
** @attr parray [ajulong*] pointer arrays (primary and secondary trees)
** @attr overflows [ajulong*] overflows (primary) and keys (secondary)
** @attr used [AjBool] node in use
** @attr Padding [char[4]] Padding to alignment boundary
******************************************************************************/

typedef struct AjSBtMem
{
    struct AjSBtMem *next;
    struct AjSBtMem *prev;
    AjPStr *karray;
    ajulong *parray;
    ajulong *overflows;
    AjBool used;
    char Padding[4];
} AjOBtMem;

#define AjPBtMem AjOBtMem*




/* @data AjPBtId **************************************************************
**
** Btree ID
**
** @attr id [AjPStr] Unique ID
** @attr offset [ajulong] Offset within database file (ftello)
** @attr refoffsets [ajulong*] Offset within reference database file(s) (ftello)
** @attr dbno [ajuint] Database file number
** @attr dups [ajuint] Duplicates
** @attr refcount [ajuint] Number of reference files
** @attr Padding [char[4]] Padding to alignment boundary
******************************************************************************/

typedef struct AjSBtId
{
    AjPStr id;
    ajulong offset;
    ajulong *refoffsets;
    ajuint  dbno;
    ajuint  dups;
    ajuint  refcount;
    char Padding[4];
} AjOBtId;

#define AjPBtId AjOBtId*




/* @data AjPBHit *************************************************************
**
** Btree index hit minimal information for refcount zero
**
** @attr dbno [ajuint] Database file number
** @attr refcount [ajuint] Number of reference files (zero, for padding)
** @attr offset [ajulong] Offset within database file (ftello)
******************************************************************************/

typedef struct AjSBtHit
{
    ajuint  dbno;
    ajuint  refcount;
    ajulong offset;
} AjOBtHit;

#define AjPBtHit AjOBtHit*




/* @data AjPBHitref **********************************************************
**
** Btree index hit minimal information for refcount non-zero
**
** @attr dbno [ajuint] Database file number
** @attr refcount [ajuint] Number of reference files (one, for padding)
** @attr offset [ajulong] Offset within database file (ftello)
** @attr refoffset [ajulong] Offset within reference file (ftello)
******************************************************************************/

typedef struct AjSBtHitref
{
    ajuint  dbno;
    ajuint  refcount;
    ajulong offset;
    ajulong refoffset;
} AjOBtHitref;

#define AjPBtHitref AjOBtHitref*




/* @data AjPBtIdwild **********************************************************
**
** Btree identifier search wildcard
**
** @attr id [AjPStr] Wildcard ID
** @attr pagepos [ajulong] Page number of leaf
** @attr list [AjPList] list of AjPBtIds
** @attr first [AjBool] true for first search
** @attr Padding [char[4]] Padding to alignment boundary
******************************************************************************/

typedef struct AjSBIdild
{
    AjPStr id;
    ajulong pagepos;
    AjPList list;
    AjBool first;
    char Padding[4];
} AjOBtIdwild;

#define AjPBtIdwild AjOBtIdwild*




/* @data AjPIdbucket **********************************************************
**
** Id bucket structure on disc
**
** Key, file number, ftell ID, subkey page (char*, ajuint, ajulong, ajulong)
**
** @attr NodeType [ajuint] Node type
** @attr Maxentries [ajuint] Number of entries available
** @attr Nentries [ajuint] Number of entries
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Overflow [ajulong] Offset to overflow block
** @attr keylen [ajuint*] Key lengths
** @attr Ids [AjPBtId*] Ids
******************************************************************************/

typedef struct AjSIdbucket
{
    ajuint   NodeType;
    ajuint   Maxentries;
    ajuint   Nentries;
    ajuint   Padding;
    ajulong  Overflow;
    ajuint  *keylen;
    AjPBtId *Ids;
} AjOIdbucket;

#define AjPIdbucket AjOIdbucket*




/* @data AjPBtNumId ***********************************************************
**
** Btree ID
**
** @attr offset [ajulong] Offset within database file (ftello)
** @attr refoffsets [ajulong*] Offset within reference database file(s) (ftello)
** @attr dbno [ajuint] Database file number
** @attr refcount [ajuint] Number of reference files
******************************************************************************/

typedef struct AjSBtNumId
{
    ajulong offset;
    ajulong *refoffsets;
    ajuint  dbno;
    ajuint  refcount;
} AjOBtNumId;

#define AjPBtNumId AjOBtNumId*




/* @data AjPNumbucket *********************************************************
**
** Offset bucket structure on disc
**
** Key, file number, ftell ID, subkey page (char*, ajuint, ajulong, ajulong)
**
** @attr NodeType [ajuint] Node type
** @attr Maxentries [ajuint] Number of entries available
** @attr Nentries [ajuint] Number of entries
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Overflow [ajulong] Offset to overflow block
** @attr NumId [AjPBtNumId*] secondary tree IDs
******************************************************************************/

typedef struct AjSNumbucket
{
    ajuint   NodeType;
    ajuint   Maxentries;
    ajuint   Nentries;
    ajuint   Padding;
    ajulong  Overflow;
    AjPBtNumId *NumId;
} AjONumbucket;

#define AjPNumbucket AjONumbucket*




/* @data AjPBtpage ************************************************************
**
** Btree page
**
** @attr pagepos [ajulong] Page number
** @attr next [struct AjSBtpage*] Next page
** @attr prev [struct AjSBtpage*] Previous page
** @attr buf [unsigned char*] Buffer
** @attr dirty [ajuint] BT_DIRTY if page needs to be written to disc
** @attr lockfor [ajuint] Reason for last setting of dirty as BT_LOCK
******************************************************************************/

typedef struct AjSBtpage
{
    ajulong pagepos;
    struct AjSBtpage *next;
    struct AjSBtpage *prev;
    unsigned char *buf;
    ajuint  dirty;
    ajuint  lockfor;
} AjOBtpage;

#define AjPBtpage AjOBtpage*




/* @data AjPBtcache ***********************************************************
**
** B+ tree cache
**
** @attr fp [FILE*] Tree index file pointer
** @attr filename [AjPStr] Filename
** @attr basename [AjPStr] File base name
** @attr plru [AjPBtpage] Least recently used primary cache page
** @attr pmru [AjPBtpage] Most recently used primary cache page
** @attr slru [AjPBtpage] Least recently used secondary cache page
** @attr smru [AjPBtpage] Most recently used secondary cache page
** @attr bmem [AjPBtMem] Primary array allocation MRU bottom
** @attr tmem [AjPBtMem] Primary array allocation MRU top
** @attr bsmem [AjPBtMem] Secondary array allocation MRU bottom
** @attr tsmem [AjPBtMem] Secondary array allocation MRU top
** @attr replace [AjPStr] Replacement ID
** @attr pripagetable [AjPTable] Table of cached primary pages
** @attr secpagetable [AjPTable] Table of cached secondary pages
** @attr totsize [ajulong] Tree index total length used
** @attr maxsize [ajulong] Tree index total length available
** @attr filesize [ajulong] Tree index length after any compression
** @attr pripagecount [ajulong] Tree index number of primary pages
** @attr secpagecount [ajulong] Tree index number of secondary pages
** @attr secrootblock [ajulong] Secondary tree root block
** @attr numreplace [ajulong] Replacement numeric ID
** @attr countunique [ajulong] Number of unique tokens indexed
** @attr countall [ajulong] Number of total tokens indexed
** @attr pricachehits [ajulong] Number of primnary cached page reads
** @attr seccachehits [ajulong] Number of secondary cached page reads
** @attr prireads [ajulong] Number of physical primary page reads from disk
** @attr secreads [ajulong] Number of physical secondary page reads from disk
** @attr priwrites [ajulong] Number of physical primary page writes to disk
** @attr secwrites [ajulong] Number of physical secondary page writes to disk
** @attr pripagesize [ajuint] Size of primary cache pages
** @attr secpagesize [ajuint] Size of secondary cache pages
** @attr prilistLength [ajuint] Number of pages in primary cache
** @attr seclistLength [ajuint] Number of pages in secondary cache
** @attr porder [ajuint] Order of primary tree
** @attr plevel [ajuint] Depth of primary tree
** @attr pnperbucket [ajuint] Number of entries in a primary bucket
** @attr pricachesize [ajuint] Maximum number of pages to cache
** @attr sorder [ajuint] Order of secondary tree
** @attr slevel [ajuint] Depth of secondary tree
** @attr snperbucket [ajuint] Number of entries in a secondary bucket
** @attr seccachesize [ajuint] Maximum number of pages to cache
** @attr keylimit [ajuint] Max length of primary key
** @attr idlimit [ajuint] Max length of secondary key
** @attr refcount [ajuint] Number of extra files for each entry
** @attr secondary [AjBool] Secondary index
** @attr readonly [AjBool] Read only flag
** @attr dodelete [AjBool] Deletion flag
** @attr compressed [AjBool] Index is compressed
******************************************************************************/

typedef struct AjSBtCache
{
    FILE *fp;
    AjPStr filename;
    AjPStr basename;
    AjPBtpage plru;
    AjPBtpage pmru;
    AjPBtpage slru;
    AjPBtpage smru;
    AjPBtMem bmem;
    AjPBtMem tmem;
    AjPBtMem bsmem;
    AjPBtMem tsmem;
    AjPStr replace;
    AjPTable pripagetable;
    AjPTable secpagetable;
    ajulong totsize;
    ajulong maxsize;
    ajulong filesize;
    ajulong pripagecount;
    ajulong secpagecount;
    ajulong secrootblock;
    ajulong numreplace;
    ajulong countunique;
    ajulong countall;
    ajulong pricachehits;
    ajulong seccachehits;
    ajulong prireads;
    ajulong secreads;
    ajulong priwrites;
    ajulong secwrites;
    ajuint pripagesize;
    ajuint secpagesize;
    ajuint prilistLength;
    ajuint seclistLength;
    ajuint porder;
    ajuint plevel;
    ajuint pnperbucket;
    ajuint pricachesize;
    ajuint sorder;
    ajuint slevel;
    ajuint snperbucket;
    ajuint seccachesize;
    ajuint keylimit;
    ajuint idlimit;
    ajuint refcount;
    AjBool secondary;
    AjBool readonly;
    AjBool dodelete;
    AjBool compressed;
} AjOBtcache;

#define AjPBtcache AjOBtcache*




/* @data AjPBtPri *************************************************************
**
** Btree primary link from a primary bucket for secondary identifier tree
**
** @attr keyword [AjPStr] keyword
** @attr treeblock [ajulong] root block of secondary tree
** @attr id [AjPStr] Id string
******************************************************************************/

typedef struct AjSBtPri
{
    AjPStr keyword;
    ajulong treeblock;
    AjPStr id;
} AjOBtPri;

#define AjPBtPri AjOBtPri*




/* @data AjPPribucket *********************************************************
**
** Keyword primary bucket structure on disc
**
** @attr NodeType [ajuint] Node type
** @attr Maxentries [ajuint] Number of entries available
** @attr Nentries [ajuint] Number of entries
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Overflow [ajulong] Offset to overflow block
** @attr keylen [ajuint*] key lengths
** @attr codes [AjPBtPri*] Primary keywords
******************************************************************************/

typedef struct AjSPribucket
{
    ajuint    NodeType;
    ajuint    Maxentries;
    ajuint    Nentries;
    ajuint    Padding;
    ajulong   Overflow;
    ajuint   *keylen;
    AjPBtPri *codes;
} AjOPribucket;

#define AjPPribucket AjOPribucket*




/* @data AjPSecbucket *********************************************************
**
** Keyword secondary bucket structure on disc
**
** @attr NodeType [ajuint] Node type
** @attr Maxentries [ajuint] Number of entries available
** @attr Nentries [ajuint] Number of entries
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Overflow [ajulong] Offset to overflow block
** @attr keylen [ajuint*] key lengths
** @attr SecIds [AjPStr*] Ids
******************************************************************************/

typedef struct AjSSecbucket
{
    ajuint    NodeType;
    ajuint    Maxentries;
    ajuint    Nentries;
    ajuint    Padding;
    ajulong   Overflow;
    ajuint   *keylen;
    AjPStr   *SecIds;
} AjOSecbucket;

#define AjPSecbucket AjOSecbucket*




/* @data AjPBtKeywild *********************************************************
**
** Btree keyword wildcard object
**
** @attr keyword [AjPStr] Wildcard keyword
** @attr prefix [AjPStr] Wildcard keyword prefix
** @attr pagepos [ajulong] Page number of primary tree leaf
** @attr list [AjPList] list of AjPBtPris
** @attr cache [AjPBtcache] cache for secondary tree
** @attr idlist [AjPList] list of AjPStr IDs
** @attr secpagepos [ajulong] Page number of secondary tree leaf
** @attr first [AjBool] true for first search
** @attr Padding [char[4]] Padding to alignment boundary
******************************************************************************/

typedef struct AjSBtKeywild
{
    AjPStr keyword;
    AjPStr prefix;
    ajulong pagepos;
    AjPList list;
    AjPBtcache cache;
    AjPList idlist;
    ajulong secpagepos;
    AjBool first;
    char Padding[4];
} AjOBtKeywild;

#define AjPBtKeywild AjOBtKeywild*




#if 0
/* #data AjPBtHybrid **********************************************************
**
** Btree ID
**
** #attr key1 [AjPStr] Unique ID
** #attr offset [ajulong] Offset within database file (ftello)
** #attr refoffsets [ajulong*] Offset within reference database file(s) (ftello)
** #attr treeblock [ajulong] Secondary tree root page
** #attr dbno [ajuint] Database file number
** #attr dups [ajuint] Duplicates
** #attr refcount [ajuint] Number of reference files
** #attr Padding [char[4]] Padding to alignment boundary
******************************************************************************/
/*
typedef struct AjSBtHybrid
{
    AjPStr key1;
    ajulong offset;
    ajulong *refoffsets;
/#    ajulong treeblock;#/
    ajuint  dbno;
    ajuint  dups;
    ajuint  refcount;
    char Padding[4];
} AjOBtHybrid;

#define AjPBtHybrid AjOBtHybrid*
*/
#endif


/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/* Database file name structure
**
** ajuint        order                  Order of B+tree
** ajuint        m                      Max entries per bucket
** ajuint       NFiles                  Number of Indexed files
** ajuint        TotalLen                Total length if dir/name entries
** Directory/FileName pairs
*/

#if !defined(WORDS_BIGENDIAN)
#define BT_GETAJINT(p,v) (memcpy((void*)v,(const void*)p,sizeof(ajint)))
#define BT_GETAJUINT(p,v) (memcpy((void*)v,(const void*)p,sizeof(ajuint)))
#define BT_GETAJLONG(p,v) (memcpy((void*)v,(const void*)p,sizeof(ajlong)))
#define BT_GETAJULONG(p,v) (memcpy((void*)v,(const void*)p,sizeof(ajulong)))
#define BT_SETAJINT(p,v) (memcpy((void*)p,(const void*)&v,sizeof(ajint)))
#define BT_SETAJUINT(p,v) (memcpy((void*)p,(const void*)&v,sizeof(ajuint)))
#define BT_SETAJLONG(p,v) (memcpy((void*)p,(const void*)&v,sizeof(ajlong)))
#define BT_SETAJULONG(p,v) (memcpy((void*)p,(const void*)&v,sizeof(ajulong)))
#else
#define BT_GETAJINT(p,v) memcpy((void*)v,(const void*)p,sizeof(ajint)); \
    ajByteRevInt(v)
#define BT_GETAJUINT(p,v) memcpy((void*)v,(const void*)p,sizeof(ajuint)); \
    ajByteRevUint(v)
#define BT_GETAJLONG(p,v) memcpy((void*)v,(const void*)p,sizeof(ajlong)); \
    ajByteRevLong(v)
#define BT_GETAJULONG(p,v) memcpy((void*)v,(const void*)p,sizeof(ajulong)); \
    ajByteRevUlong(v)
#define BT_SETAJINT(p,v)  ajByteRevInt(&v);             \
    memcpy((void*)p,(const void*)&v,sizeof(ajint))
#define BT_SETAJUINT(p,v) ajByteRevUint(&v);            \
    memcpy((void*)p,(const void*)&v,sizeof(ajuint))
#define BT_SETAJLONG(p,v) ajByteRevLong(&v);            \
    memcpy((void*)p,(const void*)&v,sizeof(ajlong))
#define BT_SETAJULONG(p,v) ajByteRevUlong(&v);          \
    memcpy((void*)p,(const void*)&v,sizeof(ajulong))
#endif


#define BT_BUCKIDLEN(str) (MAJSTRGETLEN(str) + 1 + sizeof(ajuint) +      \
                           sizeof(ajuint) + sizeof(ajulong))


/*
** Macros to determine entry positions within a bucket
*/

#define PBT_BUCKNODETYPE(p) p
#define PBT_BUCKNENTRIES(p) (p + sizeof(ajuint))
#define PBT_BUCKOVERFLOW(p) (p + sizeof(ajuint) + sizeof(ajuint))
#define PBT_BUCKKEYLEN(p) (p + sizeof(ajuint) + sizeof(ajuint) + sizeof(ajulong))
#define BT_BUCKPRILEN(str) (MAJSTRGETLEN(str) + 1 + sizeof(ajulong))
#define BT_BUCKSECLEN(str) (MAJSTRGETLEN(str) +1)

/*
** Macros to return a page entry value within a bucket
*/

#if !defined(WORDS_BIGENDIAN)
#define GBT_BUCKNODETYPE(p,v) (memcpy((void*)v,                         \
                                      (const void*)PBT_BUCKNODETYPE(p), \
                                      sizeof(ajuint)))
#define GBT_BUCKNENTRIES(p,v) (memcpy((void*)v,                         \
                                      (const void*)PBT_BUCKNENTRIES(p), \
                                      sizeof(ajuint)))
#define GBT_BUCKOVERFLOW(p,v) (memcpy((void*)v,                         \
                                      (const void*)PBT_BUCKOVERFLOW(p), \
                                      sizeof(ajulong)))
#else
#define GBT_BUCKNODETYPE(p,v) memcpy((void*)v,                          \
                                     (const void*)PBT_BUCKNODETYPE(p),  \
                                     sizeof(ajuint));                   \
    ajByteRevUint(v)
#define GBT_BUCKNENTRIES(p,v) memcpy((void*)v,                          \
                                     (const void*)PBT_BUCKNENTRIES(p),  \
                                     sizeof(ajuint));                   \
    ajByteRevUint(v)
#define GBT_BUCKOVERFLOW(p,v) memcpy((void*)v,                          \
                                     (const void*)PBT_BUCKOVERFLOW(p),  \
                                     sizeof(ajulong));                  \
    ajByteRevUlong(v)
#endif


/*
** Macros to set a page entry value within an internal/leaf node
*/

#if !defined(WORDS_BIGENDIAN)
#define SBT_BUCKNODETYPE(p,v) (memcpy((void*)PBT_BUCKNODETYPE(p),       \
                                      (const void*)&v,sizeof(ajuint)))
#define SBT_BUCKNENTRIES(p,v) (memcpy((void*)PBT_BUCKNENTRIES(p),       \
                                      (const void*)&v,sizeof(ajuint)))
#define SBT_BUCKOVERFLOW(p,v) (memcpy((void*)PBT_BUCKOVERFLOW(p),       \
                                      (const void*)&v,sizeof(ajulong)))
#else
#define SBT_BUCKNODETYPE(p,v) ajByteRevUint(&v);        \
    memcpy((void*)PBT_BUCKNODETYPE(p),                  \
           (const void*)&v,sizeof(ajuint))
#define SBT_BUCKNENTRIES(p,v) ajByteRevUint(&v);        \
    memcpy((void*)PBT_BUCKNENTRIES(p),                  \
           (const void*)&v,sizeof(ajuint))
#define SBT_BUCKOVERFLOW(p,v) ajByteRevUlong(&v);       \
    memcpy((void*)PBT_BUCKOVERFLOW(p),                  \
           (const void*)&v,sizeof(ajulong))
#endif

/*
** Macros to determine entry positions within an internal/leaf node
*/

#define PBT_NODETYPE(p) p
#define PBT_BLOCKNUMBER(p) (p + sizeof(ajuint))
#define PBT_NKEYS(p) (p + sizeof(ajuint) + sizeof(ajulong))
#define PBT_TOTLEN(p) (p+sizeof(ajuint)+sizeof(ajulong)+sizeof(ajuint))
#define PBT_LEFT(p) (p+sizeof(ajuint)+sizeof(ajulong)+sizeof(ajuint)    \
                     +sizeof(ajuint))
#define PBT_RIGHT(p) (p+sizeof(ajuint)+sizeof(ajulong)+sizeof(ajuint)   \
                      +sizeof(ajuint)+sizeof(ajulong))
#define PBT_OVERFLOW(p) (p+sizeof(ajuint)+sizeof(ajulong)+sizeof(ajuint) \
                         +sizeof(ajuint)+sizeof(ajulong)+sizeof(ajulong))
#define PBT_PREV(p) (p+sizeof(ajuint)+sizeof(ajulong)+sizeof(ajuint)    \
                     +sizeof(ajuint)+sizeof(ajulong)+sizeof(ajulong)    \
                     +sizeof(ajulong))
#define PBT_KEYLEN(p) (p+sizeof(ajuint)+sizeof(ajulong)+sizeof(ajuint)  \
                       +sizeof(ajuint)+sizeof(ajulong)+sizeof(ajulong)  \
                       +sizeof(ajulong)+sizeof(ajulong))

/*
** Macros to return a page entry value within an internal/leaf node
*/

#if !defined(WORDS_BIGENDIAN)
#define GBT_NODETYPE(p,v) (memcpy((void*)v,(const void*)PBT_NODETYPE(p), \
                                  sizeof(ajuint)))
#define GBT_BLOCKNUMBER(p,v) (memcpy((void*)v,(const void*)PBT_BLOCKNUMBER(p), \
                                     sizeof(ajulong)))
#define GBT_NKEYS(p,v) (memcpy((void*)v,(const void*)PBT_NKEYS(p),      \
                               sizeof(ajuint)))
#define GBT_TOTLEN(p,v) (memcpy((void*)v,(const void*)PBT_TOTLEN(p),    \
                                sizeof(ajuint)))
#define GBT_LEFT(p,v) (memcpy((void*)v,(const void*)PBT_LEFT(p),        \
                              sizeof(ajulong)))
#define GBT_RIGHT(p,v) (memcpy((void*)v,(const void*)PBT_RIGHT(p),      \
                               sizeof(ajulong)))
#define GBT_PREV(p,v) (memcpy((void*)v,(const void*)PBT_PREV(p),        \
                              sizeof(ajulong)))
#define GBT_OVERFLOW(p,v) (memcpy((void*)v,(const void*)PBT_OVERFLOW(p), \
                                  sizeof(ajulong)))
#else
#define GBT_NODETYPE(p,v) memcpy((void*)v,(const void*)PBT_NODETYPE(p), \
                                 sizeof(ajuint));                       \
    ajByteRevUint(v)
#define GBT_BLOCKNUMBER(p,v) memcpy((void*)v,(const void*)PBT_BLOCKNUMBER(p), \
                                    sizeof(ajulong));                   \
    ajByteRevUlong(v)
#define GBT_NKEYS(p,v) memcpy((void*)v,(const void*)PBT_NKEYS(p),       \
                              sizeof(ajuint));                          \
    ajByteRevUint(v)
#define GBT_TOTLEN(p,v) memcpy((void*)v,(const void*)PBT_TOTLEN(p),     \
                               sizeof(ajuint));                         \
    ajByteRevUint(v)
#define GBT_LEFT(p,v) memcpy((void*)v,(const void*)PBT_LEFT(p), \
                             sizeof(ajulong));                  \
    ajByteRevUlong(v)

#define GBT_RIGHT(p,v) memcpy((void*)v,(const void*)PBT_RIGHT(p),       \
                              sizeof(ajulong));                         \
    ajByteRevUlong(v)
#define GBT_PREV(p,v) memcpy((void*)v,(const void*)PBT_PREV(p), \
                             sizeof(ajulong));                  \
    ajByteRevUlong(v)
#define GBT_OVERFLOW(p,v) memcpy((void*)v,(const void*)PBT_OVERFLOW(p), \
                                 sizeof(ajulong));                      \
    ajByteRevUlong(v)
#endif


/*
** Macros to set a page entry value within an internal/leaf node
*/

#if !defined(WORDS_BIGENDIAN)
#define SBT_NODETYPE(p,v) (memcpy((void*)PBT_NODETYPE(p),(const void*)&v, \
                                  sizeof(ajuint)))
#define SBT_BLOCKNUMBER(p,v) (memcpy((void*)PBT_BLOCKNUMBER(p),         \
                                     (const void*)&v,sizeof(ajulong)))
#define SBT_NKEYS(p,v) (memcpy((void*)PBT_NKEYS(p),(const void*)&v,     \
                               sizeof(ajuint)))
#define SBT_TOTLEN(p,v) (memcpy((void*)PBT_TOTLEN(p),(const void*)&v,   \
                                sizeof(ajuint)))
#define SBT_LEFT(p,v) (memcpy((void*)PBT_LEFT(p),               \
                              (const void*)&v,sizeof(ajulong)))
#define SBT_RIGHT(p,v) (memcpy((void*)PBT_RIGHT(p),                     \
                               (const void*)&v,sizeof(ajulong)))
#define SBT_PREV(p,v) (memcpy((void*)PBT_PREV(p),               \
                              (const void*)&v,sizeof(ajulong)))
#define SBT_OVERFLOW(p,v) (memcpy((void*)PBT_OVERFLOW(p),               \
                                  (const void*)&v,sizeof(ajulong)))
#else
#define SBT_NODETYPE(p,v) ajByteRevUint(&v);            \
    memcpy((void*)PBT_NODETYPE(p),(const void*)&v,      \
           sizeof(ajuint))
#define SBT_BLOCKNUMBER(p,v) ajByteRevUlong(&v);        \
    memcpy((void*)PBT_BLOCKNUMBER(p),                   \
           (const void*)&v,sizeof(ajulong))
#define SBT_NKEYS(p,v) ajByteRevUint(&v);       \
    memcpy((void*)PBT_NKEYS(p),(const void*)&v, \
           sizeof(ajuint))
#define SBT_TOTLEN(p,v) ajByteRevUint(&v);              \
    memcpy((void*)PBT_TOTLEN(p),(const void*)&v,        \
           sizeof(ajuint))
#define SBT_LEFT(p,v) ajByteRevUlong(&v);       \
    memcpy((void*)PBT_LEFT(p),                  \
           (const void*)&v,sizeof(ajulong))
#define SBT_RIGHT(p,v) ajByteRevUlong(&v);      \
    memcpy((void*)PBT_RIGHT(p),                 \
           (const void*)&v,sizeof(ajulong))
#define SBT_PREV(p,v) ajByteRevUlong(&v);       \
    memcpy((void*)PBT_PREV(p),                  \
           (const void*)&v,sizeof(ajulong))
#define SBT_OVERFLOW(p,v) ajByteRevUlong(&v);   \
    memcpy((void*)PBT_OVERFLOW(p),              \
           (const void*)&v,sizeof(ajulong))
#endif




/*
** Prototype definitions
*/

AjBool       ajBtreeKeyFindLen(AjPBtcache cache, const AjPStr key,
                               ajulong* treeblock);

ajuint       ajBtreeFieldGetLenC(const char* nametxt);
ajuint       ajBtreeFieldGetLenS(const AjPStr name);
const AjPStr ajBtreeFieldGetExtensionC(const char *nametxt);
const AjPStr ajBtreeFieldGetExtensionS(const AjPStr name);
AjBool       ajBtreeFieldGetSecondaryC(const char *nametxt);
AjBool       ajBtreeFieldGetSecondaryS(const AjPStr name);

ajulong      ajBtreeCacheGetPagecount(const AjPBtcache cache);
ajuint       ajBtreeCacheGetPripagesize(const AjPBtcache cache);
ajuint       ajBtreeCacheGetSecpagesize(const AjPBtcache cache);
ajulong      ajBtreeCacheGetTotsize(const AjPBtcache cache);

AjBool       ajBtreeCacheIsCompressed(const AjPBtcache cache);
AjBool       ajBtreeCacheIsSecondary(const AjPBtcache thys);

ajuint       ajBtreePageGetSize(const AjPBtpage page, ajuint refcount);
const char*  ajBtreePageGetTypename(const AjPBtpage page);
AjBool       ajBtreePageIsPrimary(const AjPBtpage page);

AjPBtcache   ajBtreeIdcacheNewC(const char *file, const char *ext,
                                const char *idir, const char *mode,
                                AjBool compressed,
                                ajuint kwlimit, ajuint refcount,
                                ajuint pripagesize, ajuint secpagesize,
                                ajuint pricachesize, ajuint seccachesize,
                                ajulong pripagecount, ajulong secpagecount,
                                ajuint order, ajuint fill, ajuint level,
                                ajuint sorder, ajuint sfill,
                                ajulong count, ajulong countall);
AjPBtcache   ajBtreeIdcacheNewS(const AjPStr file, const AjPStr ext,
                                const AjPStr idir, const char *mode,
                                AjBool compressed,
                                ajuint kwlimit, ajuint refcount,
                                ajuint pripagesize, ajuint secpagesize,
                                ajuint pricachesize, ajuint seccachesize,
                                ajulong pripagecount, ajulong secpagecount,
                                ajuint order, ajuint fill, ajuint level,
                                ajuint sorder, ajuint sfill,
                                ajulong count, ajulong countall);

AjPBtcache   ajBtreeSeccacheNewC(const char *file, const char *ext,
                                 const char *idir, const char *mode,
                                 AjBool compressed,
                                 ajuint kwlimit, ajuint idlimit,
                                 ajuint pagesize, ajuint secpagesize,
                                 ajuint cachesize, ajuint seccachesize,
                                 ajulong pagecount, ajulong secpagecount,
                                 ajuint order, ajuint fill, ajuint level,
                                 ajuint sorder, ajuint sfill,
                                 ajulong count, ajulong countall);
AjPBtcache   ajBtreeSeccacheNewS(const AjPStr file, const AjPStr ext,
                                 const AjPStr idir, const char *mode,
                                 AjBool compressed,
                                 ajuint kwlimit, ajuint idlimit,
                                 ajuint pagesize, ajuint secpagesize,
                                 ajuint cachesize, ajuint seccachesize,
                                 ajulong pagecount, ajulong secpagecount,
                                 ajuint order, ajuint fill, ajuint level,
                                 ajuint sorder, ajuint sfill,
                                 ajulong count, ajulong countall);

AjPBtcache   ajBtreeCacheNewReadC(const char *filetxt, const char *exttxt,
                                  const char *idirtxt);
AjPBtcache   ajBtreeCacheNewReadS(const AjPStr file, const AjPStr ext,
                                  const AjPStr idir);
AjPBtcache   ajBtreeCacheNewUpdateC(const char *filetxt, const char *exttxt,
                                    const char *idirtxt);
AjPBtcache   ajBtreeCacheNewUpdateS(const AjPStr file, const AjPStr ext,
                                    const AjPStr idir);
AjPBtpage    ajBtreeCacheRead(AjPBtcache cache, ajulong pagepos);

ajulong      ajBtreeCacheDel(AjPBtcache *thys);

void         ajBtreeIdDel(AjPBtId *thys);
void         ajBtreeIdDelVoid(void **voidarg);
AjPBtId      ajBtreeIdNew(ajuint refcount);
AjBool       ajBtreeIdIsMulti(const AjPBtId thys);

void         ajBtreeHitDel(AjPBtHit *thys);
void         ajBtreeHitDelVoid(void **voidarg);
AjPBtHit     ajBtreeHitNew(void);
AjPBtHit     ajBtreeHitNewId(const AjPBtId btid);

void         ajBtreeHitrefDel(AjPBtHitref *thys);
void         ajBtreeHitrefDelVoid(void **voidarg);
AjPBtHitref  ajBtreeHitrefNew(void);
AjPBtHitref  ajBtreeHitrefNewId(const AjPBtId btid);

AjBool       ajBtreeReadParamsC(const char *fn, const char *ext,
                                const char *idir,
                                AjBool *secondary, AjBool *compressed,
                                ajuint *kwlimit, ajuint *idlimit,
                                ajuint *refcount,
                                ajuint *pripagesize, ajuint *secpagesize,
                                ajuint *pricachesize, ajuint *seccachesize,
                                ajulong *pripagecount, ajulong *secpagecount,
                                ajuint *order, ajuint *nperbucket,
                                ajuint *level,
                                ajuint *sorder, ajuint *snperbucket,
                                ajulong *count, ajulong *countall);
AjBool       ajBtreeReadParamsS(const AjPStr fn, const AjPStr ext,
                                const AjPStr idir,
                                AjBool *secondary, AjBool *compressed,
                                ajuint *kwlimit, ajuint *idlimit,
                                ajuint *refcount,
                                ajuint *pripagesize, ajuint *secpagesize,
                                ajuint *pricachesize, ajuint *seccachesize,
                                ajulong *pripagecount, ajulong *secpagecount,
                                ajuint *order, ajuint *nperbucket,
                                ajuint *level,
                                ajuint *sorder, ajuint *snperbucket,
                                ajulong *count, ajulong *countall);

void         ajBtreeWriteParamsC(const AjPBtcache cache, const char *fntxt,
                                 const char *exttxt, const char *idirtxt);
void         ajBtreeWriteParamsS(const AjPBtcache cache, const AjPStr fn,
                                 const AjPStr ext, const AjPStr idir);

ajuint       ajBtreeReadEntriesC(const char *filename, const char *indexdir,
                                 const char *directory,
                                 AjPStr **seqfiles, AjPStr ***reffiles,
                                 ajuint *refcount);
ajuint       ajBtreeReadEntriesS(const AjPStr filename, const AjPStr indexdir,
                                 const AjPStr directory,
                                 AjPStr **seqfiles, AjPStr ***reffiles,
                                 ajuint *refcount);

void         ajBtreeIdentFetchId(AjPBtcache cache, const AjPStr key,
                                 AjPList idlist);
void         ajBtreeIdentFetchwildId(AjPBtcache cache,
                                     const AjPStr key, AjPList idlist);
void         ajBtreeIdentFetchHit(AjPBtcache cache, const AjPStr key,
                                  AjPList idlist);
void         ajBtreeIdentFetchwildHit(AjPBtcache cache,
                                   const AjPStr key, AjPList idlist);
void         ajBtreeIdentFetchHitref(AjPBtcache cache, const AjPStr key,
                                     AjPList idlist);
void         ajBtreeIdentFetchwildHitref(AjPBtcache cache,
                                   const AjPStr key, AjPList idlist);

void         ajBtreeKeyFetchId(AjPBtcache cache, AjPBtcache idcache,
                             const AjPStr key, AjPList btidlist);
void         ajBtreeKeyFetchwildId(AjPBtcache cache, AjPBtcache idcache,
                                 const AjPStr key, AjPList btidlist);
void         ajBtreeKeyFetchHit(AjPBtcache cache, AjPBtcache idcache,
                             const AjPStr key, AjPList btidlist);
void         ajBtreeKeyFetchwildHit(AjPBtcache cache, AjPBtcache idcache,
                                 const AjPStr key, AjPList btidlist);
void         ajBtreeKeyFetchHitref(AjPBtcache cache, AjPBtcache idcache,
                             const AjPStr key, AjPList btidlist);
void         ajBtreeKeyFetchwildHitref(AjPBtcache cache, AjPBtcache idcache,
                                 const AjPStr key, AjPList btidlist);

AjPBtIdwild  ajBtreeIdwildNew(AjPBtcache cache, const AjPStr wild);
void         ajBtreeIdwildDel(AjPBtIdwild *thys);

AjPBtId      ajBtreeIdwildQuery(AjPBtcache cache, AjPBtIdwild wild);

AjPBtKeywild ajBtreeKeywildNew(AjPBtcache cache, const AjPStr wild);
void         ajBtreeKeywildDel(AjPBtKeywild *thys);

AjPBtId      ajBtreeKeywildQuery(AjPBtcache cache, AjPBtKeywild wild,
                                 AjPBtcache idcache);

AjPBtPri     ajBtreePriNew(void);
void         ajBtreePriDel(AjPBtPri *thys);

void         ajBtreeIdentIndex(AjPBtcache cache, AjPBtId id);

AjBool       ajBtreeKeyIndex(AjPBtcache cache, const AjPStr keyword,
                             const AjPStr id);

void         ajBtreeDumpIdentifiers(AjPBtcache cache, ajuint dmin, ajuint dmax,
                                    AjPFile outf);

void         ajBtreeDumpKeywords(AjPBtcache cache,
                                 ajuint dmin, ajuint dmax, AjPFile outf);

ajint        ajBtreeIdCmp(const void *x, const void *y);
ajulong      ajBtreeIdHash(const void *x, ajulong hashsize);

ajint        ajBtreeHitCmp(const void *x, const void *y);
ajulong      ajBtreeHitHash(const void *x, ajulong hashsize);

ajint        ajBtreeHitrefCmp(const void *x, const void *y);
ajulong      ajBtreeHitrefHash(const void *x, ajulong hashsize);

void         ajBtreeCacheStatsOut(AjPFile outf, const AjPBtcache cache,
                                  ajulong *Ppricache, ajulong *Pseccache,
                                  ajulong* Pprireads, ajulong* Psecreads,
                                  ajulong* Ppriwrites, ajulong* Psecwrites,
                                  ajulong *Pprisize, ajulong *Psecsize);
void         ajBtreeStatsOut(AjPFile outf,
                             ajulong* Psplitrootid,  ajulong* Psplitrootnum,
                             ajulong* Psplitrootkey, ajulong* Psplitrootsec,
                             ajulong* Psplitleafid,  ajulong* Psplitleafnum,
                             ajulong* Psplitleafkey, ajulong* Psplitleafsec,
                             ajulong* Preorderid,    ajulong* Preordernum,
                             ajulong* Preorderkey,   ajulong* Preordersec);

AjBool       ajBtreeStatIdbucket(AjPBtcache cache,
                                 const AjPBtpage page, AjBool full,
                                 ajuint* nkeys, ajuint* ndups, ajuint* nextra,
                                 ajuint* overflows, ajuint* freespace,
                                 ajulong *refs, const AjPTable newpostable);
AjBool       ajBtreeStatNumbucket(AjPBtcache cache,
                                  const AjPBtpage page, AjBool full,
                                  ajuint* nkeys, ajuint* overflows,
                                  ajuint* freespace);
AjBool       ajBtreeStatPribucket(AjPBtcache cache,
                                  const AjPBtpage page, AjBool full,
                                  ajuint* nkeys, ajuint* overflows,
                                  ajuint* freespace, ajulong *refs,
                                  const AjPTable newpostable);
AjBool       ajBtreeStatSecbucket(AjPBtcache cache,
                                  const AjPBtpage page, AjBool full,
                                  ajuint* nkeys, ajuint* overflows,
                                  ajuint* freespace);
AjBool       ajBtreeStatNode(AjPBtcache cache,
                             const AjPBtpage page, AjBool full,
                             ajuint* nkeys, ajuint* overflows,
                             ajuint* freespace, ajulong* refs,
                             const AjPTable newpostable);
AjBool       ajBtreeStatNumnode(AjPBtcache cache,
                                const AjPBtpage page, AjBool full,
                                ajuint* nkeys, ajuint* overflows,
                                ajuint* freespace, ajulong* refs,
                                const AjPTable newpostable);
void         ajBtreeExit(void);

/*
** future functions for index updating
*/

AjBool       ajBtreeReplaceId(AjPBtcache cache, const AjPBtId rid);
AjBool       ajBtreeDeleteIdent(AjPBtcache cache, const AjPBtId btid);
AjBool       ajBtreeDeletePriId(AjPBtcache cache, const AjPBtPri pri);




/*
** End of prototype definitions
*/


#if 0
AjPBtHybrid  ajBtreeHybNew(ajuint refcount);
void         ajBtreeHybDel(AjPBtHybrid *thys);
#endif



#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void     ajBtreeWriteParams(const AjPBtcache cache, const char *fn,
                                         const char *ext, const char *idir);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJINDEX_H */
ajjava.h/       1414437289  1010  513   100644  6768      `
/* @include ajjava ************************************************************
**
** AJAX Java Native Interface (JNI) functions
**
** @author Copyright (C) 2001 Alan Bleasby
** @version $Revision: 1.18 $
** @modified Jul 07 2001 ajb First version
** @modified Mar 02 2002 ajb Added Jemboss suid authorisation functions
** @modified $Date: 2011/10/05 12:12:10 $ by $Author: ajb $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJJAVA_H
#define AJJAVA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS

#ifdef HAVE_JAVA

#ifdef HAVE_TARGETCONFIG_H
#include <TargetConfig.h>
#endif /* HAVE_TARGETCONFIG_H */

#include "jni.h"




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define JBUFFLEN 10000

#define COMM_AUTH      1
#define EMBOSS_FORK    2
#define MAKE_DIRECTORY 3
#define DELETE_FILE    4
#define DELETE_DIR     5
#define LIST_FILES     6
#define LIST_DIRS      7
#define GET_FILE       8
#define PUT_FILE       9
#define BATCH_FORK     10
#define RENAME_FILE    11
#define SEQ_ATTRIB     12
#define SEQSET_ATTRIB  13




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_seqType(
    JNIEnv *, jobject, jstring);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_seqsetType(
    JNIEnv *env, jobject obj, jstring usa);

/*
** End of prototype definitions
*/

/*
** The above prototypes are marked for Windows. Below are purely UNIX
** prototypes and therefore are not included between the above marks.
**/

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_userInfo(
    JNIEnv *env, jobject obj, jstring door, jstring key);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_setuid(
    JNIEnv *env, jclass j, jint uid);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_seteuid(
    JNIEnv *env, jclass j, jint uid);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_setgid(
    JNIEnv *env, jclass j, jint gid);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_setegid(
    JNIEnv *env, jclass j, jint gid);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_getuid(
    JNIEnv *env, jclass j);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_geteuid(
    JNIEnv *env, jclass j);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_getgid(
    JNIEnv *env, jclass j);

JNIEXPORT jint JNICALL Java_org_emboss_jemboss_server_Ajax_getegid(
    JNIEnv *env, jclass j);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_fork(
    JNIEnv *env, jobject obj, jstring commandline,
    jstring environment, jstring directory, jint uid, jint gid);

/* Jembossctl functions */

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_userAuth(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_forkBatch(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring cline, jstring direct);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_forkEmboss(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring cline, jstring direct);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_makeDir(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring direct);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_delFile(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring filename);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_renameFile(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring filename, jstring filename2);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_delDir(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring direct);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_listFiles(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring direct);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_listDirs(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring direct);

JNIEXPORT jbyteArray JNICALL Java_org_emboss_jemboss_server_Ajax_getFile(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring filename);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_putFile(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring filename, jbyteArray arr);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_seqAttrib(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring filename);

JNIEXPORT jboolean JNICALL Java_org_emboss_jemboss_server_Ajax_seqsetAttrib(
    JNIEnv *env, jobject obj, jstring door, jbyteArray key,
    jstring environment, jstring filename);

AJ_END_DECLS

#endif /* HAVE_JAVA */
#endif /* !AJJAVA_H */
ajlib.h/        1414437289  1010  513   100644  2488      `
/* @include ajlib *************************************************************
**
** AJAX library most commonly needed include files
**
** @author Copyright (C) 2011 Peter Rice
** @version $Revision: 1.1 $
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJLIB_H
#define AJLIB_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajmem.h"
#include "ajmess.h"
#include "ajstr.h"
#include "ajfmt.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/


/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK

#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJLIB_H */
ajlist.h/       1414437289  1010  513   100644  15640     `
/* @include ajlist ************************************************************
**
** AJAX List functions
** These functions create and control linked lists.
**
** @author Copyright (C) 1998 Ian Longden
** @version $Revision: 1.48 $
** @modified 2001 Alan Bleasby
**              Changed lists to be double-linked, completely rewrote
**              iterator handling and added back-iteration functions.
**              Operation of ajListInsert made more intuitive.
** @modified $Date: 2012/07/02 15:47:30 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJLIST_H
#define AJLIST_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum AjEListType **********************************************************
**
** AJAX List Type enumeration
**
** @value ajEListTypeAny Any data
** @value ajEListTypeStr String data
** @@
******************************************************************************/

typedef enum AjOListType
{
    ajEListTypeAny,
    ajEListTypeStr
} AjEListType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPListNode **********************************************************
**
** AJAX List Node
**
** @alias AjSListNode
** @alias AjOListNode
**
** @attr Next [struct AjSListNode*] Next AJAX List Node object
** @attr Prev [struct AjSListNode*] Previous AJAX List Node object
** @attr Item [void*] Data value
** @@
******************************************************************************/

typedef struct AjSListNode
{
    struct AjSListNode* Next;
    struct AjSListNode* Prev;
    void* Item;
} AjOListNode;

#define AjPListNode AjOListNode*




/* @data AjPList **************************************************************
**
** List data object. Lists are simple linked lists with performance optimised
** to allow rapid extension of the beginning or end of the list.
**
** Lists can hold any data type. Special functions are available for lists
** of AjPStr values. In general, these functions are the same. Many are
** provided for ease of use to save remembering which calls need special cases.
**
** @alias AjSList
** @alias AjOList
**
** @attr First [AjPListNode] first node
** @attr Last [AjPListNode] dummy last node
** @attr Fitemdel [void function] Item destructor, or NULL if not an object
** @attr Count [ajulong] Number of nodes
** @attr Use [ajuint] Reference count
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSList
{
    AjPListNode First;
    AjPListNode Last;
    void (*Fitemdel)(void** Pitem);
    ajulong Count;
    ajuint Use;
    AjBool Padding;
} AjOList;

#define AjPList AjOList*




/* @data AjIList **************************************************************
**
** AJAX list iterator data structure
**
** @alias AjSIList
** @alias AjOIList
**
** @attr Head [AjPList] Head of modifiable list
** @attr ReadHead [const AjPList] Head of read-only list
** @attr Here [AjPListNode] Current list node
** @attr Back [AjBool] Direction of last iterative move, true if reading back
** @attr Modify [AjBool] Allows iterator to modify the sequence
**
** @@
******************************************************************************/

typedef struct AjSIList
{
    AjPList Head;
    const AjPList ReadHead;
    AjPListNode Here;
    AjBool Back;
    AjBool Modify;
} AjOIList;

#define AjIList AjOIList*




/*
** Prototype definitions
*/

AjPList     ajListNewRef(AjPList list);
AjPList     ajListNewListref(const AjPList list);
void        ajListExit(void);
AjBool      ajListPeekFirst(const AjPList thys, void** Pitem);
void        ajListFree(AjPList* Plist);
void        ajListFreeData(AjPList* Plist);
AjIList     ajListIterNew(AjPList list);
AjIList     ajListIterNewBack(AjPList list);
AjIList     ajListIterNewreadBack(const AjPList list);
AjIList     ajListIterNewread(const AjPList list);
AjBool      ajListIterDoneBack(const AjIList iter);
void        ajListIterDel(AjIList* iter);
void*       ajListIterGet(AjIList iter);
void*       ajListIterGetBack(AjIList iter);
void        ajListIterRewind(AjIList iter);
AjBool      ajListIterDone(const AjIList iter);
void        ajListIterTrace(const AjIList iter);
void*       ajListDrop(AjPList thys, void* item);
AjBool      ajListPeekLast(const AjPList thys, void** Pitem);
AjBool      ajListPeekNumber(const AjPList thys, ajulong n, void** Pitem);
ajulong     ajListGetLength(const AjPList list);
ajulong     ajListstrGetMemsize(const AjPList list);
void        ajListMap(AjPList list,
                      void (*apply)(void** Pitem, void* cl), void* cl);
void        ajListMapread(const AjPList list,
                          void (*apply)(void* item, void* cl), void* cl);
AjPList     ajListNew(void);
AjBool      ajListPeek(const AjPList list, void** Pitem);
AjBool      ajListPop(AjPList list, void** Pitem);
AjBool      ajListPopLast(AjPList thys, void** Pitem);
void        ajListProbe(AjPList const* list);
void        ajListProbeData(AjPList const* list);
void        ajListPurge(AjPList list,
                        AjBool (*test)(const void* item),
                        void (*itemdel)(void** Pitem));
void        ajListPush(AjPList list, void* item);
void        ajListPushAppend(AjPList list, void* item);
void        ajListReverse(AjPList list);

AjPList     ajListstrNewList(const AjPList list);
AjPList     ajListstrNewListref(const AjPList list);
void        ajListstrFree(AjPList* Plist);
void        ajListstrFreeData(AjPList* Plist);
AjPStr      ajListstrIterGet(AjIList iter);
AjPStr      ajListstrIterGetBack(AjIList iter);
void        ajListstrIterTrace(const AjIList iter);
ajulong     ajListstrGetLength(const AjPList list);
void        ajListstrMap(AjPList thys,
                         void (*apply)(AjPStr* str, void* cl), void* cl);
void        ajListstrMapread(const AjPList thys,
                             void (*apply)(AjPStr str, void* cl), void* cl);
AjPList     ajListstrNew(void);
AjBool      ajListstrPeek(const AjPList list, AjPStr* Pstr);
AjBool      ajListstrPop(AjPList list, AjPStr* Pstr);
AjBool      ajListstrPopLast(AjPList thys, AjPStr* Pstr);
void        ajListstrPush(AjPList list, AjPStr str);
void        ajListstrPushAppend(AjPList list, AjPStr str);
void        ajListstrReverse(AjPList list);
ajulong     ajListstrToarray(const AjPList list, AjPStr** array);
ajulong     ajListstrToarrayAppend(const AjPList list, AjPStr** array);
void        ajListstrTrace(const AjPList list);

ajulong     ajListToarray(const AjPList list, void*** array);
ajulong     ajListToindex(const AjPList list, ajuint* listindex,
                          int (*compar1)(const void* item1,
                                         const void* item2));
void        ajListTrace(const AjPList list);

AjBool      ajListMapfind(const AjPList listhead,
                          AjBool (*apply)(void** Pitem, void* cl),
                          void* cl);
AjBool      ajListstrMapfind(const AjPList listhead,
                             AjBool (*apply)(AjPStr* Pstr, void* cl),
                             void* cl);

void        ajListPushlist(AjPList list, AjPList* Plist);
void        ajListstrPushlist(AjPList list, AjPList* Plist);
void        ajListIterInsert(AjIList iter, void* item);
void        ajListIterRemove(AjIList iter);
void        ajListstrIterInsert(AjIList iter, AjPStr str);
void        ajListstrIterRemove(AjIList iter);
void        ajListSort(AjPList thys,
                       int (*compar1)(const void* item1,
                                      const void* item2));
void        ajListSortTwo(AjPList thys,
                          int (*compar1)(const void* item1,
                                         const void* item2),
                          int (*compar2)(const void* item1,
                                         const void* item2));
void        ajListSortTwoThree(AjPList thys,
                               int (*compar1)(const void* item1,
                                              const void* item2),
                               int (*compar2)(const void* item1,
                                              const void* item2),
                               int (*compar3)(const void* item1,
                                              const void* item2));

void        ajListSortUnique(AjPList thys,
                             int (*compar1)(const void* item1,
                                            const void* item2),
                             void (*itemdel)(void** Pitem,
                                             void* cl));
void        ajListSortTwoUnique(AjPList thys,
                                int (*compar1)(const void* item1,
                                               const void* item2),
                                int (*compar2)(const void* item1,
                                               const void* item2),
                                void (*itemdel)(void** Pitem,
                                                void* cl));
void        ajListUnused(void** array);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void        ajListPushList(AjPList list, AjPList* Plist);
__deprecated void        ajListstrPushList(AjPList list, AjPList* Plist);
__deprecated ajuint      ajListstrClone(const AjPList thys, AjPList newlist);
__deprecated AjPList     ajListNewArgs(void* x, ...);

__deprecated AjPListNode ajListNodesNew(void *x, ...);
__deprecated AjPList  ajListstrNewArgs(AjPStr x, ...);

__deprecated AjPList  ajListCopy(const AjPList list);
__deprecated void     ajListPushApp(AjPList list, void* item);

__deprecated void     ajListAppend(AjPList list, AjPListNode* tail);
__deprecated ajuint   ajListLength(const AjPList list);

__deprecated AjBool   ajListFirst(const AjPList thys, void** Pitem);
__deprecated AjBool   ajListLast(const AjPList thys, void** Pitem);
__deprecated AjBool   ajListNth(const AjPList thys, ajuint n, void** Pitem);
__deprecated AjBool   ajListPopEnd(AjPList thys, void** Pitem);
__deprecated void     ajListstrPushApp(AjPList list, AjPStr str);
__deprecated void     ajListDel(AjPList* Plist);
__deprecated AjBool   ajListstrPopEnd(AjPList thys, AjPStr* Pstr);
__deprecated ajuint   ajListstrToArray(const AjPList list, AjPStr** array);
__deprecated ajuint   ajListstrToArrayApp(const AjPList list, AjPStr** array);
__deprecated ajuint   ajListToArray(const AjPList list, void*** array);
__deprecated ajuint   ajListstrLength(const AjPList list);
__deprecated AjBool   ajListFind(const AjPList listhead,
                                 AjBool (*apply)(void** Pitem, void* cl),
                                 void* cl);
__deprecated AjBool   ajListstrFind(const AjPList listhead,
                                    AjBool (*apply)(AjPStr* Pstr, void* cl),
                                    void* cl);

__deprecated void     ajListMapRead(const AjPList list,
                                    void apply(void* item, void* cl),
                                    void* cl);
__deprecated void     ajListstrMapRead(const AjPList thys,
                                       void (*apply)(AjPStr str, void* cl),
                                       void* cl);

__deprecated void     ajListstrDel(AjPList* Plist);
__deprecated AjPList  ajListstrCopy(const AjPList list);

__deprecated AjIList  ajListIter(AjPList list);
__deprecated AjIList  ajListIterBack(AjPList list);
__deprecated AjIList  ajListIterBackRead(const AjPList list);
__deprecated AjIList  ajListIterRead(const AjPList list);
__deprecated AjBool   ajListIterBackDone(const AjIList iter);
__deprecated AjBool   ajListIterBackMore(const AjIList iter);
__deprecated void*    ajListIterBackNext(AjIList iter);
__deprecated void     ajListIterFree(AjIList* iter);
__deprecated AjBool   ajListIterMoreBack(const AjIList iter);
__deprecated AjBool   ajListIterMore(const AjIList iter);
__deprecated void*    ajListIterNext(AjIList iter);

__deprecated void     ajListInsert(AjIList iter, void* item);
__deprecated void     ajListRemove(AjIList iter);

__deprecated void     ajListstrInsert(AjIList iter, AjPStr str);
__deprecated void     ajListstrRemove(AjIList iter);
__deprecated void     ajListSort2(AjPList thys,
                                  int (*compar1)(const void* item1,
                                                 const void* item2),
                                  int (*compar2)(const void* item1,
                                                 const void* item2));
__deprecated void     ajListSort3(AjPList thys,
                                  int (*compar1)(const void* item1,
                                                 const void* item2),
                                  int (*compar2)(const void* item1,
                                                 const void* item2),
                                  int (*compar3)(const void* item1,
                                                 const void* item2));

__deprecated void     ajListUnique(AjPList thys,
                                   int (*compar)(const void* item1,
                                                 const void* item2),
                                   void (*itemdel)(void** Pitem,
                                                   void* cl));
__deprecated void     ajListUnique2(AjPList thys,
                                    int (*compar1)(const void* item1,
                                                   const void* item2),
                                    int (*compar2)(const void* item1,
                                                   const void* item2),
                                    void (*itemdel)(void** Pitem,
                                                    void* cl));

__deprecated void     ajListGarbageCollect(AjPList list,
                                           void (*itemdel)(void** Pitem),
                                           AjBool (*test)(const void* item));

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJLIST_H */
ajmart.h/       1414437296  1010  513   100644  14127     `
/* @include ajmart ************************************************************
**
** AJAX Mart (database) functions
**
** These functions control all aspects of AJAX sequence database access
**
** @author Copyright (C) 2009 Alan Bleasby
** @version $Revision: 1.17 $
** @modified Nov 23 ajb First version
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJMART_H
#define AJMART_H


/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajdom.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define MART_CACHE_RD 1
#define MART_CACHE_WT 2
#define MART_CACHE_WTIFEMPTY 4




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPMartLoc ******************************************************
**
** Ajax BioMart locations structure.
**
** Holds lists of RegistryDBPointer, MartDBLocation & MartURLLocation
** locations. Each list consists of string tables.
**
** AjPMartLoc is implemented as a pointer to a C data structure.
**
** @alias AjPPMartLoc
** @alias AjSMartLoc
** @alias AjOMartLoc
**
** @attr Registries [AjPTable*] Tables of registry entries
** @attr Databases [AjPTable*] Tables of database entries
** @attr Urls [AjPTable*] Tables of URL entries
** @attr Reg_read [AjPList] List of registry tables used only
**                          during XML reading and subsequently
**                          converted to the table array above.
** @attr Data_read [AjPList] List of database tables (see Reg_read)
** @attr Url_read [AjPList] List of URL tables (see Reg_read)
** @attr Nregistries [ajuint] Number of registry entries
** @attr Ndatabases [ajuint] Number of database entries
** @attr Nurls [ajuint] Number of url entries
** @attr Depth [ajuint] Depth of XML when reading
** @@
******************************************************************************/

typedef struct AjSMartLoc
{
    AjPTable *Registries;
    AjPTable *Databases;
    AjPTable *Urls;
    AjPList Reg_read;
    AjPList Data_read;
    AjPList Url_read;
    ajuint Nregistries;
    ajuint Ndatabases;
    ajuint Nurls;
    ajuint Depth;
} AjOMartLoc;

#define AjPMartLoc AjOMartLoc*
typedef AjPMartLoc* AjPPMartLoc;




/* @data AjPMartDataset *******************************************************
**
** Ajax BioMart dataset information
**
** AjPMartDataset is implemented as a pointer to a C data structure.
**
** @alias AjPPMartDataset
** @alias AjSMartDataset
** @alias AjOMartDataset
**
** @attr Sets [AjPTable*] Datasets
** @attr Set_read [AjPList] List used for XML / tab-sep processing
** @attr Nsets [ajuint] Number of datasets
** @attr Depth [ajuint] Depth for XML processing
** @@
******************************************************************************/

typedef struct AjSMartDataset
{
    AjPTable *Sets;
    AjPList Set_read;
    ajuint Nsets;
    ajuint Depth;
} AjOMartDataset;

#define AjPMartDataset AjOMartDataset*
typedef AjPMartDataset* AjPPMartDataset;




/* @data AjPMartAttribute *****************************************************
**
** Ajax BioMart attribute information
**
** AjPMartAttribute is implemented as a pointer to a C data structure.
**
** @alias AjPPMartAttribute
** @alias AjSMartAttribute
** @alias AjOMartAttribute
**
** @attr Attributes [AjPTable*] Attributes
** @attr Att_read [AjPList] List used for XML / tab-sep processing
** @attr Natts [ajuint] Number of attributes
** @attr Depth [ajuint] Depth for XML processing
** @@
******************************************************************************/

typedef struct AjSMartAttribute
{
    AjPTable *Attributes;
    AjPList Att_read;
    ajuint Natts;
    ajuint Depth;
} AjOMartAttribute;

#define AjPMartAttribute AjOMartAttribute*
typedef AjPMartAttribute* AjPPMartAttribute;




/* @data AjPMartFilter ********************************************************
**
** Ajax BioMart filter information
**
** AjPMartFilter is implemented as a pointer to a C data structure.
**
** @alias AjPPMartFilter
** @alias AjSMartFilter
** @alias AjOMartFilter
**
** @attr Filters [AjPTable*] Filterss
** @attr Filter_read [AjPList] List used for XML / tab-sep processing
** @attr Nfilters [ajuint] Number of filters
** @attr Depth [ajuint] Depth for XML processing
** @@
******************************************************************************/

typedef struct AjSMartFilter
{
    AjPTable *Filters;
    AjPList Filter_read;
    ajuint Nfilters;
    ajuint Depth;
} AjOMartFilter;

#define AjPMartFilter AjOMartFilter*
typedef AjPMartFilter* AjPPMartFilter;




/* @data AjPMartdsinfo ********************************************************
**
** Biomart martservice object for holding query dataset info pre conversion
** to an XML query string
**
** @alias AjSMartdsinfo
** @alias AjOMartdsinfo
**
** @attr Name [AjPStr] Name of dataset
** @attr Interface [AjPStr] Interface of dataset
** @attr Attributes [AjPList] Attributes
** @attr Filters [AjPList] Filters
** @@
******************************************************************************/

typedef struct AjSMartdsinfo
{
    AjPStr Name;
    AjPStr Interface;
    AjPList Attributes;
    AjPList Filters;
} AjOMartdsinfo;

#define AjPMartdsinfo AjOMartdsinfo*




/* @data AjPMartqinfo *********************************************************
**
** Biomart martservice object for holding query info pre conversion
** to an XML query string
**
** @alias AjSMartqinfo
** @alias AjOMartqinfo
**
** @attr Hvirtualschema [AjPStr] Header virtualSchemaName
** @attr Hversion [AjPStr] Header datasetConfigVersion
** @attr Hformatter [AjPStr] Header output formatter type
** @attr Hcount [AjBool] Header count
** @attr Hheader [AjBool] Header flag for printing column names
** @attr Hstamp [AjBool] Header flag for completionStamp
** @attr Hunique [AjBool] Header flag for unique rows
** @attr Dsets [AjPMartdsinfo*] Mart attributes
** @attr Dnsets [ajuint] Number of datasets
** @attr Verify [AjBool] Check attnames and filtnames
** @@
******************************************************************************/

typedef struct AjSMartqinfo
{
    AjPStr Hvirtualschema;
    AjPStr Hversion;
    AjPStr Hformatter;
    AjBool Hcount;
    AjBool Hheader;
    AjBool Hstamp;
    AjBool Hunique;
    AjPMartdsinfo *Dsets;
    ajuint Dnsets;
    AjBool Verify;
} AjOMartqinfo;

#define AjPMartqinfo AjOMartqinfo*




/* @data AjPMartquery *********************************************************
**
** Biomart martservice query object
**
** @alias AjSMartquery
** @alias AjOMartquery
**
** @attr Reghost [AjPStr] Registry host
** @attr Regpath [AjPStr] Registry path to mart service on Reghost
** @attr Marthost [AjPStr] Host containing desired mart (selected from registry)
** @attr Martpath [AjPStr] Path to mart service on Marthost
** @attr Cachedir [AjPStr] Cache directory
** @attr Query [AjPStr] Mart query
** @attr Loc [AjPMartLoc] Mart registry information
** @attr Mart [AjPStr] Mart name
** @attr Dsname [AjPStr] Dataset name
** @attr Dataset [AjPMartDataset] Mart datasets
** @attr Atts [AjPMartAttribute] Mart attributes
** @attr Filters [AjPMartFilter] Mart filters
** @attr Config [AjPDomDocument] Configuration Information
** @attr Regport [ajuint] Registry host URL port
** @attr Martport [ajuint] Mart host URL port
** @attr Cacheflag [ajuint] Control operation of cache
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSMartquery
{
    AjPStr Reghost;
    AjPStr Regpath;
    AjPStr Marthost;
    AjPStr Martpath;
    AjPStr Cachedir;
    AjPStr Query;
    AjPMartLoc Loc;
    AjPStr Mart;
    AjPStr Dsname;
    AjPMartDataset Dataset;
    AjPMartAttribute Atts;
    AjPMartFilter Filters;
    AjPDomDocument Config;
    ajuint Regport;
    ajuint Martport;
    ajuint Cacheflag;
    ajuint Padding;
} AjOMartquery;

#define AjPMartquery AjOMartquery*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

AjPMartLoc ajMartLocNew(void);
void ajMartLocDel(AjPMartLoc *thys);

AjPMartFilter ajMartFilterNew(void);
void ajMartFilterDel(AjPMartFilter *thys);
    
AjPMartAttribute ajMartAttributeNew(void);
void ajMartAttributeDel(AjPMartAttribute *thys);
    
AjPMartDataset ajMartDatasetNew(void);
void ajMartDatasetDel(AjPMartDataset *thys);
    
AjPMartquery ajMartqueryNew(void);
void ajMartqueryDel(AjPMartquery *thys);

AjPMartqinfo ajMartQinfoNew(ajuint n);
void ajMartQinfoDel(AjPMartqinfo *thys);

AjPMartdsinfo ajMartDsinfoNew(void);
void ajMartDsinfoDel(AjPMartdsinfo *thys);


AjBool ajMartGetRegistry(AjPSeqin seqin);
AjBool ajMartregistryParse(AjPSeqin seqin);

AjBool ajMartGetDatasets(AjPSeqin seqin, const AjPStr mart);
AjBool ajMartdatasetParse(AjPSeqin seqin);

AjBool ajMartGetAttributes(AjPSeqin seqin, const AjPStr dataset);
AjBool ajMartattributesParse(AjPSeqin seqin);
AjBool ajMartGetAttributesSchema(AjPSeqin seqin, const AjPStr dataset,
                                 const AjPStr schema);
AjBool ajMartGetAttributesRetry(AjPSeqin seqin, const AjPStr dataset);
    

AjBool ajMartGetFilters(AjPSeqin seqin, const AjPStr dataset);
AjBool ajMartfiltersParse(AjPSeqin seqin);
AjBool ajMartGetFiltersSchema(AjPSeqin seqin, const AjPStr dataset,
                              const AjPStr schema);
AjBool ajMartGetFiltersRetry(AjPSeqin seqin, const AjPStr dataset);
    

AjBool ajMartFilterMatch(AjPTable atab, const AjPMartFilter filt);
AjBool ajMartAssociate(AjPSeqin seqin);

void ajMartMakeQueryXml(const AjPMartqinfo qinfo, AjPSeqin seqin);

void ajMartFixMart(AjPSeqin seqin);
void ajMartFixRegistry(AjPSeqin seqin);

AjBool ajMartCheckQinfo(AjPSeqin seqin, AjPMartqinfo qinfo);

AjBool ajMartSendQuery(AjPSeqin seqin);

const AjPStr ajMartGetMarthost(const AjPSeqin seqin);
const AjPStr ajMartGetMartpath(const AjPSeqin seqin);
ajuint ajMartGetMartport(const AjPSeqin seqin);

const AjPStr ajMartGetReghost(const AjPSeqin seqin);
const AjPStr ajMartGetRegpath(const AjPSeqin seqin);
ajuint ajMartGetRegport(const AjPSeqin seqin);

AjBool ajMartSetMarthostC(AjPSeqin seqin, const char *marthost);
AjBool ajMartSetMartpathC(AjPSeqin seqin, const char *martpath);
AjBool ajMartSetMarthostS(AjPSeqin seqin, const AjPStr marthost);
AjBool ajMartSetMartpathS(AjPSeqin seqin, const AjPStr martpath);
AjBool ajMartSetMartport(AjPSeqin seqin, ajuint martport);

AjBool ajMartSetReghostC(AjPSeqin seqin, const char *reghost);
AjBool ajMartSetRegpathC(AjPSeqin seqin, const char *regpath);
AjBool ajMartSetReghostS(AjPSeqin seqin, const AjPStr reghost);
AjBool ajMartSetRegpathS(AjPSeqin seqin, const AjPStr regpath);
AjBool ajMartSetRegport(AjPSeqin seqin, ajuint regport);

AjPMartquery ajMartGetMartqueryPtr(const AjPSeqin seqin);
void ajMartAttachMartquery(AjPSeqin seqin, AjPMartquery mq);
void ajMartquerySeqinFree(AjPSeqin seqin);

char *ajStrtokQuotR(const char *srcstr, const char *delimstr,
                    const char *quotstr, const char **ptrptr,
                    AjPStr *buf);

AjBool ajMartParseParameters(AjPMartqinfo qinfo, const AjPStr atts,
                             const AjPStr filts, ajuint idx);

void ajMartSetQuerySchemaC(AjPMartqinfo qinfo, const char *schema);
void ajMartSetQueryVersionC(AjPMartqinfo qinfo, const char *version);
void ajMartSetQueryFormatC(AjPMartqinfo qinfo, const char *format);
void ajMartSetQueryCount(AjPMartqinfo qinfo, AjBool count);
void ajMartSetQueryHeader(AjPMartqinfo qinfo, AjBool header);
void ajMartSetQueryUnique(AjPMartqinfo qinfo, AjBool unique);
void ajMartSetQueryStamp(AjPMartqinfo qinfo, AjBool stamp);
void ajMartSetQueryVerify(AjPMartqinfo qinfo, AjBool verify);

void ajMartSetQueryDatasetName(AjPMartqinfo qinfo, const AjPStr name,
                               ajuint idx);
void ajMartSetQueryDatasetInterfaceC(AjPMartqinfo qinfo, const char *iface,
                                     ajuint idx);

AjBool ajMartGetConfiguration(AjPSeqin seqin, const AjPStr dataset);
AjBool ajMartconfigurationParse(AjPSeqin seqin);
AjBool ajMartattributesPageSort(AjPSeqin seqin);

AjBool ajMartNameIsNucC(const char *name);
AjBool ajMartNameIsProtC(const char *name);
AjBool ajMartTableNameIsNuc(const AjPTable t);
AjBool ajMartTableNameIsProt(const AjPTable t);

AjPStr *ajMartCheckHeader(AjPSeqin seqin, AjPMartqinfo qinfo);
void    ajMartDecodeHname(const AjPStr dir, AjPStr *host, AjPStr *path,
                          ajuint *port);


/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJMART_H */

ajmath.h/       1414437289  1010  513   100644  4938      `
/* @include ajmath ************************************************************
**
** AJAX maths functions
**
** @author Copyright (C) 1998 Alan Bleasby
** @version $Revision: 1.16 $
** @modified $Date: 2012/12/07 09:56:21 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJMATH_H
#define AJMATH_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define AJM_E                  2.718281828459
#define AJM_PI                 3.141592653589
#define AJM_PI_2               1.570796326794
#define AJM_PI_4               0.785398163397
#define AJM_1_PI               0.318309886183
#define AJM_2_PI               0.636619772367




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




#define AJMAX(a,b) ((a > b) ? a : b)
#define AJMIN(a,b) ((a < b) ? a : b)




/*
** Prototype definitions
*/

float              ajCvtDegToRad(float degrees);
double             ajCvtGaussToProb(float mean, float sd, float score);
void               ajCvtPolToRec(float radius, float angle,
                                 float *x, float *y);
float              ajCvtRadToDeg(float radians);
size_t             ajCvtSposToPos(size_t len, ajlong ipos);
size_t             ajCvtSposToPosStart(size_t len, size_t imin, ajlong ipos);
float              ajMathGmean(const float *s, ajint n);
ajint              ajMathModulo(ajint a, ajint b);
ajint              ajRandomNumber(void);
double             ajRandomDouble(void);
void               ajRandomSeed(void);
void               ajCvtRecToPol(float x, float y,
                                 float *radius, float *angle);
ajint              ajRound(ajuint i, ajuint vround);
float              ajRoundFloat(float a, ajuint nbits);
unsigned long long ajMathCrc64(const AjPStr thys);
ajuint             ajMathCrc32(const AjPStr thys);
ajuint             ajNumLengthDouble(double dnumber);
ajuint             ajNumLengthFloat(float fnumber);
ajuint             ajNumLengthInt(ajlong inumber);
ajuint             ajNumLengthUint(ajulong inumber);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated float              ajRoundF(float a, ajint nbits);
__deprecated double             ajRandomNumberD(void);
__deprecated unsigned long long ajSp64Crc(const AjPStr thys);
__deprecated ajuint             ajSp32Crc(const AjPStr thys);
__deprecated ajint              ajPosMod(ajint a, ajint b);
__deprecated float              ajGeoMean(const float *s, ajint n);
__deprecated double             ajGaussProb(float mean, float sd, float score);
__deprecated ajuint             ajMathPosI(ajuint len, ajuint imin, ajint ipos);
__deprecated ajuint             ajMathPos(ajuint len, ajint ipos);
__deprecated float              ajDegToRad(float degrees);
__deprecated float              ajRadToDeg(float radians);
__deprecated void               ajPolToRec(float radius, float angle,
                                           float *x, float *y);
__deprecated void               ajRecToPol(float x, float y,
                                           float *radius, float *angle);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJMATH_H */
ajmatrices.h/   1414437289  1010  513   100644  7391      `
/* @include ajmatrices ********************************************************
**
** AJAX matrices functions
**
** @author Copyright (C) 2003 Alan Bleasby
** @author Copyright (C) 2003 Peter Rice
** @version $Revision: 1.25 $
** @modified Copyright (C) 2003 Jon Ison. Rewritten for string matrix labels
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJMATRICES_H
#define AJMATRICES_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajseq.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPMatrix ************************************************************
**
** AJAX data structure for sequence comparison matrices with integer values
**
** @alias AjSMatrix
** @alias AjOMatrix
**
** @attr Size [ajint] Matrix size (size of 2D array)
** @attr SizeRow [ajint] Number of rows (if different to Size)
** @attr Name [AjPStr] Matrix name
** @attr Codes [AjPStr*] Row/column codes
** @attr CodesRow [AjPStr*] Row codes (if different to Codes)
** @attr Matrix [AjIntArray*] Matrix as 2D array
** @attr Cvt [AjPSeqCvt] Conversion table
** @@
******************************************************************************/

typedef struct AjSMatrix
{
    ajint Size;
    ajint SizeRow;
    AjPStr Name;
    AjPStr* Codes;
    AjPStr* CodesRow;
    AjIntArray* Matrix;
    AjPSeqCvt Cvt;
} AjOMatrix;

#define AjPMatrix AjOMatrix*




/* @data AjPMatrixf ***********************************************************
**
** AJAX data structure for sequence comparison matrices with floating
** point values
**
** @alias AjSMatrixf
** @alias AjOMatrixf
**
** @attr Size [ajint] Matrix size (size of 2D array)
** @attr SizeRow [ajint] Number of rows (if different to Size)
** @attr Name [AjPStr] Matrix name
** @attr Codes [AjPStr*] Row/column codes
** @attr CodesRow [AjPStr*] Row codes (if different to Codes)
** @attr Matrixf [AjFloatArray*] Matrix as 2D array
** @attr Cvt [AjPSeqCvt] Conversion table
** @@
******************************************************************************/

typedef struct AjSMatrixf
{
    ajint Size;
    ajint SizeRow;
    AjPStr Name;
    AjPStr* Codes;
    AjPStr* CodesRow;
    AjFloatArray* Matrixf;
    AjPSeqCvt Cvt;
} AjOMatrixf;

#define AjPMatrixf AjOMatrixf*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void          ajMatrixDel(AjPMatrix *thys);
AjPStr        ajMatrixGetCodes(const AjPMatrix thys);
AjPSeqCvt     ajMatrixGetCvt(const AjPMatrix thys);
const AjPStr  ajMatrixGetLabelNum(const AjPMatrix thys, ajint i);
AjIntArray*   ajMatrixGetMatrix(const AjPMatrix thys);
const AjPStr  ajMatrixGetName(const AjPMatrix thys);
ajuint        ajMatrixGetRows(const AjPMatrix thys);
ajuint        ajMatrixGetSize(const AjPMatrix thys);
AjPMatrix     ajMatrixNew(const AjPPStr codes, ajint n,
                          const AjPStr filename);
AjPMatrix     ajMatrixNewAsym(const AjPPStr codes, ajint n,
                              const AjPPStr rcodes, ajint rn,
                              const AjPStr filename);
AjPMatrix     ajMatrixNewFile(const AjPStr filename);
AjBool        ajMatrixSeqIndex(const AjPMatrix thys, const AjPSeq seq,
                               AjPStr* numseq);

void          ajMatrixfDel(AjPMatrixf *thys);
AjPStr        ajMatrixfGetCodes(const AjPMatrixf thys);
AjPSeqCvt     ajMatrixfGetCvt(const AjPMatrixf thys);
const AjPStr  ajMatrixfGetLabelNum(const AjPMatrixf thys, ajint i);
AjFloatArray* ajMatrixfGetMatrix(const AjPMatrixf thys);
const AjPStr  ajMatrixfGetName(const AjPMatrixf thys);
ajuint        ajMatrixfGetRows(const AjPMatrixf thys);
ajuint        ajMatrixfGetSize(const AjPMatrixf thys);
AjPMatrixf    ajMatrixfNew(const AjPPStr codes, ajint n,
                           const AjPStr filename);
AjPMatrixf    ajMatrixfNewAsym(const AjPPStr codes, ajint n,
                               const AjPPStr rcodes, ajint rn,
                               const AjPStr filename);
AjPMatrixf    ajMatrixfNewFile(const AjPStr filename);
AjBool        ajMatrixfSeqIndex(const AjPMatrixf thys, const AjPSeq seq,
                                AjPStr* numseq);
void          ajMatrixExit(void);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void          ajMatrixfChar(const AjPMatrixf thys,
                                         ajint i, AjPStr *label);
__deprecated void          ajMatrixChar(const AjPMatrix thys,
                                        ajint i, AjPStr *label);
__deprecated const AjPStr  ajMatrixfName(const AjPMatrixf thys);
__deprecated const AjPStr  ajMatrixName(const AjPMatrix thys);
__deprecated AjPSeqCvt     ajMatrixCvt(const AjPMatrix thys);
__deprecated AjPSeqCvt     ajMatrixfCvt(const AjPMatrixf thys);
__deprecated ajint         ajMatrixSize(const AjPMatrix thys);
__deprecated ajint         ajMatrixfSize(const AjPMatrixf thys);
__deprecated AjIntArray*   ajMatrixArray(const AjPMatrix thys);
__deprecated AjFloatArray* ajMatrixfArray(const AjPMatrixf thys);
__deprecated AjBool        ajMatrixRead(AjPMatrix* pthis,
                                        const AjPStr filename);
__deprecated AjBool        ajMatrixfRead(AjPMatrixf* pthis,
                                         const AjPStr filename);
__deprecated AjBool        ajMatrixSeqNum(const AjPMatrix thys,
                                          const AjPSeq seq, AjPStr* numseq);
__deprecated AjBool        ajMatrixfSeqNum(const AjPMatrixf thys,
                                           const AjPSeq seq, AjPStr* numseq);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJMATRICES_H */

ajmem.h/        1414437289  1010  513   100644  5849      `
/* @include ajmem *************************************************************
**
** AJAX memory functions
**
** @author Copyright (C) 1999 Peter Rice
** @version $Revision: 1.15 $
** @modified Peter Rice pmr@ebi.ac.uk
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJMEM_H
#define AJMEM_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

#ifdef HAVE_MEMMOVE
#define ajMemMove(d,s,l) memmove(d,s,l)
#else /* !HAVE_MEMMOVE */
#define ajMemMove(d,s,l) bcopy(s,d,l)
#endif /* !HAVE_MEMMOVE */




/*
** Prototype definitions
*/

void *ajMemAlloc(size_t nbytes,
                 const char *file, ajint line, AjBool nofail);
void *ajMemCalloc(size_t count, size_t nbytes,
                  const char *file, ajint line, AjBool nofail);
void *ajMemCallocZero(size_t count, size_t nbytes,
                      const char *file, ajint line, AjBool nofail);
void ajMemFree(void **ptr);
void *ajMemResize(void *ptr, size_t nbytes,
                  const char *file, ajint line, AjBool nofail);
void *ajMemResizeZero(void *ptr, size_t oldbytes, size_t nbytes,
                      const char *file, ajint line, AjBool nofail);
void ajMemSetZero(void* ptr, size_t count, size_t nbytes);

ajint *ajMemArrB(size_t size);
ajint *ajMemArrI(size_t size);
float *ajMemArrF(size_t size);
void ajMemStat(const char* title);
void ajMemExit(void);
void ajMemCheck(int istat);
void ajMemCheckSetLimit(ajint maxfail);
void ajMemProbe(void* ptr, const char* file, ajint line);

/*
** End of prototype definitions
*/




#define AJALLOC(nbytes)                                 \
    ajMemAlloc((nbytes), __FILE__, __LINE__, AJFALSE)
#define AJALLOC0(nbytes)                                        \
    ajMemCallocZero(1, (nbytes), __FILE__, __LINE__, AJFALSE)
#define AJCALLOC(count, nbytes)                                 \
    ajMemCalloc((count), (nbytes), __FILE__, __LINE__, AJFALSE)
#define AJCALLOC0(count, nbytes)                                        \
    ajMemCallocZero((count), (nbytes), __FILE__, __LINE__, AJFALSE)

#define AJNEW(p) ((p) = AJALLOC(sizeof *(p)))
#define AJCNEW(p,c) ((p) = AJCALLOC((size_t)c, sizeof *(p)))
#define AJNEW0(p) ((p) = AJCALLOC0((size_t)1, sizeof *(p)))
#define AJCNEW0(p,c) ((p) = AJCALLOC0((size_t)c, sizeof *(p)))
#define AJSET0(p) (ajMemSetZero((p), (size_t)1, sizeof *(p)))
#define AJCSET0(p,c) (ajMemSetZero((p), (size_t)c, sizeof *(p)))

#define AJFREE(ptr) ((void)(ajMemFree((void**)&ptr)))
#define AJRESIZE(ptr, nbytes)                                           \
    ((ptr) = ajMemResize((ptr), (nbytes), __FILE__, __LINE__, AJFALSE))
#define AJRESIZE0(ptr, oldbytes, nbytes)                        \
    ((ptr) = ajMemResizeZero((ptr), (oldbytes), (nbytes),       \
                             __FILE__, __LINE__, AJFALSE))
#define AJCRESIZE(ptr, nbytes)                          \
    ((ptr) = ajMemResize((ptr), (nbytes)*sizeof *(ptr), \
                         __FILE__, __LINE__, AJFALSE))
#define AJCRESIZE0(ptr, oldbytes, nbytes)                       \
    ((ptr) = ajMemResizeZero((ptr), (oldbytes)*sizeof *(ptr),   \
                             (nbytes)*sizeof *(ptr),            \
                             __FILE__, __LINE__, AJFALSE))
#define AJCRESIZETRY(ptr, nbytes)                       \
    ((ptr) = ajMemResize((ptr), (nbytes)*sizeof *(ptr), \
                         __FILE__, __LINE__, AJTRUE))
#define AJCRESIZETRY0(ptr, oldbytes, nbytes)                    \
    ((ptr) = ajMemResizeZero((ptr), (oldbytes)*sizeof *(ptr),   \
                             (nbytes)*sizeof *(ptr),            \
                             __FILE__, __LINE__, AJTRUE))
#define AJMPROBE(ptr)                           \
    ajMemProbe(ptr, __FILE__, __LINE__)




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void *ajMemCalloc0(size_t count, size_t nbytes,
                                const char *file, ajint line, AjBool nofail);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJMEM_H */

ajmess.h/       1414437289  1010  513   100644  10571     `
/* @include ajmess ************************************************************
**
** AJAX message functions
**
** @author Richard Durbin and Ed Griffiths from ACEdb (messubs.c)
** @version $Revision: 1.29 $
** @modified Ian Longden for EMBOSS
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJMESS_H
#define AJMESS_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

#include <stdarg.h>
#include <setjmp.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#ifndef WIN32
extern AjBool acdDebugSet;
extern AjBool acdDebugBuffer;
extern AjBool acdDebug;
extern AjPStr acdProgram;
extern AjPStr acdAppldoc;
extern AjPStr acdArgSave;
extern AjPStr acdInputSave;
#else /* WIN32 */

#ifdef AJAXDLL_EXPORTS
__declspec(dllexport) AjBool acdDebugSet;
__declspec(dllexport) AjBool acdDebugBuffer;
__declspec(dllexport) AjBool acdDebug;
__declspec(dllexport) AjPStr acdProgram;
__declspec(dllexport) AjPStr acdAppldoc;
__declspec(dllexport) AjPStr acdArgSave;
__declspec(dllexport) AjPStr acdInputSave;
#else /* !AJAXDLL_EXPORTS */
__declspec(dllimport) AjBool acdDebugSet;
__declspec(dllimport) AjBool acdDebugBuffer;
__declspec(dllimport) AjBool acdDebug;
__declspec(dllimport) AjPStr acdProgram;
__declspec(dllimport) AjPStr acdAppldoc;
__declspec(dllimport) AjPStr acdArgSave;
__declspec(dllimport) AjPStr acdInputSave;
#endif /* AJAXDLL_EXPORTS */

#endif /* !WIN32 */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPError *************************************************************
**
** Ajax error message levels object
**
** @alias AjSError
** @alias AjOError
**
** @attr warning [AjBool] Display ajWarn messages
** @attr error [AjBool] Display ajErr messages
** @attr fatal [AjBool] Display ajFatal messages
** @attr die [AjBool] Display ajDie messages
** @@
******************************************************************************/

typedef struct AjSError
{
    AjBool warning;
    AjBool error;
    AjBool fatal;
    AjBool die;
} AjOError;

#define AjPError AjOError*

#ifndef WIN32
extern AjOError AjErrorLevel;
#else /* WIN32 */

#ifdef AJAXDLL_EXPORTS
__declspec(dllexport) AjOError AjErrorLevel;
#else /* !AJAXDLL_EXPORTS */
__declspec(dllimport) AjOError AjErrorLevel;
#endif /* AJAXDLL_EXPORTS */

#endif /* !WIN32 */

#define SUBDIR_DELIMITER_STR "\\"



typedef void (*AjMessVoidRoutine)(void);
typedef void (*AjMessOutRoutine)(const char*);




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjMessVoidRoutine ajMessRegBeep(AjMessVoidRoutine func);
AjMessOutRoutine  ajMessRegCrash(AjMessOutRoutine func);
AjMessOutRoutine  ajMessRegDump(AjMessOutRoutine func);
AjMessOutRoutine  ajMessRegErr(AjMessOutRoutine func);
AjMessOutRoutine  ajMessRegExit(AjMessOutRoutine func);
AjMessOutRoutine  ajMessRegOut(AjMessOutRoutine func);
AjMessOutRoutine  ajMessRegWarn(AjMessOutRoutine func);

void              ajMessSetErr(const char *filename, ajint line_num);
void              ajMessCrashFL(const char *format, ...);
void              ajMessVCrashFL(const char *format, va_list args);
void              ajMessCrashCodeFL(const char *code);

/* External Interface.                                                       */
/* Note: ajMesscrash is a macro and makes use of the ',' operator            */
/* in C. This means that the ajMesscrash macro will only produce a single C  */
/* statement and hence can be used within brackets etc. and will not break   */
/* existing code, e.g.                                                       */
/*                     funcblah(ajMesscrash("hello"));                       */
/* will become:                                                              */
/* funcblah(uMessSetErrorOrigin(__FILE__, __LINE__), uMessCrash("hello"));   */
/*                                                                           */

void              ajMessErrorInit(const char *progname); /* Record
                                                            the application's
                                                            name for use in
                                                            error messages. */

void              ajMessBeep(void); /* make a beep */

AjBool            ajMessErrorSetFile(const char *errfile);  /* set file to
                                                               read codes +
                                                               messages from */
void              ajMessCodesDelete(void);  /* Delete the code/message pairs */

void              ajMessOut(const char *format, ...);  /* simple message,
                                                          no newline */
void              ajMessOutCode(const char *name);       /* as above but uses
                                                            codes to get
                                                            message */
void              ajMessDump(const char *format, ...); /* write to
                                                          log file */
void              ajMessErrorCode(const char *name);      /* as above but
                                                             uses code to
                                                             get message */
void              ajMessExit(void);
void              ajMessExitDebug(void);
void              ajMessExitmsg(const char *format, ...);  /* error message,
                                                              write to log
                                                              file & exit */
void              ajDebug(const char *fmt, ...);
AjBool            ajDebugOn(void);
AjBool            ajDebugTest(const char *token);
FILE*             ajMessGetDebugfile(void);
void              ajDie(const char *format, ...);
void              ajErr(const char *format, ...); /* error message and
                                                     write to
                                                     log file */
ajint             ajUserGet(AjPStr *pthis, const char *fmt, ...);
void              ajUser(const char *format, ...);  /* simple msg with
                                                       newline */
void              ajUserDumpC(const char* txt);  /* simple msg with string
                                                    and newline */
void              ajUserDumpS(const AjPStr str);  /* simple msg with string
                                                     and newline */
void              ajVDie(const char *format, va_list args); /* error message
                                                               and
                                                               write to log
                                                               file */
void              ajVErr(const char *format, va_list args); /* error message
                                                               and
                                                               write to log
                                                               file */
void              ajVUser(const char *format, va_list args);
void              ajVWarn(const char *format, va_list args); /* warning
                                                                message */
void              ajWarn(const char *format, ...); /* warning message */

/* abort - but see below */

/* ask for data satisfying format get results via freecard() */

const char*       ajMessGetSysmessageC(void);
/* wrapped system error message for use in ajMesserror/crash() */

ajint             ajMessGetCountError(void);
/* return numbers of error so far */

/**** routines to catch crashes if necessary, e.g. when dumping ****/



const char*       ajMessGetMessageC(void);

void              ajMessInvokeDebugger(void);


#define ajMessCrash   ajMessSetErr(__FILE__, __LINE__), ajMessCrashFL
#define ajMessCrashCode ajMessSetErr(__FILE__, __LINE__), ajMessCrashCodeFL
#define ajFatal   ajMessSetErr(__FILE__, __LINE__), ajMessCrashFL
#define ajVFatal   ajMessSetErr(__FILE__, __LINE__), ajMessVCrashFL


/*
** End of prototype definitions
*/


/* if a setjmp() stack context is set using ajMessCatch*() then rather than
** exiting or giving an error message, ajMessCrash() and messError() will
** longjmp() back to the context.
** ajMessCatch*() return the previous value. Use argument = 0 to reset.
** ajMessCaughtMessage() can be called from the jumped-to routine to get
** the error message that would have been printed.
*/

#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated ajint             ajMessErrorCount(void);
__deprecated char*             ajMessCaughtMessage(void);
__deprecated char*             ajMessSysErrorText(void);
__deprecated FILE*             ajDebugFile(void);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* AJMESS_H */

ajnam.h/        1414437289  1010  513   100644  8777      `
/* @include ajnam *************************************************************
**
** AJAX nam functions
**
** Creates a hash table of initial values and allow access to this
** via the routines ajNamDatabase and ajNamGetValueS.
**
** @author Copyright (C) 1998 Ian Longden
** @version $Revision: 1.49 $
** @modified 2000-2011 Peter Rice
** @modified $Date: 2013/01/24 15:31:46 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJNAM_H
#define AJNAM_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"
#include "ajquerydata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define AJMETHOD_ENTRY 1
#define AJMETHOD_QUERY 2
#define AJMETHOD_ALL   4




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool ajNamDatabase(const AjPStr name);
AjBool ajNamAliasDatabase(AjPStr *Pname);
AjBool ajNamServer(const AjPStr name);
AjBool ajNamAliasServer(AjPStr *Pname, const AjPStr server);
AjBool ajNamDatabaseServer(const AjPStr name, const AjPStr server);
AjPList ajNamDbGetAttrlist(const AjPStr name);
AjPList ajNamDbGetAttrlistSvr(const AjPStr name, const AjPStr svrname);
AjBool ajNamDbGetAttrC(const AjPStr name, const char *attribute,
                       AjPStr *value);
AjBool ajNamDbGetAttrS(const AjPStr name, const AjPStr attribute,
                       AjPStr *value);
AjBool ajNamDbDetails(const AjPStr name, AjPStr* type,
                      AjBool* id, AjBool* qry, AjBool* all,
                      AjPStr* comment, AjPStr* release,
                      AjPStr* methods, AjPStr* defined);
AjBool ajNamDbDetailsSvr(const AjPStr name,const AjPStr svrname,  AjPStr* type,
                      AjBool* id, AjBool* qry, AjBool* all,
                      AjPStr* comment, AjPStr* release,
                      AjPStr* methods, AjPStr* defined);
AjBool ajNamSvrGetAttrC(const AjPStr name, const char *attribute,
                        AjPStr *value);
AjBool ajNamSvrGetAttrS(const AjPStr name, const AjPStr attribute,
                        AjPStr *value);
ajuint ajNamDbGetAttrSpecialC(const AjPStr name, const char *attribute,
                              AjPStr* value);
ajuint ajNamDbGetAttrSpecialS(const AjPStr name, const AjPStr attribute,
                              AjPStr* value);
ajuint ajNamSvrGetAttrSpecialC(const AjPStr name, const char *attribute,
                               AjPStr* value);
ajuint ajNamSvrGetAttrSpecialS(const AjPStr name, const AjPStr attribute,
                               AjPStr* value);
AjPList ajNamSvrGetAttrlist(const AjPStr name);
AjBool ajNamSvrGetdbAttrC(const AjPStr name, const AjPStr dbname,
                          const char *attribute,
                          AjPStr *value);
AjBool ajNamSvrGetdbAttrS(const AjPStr name, const AjPStr dbname,
                          const AjPStr attribute,
                          AjPStr *value);
ajuint ajNamSvrGetdbAttrSpecialC(const AjPStr name, const AjPStr dbname,
                                 const char *attribute,
                                 AjPStr *value);
ajuint ajNamSvrGetdbAttrSpecialS(const AjPStr name, const AjPStr dbname,
                                 const AjPStr attribute,
                                 AjPStr *value);
AjBool ajNamSvrDetails(const AjPStr name, AjPStr* type, AjPStr *scope,
                       AjBool* id, AjBool* qry, AjBool* all,
                       AjPStr* comment, AjPStr *version,
                       AjPStr* methods, AjPStr* defined,
                       AjPStr* cachedirectory, AjPStr* cachefile,
                       AjPStr* url);
AjBool ajNamDbGetDbalias(const AjPStr dbname, AjPStr* dbalias);
AjBool ajNamDbGetDbaliasTest(const AjPStr dbname, AjPStr* dbalias);
AjBool ajNamDbGetIndexdir(const AjPStr dbname, AjPStr* indexdir);
AjBool ajNamDbGetType(const AjPStr dbname, ajuint *itype);
AjBool ajNamDbGetUrl(const AjPStr dbname, AjPStr* url);
AjBool ajNamDbData(AjPQuery qry, ajuint argc, ...);
AjBool ajNamDbQuery(AjPQuery qry);
AjBool ajNamFileQuery(AjPQuery qry);
AjBool ajNamQuerySetDbalias(AjPQuery qry);
const char* ajNamQueryGetDatatypeC(const AjPQuery qry);
const AjPStr ajNamQueryGetUrl(const AjPQuery qry);
AjBool ajNamDbTest(const AjPStr dbname);

AjBool ajNamSvrGetDbalias(const AjPStr svrname, AjPStr* svralias);
AjBool ajNamSvrGetUrl(const AjPStr svrname, AjPStr* url);
AjBool ajNamSvrData(AjPQuery qry, ajuint argc, ...);
AjBool ajNamSvrQuery(AjPQuery qry);
AjBool ajNamSvrTest(const AjPStr svrname);
ajuint ajNamSvrCount(const AjPStr svrname);
void   ajNamSvrListFindAliases(const AjPStr server, const AjPStr dbname,
                               AjPList dbnames);
void   ajNamSvrListListAliases(const AjPStr server, AjPList dbnames);
void   ajNamSvrListListDatabases(const AjPStr server, AjPList dbnames);

void   ajNamDebugOrigin(void);
void   ajNamDebugServers(void);
void   ajNamDebugDatabases(void);
void   ajNamDebugResources(void);
void   ajNamDebugVariables(void);
void   ajNamDebugAliases(void);

void   ajNamExit(void);

AjBool ajNamGetAliasC(const char* name, AjPStr* value);
AjBool ajNamGetAliasS(const AjPStr namestr, AjPStr* value);

AjBool ajNamGetenvC(const char* name, AjPStr* value);
AjBool ajNamGetenvS(const AjPStr name, AjPStr* value);
AjBool ajNamGetValueC(const char *name, AjPStr* value);
AjBool ajNamGetValueS(const AjPStr name, AjPStr* value);
void   ajNamInit(const char* prefix);
AjBool ajNamIsDbname(const AjPStr name);
void   ajNamListFindAliases(const AjPStr dbname, AjPList dbnames);
void   ajNamListListAliases(AjPList dbnames);
void   ajNamListListDatabases(AjPList dbnames);
void   ajNamListListResources(AjPList dbnames);
void   ajNamListListServers(AjPList svrnames);
void   ajNamPrintSvrAttr(AjPFile outf, AjBool full);
void   ajNamPrintDbAttr(AjPFile outf, AjBool full);
void   ajNamPrintRsAttr(AjPFile outf, AjBool full);

AjBool ajNamResolve(AjPStr* name);

const AjPStr ajNamValueRootdir(void);
const AjPStr ajNamValueBasedir(void);
const AjPStr ajNamValueInstalldir(void);
const AjPStr ajNamValuePackage(void);
const AjPStr ajNamValueSystem(void);
const AjPStr ajNamValueVersion(void);

AjBool ajNamRsAttrValueS(const AjPStr name, const AjPStr attribute,
                         AjPStr *value);
AjBool ajNamRsAttrValueC(const char *name, const char *attribute,
                         AjPStr *value);
AjBool ajNamRsListValue(const AjPStr name, AjPStr *value);
AjBool ajNamSetControl(const char* optionName);

/*
** End of prototype definitions
*/




#ifdef WIN32
#ifdef AJAXDLL_EXPORTS
__declspec(dllexport) const char* EMBOSSWINROOT_ENVVAR;
#else
__declspec(dllimport) const char* EMBOSSWINROOT_ENVVAR;
#endif
#endif




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjBool ajNamRsAttrValue(const AjPStr name, const AjPStr attribute,
                                     AjPStr *value);
__deprecated AjBool ajNamGetenv(const AjPStr name, AjPStr* value);
__deprecated AjBool ajNamGetValue(const AjPStr name, AjPStr* value);
__deprecated AjBool ajNamRootInstall(AjPStr* root);
__deprecated AjBool ajNamRoot(AjPStr* root);
__deprecated AjBool ajNamRootBase(AjPStr* rootbase);
__deprecated AjBool ajNamRootPack(AjPStr* pack);
__deprecated AjBool ajNamRootVersion(AjPStr* version);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJNAM_H */

ajnexus.h/      1414437289  1010  513   100644  12969     `
/* @include ajnexus ***********************************************************
**
** AJAX nexus file parsing functions
**
** @author Copyright (C) 2003 Peter Rice
** @version $Revision: 1.13 $
** @modified $Date: 2011/10/02 10:11:48 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJNEXUS_H
#define AJNEXUS_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPNexusTaxa *********************************************************
**
** Ajax nexus data taxa block object.
**
** @alias AjSNexusTaxa
** @alias AjONexusTaxa
**
** @new nexusTaxaNew Default constructor
**
** @delete nexusTaxaDel Default destructor
**
** @attr TaxLabels [AjPStr*] Taxon names
** @attr Ntax [ajuint] Number of taxons
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSNexusTaxa
{
    AjPStr* TaxLabels;
    ajuint  Ntax;
    char    Padding[4];
} AjONexusTaxa;

#define AjPNexusTaxa AjONexusTaxa*




/* @data AjPNexusCharacters ***************************************************
**
** Ajax nexus data characters block object.
**
** @alias AjSNexusCharacters
** @alias AjONexusCharacters
**
** @new nexusCharactersNew Default constructor
**
** @delete nexusCharactersDel Default destructor
**
** @attr NewTaxa [AjBool] New taxa read from data block
** @attr Ntax [ajuint] Number of taxons
** @attr Nchar [ajuint] Number of characters
** @attr RespectCase [AjBool] Respect case if true
** @attr DataType [AjPStr] Data type
** @attr Symbols [AjPStr] Character symbols
** @attr Equate [AjPStr] Character equivalent names
** @attr Labels [AjBool] Labels if true
** @attr Transpose [AjBool] Transpose data if true
** @attr Interleave [AjBool] Interleaved input if true
** @attr Tokens [AjBool] If true, tokens set
** @attr Items [AjPStr] Character items
** @attr StatesFormat [AjPStr] States format string
** @attr Eliminate [AjPStr] Eliminate string
** @attr CharStateLabels [AjPStr*] Character and state labels
** @attr CharLabels [AjPStr*] Character labels
** @attr StateLabels [AjPStr*] State labels
** @attr Matrix [AjPStr*] Matrix data
** @attr Sequences [AjPStr*] Sequence data
** @attr Missing [char] Missing character in input data
** @attr Gap [char] Gap character in input data
** @attr MatchChar [char] Matching character in input
** @attr Padding [char[5]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSNexusCharacters
{
    AjBool NewTaxa;
    ajuint Ntax;
    ajuint Nchar;
    AjBool RespectCase;
    AjPStr DataType;

    AjPStr Symbols;
    AjPStr Equate;
    AjBool Labels;
    AjBool Transpose;
    AjBool Interleave;
    AjBool Tokens;
    AjPStr Items;
    AjPStr StatesFormat;
    AjPStr Eliminate;
    AjPStr* CharStateLabels;
    AjPStr* CharLabels;
    AjPStr* StateLabels;
    AjPStr* Matrix;
    AjPStr* Sequences;
    char Missing;
    char Gap;
    char MatchChar;
    char Padding[5];
} AjONexusCharacters;

#define AjPNexusCharacters AjONexusCharacters*




/* @data AjPNexusUnaligned ****************************************************
**
** Ajax nexus data unaligned block object.
**
** Very similar to a character block and will be merged with AjPNexusCharacter
** in the near future
**
** @alias AjSNexusUnaligned
** @alias AjONexusUnaligned
**
** @new nexusUnalignedNew Default constructor
**
** @delete nexusUnalignedDel Default destructor
**
** @attr NewTaxa [AjBool] New taxa read from data block
** @attr Ntax [ajuint] Number of taxons
** @attr DataType [AjPStr] Data type
** @attr RespectCase [AjBool] Respect case if true
** @attr Labels [AjBool] Labels if true
** @attr Symbols [AjPStr] Character symbols
** @attr Equate [AjPStr] Character equivalent names
** @attr Matrix [AjPStr*] Matrix data
** @attr Missing [char] Missing character in input data
** @attr Padding [char[7]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSNexusUnaligned
{
    AjBool NewTaxa;
    ajuint Ntax;
    AjPStr DataType;
    AjBool RespectCase;
    AjBool Labels;
    AjPStr Symbols;
    AjPStr Equate;
    AjPStr* Matrix;
    char Missing;
    char Padding[7];
} AjONexusUnaligned;

#define AjPNexusUnaligned AjONexusUnaligned*




/* @data AjPNexusDistances ****************************************************
**
** Ajax nexus data distances block object.
**
** @alias AjSNexusDistances
** @alias AjONexusDistances
**
** @new nexusDistancesNew Default constructor
**
** @delete nexusDistancesDel Default destructor
**
** @attr NewTaxa [AjBool] New taxa read from data block
** @attr Ntax [ajuint] Number of taxons
** @attr Nchar [ajuint] Number of characters
** @attr Diagonal [AjBool] If true, expect to read diagonal of matrix
** @attr Labels [AjBool] Labels if true
** @attr Interleave [AjBool] Interleaved input if true
** @attr Triangle [AjPStr] Triangular distances block type
** @attr Matrix [AjPStr*] Matrix data
** @attr Missing [char] Missing character in input data
** @attr Padding [char[7]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSNexusDistances
{
    AjBool NewTaxa;
    ajuint Ntax;
    ajuint Nchar;
    AjBool Diagonal;
    AjBool Labels;
    AjBool Interleave;
    AjPStr Triangle;
    AjPStr* Matrix;
    char Missing;
    char Padding[7];
} AjONexusDistances;

#define AjPNexusDistances AjONexusDistances*




/* @data AjPNexusSets *********************************************************
**
** Ajax nexus data sets block object.
**
** The data is generally the NEXUS command strings as in the original file.
**
** @alias AjSNexusSets
** @alias AjONexusSets
**
** @new nexusSetsNew Default constructor
**
** @delete nexusSetsDel Default destructor
**
** @attr CharSet [AjPStr*] Character set commands
** @attr StateSet [AjPStr*] State set commands
** @attr ChangeSet [AjPStr*] Change set commands
** @attr TaxSet [AjPStr*] Taxon set commands
** @attr TreeSet [AjPStr*] Tree set commands
** @attr CharPartition [AjPStr*] Character partition statements
** @attr TaxPartition [AjPStr*] Taxa partition statements
** @attr TreePartition [AjPStr*] Tree partition statements
** @@
******************************************************************************/

typedef struct AjSNexusSets
{
    AjPStr* CharSet;
    AjPStr* StateSet;
    AjPStr* ChangeSet;
    AjPStr* TaxSet;
    AjPStr* TreeSet;
    AjPStr* CharPartition;
    AjPStr* TaxPartition;
    AjPStr* TreePartition;
} AjONexusSets;

#define AjPNexusSets AjONexusSets*




/* @data AjPNexusAssumptions **************************************************
**
** Ajax nexus data assumptions block object.
**
** @alias AjSNexusAssumptions
** @alias AjONexusAssumptions
**
** @new nexusAssumptionsNew Default constructor
**
** @delete nexusAssumptionsDel Default destructor
**
** @attr DefType [AjPStr] Options deftype subcommand
** @attr PolyTCount [AjPStr] Options polytcount subcommand
** @attr GapMode [AjPStr] Options gapmode subcommand
** @attr UserType [AjPStr*] Usertype commands
** @attr TypeSet [AjPStr*] Typeset commands
** @attr WtSet [AjPStr*] Wtset commands
** @attr ExSet [AjPStr*] Exset commands
** @attr AncStates [AjPStr*] Ancstates commands
** @@
******************************************************************************/

typedef struct AjSNexusAssumptions
{
    AjPStr DefType;
    AjPStr PolyTCount;
    AjPStr GapMode;
    AjPStr* UserType;
    AjPStr* TypeSet;
    AjPStr* WtSet;
    AjPStr* ExSet;
    AjPStr* AncStates;
} AjONexusAssumptions;

#define AjPNexusAssumptions AjONexusAssumptions*




/* @data AjPNexusCodons *******************************************************
**
** Ajax nexus data codons block object.
**
** @alias AjSNexusCodons
** @alias AjONexusCodons
**
** @new nexusCodonsNew Default constructor
**
** @delete nexusCodonsDel Default destructor
**
** @attr CodonPosSet [AjPStr*] CodonPosSetcommands
** @attr GeneticCode [AjPStr*] GeneticCodecommands
** @attr CodeSet [AjPStr*] CodeSetcommands
** @@
******************************************************************************/

typedef struct AjSNexusCodons
{
    AjPStr* CodonPosSet;
    AjPStr* GeneticCode;
    AjPStr* CodeSet;
} AjONexusCodons;

#define AjPNexusCodons AjONexusCodons*




/* @data AjPNexusTrees ********************************************************
**
** Ajax nexus data trees block object.
**
** @alias AjSNexusTrees
** @alias AjONexusTrees
**
** @new nexusTreesNew Default constructor
**
** @delete nexusTreesDel Default destructor
**
** @attr Translate [AjPStr*] Translate commands
** @attr Tree [AjPStr*] Tree commands
** @@
******************************************************************************/

typedef struct AjSNexusTrees
{
    AjPStr* Translate;
    AjPStr* Tree;
} AjONexusTrees;

#define AjPNexusTrees AjONexusTrees*




/* @data AjPNexusNotes ********************************************************
**
** Ajax nexus data notes block object.
**
** @alias AjSNexusNotes
** @alias AjONexusNotes
**
** @new nexusNotesNew Default constructor
**
** @delete nexusNotesDel Default destructor
**
** @attr Text [AjPStr*] Text commands
** @attr Picture [AjPStr*] Picture commands
** @@
******************************************************************************/

typedef struct AjSNexusNotes
{
    AjPStr* Text;
    AjPStr* Picture;
} AjONexusNotes;

#define AjPNexusNotes AjONexusNotes*




/* @data AjPNexus *************************************************************
**
** Ajax nexus data object.
**
** @alias AjSNexus
** @alias AjONexus
**
** @new ajNexusNew Default constructor
**
** @delete ajNexusDel Default destructor
**
** @attr Taxa [AjPNexusTaxa] Taxa
** @attr Characters [AjPNexusCharacters] Characters (or data)
** @attr Unaligned [AjPNexusUnaligned] Unaligned
** @attr Distances [AjPNexusDistances] Distances
** @attr Sets [AjPNexusSets] Sets
** @attr Assumptions [AjPNexusAssumptions] Assumptions
** @attr Codons [AjPNexusCodons] Codons
** @attr Trees [AjPNexusTrees] Trees
** @attr Notes [AjPNexusNotes] Notes
** @attr Ntax [ajuint] Number of taxa (wherever they were defined)
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSNexus
{
    AjPNexusTaxa Taxa;
    AjPNexusCharacters Characters;
    AjPNexusUnaligned Unaligned;
    AjPNexusDistances Distances;
    AjPNexusSets Sets;
    AjPNexusAssumptions Assumptions;
    AjPNexusCodons Codons;
    AjPNexusTrees Trees;
    AjPNexusNotes Notes;
    ajuint Ntax;
    char Padding[4];
} AjONexus;

#define AjPNexus AjONexus*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void     ajNexusDel(AjPNexus* pthys);
ajuint   ajNexusGetNtaxa(const AjPNexus thys);
AjPStr*  ajNexusGetTaxa(const AjPNexus thys);
AjPStr*  ajNexusGetSequences(AjPNexus thys);
AjPNexus ajNexusNew(void);
AjPNexus ajNexusParse(AjPFilebuff buff);
void     ajNexusTrace(const AjPNexus thys);
void     ajNexusExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJNEXUS_H */

ajobo.h/        1414437289  1010  513   100644  3793      `
/* @include ajobo *************************************************************
**
** AJAX OBO handling functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.21 $
** @modified May 5 pmr 2010 First AJAX version
** @modified Sep 8 2010 pmr Added query and reading functions
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJOBO_H
#define AJOBO_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajobodata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPObo           ajOboNew(void);
AjPObo           ajOboNewObo(const AjPObo obo);

void             ajOboClear(AjPObo thys);
void             ajOboDel(AjPObo *Pobo);

AjPObotag        ajObotagNewData(const AjPStr name, const AjPStr value,
                                 const AjPStr modifier, const AjPStr comment,
                                 ajuint linenum);
AjPObotag        ajObotagNewTag(const AjPObotag tag);
void             ajObotagDel(AjPObotag* Ptag);

AjPOboxref       ajOboxrefNewData(const AjPStr name, const AjPStr desc);
AjPOboxref       ajOboxrefNewXref(const AjPOboxref xref);
void             ajOboxrefDel(AjPOboxref* Pxref);

AjBool           ajOboqryGetObo(const AjPStr thys, AjPObo obo);

const AjPStr     ajOboGetDb(const AjPObo obo);
AjBool           ajOboGetDef(const AjPObo obo, AjPStr *Pdefstr, ajuint *nrefs);
const AjPStr     ajOboGetEntry(const AjPObo obo);
const AjPStr     ajOboGetId(const AjPObo obo);
const AjPStr     ajOboGetName(const AjPObo obo);
const AjPStr     ajOboGetNamespace(const AjPObo obo);
ajuint           ajOboGetParents(const AjPObo obo, AjPList uplist);
const char*      ajOboGetQryC(const AjPObo obo);
const AjPStr     ajOboGetQryS(const AjPObo obo);
const AjPStr     ajOboGetReplaced(const AjPObo obo);
ajuint           ajOboGetTree(const AjPObo obo, AjPList obolist);
AjBool           ajOboIsObsolete(const AjPObo obo);

void             ajOboExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJOBO_H */

ajobodata.h/    1414437289  1010  513   100644  10130     `
/* @include ajobodata *********************************************************
**
** AJAX OBO data structures
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.8 $
** @modified May 5 pmr 2010 First AJAX version
** @modified Sep 8 2010 pmr Added query and reading functions
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJOBODATA_H
#define AJOBODATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPOboin *************************************************************
**
** Ajax Obo Input object.
**
** Holds the obo term specification and information needed to read
** the obo term and possible further terms.
**
** @alias AjSOboin
** @alias AjOOboin
**
** @attr Input [AjPTextin] General text input object
** @attr OboData [void*] Format data for reuse, e.g. multiple term input
**                       (unused in current code)
** @@
******************************************************************************/

typedef struct AjSOboin
{
    AjPTextin Input;
    void *OboData;
} AjOOboin;

#define AjPOboin AjOOboin*




/* @data AjPOboAccess *********************************************************
**
** Ajax Obo Access database reading object.
**
** Holds information needed to read an obo term from a database.
** Access methods are defined for each known database type.
**
** Obo terms are read from the database using the defined
** database access function, which is usually a static function
** within ajobodb.c
**
** This should be a static data object but is needed for the definition
** of AjPOboin.
**
** @alias AjSOboAccess
** @alias AjOOboAccess
**
** @new ajOboMethod returns a copy of a known access method definition.
** @other AjPOboin Obo input
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSOboAccess
{
    const char *Name;
    AjBool (*Access)(AjPOboin oboin);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOOboAccess;

#define AjPOboAccess AjOOboAccess*




/* @data AjPOboData ***********************************************************
**
** OBO parsed data
**
** @attr Termtable [AjPTable] Table of terms by id
** @attr Termnametable [AjPTable] Table of terms by name
** @attr Typedeftable [AjPTable] Table of typedefs
** @attr Instancetable [AjPTable] Table of instances
** @attr Annotable [AjPTable] Table of annotation stanzas
** @attr Formulatable [AjPTable] Table of formula stanzas
** @attr Misctable [AjPTable] Table of other stanzas
** @@
******************************************************************************/

typedef struct AjSOboData
{
    AjPTable Termtable;
    AjPTable Termnametable;
    AjPTable Typedeftable;
    AjPTable Instancetable;
    AjPTable Annotable;
    AjPTable Formulatable;
    AjPTable Misctable;
} AjOOboData;

#define AjPOboData AjOOboData*




/* @data AjPObotag ************************************************************
**
** OBO tag name, value and comment.
**
** @alias AjSObotag
** @alias AjOObotag
**
** @attr Name [AjPStr] Tag name
** @attr Value [AjPStr] Tag value
** @attr Modifier [AjPStr] Tag modifier
** @attr Comment [AjPStr] Tag comment
** @attr Linenumber [ajuint] OBO file line number
** @attr Padding [ajuint] Padding to align structure
** @@
******************************************************************************/

typedef struct AjSObotag
{
    AjPStr Name;
    AjPStr Value;
    AjPStr Modifier;
    AjPStr Comment;
    ajuint Linenumber;
    ajuint Padding;
} AjOObotag;

#define AjPObotag AjOObotag*




/* @data AjPOboxref ***********************************************************
**
** OBO dbxref name and description
**
** @alias AjSOboxref
** @alias AjOOboxref
**
** @attr Name [AjPStr] Dbxref name
** @attr Desc [AjPStr] Description (optional)
** @@
******************************************************************************/

typedef struct AjSOboxref
{
    AjPStr Name;
    AjPStr Desc;
} AjOOboxref;

#define AjPOboxref AjOOboxref*




/* @data AjPOboalias **********************************************************
**
** Alias name for an OBO identifier
**
** @alias AjSOboalias
** @alias AjOOboalias
**
** @attr Alias     [AjPStr]  Alias name of term
** @attr Id        [AjPStr]  Id of term
******************************************************************************/

typedef struct AjSOboalias
{
    AjPStr  Alias;
    AjPStr  Id;
} AjOOboalias;

#define AjPOboalias AjOOboalias*




/* @data AjPObo ***************************************************************
**
** Ajax obo term object.
**
** Holds the term itself, plus associated information.
**
** @alias AjOObo
** @alias AjSObo
**
** @attr Id        [AjPStr]  Id of term
** @attr Trueid    [AjPStr]  True id of an alt_id
** @attr Fullid    [AjPStr]  Id of term with prefix
** @attr Name      [AjPStr]  Name of term
** @attr Namespace [AjPStr]  Namespace of term
** @attr Def       [AjPStr]  Definition of term
** @attr Dbxrefs   [AjPList] List of AjPOboxref names descriptions and modifiers
** @attr Comment   [AjPStr]  Comment tag in term stanza
** @attr Replaced  [AjPStr]  Replacement term for an obsolete term
** @attr Taglist   [AjPList]  List of other AjPObotag tag name-value pairs
** @attr Obsolete  [AjBool]  True if term is obsolete
** @attr Builtin   [AjBool]  True if term is an OBO Built-in term
** @attr Db [AjPStr] Database name from input
** @attr Setdb [AjPStr] Database name from command line
** @attr Full [AjPStr] Full name
** @attr Qry [AjPStr] Query for re-reading
** @attr Formatstr [AjPStr] Input format name
** @attr Filename [AjPStr] Original filename
** @attr TextPtr [AjPStr] Full text
** @attr Fpos [ajlong] File position (fseek) for Query
** @attr Format [AjEnum] Input format enum
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSObo
{
    AjPStr  Id;
    AjPStr  Trueid;
    AjPStr  Fullid;
    AjPStr  Name;
    AjPStr  Namespace;
    AjPStr  Def;
    AjPList Dbxrefs;
    AjPStr  Comment;
    AjPStr  Replaced;
    AjPList Taglist;
    AjBool  Obsolete;
    AjBool  Builtin;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr  TextPtr;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint Padding;
} AjOObo;

#define AjPObo AjOObo*




/* @data AjPOboall ************************************************************
**
** Ajax obo term all (stream) object.
**
** Inherits an AjPObo but allows more obo terms to be read from the
** same input by also inheriting the AjPOboin input object.
**
** @alias AjSOboall
** @alias AjOOboall
**
** @attr Obo [AjPObo] Current term
** @attr Oboin [AjPOboin] Obo input for reading next
** @attr Totterms [ajulong] Count of terms so far
** @attr Count [ajuint] Count of terms so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: Obo object has been returned to a new owner
**                         and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSOboall
{
    AjPObo Obo;
    AjPOboin Oboin;
    ajulong Totterms;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjOOboall;

#define AjPOboall AjOOboall*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJOBODATA_H */
ajobodb.h/      1414437296  1010  513   100644  2511      `
/* @include ajobodb ***********************************************************
**
** AJAX OBODB (OBO database) functions
**
** These functions control all aspects of AJAX obo database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.6 $
** @modified Sep 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJOBODB_H
#define AJOBODB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS


/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void         ajObodbExit(void);
void         ajObodbPrintAccess(AjPFile outf, AjBool full);
void         ajObodbInit(void);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJOBODB_H */

ajoboread.h/    1414437289  1010  513   100644  4646      `
/* @include ajoboread *********************************************************
**
** AJAX OBO reading functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.10 $
** @modified May 5 pmr 2010 First AJAX version
** @modified Sep 8 2010 pmr Added query and reading functions
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJOBOREAD_H
#define AJOBOREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajobodata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPOboData       ajObodataNew(void);
AjPOboData       ajObodataParseObofile(AjPFile infile, const char* validations);
AjPObo           ajObodataFetchId(const AjPOboData thys, const AjPStr query);
AjPObo           ajObodataFetchName(const AjPOboData thys, const AjPStr query);

AjBool           ajObolineCutComment(AjPStr *Pline, AjPStr *Pcomment);
AjBool           ajObolineCutModifier(AjPStr *Pline, AjPStr *Pmodifier);
AjBool           ajObolineCutDbxref(AjPStr *Pline, AjPStr *Pdbxref);
AjBool           ajObolineEscape(AjPStr *Pline);

void             ajOboallClear(AjPOboall thys);
void             ajOboallDel(AjPOboall* pthis);
AjPOboall        ajOboallNew(void);
const AjPStr     ajOboallGetoboId(const AjPOboall thys);
const AjPStr     ajOboallGetQryS(const AjPOboall thys);

void             ajOboinClear(AjPOboin thys);
void             ajOboinDel(AjPOboin* pthis);
const AjPStr     ajOboinGetQryS(const AjPOboin thys);
AjPOboin         ajOboinNew(void);
void             ajOboinQryC(AjPOboin thys, const char* txt);
void             ajOboinQryS(AjPOboin thys, const AjPStr str);
void             ajOboinTrace(const AjPOboin thys);
const char*      ajOboinTypeGetFields(void);
const char*      ajOboinTypeGetQlinks(void);

void             ajOboinprintBook(AjPFile outf);
void             ajOboinprintHtml(AjPFile outf);
void             ajOboinprintText(AjPFile outf, AjBool full);
void             ajOboinprintWiki(AjPFile outf);

AjBool           ajOboallNext(AjPOboall thys, AjPObo *Pobo);
AjBool           ajOboinRead(AjPOboin oboin, AjPObo thys);

ajuint           ajOboqueryGetallObofields(const AjPQuery query,
                                           const AjPStr *id, const AjPStr *acc,
                                           const AjPStr *nam, const AjPStr *des,
                                           const AjPStr *up, const AjPStr *div);

AjBool           ajOboinformatTerm(const AjPStr term);
AjBool           ajOboinformatTest(const AjPStr format);
void             ajOboinExit(void);

AjPTable         ajOboaccessGetDb(void);
const char*      ajOboaccessMethodGetQlinks(const AjPStr method);
ajuint           ajOboaccessMethodGetScope(const AjPStr method);
AjBool           ajOboaccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJOBOREAD_H */
ajobowrite.h/   1414437289  1010  513   100644  2807      `
/* @include ajobowrite ********************************************************
**
** AJAX OBO writing functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.6 $
** @modified May 5 pmr 2010 First AJAX version
** @modified Sep 8 2010 pmr Added output formats
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJOBOWRITE_H
#define AJOBOWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajobodata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajObooutWrite(AjPOutfile outf, const AjPObo obo);

void          ajObooutprintBook(AjPFile outf);
void          ajObooutprintHtml(AjPFile outf);
void          ajObooutprintText(AjPFile outf, AjBool full);
void          ajObooutprintWiki(AjPFile outf);

AjBool        ajObooutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajObooutformatTest(const AjPStr format);

void          ajObooutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJOBOWRITE_H */

ajpat.h/        1414437289  1010  513   100644  12290     `
/* @include ajpat *************************************************************
**
** AJAX PATTERN (ajax pattern and patternlist) functions
**
** These functions allow handling of patternlists.
**
** @author Copyright (C) 2004 Henrikki Almusa, Medicel Oy, Finland
** @version $Revision: 1.12 $
** @modified Aug 10 Beta version
** @modified 2004-2011 Peter Rice
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJPAT_H
#define AJPAT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajreg.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/*
**  Defines for string search algorithms
*/
#define AJALPHA  256                    /* Alphabet                     */
#define AJMOD256 0xff
#define AJALPHA2 128                    /* ASCII printable              */
#define AJWORD   32                     /* Size of a word               */
#define AJBPS    1                      /* Bits per state               */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPPatBYPNode ********************************************************
**
** AJAX data structure for nodes in Baeza-Yates & Perleberg algorithm
**
** @attr next [struct AjSPatBYPNode*] Pointer to next node
** @attr offset [ajint] Offset
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSPatBYPNode
{
    struct AjSPatBYPNode *next;
    ajint offset;
    char  Padding[4];
} AjOPatBYPNode;

#define AjPPatBYPNode AjOPatBYPNode*




/* @data AjPPatComp ***********************************************************
**
** AJAX data structure that holds all needed data for compiling and
** searching. Not including mismatch number.
**
** @alias AjSPatComp
** @alias AjOPatComp
**
** @attr pattern [AjPStr] Prosite pattern string
** @attr type [ajuint] Prosite pattern compile type
** @attr plen [ajuint] Prosite pattern length
** @attr buf [ajint*] Buffer for BMH search (can be -1)
** @attr off [AjOPatBYPNode[AJALPHA]] Offset buffer for B-Y/P search
** @attr sotable [ajuint*] Buffer for SHIFT-OR
** @attr solimit [ajuint] Limit for BMH search
** @attr m [ajuint] Real length of pattern (from embPatGetType)
** @attr regex [AjPStr] PCRE regexp string
** @attr skipm [ajuint**] Skip buffer for Tarhio-Ukkonen
** @attr amino [AjBool] Must match left begin
** @attr carboxyl [AjBool] Must match right
**
** @@
******************************************************************************/

typedef struct AjSPatComp
{
    AjPStr pattern;
    ajuint type;
    ajuint plen;
    ajint* buf;
    AjOPatBYPNode off[AJALPHA];
    ajuint* sotable;
    ajuint solimit;
    ajuint m;
    AjPStr regex;
    ajuint** skipm;
    AjBool amino;
    AjBool carboxyl;
} AjOPatComp;

#define AjPPatComp AjOPatComp*




/* @data AjPPatternSeq ********************************************************
**
** Ajax sequence pattern object.
**
** Holds definition of feature pattern. Regular expression patterns ignore
** mismatch value.
**
** @alias AjSPatternSeq
** @alias AjOPatternSeq
**
** @attr Name [AjPStr] Name.
** @attr Pattern [AjPStr] Pattern in string format.
** @attr Compiled [void*] Compiled version of the pattern.
** @attr Protein [AjBool] True if protein pattern
** @attr Mismatch [ajuint] Mismatch value.
**
** @new ajPatternSeqNew Default constructor
** @delete ajPatternSeqDel Default destructor
** @use ajPatternSeqGetName Returns name.
** @use ajPatternSeqGetPattern Returns pattern in string format.
** @use ajPatternSeqGetCompiled Returns pointer to compiled pattern.
** @use ajPatternSeqGetType Returns type as integer value.
** @use ajPatternSeqGetMismatch Return mismatch value.
** @@
******************************************************************************/

typedef struct AjSPatternSeq
{
    AjPStr Name;
    AjPStr Pattern;
    void* Compiled;
    AjBool Protein;
    ajuint Mismatch;
} AjOPatternSeq;

#define AjPPatternSeq AjOPatternSeq*




/* @data AjPPatternRegex ******************************************************
**
** Ajax regular expression pattern object.
**
** Holds definition of feature pattern. Regular expression patterns ignore
** mismatch value.
**
** @alias AjSPatternRegex
** @alias AjOPatternRegex
**
** @attr Name [AjPStr] Name.
** @attr Pattern [AjPStr] Pattern in string format.
** @attr Compiled [AjPRegexp] Compiled version of the pattern.
** @attr Type [ajuint] Type.
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new ajPatternRegexNew Default constructor
** @delete ajPatternRegexDel Default destructor
** @use ajPatternRegexGetName Returns name.
** @use ajPatternRegexGetPattern Returns pattern in string format.
** @use ajPatternRegexGetCompiled Returns pointer to compiled pattern.
** @use ajPatternRegexGetType Returns type as integer value.
** @@
******************************************************************************/

typedef struct AjSPatternRegex
{
    AjPStr    Name;
    AjPStr    Pattern;
    AjPRegexp Compiled;
    ajuint    Type;
    char      Padding[4];
} AjOPatternRegex;

#define AjPPatternRegex AjOPatternRegex*




/*
** type can be 0: string, 1: prosite (protein) 2: prosite like (nucleotide)
*/
#define AJ_PAT_TYPE_STRING 0
#define AJ_PAT_TYPE_PRO 1
#define AJ_PAT_TYPE_NUCL 2




/* @data AjPPatlistSeq ********************************************************
**
** Ajax Pattern List object.
**
** Holds list of feature patterns and general information of them.
**
** @alias AjSPatlistSeq
** @alias AjOPatlistSeq
**
** @attr Patlist [AjPList] List for patterns.
** @attr Iter [AjIList] List iterator.
** @attr Protein [AjBool] True if protein
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new ajPatlistNew Default constructor.
** @delete ajPatlistDel Default destructor.
** @modify ajPatlistRegexRead Reads the pattern file and fills the list.
** @modify ajPatlistSeqRead Reads the pattern file and fills the list.
** @modify ajPatlistRewind Restarts the iteration loop.
** @modify ajPatlistAdd Adds new pattern into list.
** @use ajPatlistGetNext Gets the next pattern from file and returns true if
**      available and false if not.
** @@
******************************************************************************/

typedef struct AjSPatlistSeq
{
    AjPList Patlist;
    AjIList Iter;
    AjBool Protein;
    char   Padding[4];
} AjOPatlistSeq;

#define AjPPatlistSeq AjOPatlistSeq*




/* @data AjPPatlistRegex ******************************************************
**
** Ajax Pattern List object.
**
** Holds list of feature patterns and general information of them.
**
** @alias AjSPatlistRegex
** @alias AjOPatlistRegex
**
** @attr Patlist [AjPList] List for patterns.
** @attr Iter [AjIList] List iterator.
** @attr Type [ajuint] Type of expression
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new ajPatlistNew Default constructor.
** @delete ajPatlistDel Default destructor.
** @modify ajPatlistRegexRead Reads the pattern file and fills the list.
** @modify ajPatlistSeqRead Reads the pattern file and fills the list.
** @modify ajPatlistRewind Restarts the iteration loop.
** @modify ajPatlistAdd Adds new pattern into list.
** @use ajPatlistGetNext Gets the next pattern from file and returns true if
**      available and false if not.
** @@
******************************************************************************/

typedef struct AjSPatlistRegex
{
    AjPList Patlist;
    AjIList Iter;
    ajuint Type;
    char Padding[4];
} AjOPatlistRegex;

#define AjPPatlistRegex AjOPatlistRegex*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPPatternSeq ajPatternSeqNewList(AjPPatlistSeq plist, const AjPStr name,
                                  const AjPStr pat, ajuint mismatch);
void ajPatternSeqDel(AjPPatternSeq* pthys);
const AjPStr ajPatternSeqGetName(const AjPPatternSeq thys);
const AjPStr ajPatternSeqGetPattern(const AjPPatternSeq thys);
AjPPatComp ajPatternSeqGetCompiled(const AjPPatternSeq thys);
AjBool ajPatternSeqGetProtein(const AjPPatternSeq thys);
ajuint ajPatternSeqGetMismatch(const AjPPatternSeq thys);
void ajPatternSeqSetCompiled(AjPPatternSeq thys, void* pat);
void ajPatternSeqDebug(const AjPPatternSeq pat);

AjPPatternRegex ajPatternRegexNewList(AjPPatlistRegex plist,
                                      const AjPStr name,
                                      const AjPStr pat);
void ajPatternRegexDel(AjPPatternRegex* pthys);
const AjPStr ajPatternRegexGetName(const AjPPatternRegex thys);
const AjPStr ajPatternRegexGetPattern(const AjPPatternRegex thys);
AjPRegexp ajPatternRegexGetCompiled(const AjPPatternRegex thys);
ajuint ajPatternRegexGetType(const AjPPatternRegex thys);
void ajPatternRegexSetCompiled(AjPPatternRegex thys, AjPRegexp pat);
void ajPatternRegexDebug(const AjPPatternRegex pat);

/* Patlist handling functions */
AjPPatlistSeq ajPatlistSeqNewType(AjBool Protein);
AjPPatlistRegex ajPatlistRegexNewType(ajuint type);
AjPPatlistRegex ajPatlistRegexNew(void);
AjPPatlistSeq ajPatlistSeqNew(void);
void ajPatlistSeqDel(AjPPatlistSeq* pthys);
void ajPatlistRegexDel(AjPPatlistRegex* pthys);
AjPPatlistRegex ajPatlistRegexRead(const AjPStr patspec,
                                   const AjPStr patname,
                                   const AjPStr fmt,
                                   ajuint type, AjBool upper, AjBool lower);
AjPPatlistSeq ajPatlistSeqRead(const AjPStr patspec,
                               const AjPStr patname,
                               const AjPStr fmt,
                               AjBool protein, ajuint mismatches);
AjBool ajPatlistRegexGetNext(AjPPatlistRegex thys,
                             AjPPatternRegex* pattern);
AjBool ajPatlistSeqGetNext(AjPPatlistSeq thys,
                           AjPPatternSeq* pattern);
void ajPatlistSeqRewind(AjPPatlistSeq thys);
void ajPatlistRegexRewind(AjPPatlistRegex thys);
void ajPatlistSeqRemoveCurrent(AjPPatlistSeq thys);
void ajPatlistRegexRemoveCurrent(AjPPatlistRegex thys);
void ajPatlistAddRegex(AjPPatlistRegex thys, AjPPatternRegex pat);
void ajPatlistAddSeq(AjPPatlistSeq thys, AjPPatternSeq pat);
ajuint ajPatlistSeqGetSize(const AjPPatlistSeq plist);
ajuint ajPatlistRegexGetSize(const AjPPatlistRegex plist);
ajuint ajPatlistRegexDoc(AjPPatlistRegex thys, AjPStr* pdoc);
ajuint ajPatlistSeqDoc(AjPPatlistSeq thys, AjPStr* pdoc);

AjPPatComp      ajPatCompNew(void);
void            ajPatCompDel(AjPPatComp* pthys);
ajuint ajPatternRegexType(const AjPStr type);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJPAT_H */
ajpdb.h/        1414437289  1010  513   100644  34946     `
/* @include ajpdb *************************************************************
**
** AJAX low-level functions for handling protein structural data.
** For use with the Atom, Chain and Pdb objects defined in ajpdb.h
** Also for use with Hetent, Het, Vdwres, Vdwall, Cmap and Pdbtosp objects
** (also defined in ajpdb.h).
** Includes functions for reading and writing ccf (clean coordinate file)
** format.
**
** @author Copyright (C) 2004 Jon Ison (jison@hgmp.mrc.ac.uk)
** @version $Revision: 1.32 $
** @modified $Date: 2012/04/12 20:37:30 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJPDB_H
#define AJPDB_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajarr.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum AjECmapType **********************************************************
**
** AJAX Cmap Type enumeration
**
** @value ajECmapTypeNULL NULL
** @value ajECmapTypeIntra Intra-molecular contact
** @value ajECmapTypeInter Inter-molecular contact
** @value ajECmapTypeLigand Ligand contact
** @@
******************************************************************************/

typedef enum AjOCmapType
{
    ajECmapTypeNULL,
    ajECmapTypeIntra,
    ajECmapTypeInter,
    ajECmapTypeLigand
} AjECmapType;




/* @enum AjEPdbMethod *********************************************************
**
** AJAX PDB Method enumeration
**
** @value ajEPdbMethodNULL NULL
** @value ajEPdbMethodXray Structure was determined by X-ray crystallography
** @value ajEPdbMethodNmr  Structure was determined by NMR or is a model
** @@
******************************************************************************/

typedef enum AjOPdbMethod
{
    ajEPdbMethodNULL,
    ajEPdbMethodXray,
    ajEPdbMethodNmr
} AjEPdbMethod;




/* @enum AjEPdbMode ***********************************************************
**
** AJAX PDB Mode enumeration
**
** @value ajEPdbModeNULL NULL
** @value ajEPdbModePdb Original PDB residue numbering
** @value ajEPdbModeIdx Corrected residue numbering
**                      (index into SEQRES sequence)
** @@
******************************************************************************/

typedef enum AjOPdbMode
{
    ajEPdbModeNULL,
    ajEPdbModePdb,
    ajEPdbModeIdx
} AjEPdbMode;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPAtom **************************************************************
**
** Ajax atom object.
**
** Holds protein atom data
**
** AjPAtom is implemented as a pointer to a C data structure.
**
** @alias AjSAtom
** @alias AjOAtom
**
** @attr  Mod     [ajuint]  Model number
** @attr  Chn     [ajuint]  Chain number
** @attr  Gpn     [ajint]   Group number
** @attr  Idx     [ajuint]  Residue number - index into sequence.
** @attr  Pdb     [AjPStr]  Residue number string from the original PDB file.
** @attr  Id3     [AjPStr]  Residue or group identifier.
** @attr  Atm     [AjPStr]  Atom identifier.
** @attr  X       [float]   X coordinate.
** @attr  Y       [float]   Y coordinate.
** @attr  Z       [float]   Z coordinate.
** @attr  O       [float]   Occupancy.
** @attr  B       [float]   B value thermal factor.
** @attr  Id1     [char]    Standard residue identifier or 'X' for unknown
**                          types or '.' for heterogens and water.
** @attr  Type    [char]    'P' (protein atom), 'H' ("heterogens") or 'W'
**                          (water).
** @attr  Padding [char[2]] Padding to alignment boundary
**
** @new     ajAtomNew Default Atom constructor.
** @delete  ajAtomDel Default Atom destructor.
** @assign  ajAtomCopy Replicates an Atom object.
** @assign  ajAtomListCopy Replicates a list of Atom objects.
** @use     embAtomInContact Determines whether two atoms are in physical
**          contact.
** @use     embAtomDistance Returns the distance (Angstroms) between two
**          atoms.
** @use     embVdwRad Returns the van der Waals radius of an atom.
** @other   embPdbListHeterogens Construct a list of arrays of Atom objects
**          for ligands in the current Pdb object (a single array for each
**          ligand).
** @@
******************************************************************************/

typedef struct AjSAtom
{
    ajuint Mod;
    ajuint Chn;
    ajint Gpn;
    ajuint Idx;
    AjPStr Pdb;
    AjPStr Id3;
    AjPStr Atm;
    float X;
    float Y;
    float Z;
    float O;
    float B;
    char Id1;
    char Type;
    char Padding[2];
} AjOAtom;

#define AjPAtom AjOAtom*




/* @data AjPResidue ***********************************************************
**
** Ajax Residue object.
**
** Holds data for an amino acid residue.
**
** AjPResidue is implemented as a pointer to a C data structure.
**
** @alias AjSResidue
** @alias AjOResidue
**
** @attr Mod    [ajuint]    Model number
** @attr Chn    [ajuint]    Chain number
** @attr Idx    [ajuint]    Residue number. Can be used to index into the
**                          polypeptide sequence (the Seq element of an
**                          AjSChain object). Idx numbers start at 1 and run
**                          sequentially.
** @attr eNum   [ajint]     Element serial number (for secondary structure
**                          from the PDB file).
** @attr Pdb    [AjPStr]    Residue number string from the original PDB file.
** @attr Id3    [AjPStr]    3-letter residue identifier code.
** @attr eId    [AjPStr]    Element identifier (for secondary structure from
**                          the PDB file).
** @attr eClass [ajint]     Class of helix, an int from 1-10,  from
**        http://www.rcsb.org/pdb/docs/format/pdbguide2.2/guide2.2_frame.html
**                          (for secondary structure from the PDB file).
**
** @attr eStrideNum [ajint] Number of the element: sequential count from
**                          N-term (for secondary structure from STRIDE).
** @attr Phi    [float]     Phi angle.
** @attr Psi    [float]     Psi angle.
** @attr Area   [float]     Residue solvent accessible area.
**
** @attr all_abs    [float] Absolute accessibility, all atoms.
** @attr all_rel    [float] Relative accessibility, all atoms.
** @attr side_abs   [float] Absolute accessibility, atoms in side chain.
** @attr side_rel   [float] Relative accessibility, atoms in side chain.
** @attr main_abs   [float] Absolute accessibility, atoms in main chain.
** @attr main_rel   [float] Relative accessibility, atoms in main chain.
** @attr npol_abs   [float] Absolute accessibility, non-polar atoms.
** @attr npol_rel   [float] Relative accessibility, non-polar atoms.
** @attr pol_abs    [float] Absolute accessibility, polar atoms.
** @attr pol_rel    [float] Relative accessibility, polar atoms.
** @attr Id1        [char]  Standard 1-letter residue identifier or 'X' for
**                          unknown types.
** @attr eType      [char]  Element type COIL ('C'), HELIX ('H'), SHEET ('E')
**                          or TURN ('T'). Has a default value of COIL
**                          (for secondary structure from the PDB file).
** @attr eStrideType    [char]  Element type:
**                                  ALPHA HELIX ('H'),
**                                  3-10 HELIX ('G'),
**                                  PI-HELIX ('I'),
**                                  EXTENDED CONFORMATION ('E'),
**                                  ISOLATED BRIDGE ('B' or 'b'),
**                                  TURN ('T') or
**                                  COIL (none of the above) ('C')
**                              (for secondary structure from STRIDE).
** @attr Padding    [char[1]]   Padding to alignment boundary
**
** @new     ajResidueNew Default Residue constructor.
** @delete  ajResidueDel Default Residue destructor.
** @assign  ajResidueCopy Replicates a Residue object.
** @assign  ajResidueListCopy Replicates a list of Residue objects.
** @use ajResidueEnv1 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv2 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv3 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv4 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv5 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv6 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv7 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv8 Assigns environment based on side chain accessibility and
**  secondary structure.
** @use ajResidueEnv9 Assigns environment based on side chain accessibility
**  and secondary structure.
** @use ajResidueEnv10 Assigns environment based on side chain accessibility
** and secondary structure.
** @use ajResidueEnv11 Assigns environment based on side chain accessibility
**  and secondary structure.
** @use ajResidueEnv12 Assigns environment based on side chain accessibility
**  and secondary structure.
** @use ajResidueEnv13 Assigns environment based on side chain accessibility
**  and secondary structure.
** @use ajResidueEnv14 Assigns environment based on side chain accessibility
**  and secondary structure.
** @use ajResidueEnv15 Assigns environment based on side chain accessibility
**  and secondary structure.
** @use ajResidueEnv16 Assigns environment based on side chain accessibility
**  and secondary structure.
** @use ajResidueSSEnv  Assigns secondary structure environment of a residue.
** @@
******************************************************************************/

typedef struct AjSResidue
{
    ajuint Mod;
    ajuint Chn;
    ajuint Idx;
    ajint eNum;
    AjPStr Pdb;
    AjPStr Id3;

    AjPStr eId;

    ajint eClass;
    ajint eStrideNum;
    float Phi;
    float Psi;
    float Area;

    float all_abs;
    float all_rel;
    float side_abs;
    float side_rel;
    float main_abs;
    float main_rel;
    float npol_abs;
    float npol_rel;
    float pol_abs;
    float pol_rel;
    char Id1;
    char eType;
    char eStrideType;
    char Padding[1];
} AjOResidue;

#define AjPResidue AjOResidue*




/* @data AjPChain *************************************************************
**
** Ajax chain object.
**
** Holds protein chain data
**
** AjPChain is implemented as a pointer to a C data structure.
**
** @alias AjSChain
** @alias AjOChain
**
** @attr  Nres        [ajuint]   Number of amino acid residues.
** @attr  Nlig        [ajuint]   Number of groups which are non-covalently
**                               associated with the chain, excluding water
**                               ("heterogens").
** @attr  numHelices  [ajint]    No. of helices in the chain according to the
**                               PDB file.
** @attr  numStrands  [ajint]    No. of strands in the chain according to the
**                               PDB file.
** @attr  Seq         [AjPStr]   Protein sequence as string.
** @attr  Atoms       [AjPList]  List of Atom objects for (potentially multiple
**                               models) of the polypeptide chain and any
**                               groups (ligands) that could be uniquely
**                               associated with a chain.
** @attr  Residues    [AjPList]  List of Residue objects for (potentially
**                               multiple models) of the polypeptide chain.
** @attr  Id          [char]     Chain id, ('.' if one wasn't specified in
**                               the PDB file).
** @attr Padding [char[7]] Padding to alignment boundary
**
**
**
** @new     ajChainNew Default Chain constructor.
** @delete  ajChainDel Default Chain destructor.
** @@
******************************************************************************/

typedef struct AjSChain
{
    ajuint Nres;
    ajuint Nlig;
    ajint numHelices;
    ajint numStrands;
    AjPStr Seq;
    AjPList Atoms;
    AjPList Residues;
    char Id;
    char Padding[7];
} AjOChain;

#define AjPChain AjOChain*




/* @data AjPPdb ***************************************************************
**
** Ajax pdb object.
**
** Holds arrays describing pdb data
**
** AjPPdb is implemented as a pointer to a C data structure.
**
** @alias AjSPdb
** @alias AjOPdb
**
** @attr Pdb    [AjPStr]        PDB code
** @attr Compnd [AjPStr]        Text from COMPND records in PDB file
** @attr Source [AjPStr]        Text from SOURCE records in PDB file
** @attr Method [AjEPdbMethod]  AJAX PDB Method enumeration
** @attr Reso   [float]         Resolution of an XRAY structure or 0
** @attr Nmod   [ajuint]        Number of models (always 1 for XRAY structures)
** @attr Nchn   [ajuint]        Number of polypeptide chains
** @attr Chains [AjPChain*]     Array of pointers to AjSChain structures
** @attr gpid   [AjPChar]       Array of chain (group) id's for groups that
**                              could not be uniquely associated with a chain.
** @attr Groups [AjPList]       List of Atom objects for groups that could not
**                              be uniquely associated with a chain.
** @attr Water  [AjPList]       List of Atom objects for water molecules.
** @attr Ngp    [ajuint]        Number of groups that could not be uniquely
**                              associated with a chain in the SEQRES records.
** @attr Padding    [char[4]]   Padding to alignment boundary
**
** @new     ajPdbNew Default Pdb constructor.
** @new     ajPdbReadRawNew Pdb constructor from reading pdb format file.
** @new     ajPdbReadNew Pdb constructor from reading CCF format file.
** @new     ajPdbReadFirstModelNew Pdb constructor from reading CCF format
**          file (retrieve data for 1st model only).
** @new     ajPdbReadoldNew Pdb constructor from reading CCF format file
**          lacking residue-level description in RE records.
** @new     ajPdbReadoldFirstModelNew Pdb constructor from reading CCF format
**          file lacking residue-level description in RE records.
** @delete  ajPdbDel Default Pdb destructor.
** @assign  ajPdbCopy Replicates a Pdb object.
** @use     ajPdbGetEStrideType Reads a Pdb object and writes a string with
**          the secondary structure.
** @use     ajPdbChnidToNum Finds the chain number for a given chain
**          identifier.
** @use     embPdbToIdx Reads a Pdb object and writes an integer which gives
**          the index into the protein sequence for a residue with a
**          specified pdb residue number and a specified chain number.
** @use     embPdbidToSp  Read a pdb identifier code and writes the equivalent
**          swissprot identifier code.
** @use     embPdbidToAcc Read a pdb identifier code and writes the equivalent
**          accession number.
** @use     embPdbidToScop Writes a list of scop identifier codes for the
**          domains that a Pdb object contains.
** @cast    embPdbAtomIndexI Reads a Pdb object and writes an integer array
**          which gives the index into the protein sequence for structured
**          residues (residues for which electron density was determined) for
**          a given chain.
** @cast    embPdbAtomIndexICA Reads a Pdb object and writes an integer array
**          which gives the index into the protein sequence for structured
**          residues (residues for which electron density was determined) for
**          a given chain, EXCLUDING those residues for which CA atoms are
**          missing.
** @cast    embPdbAtomIndexCCA Reads a Pdb object and writes an integer array
**          which gives the index into the protein sequence for structured
**          residues (residues for which electron density was determined) for
**          a given chain, EXCLUDING those residues for which CA atoms are
**          missing.
** @output  ajPdbWriteDomainRecordRaw Writes lines to a pdb format file for
**          a domain.
** @output  ajPdbWriteRecordRaw Writes lines to a pdb format file for a
**          protein.
** @output  ajPdbWriteAllRaw Writes a pdb-format file for a protein.
** @output  ajPdbWriteDomainRaw Writes a pdb-format file for a SCOP domain.
** @output  ajPdbWriteAll Writes a CCF-format file for a protein.
** @output  ajPdbWriteDomain Writes a CCF-format file for a domain).
** @output  ajPdbWriteSegment Writes a CCF-format file for a segment of a
**          protein.
** @cast    embPdbListHeterogens Construct a list of arrays of Atom objects
**          for ligands in the current Pdb object (a single array for each
**          ligand).
**
** @@
******************************************************************************/

typedef struct AjSPdb
{
    AjPStr Pdb;
    AjPStr Compnd;
    AjPStr Source;
    AjEPdbMethod Method;
    float Reso;
    ajuint Nmod;
    ajuint Nchn;
    AjPChain *Chains;
    AjPChar gpid;
    AjPList Groups;
    AjPList Water;
    ajuint Ngp;
    char Padding[4];
} AjOPdb;

#define AjPPdb AjOPdb*




/* @data AjPHetent ************************************************************
**
** AJAX Hetent object.
**
** Holds a single entry from a dictionary of heterogen groups.
**
** AjPHetent is implemented as a pointer to a C data structure.
**
** @alias AjSHetent
** @alias AjOHetent
**
** @attr  abv     [AjPStr]  3-letter abbreviation of heterogen.
** @attr  syn     [AjPStr]  Synonym.
** @attr  ful     [AjPStr]  Full name.
** @attr  cnt     [ajint]   No. of occurrences (files) of this heterogen in a
**                          directory.
** @attr  Padding [char[4]] Padding to alignment boundary
**
** @new     ajHetentNew Default Hetent constructor.
** @delete  ajHetentDel Default Hetent destructor.
**
** @@
******************************************************************************/

typedef struct AjSHetent
{
    AjPStr abv;
    AjPStr syn;
    AjPStr ful;
    ajint cnt;
    char Padding[4];
} AjOHetent;

#define AjPHetent AjOHetent*




/* @data AjPHet ***************************************************************
**
** AJAX Het object.
** Holds a dictionary of heterogen groups.
**
** AjPHet is implemented as a pointer to a C data structure.
**
** @alias AjSHet
** @alias AjOHet
**
** @attr  Entries  [AjPHetent*] Array of AJAX Heterogen Entries
** @attr  Number   [ajuint] Number of entries
** @attr  Padding  [char[4]] Padding to alignment boundary
**
** @new     ajHetNew Default Het constructor.
** @new     ajHetReadRawNew Het constructor from reading dictionary of
**          heterogen groups in raw format.
** @new     ajHetReadNew Het constructor from reading dictionary of
**          heterogen groups in embl-like format (see documentation for the
**          EMBASSY DOMAINATRIX package).
** @delete  ajHetDel Default Het destructor.
** @output  ajHetWrite Write Het object to file in embl-like format (see
**          documentation for the EMBASSY DOMAINATRIX package).
**
** @@
******************************************************************************/

typedef struct AjSHet
{
    AjPHetent *Entries;
    ajuint Number;
    char Padding[4];
} AjOHet;

#define AjPHet AjOHet*




/* @data AjPVdwres ************************************************************
**
** AJAX Vdwres object.
**
** Holds the Van der Waals radius for atoms in a residue
**
** AjPVdwres is implemented as a pointer to a C data structure.
**
** @alias AjSVdwres
** @alias AjOVdwres
**
** @attr  Id3  [AjPStr] 3 character residue identifier.
** @attr  Atm  [AjPStr*] Array of atom identifiers.
** @attr  Rad  [float*] Array of van der Waals radii.
** @attr  N    [ajuint] Number of atoms in residue.
** @attr  Id1  [char] Standard residue identifier or 'X' for unknown.
** @attr  Padding [char[3]] Padding to alignment boundary
**
** @new     ajVdwresNew Default Vdwres constructor.
** @delete  ajVdwresDel Default Vdwres destructor.
** @@
******************************************************************************/

typedef struct AjSVdwres
{
    AjPStr Id3;
    AjPStr *Atm;
    float *Rad;
    ajuint N;
    char Id1;
    char Padding[3];
} AjOVdwres;

#define AjPVdwres AjOVdwres*




/* @data AjPVdwall ************************************************************
**
** Ajax Vdwall object.
**
** Holds the Van der Waals radii for all types of protein atoms
**
** AjPVdwall is implemented as a pointer to a C data structure.
**
** @alias AjSVdwall
** @alias AjOVdwall
**
** @attr  Res     [AjPVdwres*] Array of Vdwres structures.
** @attr  N       [ajuint] Number of residues.
** @attr  Padding [char[4]] Padding to alignment boundary
**
** @new     ajVdwallNew Default Vdwall constructor.
** @new     ajVdwallReadNew Vdwall constructor from reading file in embl-like
**          format (see documentation for the EMBASSY DOMAINATRIX package).
** @delete  ajVdwallDel Default Vdwall destructor.
** @@
******************************************************************************/

typedef struct AjSVdwall
{
    AjPVdwres *Res;
    ajuint N;
    char Padding[4];
} AjOVdwall;

#define AjPVdwall AjOVdwall*




/* @data AjPCmap **************************************************************
**
** Ajax Cmap object.
**
** Holds a contact map and associated data for a protein domain / chain
** (intra or inter-chain contacts) or between a protein / domain and a
** ligand.  For ligand contacts, the first row / column only of the contact
** map is used.
**
** AjPCmap is implemented as a pointer to a C data structure.
**
**
** @alias AjSCmap
** @alias AjOCmap
**
**
** for intra-chain, inter-chain and chain-ligand contacts respectively.
** @attr  Id    [AjPStr]   Protein id code.
** @attr  Domid [AjPStr]   Domain id code.
** @attr  Ligid [AjPStr]   Ligand id code.
** @attr  Chn1  [ajint]    Chain number 1 (first chain)
** @attr  Chn2  [ajint]    Chain number 2 (second chain if available)
** @attr  Nres1 [ajint]    Number of residues in chain/domain 1
** @attr  Nres2 [ajint]    Number of residues in chain/domain 2
** @attr  Seq1  [AjPStr]   The sequence of the first domain or chain.
** @attr  Seq2  [AjPStr]   The sequence of the second domain or chain.
** @attr  Mat   [AjPUint2d] Contact map.
** @attr  Dim   [ajint]    Dimension of contact map.
** @attr  Ncon  [ajint]    No. of contacts (1's in contact map).
** @attr  en    [ajint]    Entry number.
** @attr  ns    [ajint]    No. of sites (ajLIGAND only)
** @attr  sn    [ajint]    Site number (ajLIGAND only)
** @attr  Type  [AjECmapType] AJAX Cmap Type enumeration
** @attr  Desc  [AjPStr]   Description of ligand (ajLIGAND only)
** @attr  Chid1 [char]     Chain identifier 1 (first chain)
** @attr  Chid2 [char]     Chain identifier 2 (second chain if available)
** @attr  Padding [char[6]] Padding to alignment boundary
**
**
** @new     ajCmapNew Default Cmap constructor.
** @new     ajCmapReadINew Cmap constructor from reading file in CON
**          (embl-like)format (see documentation for the EMBASSY DOMAINATRIX
**          package).
** @new     ajCmapReadCNew Cmap constructor from reading file in CON
**          format (see documentation for the EMBASSY DOMAINATRIX package).
** @new     ajCmapReadNew Cmap constructor from reading file in CON
**          format (see documentation for the EMBASSY DOMAINATRIX package).
** @new     ajCmapReadAllNew Constructs list of Cmap objects from reading file
**          in CON format (see documentation for the EMBASSY
**          DOMAINATRIX package).
** @delete  ajCmapDel Default Cmap destructor.
** @output  ajCmapWrite Write Cmap object to file in CON format.
**
** @@
******************************************************************************/

typedef struct AjSCmap
{
    AjPStr Id;
    AjPStr Domid;
    AjPStr Ligid;

    ajint Chn1;
    ajint Chn2;
    ajint Nres1;
    ajint Nres2;
    AjPStr Seq1;
    AjPStr Seq2;

    AjPUint2d Mat;
    ajint Dim;
    ajint Ncon;

    ajint en;
    ajint ns;
    ajint sn;
    AjECmapType Type;
    AjPStr Desc;
    char Chid1;
    char Chid2;
    char Padding[6];
} AjOCmap;

#define AjPCmap AjOCmap*




/* @data AjPPdbtosp ***********************************************************
**
** Ajax Pdbtosp object.
**
** Holds swissprot codes and accession numbers for a PDB code.
**
** AjPPdbtosp is implemented as a pointer to a C data structure.
**
**
**
** @alias AjSPdbtosp
** @alias AjOPdbtosp
**
**
**
** @attr  Pdb     [AjPStr]   PDB code
** @attr  Acc     [AjPStr*]  Accession numbers
** @attr  Spr     [AjPStr*]  Swissprot codes
** @attr  Number  [ajuint]   Number of entries for this pdb code
** @attr  Padding [char[4]]  Padding to alignment boundary
**
**
**
** @new     ajPdbtospNew Default Pdbtosp constructor.
** @new     ajPdbtospReadAllRawNew Pdbtosp constructor from reading swissprot-
**          pdb equivalence table in raw format.
** @new     ajPdbtospReadNew Pdbtosp constructor from reading file in
**          embl-like format (see documentation for the EMBASSY DOMAINATRIX
**          package).
** @new     ajPdbtospReadCNew Pdbtosp constructor from reading file in
**          embl-like format (see documentation for the EMBASSY DOMAINATRIX
**          package).
** @delete  ajPdbtospDel Default Pdbtosp destructor.
** @new     ajPdbtospReadAllNew Constructor for list of Pdbtosp objects from
**          reading file in embl-like format (see documentation for the
**          EMBASSY DOMAINATRIX package).
** @output  ajPdbtospWrite Write Pdbtosp object to file in embl-like format
**          (see documentation for the EMBASSY DOMAINATRIX package).
** @use     ajPdbtospArrFindPdbid Binary search for Pdb element over array
**          of Pdbtosp objects.
**
** @@
******************************************************************************/

typedef struct AjSPdbtosp
{
    AjPStr Pdb;
    AjPStr *Acc;
    AjPStr *Spr;
    ajuint Number;
    char Padding[4];
} AjOPdbtosp;

#define AjPPdbtosp AjOPdbtosp*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/


/* ======================================================================= */
/* ============================ Het objects ============================== */
/* ======================================================================= */

AjPHet ajHetNew(ajuint n);
void ajHetDel(AjPHet *Phet);




/* ======================================================================= */
/* ============================ Hetent object ============================ */
/* ======================================================================= */

AjPHetent ajHetentNew(void);
void ajHetentDel(AjPHetent *Phetent);




/* ======================================================================= */
/* ============================ Vdwall object ============================ */
/* ======================================================================= */

AjPVdwall ajVdwallNew(ajuint n);
void ajVdwallDel(AjPVdwall *Pvdwall);




/* ======================================================================= */
/* ============================ Vdwres object ============================ */
/* ======================================================================= */

AjPVdwres ajVdwresNew(ajuint n);
void ajVdwresDel(AjPVdwres *Pvdwres);




/* ======================================================================= */
/* ============================ Atom object ============================== */
/* ======================================================================= */

AjPAtom ajAtomNew(void);
void ajAtomDel(AjPAtom *Patom);
ajint ajAtomCopy(AjPAtom *Pto, const AjPAtom from);
ajint ajAtomListCopy(AjPList *Pto, const AjPList from);




/* ======================================================================= */
/* ========================== Residue object ============================= */
/* ======================================================================= */

AjPResidue ajResidueNew(void);
void ajResidueDel(AjPResidue *Presidue);
ajint ajResidueCopy(AjPResidue *Pto, const AjPResidue from);
AjBool ajResidueListCopy(AjPList *to, const AjPList from);

ajint ajResidueEnv1(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv2(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv3(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv4(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv5(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv6(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv7(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv8(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv9(const AjPResidue residue, char SEnv,
                    AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv10(const AjPResidue residue, char SEnv,
                     AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv11(const AjPResidue residue, char SEnv,
                     AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv12(const AjPResidue residue, char SEnv,
                     AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv13(const AjPResidue residue, char SEnv,
                     AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv14(const AjPResidue residue, char SEnv,
                     AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv15(const AjPResidue residue, char SEnv,
                     AjPStr *OEnv, AjPFile flog);
ajint ajResidueEnv16(const AjPResidue residue, char SEnv,
                     AjPStr *OEnv, AjPFile flog);

ajint ajResidueSSEnv(const AjPResidue residue, char *SEnv, AjPFile flog);




/* ======================================================================= */
/* ============================ Pdbtosp object =========================== */
/* ======================================================================= */

AjPPdbtosp ajPdbtospNew(ajuint n);
void ajPdbtospDel(AjPPdbtosp *Ppdbtosp);
ajint ajPdbtospArrFindPdbid(AjPPdbtosp const *array, ajint size,
                            const AjPStr identifier);




/* ======================================================================= */
/* ============================ Chain object ============================= */
/* ======================================================================= */

AjPChain ajChainNew(void);
void ajChainDel(AjPChain *Pchain);




/* ======================================================================= */
/* ============================ Pdb object =============================== */
/* ======================================================================= */

AjPPdb ajPdbNew(ajuint n);
void ajPdbDel(AjPPdb *Ppdb);
AjBool ajPdbCopy(AjPPdb *Pto, const AjPPdb from);
AjBool ajPdbChnidToNum(char identifier, const AjPPdb pdb, ajuint *chn);

AjPPdb ajPdbReadNew(AjPFile inf, ajint mode);
AjPPdb ajPdbReadAllModelsNew(AjPFile inf);
AjPPdb ajPdbReadFirstModelNew(AjPFile inf);
AjPPdb ajPdbReadoldNew(AjPFile inf);
AjPPdb ajPdbReadoldFirstModelNew(AjPFile inf);
AjBool ajPdbWriteAll(AjPFile out, const AjPPdb pdb);
AjBool ajPdbWriteSegment(AjPFile outf, const AjPPdb pdb,
                         const AjPStr seq, char chn,
                         const AjPStr domain,
                         AjPFile errf);
ajint ajPdbGetEStrideType(const AjPPdb obj, ajuint chn,
                          AjPStr *EStrideType);




/* ======================================================================= */
/* ====================== Het & Hetent objects =========================== */
/* ======================================================================= */

AjPHet ajHetReadRawNew(AjPFile inf);
AjPHet ajHetReadNew(AjPFile inf);
AjBool ajHetWrite(AjPFile outf, const AjPHet het, AjBool dogrep);




/* ======================================================================= */
/* ================ Vdwall, Vdwres object ================================ */
/* ======================================================================= */

AjPVdwall ajVdwallReadNew(AjPFile inf);




/* ======================================================================= */
/* =========================== Cmap object =============================== */
/* ======================================================================= */

AjPCmap ajCmapNew(ajuint n);
AjPCmap ajCmapReadCNew(AjPFile inf, char chn, ajint mod);
AjPCmap ajCmapReadINew(AjPFile inf, ajint chn, ajint mod);
AjPCmap ajCmapReadNew(AjPFile inf, ajint mode, ajint chn, ajint mod);
AjPList ajCmapReadAllNew(AjPFile inf);
void ajCmapDel(AjPCmap *Pcmap);
AjBool ajCmapWrite(AjPFile outf, const AjPCmap cmap);




/* ======================================================================= */
/* ======================== Pdbtosp object =============================== */
/* ======================================================================= */

AjPList ajPdbtospReadAllRawNew(AjPFile inf);
AjPPdbtosp ajPdbtospReadNew(AjPFile inf, const AjPStr entry);
AjPPdbtosp ajPdbtospReadCNew(AjPFile inf, const char *entry);
AjPList ajPdbtospReadAllNew(AjPFile inf);
AjBool ajPdbtospWrite(AjPFile outf, const AjPList list);

void ajPdbExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJPDB_H */
ajpdbio.h/      1414437289  1010  513   100644  5262      `
/* @include ajpdbio ***********************************************************
**
** Data structures and functions for reading and writing PDB format files.
** Includes functions for writing a Pdb object (defined in ajpdb.h).
**
** @author Copyright (c) 2004 Jon Ison
** @version $Revision: 1.12 $
** @modified $Date: 2012/04/12 20:38:09 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJPDBIO_H
#define AJPDBIO_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajdomain.h"
#include "ajpdb.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum AjEPdbioMode *********************************************************
**
** AJAX PDB Input Output Mode enumeration for writing in PDB format
**
** @value ajEPdbioModeHeaderDomain
** Header line for domain PDB file
** @value ajEPdbioModeSeqresDomain
** SEQRES records for domain
** @value ajEPdbioModeAtomPdbDomain
** ATOM records for domain using original residue numbers
** @value ajEPdbioModeAtomIdxDomain
** ATOM records for domain using residues numbers that give  correct index
** into SEQRES sequence
** @value ajEPdbioModeSeqResChain
** SEQRES records for a chain
** @value ajEPdbioModeAtomPdbChain
** ATOM records for chain using original residue numbers
** @value ajEPdbioModeAtomIdxChain
** ATOM records for domain using residues numbers that  give correct index
** into SEQRES sequence
** @value ajEPdbioModeHeterogen
** ATOM line for a heterogen (small ligand)
** @value ajEPdbioModeHeader
** Header line
** @value ajEPdbioModeTitle
** Title line
** @value ajEPdbioModeCompnd
** COMPND records (info. on compound)
** @value ajEPdbioModeSource
** SOURCE records (info. on protein source)
** @value ajEPdbioModeEmptyRemark
** An empty REMARK record
** @value ajEPdbioModeResolution
** Record with resolution of the structure
** @@
******************************************************************************/

typedef enum AjOPdbioMode
{
    ajEPdbioModeHeaderDomain,
    ajEPdbioModeSeqresDomain,
    ajEPdbioModeAtomPdbDomain,
    ajEPdbioModeAtomIdxDomain,
    ajEPdbioModeSeqResChain,
    ajEPdbioModeAtomPdbChain,
    ajEPdbioModeAtomIdxChain,
    ajEPdbioModeHeterogen,
    ajEPdbioModeHeader,
    ajEPdbioModeTitle,
    ajEPdbioModeCompnd,
    ajEPdbioModeSource,
    ajEPdbioModeEmptyRemark,
    ajEPdbioModeResolution
} AjEPdbioMode;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/* ======================================================================= */
/* =========================== Pdb object ================================ */
/* ======================================================================= */

AjPPdb ajPdbReadRawNew(AjPFile inf, const AjPStr pdbid, ajint min_chain_size,
                       ajint max_mismatch, ajint max_trim, AjBool camask,
                       AjBool camask1, AjBool atommask, AjPFile flog);

AjBool ajPdbWriteAllRaw(AjEPdbMode mode, const AjPPdb pdb, AjPFile outf,
                        AjPFile errf);

AjBool ajPdbWriteDomainRaw(AjEPdbMode mode, const AjPPdb pdb,
                           const AjPScop scop, AjPFile outf, AjPFile errf);

AjBool ajPdbWriteRecordRaw(AjEPdbioMode mode, const AjPPdb pdb, ajint mod,
                           ajint chn, AjPFile outf, AjPFile errf);

AjBool ajPdbWriteDomainRecordRaw(AjEPdbioMode mode, const AjPPdb pdb,
                                 ajint mod, const AjPScop scop,
                                 AjPFile outf, AjPFile errf);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJPDBIO_H */
ajphylo.h/      1414437289  1010  513   100644  10259     `
/* @include ajphylo ***********************************************************
**
** AJAX Phylogeny functions
** These functions create and control linked lists.
**
** @author Copyright (C) 2003 Peter Rice
** @version $Revision: 1.18 $
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJPHYLO_H
#define AJPHYLO_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPPhyloDist *********************************************************
**
** Ajax phylogeny distance matrix
**
** Input can be square (all values) or lower-triangular (diagonal and below)
** or upper-triangular (diagonal and above). We can count values for the
** first 2 species to identify the format.
**
** S-format allows degree of replication for each distance (integer)
** we can check for this (twice as many numbers) otherwise we set the
** replicates to 1.
**
** @alias AjSPhyloDist
** @alias AjOPhyloDist
**
** @attr Size [ajint] Size - number of rows and number of columns
** @attr HasReplicates [AjBool] Has (some) replicates data in file
** @attr Names [AjPStr*] Row names, NULL at end
** @attr Data [float*] Distance matrix Size*Size with diagonal 0.0
** @attr Replicates [ajint*] Replicate count default=1 missing=0
** @attr HasMissing [AjBool] Has missing data in file
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSPhyloDist
{
    ajint Size;
    AjBool HasReplicates;
    AjPStr* Names;
    float* Data;
    ajint* Replicates;
    AjBool HasMissing;
    char Padding[4];
} AjOPhyloDist;

#define AjPPhyloDist AjOPhyloDist*




/* @data AjPPhyloFreq *********************************************************
**
** Ajax phylogeny frequencies.
**
** For continuous data there are always 2 alleles
** For gene frequency data there can be more than 2 alleles
**
** @alias AjSPhyloFreq
** @alias AjOPhyloFreq
**
** @attr Size [ajint] Number of rows
** @attr Loci [ajint] Number of loci per name
** @attr Len [ajint] Number of values per name
**                    may be more than 1 per locus
** @attr ContChar [AjBool] Continuous character data if true
** @attr Names [AjPStr*] Row names array (size is Size)
**
** @cc row grouping - multiple individual values for one 'species'
**     ContChar data only, otherwise NULL
**
** @attr Species [ajint*] Species number 1, 2, 3 for each value
**                    array size is Len
** @attr Individuals [ajint*] Allele countNumber of individuals
**                    1 or more per species
**                    array size is Loci
**
** @cc column grouping - multiple frequency values for alleles of a locus
**
** @attr Locus [ajint*] Locus number 1, 2, 3 for each value
**                     array size is Len
** @attr Allele [ajint*] Allele count 2 or more per locus
**                     array size is Loci
** @attr Data [float*] Frequency for each allele for each Name
** @attr Within [AjBool] Individual data within species if true
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSPhyloFreq
{
    ajint Size;
    ajint Loci;
    ajint Len;
    AjBool ContChar;

    AjPStr* Names;

    ajint* Species;
    ajint* Individuals;

    ajint* Locus;
    ajint* Allele;
    float* Data;

    AjBool Within;
    char Padding[4];
} AjOPhyloFreq;

#define AjPPhyloFreq AjOPhyloFreq*




/* @data AjPPhyloProp *********************************************************
**
** Ajax phylogeny properties: weights, ancestral states, factors.
**
** Basically, all of these are one value per position
**
** Weights are converted to integers 0-9, A=10 Z=35 by phylip
** There are programs that can use multiple weights
** We can handle this by making all of these multiple,
** and using ACD to limit them to 1 for non-weight data.
**
** Ancestral states are character data
**
** Factors are multi-state character data where the factor character changes
** when moving to a new character. Without this, all factors are assumed to
** be different. The default would be to make each character distinct by
** alternating 12121212 or to use 12345678901234567890.
**
** We can, in fact, convert any input string into this format for factors
** but probably we can leave them unchanged.
**
** @alias AjSPhyloProp
** @alias AjOPhyloProp
**
** @attr Len [ajint] string length
** @attr Size [ajint] number of strings
** @attr IsWeight [AjBool] is phylip weight values if true
** @attr IsFactor [AjBool] is phylip factor values if true
** @attr Str [AjPStr*] The original string(s)
** @@
******************************************************************************/

typedef struct AjSPhyloProp
{
    ajint Len;
    ajint Size;
    AjBool IsWeight;
    AjBool IsFactor;
    AjPStr* Str;
} AjOPhyloProp;

#define AjPPhyloProp AjOPhyloProp*




/* @data AjPPhyloState ********************************************************
**
** Ajax discrete state data.
**
** Basically, all of these are one value per position
**
** States have a limited character set, usually defined through ACD
**
** @alias AjSPhyloState
** @alias AjOPhyloState
**
** @attr Len [ajint] string length
** @attr Size [ajint] number of strings
** @attr Characters [AjPStr] The allowed state characters
** @attr Names [AjPStr*] The names
** @attr Str [AjPStr*] The original string(s)
** @attr Count [ajint] number of enzymes for restriction data
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSPhyloState
{
    ajint Len;
    ajint Size;
    AjPStr Characters;
    AjPStr* Names;
    AjPStr* Str;
    ajint Count;
    char Padding[4];
} AjOPhyloState;

#define AjPPhyloState AjOPhyloState*




/* @data AjPPhyloTree *********************************************************
**
** Ajax phylogeny trees
**
** For programs that read multiple tree inputs we use an array,
** and let ACD limit the others to 1 tree.
**
** @alias AjSPhyloTree
** @alias AjOPhyloTree
**
** @attr Multifurcated [AjBool] Multifurcating (..(a,b,c)..)
** @attr BaseTrifurcated [AjBool] 3-way base (a,b,c)
** @attr BaseBifurcated [AjBool] Rooted 2-way base (a,b)
** @attr BaseQuartet [AjBool] Unrooted quartet ((a,b),(c,d));
** @attr HasLengths [AjBool] Tree has branch lengths
** @attr Size [ajint] Number of nodes
** @attr Tree [AjPStr] Newick tree string
** @@
******************************************************************************/

typedef struct AjSPhyloTree
{
    AjBool Multifurcated;
    AjBool BaseTrifurcated;
    AjBool BaseBifurcated;
    AjBool BaseQuartet;
    AjBool HasLengths;
    ajint Size;
    AjPStr Tree;
} AjOPhyloTree;

#define AjPPhyloTree AjOPhyloTree*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void           ajPhyloDistDel(AjPPhyloDist* pthis);
AjPPhyloDist   ajPhyloDistNew(void);
AjPPhyloDist*  ajPhyloDistRead(const AjPStr filename, ajint size,
                               AjBool missing);
void           ajPhyloDistTrace(const AjPPhyloDist thys);

void           ajPhyloExit(void);

void           ajPhyloFreqDel(AjPPhyloFreq* pthis);
AjPPhyloFreq   ajPhyloFreqNew(void);
AjPPhyloFreq   ajPhyloFreqRead(const AjPStr filename, AjBool contchar,
                               AjBool genedata, AjBool indiv);
void           ajPhyloFreqTrace(const AjPPhyloFreq thys);

void           ajPhyloPropDel(AjPPhyloProp* pthis);
ajint          ajPhyloPropGetSize(const AjPPhyloProp thys);
AjPPhyloProp   ajPhyloPropNew(void);
AjPPhyloProp   ajPhyloPropRead(const AjPStr filename, const AjPStr propchars,
                               ajint len, ajint size);
void           ajPhyloPropTrace(const AjPPhyloProp thys);

void           ajPhyloStateDel(AjPPhyloState* pthis);
void           ajPhyloStateDelarray(AjPPhyloState** pthis);
AjPPhyloState  ajPhyloStateNew(void);
AjPPhyloState* ajPhyloStateRead(const AjPStr filename,
                                const AjPStr statechars);
void           ajPhyloStateTrace(const AjPPhyloState thys);

void           ajPhyloTreeDel(AjPPhyloTree* pthis);
void           ajPhyloTreeDelarray(AjPPhyloTree** pthis);
AjPPhyloTree   ajPhyloTreeNew(void);
AjPPhyloTree*  ajPhyloTreeRead(const AjPStr filename, ajint size);
void           ajPhyloTreeTrace(const AjPPhyloTree thys);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJPHYLO_H */

ajquery.h/      1414437289  1010  513   100644  5753      `
/* @include ajquery ***********************************************************
**
** AJAX Query parsing functions
**
** @author Copyright (C) 2011 Peter Rice
** @version $Revision: 1.10 $
** @modified Jul 15 pmr First version with code from all datatypes merged
** @modified $Date: 2012/09/03 14:26:04 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJQUERY_H
#define AJQUERY_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajquerydata.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPQuery      ajQueryNew(AjEDataType datatype);
void          ajQueryDel(AjPQuery* pthis);
void          ajQueryTrace(const AjPQuery thys);
void          ajQueryClear(AjPQuery thys);
const AjPStr  ajQuerystrParseFormat(AjPStr *Pqry, AjPTextin textin,
                                    AjBool findformat(const AjPStr format,
                                                      ajint *iformat));
AjBool        ajQuerystrParseListfile(AjPStr *Pqry);
AjBool        ajQuerystrParseRange(AjPStr *Pqry,
                                   ajint *Pbegin, ajint *Pend, AjBool *Prev);
AjBool        ajQuerystrParseRead(AjPStr *Pqry,
                                  AjPTextin textin,
                                  AjBool findformat(const AjPStr format,
                                                    ajint *iformat),
                                  AjBool *Pnontext);
void          ajQueryStarclear(AjPQuery thys);
AjBool        ajQueryDefinedFieldC(const AjPQuery qry, const char* fieldtxt);
AjBool        ajQueryDefinedFieldS(const AjPQuery qry, const AjPStr field);
AjBool        ajQueryKnownFieldC(const AjPQuery qry, const char* fieldtxt);
AjBool        ajQueryKnownFieldS(const AjPQuery qry, const AjPStr field);
AjBool        ajQueryAddFieldAndC(AjPQuery qry, const char* fieldtxt,
                                  const char* wildquerytxt);
AjBool        ajQueryAddFieldAndS(AjPQuery qry, const AjPStr field,
                                  const AjPStr wildquery);
AjBool        ajQueryAddFieldElseC(AjPQuery qry, const char* fieldtxt,
                                   const char* wildquerytxt);
AjBool        ajQueryAddFieldElseS(AjPQuery qry, const AjPStr field,
                                   const AjPStr wildquery);
AjBool        ajQueryAddFieldEorC(AjPQuery qry, const char* fieldtxt,
                                  const char* wildquerytxt);
AjBool        ajQueryAddFieldEorS(AjPQuery qry, const AjPStr field,
                                  const AjPStr wildquery);
AjBool        ajQueryAddFieldNotC(AjPQuery qry, const char* fieldtxt,
                                  const char* wildquerytxt);
AjBool        ajQueryAddFieldNotS(AjPQuery qry, const AjPStr field,
                                  const AjPStr wildquery);
AjBool        ajQueryAddFieldOrC(AjPQuery qry, const char* fieldtxt,
                                 const char* wildquerytxt);
AjBool        ajQueryAddFieldOrS(AjPQuery qry, const AjPStr field,
                                 const AjPStr wildquery);
const AjPList ajQueryGetallFields(const AjPQuery query);
const char*   ajQueryGetDatatype(const AjPQuery query);
const AjPStr  ajQueryGetFormat(const AjPQuery query);
const AjPStr  ajQueryGetId(const AjPQuery query);
AjBool        ajQueryGetQuery(const AjPQuery query, AjPStr* Pdest);
AjBool        ajQueryIsSet(const AjPQuery thys);
AjBool        ajQuerySetWild(AjPQuery thys);

AjPQueryField ajQueryfieldNewC(const char* fieldtxt,
                               const char* wildtxt,
                               AjEQryLink oper);
AjPQueryField ajQueryfieldNewS(const AjPStr field,
                               const AjPStr wild,
                               AjEQryLink oper);
void          ajQueryfieldDel(AjPQueryField *Pthis);
void          ajQuerylistTrace(const AjPList list);

void          ajQueryExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJQUERY_H */

ajquerydata.h/  1414437289  1010  513   100644  11010     `
/* @include ajquerydata *******************************************************
**
** AJAX Query data structures
**
** @author Copyright (C) 2011 Peter Rice
** @version $Revision: 1.22 $
** @modified Jul 15 pmr First version with code from all datatypes merged
** @modified $Date: 2012/09/03 14:26:04 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJQUERYDATA_H
#define AJQUERYDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajlist.h"
#include "ajtable.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define NULLFPOS -1




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @enum AjEQryType ***********************************************************
**
** Query type or scope (one, some or all entries)
**
** @value AJQUERY_UNKNOWN Unknown
** @value AJQUERY_ENTRY   Single entry
** @value AJQUERY_QUERY   Query for one or more entries
** @value AJQUERY_ALL     All entries
******************************************************************************/

typedef enum AjOQryType
{
    AJQUERY_UNKNOWN, AJQUERY_ENTRY,
    AJQUERY_QUERY, AJQUERY_ALL
} AjEQryType;




/* @enum AjEQryLink ***********************************************************
**
** Query link operators
**
** @value AJQLINK_INIT Initial query
** @value AJQLINK_OR   Current OR next
** @value AJQLINK_AND  Current AND next
** @value AJQLINK_EOR  Current EOR next
** @value AJQLINK_NOT  Current but NOT next
** @value AJQLINK_ELSE Current if it exists, else next
** @value AJQLINK_MAX  Above last defined value
******************************************************************************/

typedef enum AjOQryLink
{
    AJQLINK_INIT,
    AJQLINK_OR,
    AJQLINK_AND,
    AJQLINK_EOR,
    AJQLINK_NOT,
    AJQLINK_ELSE,
    AJQLINK_MAX
} AjEQryLink;




/* @enum AjEDataType **********************************************************
**
** AJAX data type
**
** @value AJDATATYPE_UNKNOWN   Undefined type
** @value AJDATATYPE_SEQUENCE  Sequence data
** @value AJDATATYPE_FEATURES  Feature data
** @value AJDATATYPE_ASSEMBLY  Assembly data
** @value AJDATATYPE_OBO       OBO ontology term data
** @value AJDATATYPE_REFSEQ    Reference sequence data
** @value AJDATATYPE_RESOURCE  Data resource data
** @value AJDATATYPE_TAXON     Taxonomy data
** @value AJDATATYPE_TEXT      Text data
** @value AJDATATYPE_URL       URL data
** @value AJDATATYPE_VARIATION Variation data
** @value AJDATATYPE_XML       XML data
** @value AJDATATYPE_MAX       Above last defined value
******************************************************************************/

typedef enum AjODataType
{
    AJDATATYPE_UNKNOWN,
    AJDATATYPE_SEQUENCE,
    AJDATATYPE_FEATURES,
    AJDATATYPE_ASSEMBLY,
    AJDATATYPE_OBO,
    AJDATATYPE_REFSEQ,
    AJDATATYPE_RESOURCE,
    AJDATATYPE_TAXON,
    AJDATATYPE_TEXT,
    AJDATATYPE_URL,
    AJDATATYPE_VARIATION,
    AJDATATYPE_XML,
    AJDATATYPE_MAX
} AjEDataType;




/* @data AjPQueryField ********************************************************
**
** Ajax Query Field object.
**
** Holds data needed for a specific field query
** This must refer to an field name (id, acc or any other queriable field)
** and the query string including wildcards specified by the user
**
** @alias AjSQueryField
** @alias AjOQueryField
**
** @attr Field     [AjPStr] Field name
** @attr Wildquery [AjPStr] Query Wildcard
** @attr Link [AjEQryLink] Link to previous queries
** @attr Padding [ajuint] Padding to alignment boundary
******************************************************************************/

typedef struct AjSQueryField
{
    AjPStr Field;
    AjPStr Wildquery;
    AjEQryLink Link;
    ajuint Padding;
} AjOQueryField;

#define AjPQueryField AjOQueryField*




/* @data AjPQuery *************************************************************
**
** Ajax Query object.
**
** Holds data needed to interpret an entry specification
** This can refer to an entry name (or "id"), and accession number or
** other queriable items.
**
** AjPQuery is created with the entry specification part of a USA
** (Uniform Sequence Address) or euivalent for other data types.
** The syntax is currently related to that
** used by SRS release 5.1.
**
** @alias AjSQuery
** @alias AjOQuery
**
** @attr SvrName [AjPStr] Server name used by EMBOSS
** @attr DbName [AjPStr] Database name used by EMBOSS
** @attr DbAlias [AjPStr] Database name used by access method
** @attr DbType [AjPStr] Database type
** @attr QueryFields [AjPList] Query field list
** @attr ResultsList [AjPList] Query results list
** @attr ResultsTable [AjPTable] Query results table
** @attr Method [AjPStr] Name of access method
** @attr Qlinks [AjPStr] Supported query link operators
** @attr Formatstr [AjPStr] Name of input format for parser
** @attr IndexDir [AjPStr] Index directory
** @attr Directory [AjPStr] Data directory
** @attr Filename [AjPStr] Individual filename
** @attr Exclude [AjPStr] File wildcards to exclude (spaced)
** @attr Namespace [AjPStr] Ontology namespace query to include
** @attr Organisms [AjPStr] Organism/taxonomy query to include
** @attr DbFields [AjPStr] Query fields (plus id and acc)
** @attr DbFilter [AjPStr] Database filter (query) fields
** @attr DbReturn [AjPStr] Database attribute (returned data) fields
** @attr DbIdentifier [AjPStr] Database primary identifier field
** @attr DbAccession [AjPStr] Database secondary identifier field
** @attr DbUrl [AjPStr] Query URL
** @attr DbProxy [AjPStr] Proxy host
** @attr DbHttpVer [AjPStr] HTTP version
** @attr ServerVer [AjPStr] Server version
** @attr SingleField [AjPStr] Query single field from end of query string
** @attr QryString [AjPStr] Query term
** @attr QryFields [AjPStr] Query fields or ID list
** @attr Application [AjPStr] External application command
** @attr Fpos [ajlong] File position from fseek
** @attr TextAccess [void*] Text access function : see ajtextdb.h
** @attr Access [void*] Datatype-specific access function : see ajseqdb.h
**                      ajobodb.h and others
** @attr QryData [void*] Private data for access function
** @attr QueryType [AjEQryType] Enumerated query type
** @attr DataType [AjEDataType] Enumerated datatype general scope
** @attr QryDone [AjBool] Has the query been done yet
** @attr SetServer [AjBool] True if server data has been set
** @attr SetDatabase [AjBool] True if database data has been set
** @attr SetQuery [AjBool] True if query data has been set
** @attr InDrcat [AjBool] True if database is defined in DRCAT
** @attr Wild [AjBool] True if query contains '*' or '?'
** @attr CaseId [AjBool] True if ID match is case-sensitive
** @attr HasAcc [AjBool] True if entries have acc field
** @attr CountEntries [ajuint] Number of entries processed
** @attr TotalEntries [ajuint] Number of entries found
** @@
******************************************************************************/

typedef struct AjSQuery
{
    AjPStr SvrName;
    AjPStr DbName;
    AjPStr DbAlias;
    AjPStr DbType;
    AjPList QueryFields;
    AjPList ResultsList;
    AjPTable ResultsTable;
    AjPStr Method;
    AjPStr Qlinks;
    AjPStr Formatstr;
    AjPStr IndexDir;
    AjPStr Directory;
    AjPStr Filename;
    AjPStr Exclude;
    AjPStr Namespace;
    AjPStr Organisms;
    AjPStr DbFields;
    AjPStr DbFilter;
    AjPStr DbReturn;
    AjPStr DbIdentifier;
    AjPStr DbAccession;
    AjPStr DbUrl;
    AjPStr DbProxy;
    AjPStr DbHttpVer;
    AjPStr ServerVer;
    AjPStr SingleField;
    AjPStr QryString;
    AjPStr QryFields;
    AjPStr Application;
    ajlong Fpos;
    void* TextAccess;
    void* Access;
    void* QryData;
    AjEQryType QueryType;
    AjEDataType DataType;
    AjBool QryDone;
    AjBool SetServer;
    AjBool SetDatabase;
    AjBool SetQuery;
    AjBool InDrcat;
    AjBool Wild;
    AjBool CaseId;
    AjBool HasAcc;
    ajuint CountEntries;
    ajuint TotalEntries;
} AjOQuery;

#define AjPQuery AjOQuery*




/* @data AjPQueryList *********************************************************
**
** Query processing list of queries from a list file.
**
** Includes data from the original query (@listfile)
**
** @alias AjSQueryList
** @alias AjOQueryList
**
** @attr Qry [AjPStr] Current query
** @attr Formatstr [AjPStr]  Format name from original query
** @attr QryFields [AjPStr]  Query fields or ID list
** @attr Fpos      [ajlong]  File position
** @attr Format    [ajuint]  Format enumeration
** @attr Padding   [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSQueryList
{
    AjPStr Qry;
    AjPStr Formatstr;
    AjPStr  QryFields;
    ajlong  Fpos;
    ajuint Format;
    char Padding[4];
} AjOQueryList;

#define AjPQueryList AjOQueryList*




/* @enum AjEQueryFmtcode ******************************************************
**
** Format code.
**
** @value FMT_OK OK
** @value FMT_NOMATCH No match
** @value FMT_BADTYPE Bad datatype
** @value FMT_FAIL Failed
** @value FMT_EOF End of file reached
** @value FMT_EMPTY Data object empty
******************************************************************************/

typedef enum AjOQueryFmtcode
{
    FMT_OK,
    FMT_NOMATCH,
    FMT_BADTYPE,
    FMT_FAIL,
    FMT_EOF,
    FMT_EMPTY
} AjEQueryFmtcode;




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif  /* !AJQUERYDATA_H */
ajrange.h/      1414437289  1010  513   100644  7265      `
/* @include ajrange ***********************************************************
**
** AJAX range functions
**
** @author Copyright (C) 1999 Alan Bleasby
** @version $Revision: 1.24 $
** @modified Aug 21 ajb First version
** @modified 7 Sept 1999 GWW - String range edit functions added
** @modified 5 Nov 1999 GWW - store text after pairs of numbers
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJRANGE_H
#define AJRANGE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajseqdata.h"
#include "ajlist.h"
#include "ajtranslate.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPRange *************************************************************
**
** Data structure for AJAX sequence range specifications
**
** @alias AjORange
** @alias AjSRange
**
** @attr start [ajuint*] From positions
** @attr end [ajuint*] End positions
** @attr text [AjPStr*] Associated text for each range
** @attr n [ajuint] Number of ranges
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSRange
{
    ajuint *start;
    ajuint *end;
    AjPStr *text;
    ajuint n;
    char Padding[4];
} AjORange;

#define AjPRange AjORange*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool    ajRangeSetOffset(AjPRange thys, ajuint begin);
AjBool    ajRangeElementSet(AjPRange thys, ajuint element,
                            ajuint start, ajuint end);
AjBool    ajRangeIsWhole(const AjPRange thys, const AjPSeq s);
void      ajRangeDel(AjPRange *thys);
AjPRange  ajRangeNewI(ajuint n);
AjPRange  ajRangeNewFilename(const AjPStr name);
AjPRange  ajRangeNewFilenameLimits(const AjPStr name,
                                   ajuint imin, ajuint imax,
                                   ajuint minsize, ajuint size);
AjPRange  ajRangeNewRange(const AjPRange src);
AjPRange  ajRangeNewString(const AjPStr s);
AjPRange  ajRangeNewStringLimits(const AjPStr str, ajuint imin, ajuint imax,
                                 ajuint minsize, ajuint size);
ajuint    ajRangeGetSize(const AjPRange thys);
AjBool    ajRangeIsOrdered(const AjPRange thys);
ajuint    ajRangeCountOverlaps(const AjPRange thys, ajuint pos, ajuint length);
ajuint    ajRangeElementTypeOverlap(const AjPRange thys, ajuint element,
                                    ajuint pos, ajuint length);
AjBool    ajRangeSeqExtract(const AjPRange thys, AjPSeq seq);
AjPSeq    ajRangeSeqExtractPep(const AjPRange thys, AjPSeq seq,
                               const AjPTrn trntable, ajint frame);
AjBool    ajRangeSeqExtractList(const AjPRange thys,
                                const AjPSeq seq, AjPList outliststr);
AjBool    ajRangeSeqMask(const AjPRange thys,
                         const AjPStr maskchar, AjPSeq seq);
AjBool    ajRangeSeqStuff(const AjPRange thys, AjPSeq seq);
AjBool    ajRangeSeqStuffPep(const AjPRange thys, AjPSeq seq,
                             ajint frame);
AjBool    ajRangeSeqToLower(const AjPRange thys, AjPSeq seq);
AjBool    ajRangeStrExtract(const AjPRange thys,
                            const AjPStr instr, AjPStr *outstr);
AjBool    ajRangeStrExtractList(const AjPRange thys,
                                const AjPStr instr, AjPList outliststr);
AjBool    ajRangeStrMask(const AjPRange thys,
                         const AjPStr maskchar, AjPStr *str);
AjBool    ajRangeStrStuff(const AjPRange thys,
                          const AjPStr instr, AjPStr *outstr);
AjBool    ajRangeStrToLower(const AjPRange thys, AjPStr *str);
AjBool    ajRangeElementGetText(const AjPRange thys, ajuint element,
                                AjPStr * text);
AjBool    ajRangeElementGetValues(const AjPRange thys, ajuint element,
                                  ajuint *start, ajuint *end);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjPRange  ajRangeCopy(const AjPRange src);
__deprecated AjPRange  ajRangeGet(const AjPStr s);
__deprecated AjPRange  ajRangeGetLimits(const AjPStr str,
                                        ajuint imin, ajuint imax,
                                        ajuint minsize, ajuint size);
__deprecated AjPRange  ajRangeFile(const AjPStr name);
__deprecated AjPRange  ajRangeFileLimits(const AjPStr name,
                                         ajuint imin, ajuint imax,
                                         ajuint minsize, ajuint size);
__deprecated ajuint    ajRangeNumber(const AjPRange thys);
__deprecated AjBool    ajRangeValues(const AjPRange thys, ajuint element,
                                     ajuint *start, ajuint *end);
__deprecated AjBool    ajRangeBegin(AjPRange thys, ajuint begin);
__deprecated AjBool    ajRangeChange(AjPRange thys, ajuint element,
                                     ajuint start, ajuint end);
__deprecated AjBool    ajRangeText(const AjPRange thys, ajuint element,
                                   AjPStr * text);
__deprecated ajuint    ajRangeOverlaps(const AjPRange thys,
                                       ajuint pos, ajuint length);
__deprecated ajuint    ajRangeOverlapSingle(ajuint start, ajuint end,
                                            ajuint pos, ajuint length);
__deprecated AjBool    ajRangeOrdered(const AjPRange thys);
__deprecated AjBool    ajRangeDefault(const AjPRange thys, const AjPSeq s);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJRANGE_H */

ajrefseq.h/     1414437289  1010  513   100644  2796      `
/* @include ajrefseq **********************************************************
**
** AJAX reference sequence functions
**
** These functions control all aspects of AJAX reference sequence
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.4 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Library General Public
** License as published by the Free Software Foundation; either
** version 2 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Library General Public License for more details.
**
** You should have received a copy of the GNU Library General Public
** License along with this library; if not, write to the
** Free Software Foundation, Inc., 59 Temple Place - Suite 330,
** Boston, MA  02111-1307, USA.
******************************************************************************/

#ifndef AJREFSEQ_H
#define AJREFSEQ_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajrefseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPRefseq    ajRefseqNew(void);
void         ajRefseqDel(AjPRefseq *Prefseq);
void         ajRefseqClear(AjPRefseq refseq);
const AjPStr ajRefseqGetDb(const AjPRefseq refseq);
const AjPStr ajRefseqGetId(const AjPRefseq refseq);
const char*  ajRefseqGetQryC(const AjPRefseq refseq);
const AjPStr ajRefseqGetQryS(const AjPRefseq refseq);
void         ajRefseqExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJREFSEQ_H */
ajrefseqdata.h/ 1414437289  1010  513   100644  7133      `
/* @include ajrefseqdata ******************************************************
**
** AJAX reference sequence data structures
**
** These functions control all aspects of AJAX reference sequence
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.8 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Library General Public
** License as published by the Free Software Foundation; either
** version 2 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Library General Public License for more details.
**
** You should have received a copy of the GNU Library General Public
** License along with this library; if not, write to the
** Free Software Foundation, Inc., 59 Temple Place - Suite 330,
** Boston, MA  02111-1307, USA.
******************************************************************************/

#ifndef AJREFSEQDATA_H
#define AJREFSEQDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPRefseq ************************************************************
**
** Ajax refseq object.
**
** Holds the refseq itself, plus associated information.
**
** @alias AjSRefseq
** @alias AjORefseq
**
** @attr Id        [AjPStr]  Id of term
** @attr Db        [AjPStr]  Database name from input
** @attr Setdb     [AjPStr]  Database name from command line
** @attr Full      [AjPStr]  Full name
** @attr Qry       [AjPStr]  Query for re-reading
** @attr Formatstr [AjPStr]  Input format name
** @attr Filename  [AjPStr]  Original filename
** @attr TextPtr   [AjPStr]  Full text
** @attr Desc      [AjPStr]  Description
** @attr Seq       [AjPStr]  Sequence
** @attr Seqlist   [AjPList] Sequence list
** @attr Fpos      [ajlong]  File position
** @attr Format    [AjEnum]  Input format enum
** @attr Count     [ajuint]  Number of lines read
** @@
******************************************************************************/

typedef struct AjSRefseq {
    AjPStr  Id;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr  TextPtr;
    AjPStr  Desc;
    AjPStr  Seq;
    AjPList Seqlist;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint Count;
} AjORefseq;

#define AjPRefseq AjORefseq*




/* @data AjPRefseqin **********************************************************
**
** Ajax refseq input object.
**
** Holds the input specification and information needed to read
** the refseq and possible further entries
**
** @alias AjSRefseqin
** @alias AjORefseqin
**
** @attr Input [AjPTextin] General text input object
** @attr RefseqData [void*] Format data for reuse, e.g. multiple term input
**                         (unused in current code)
** @@
******************************************************************************/

typedef struct AjSRefseqin {
    AjPTextin Input;
    void *RefseqData;
} AjORefseqin;

#define AjPRefseqin AjORefseqin*




/* @data AjPRefseqall *********************************************************
**
** Ajax refseq all (stream) object.
**
** Inherits an AjPRefseq but allows more refseqs to be read from the
** same input by also inheriting the AjPRefseqin input object.
**
** @alias AjSRefseqall
** @alias AjORefseqall
**
** @attr Refseq [AjPRefseq] Current refseq
** @attr Refseqin [AjPRefseqin] Refseq input for reading next
** @attr Totterms [ajulong] Count of terms so far
** @attr Count [ajuint] Count of terms so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: Refseq object has been returned to a new
**                         owner and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSRefseqall
{
    AjPRefseq Refseq;
    AjPRefseqin Refseqin;
    ajulong Totterms;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjORefseqall;

#define AjPRefseqall AjORefseqall*




/* @data AjPRefseqAccess ******************************************************
**
** Ajax reference sequence access database reading object.
**
** Holds information needed to read a refseq entry from a database.
** Access methods are defined for each known database type.
**
** Refseq entries are read from the database using the defined
** database access function, which is usually a static function
** within ajrefseqdb.c
**
** This should be a static data object but is needed for the definition
** of AjPRefseqin.
**
** @alias AjSRefseqAccess
** @alias AjORefseqAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSRefseqAccess
{
    const char *Name;
    AjBool (*Access)(AjPRefseqin refseqin);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjORefseqAccess;

#define AjPRefseqAccess AjORefseqAccess*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJREFSEQDATA_H */

ajrefseqdb.h/   1414437296  1010  513   100644  2564      `
/* @include ajrefseqdb ********************************************************
**
** AJAX reference sequence database functions
**
** These functions control all aspects of AJAX reference sequence
** database a#ccess
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.3 $
** @modified Oct 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJREFSEQDB_H
#define AJREFSEQDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void           ajRefseqdbExit(void);
void           ajRefseqdbInit(void);
void           ajRefseqdbPrintAccess (AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJREFSEQDB_H */
ajrefseqread.h/ 1414437289  1010  513   100644  3830      `
/* @include ajrefseqread ******************************************************
**
** AJAX reference sequence reading functions
**
** These functions control all aspects of AJAX refseqdec reading
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.4 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJREFSEQREAD_H
#define AJREFSEQREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajrefseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void             ajRefseqallClear(AjPRefseqall thys);
void             ajRefseqallDel(AjPRefseqall* pthis);
AjPRefseqall     ajRefseqallNew(void);
const AjPStr     ajRefseqallGetrefseqId(const AjPRefseqall thys);

void             ajRefseqinClear(AjPRefseqin thys);
void             ajRefseqinDel(AjPRefseqin* pthis);
AjPRefseqin      ajRefseqinNew(void);
void             ajRefseqinQryC(AjPRefseqin thys, const char* txt);
void             ajRefseqinQryS(AjPRefseqin thys, const AjPStr str);
void             ajRefseqinTrace(const AjPRefseqin thys);

void             ajRefseqinprintBook(AjPFile outf);
void             ajRefseqinprintHtml(AjPFile outf);
void             ajRefseqinprintText(AjPFile outf, AjBool full);
void             ajRefseqinprintWiki(AjPFile outf);

AjBool           ajRefseqallNext(AjPRefseqall thys, AjPRefseq *Prefseq);
AjBool           ajRefseqinRead(AjPRefseqin refseqin, AjPRefseq thys);

AjBool           ajRefseqinformatTerm(const AjPStr term);
AjBool           ajRefseqinformatTest(const AjPStr format);
void             ajRefseqinExit(void);
const char*      ajRefseqinTypeGetFields(void);
const char*      ajRefseqinTypeGetQlinks(void);

AjPTable         ajRefseqaccessGetDb(void);
const char*      ajRefseqaccessMethodGetQlinks(const AjPStr method);
ajuint           ajRefseqaccessMethodGetScope(const AjPStr method);
AjBool           ajRefseqaccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJREFSEQREAD_H */
ajrefseqwrite.h/1414437289  1010  513   100644  2816      `
/* @include ajrefseqwrite *****************************************************
**
** AJAX reference sequence writing functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.4 $
** @modified Oct 25 2010 pmr First AJAX version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJREFSEQWRITE_H
#define AJREFSEQWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajrefseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajRefseqoutWrite(AjPOutfile outf, const AjPRefseq refseq);

void          ajRefseqoutprintBook(AjPFile outf);
void          ajRefseqoutprintHtml(AjPFile outf);
void          ajRefseqoutprintText(AjPFile outf, AjBool full);
void          ajRefseqoutprintWiki(AjPFile outf);

AjBool        ajRefseqoutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajRefseqoutformatTest(const AjPStr format);

void          ajRefseqoutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJREFSEQWRITE_H */
ajreg.h/        1414437289  1010  513   100644  4392      `
/* @include ajreg *************************************************************
**
** AJAX REG (ajax regular expression) functions
**
** Uses the Perl-Comparible Regular Expressions Library (PCRE)
** included as a sepoarate library in the EMBOSS distribution.
**
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.24 $
** @modified Jun 25 pmr First version
** @modified 1999-2011 pmr Replace Henry Spencer library with PCRE
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJREG_H
#define AJREG_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

#include "pcre_config.h"
#include "pcre_internal.h"
#include "pcreposix.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define AJREG_OVECSIZE 30




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPRegexp ************************************************************
**
** PCRE expression internals, wrapped for AJAX calls
**
** @alias AjSRegexp
** @alias AjORegexp
**
** @attr pcre [real_pcre*] PCRE compiled expression
** @attr extra [pcre_extra*] PCRE study data (if available, else NULL)
** @attr ovector [int*] Output vector offsets
** @attr orig [const char*] Original string
** @attr ovecsize [int] Output vector size
** @attr matches [int] Number of matches
******************************************************************************/

typedef struct AjSRegexp
{
    real_pcre *pcre;
    pcre_extra *extra;
    int *ovector;
    const char* orig;
    int ovecsize;
    int matches;
} AjORegexp;

#define AjPRegexp AjORegexp*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/* constructors */

AjPRegexp ajRegComp(const AjPStr rexp);
AjPRegexp ajRegCompC(const char* rexp);

AjPRegexp ajRegCompCase(const AjPStr rexp);
AjPRegexp ajRegCompCaseC(const char* rexp);

/* execute expression match */

AjBool ajRegExec(AjPRegexp prog, const AjPStr str);
AjBool ajRegExecC(AjPRegexp prog, const char* str);

AjBool ajRegExecall(AjPRegexp prog, const AjPStr str);
AjBool ajRegExecallC(AjPRegexp prog, const char* str);

/* test substrings */

ajint  ajRegGetMatches(const AjPRegexp rp);
ajint  ajRegLenI(const AjPRegexp rp, ajint isub);
ajint  ajRegOffset(const AjPRegexp rp);
ajint  ajRegOffsetI(const AjPRegexp rp, ajint isub);

/* get substrings */

AjBool ajRegPre(const AjPRegexp rp, AjPStr* dest);
AjBool ajRegPost(const AjPRegexp rp, AjPStr* post);
AjBool ajRegPostC(const AjPRegexp rp, const char** post);
AjBool ajRegSubI(const AjPRegexp rp, ajint isub, AjPStr* dest);

/* destructor */

void   ajRegFree(AjPRegexp* pexp);
void   ajRegTrace(const AjPRegexp rexp);

void   ajRegExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJREG_H */
ajreport.h/     1414437289  1010  513   100644  10461     `
/* @include ajreport **********************************************************
**
** AJAX REPORT (ajax feature reporting) functions
**
** These functions report AJAX sequence feature data in a variety
** of formats.
**
** @author Copyright (C) 2000 Peter Rice, LION Bioscience Ltd.
** @version  $Revision: 1.40 $
** @modified Nov 10 First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJREPORT_H
#define AJREPORT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajmath.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajlist.h"
#include "ajfeatdata.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPReport ************************************************************
**
** Ajax Report Output object.
**
** Holds definition of feature report output.
**
** @alias AjSReport
** @alias AjOReport
**
** @other AjPSeqout Sequence output
** @other AjPFile Input and output files
**
** @attr Name [AjPStr] As "Source" for features, usually empty
** @attr Type [AjPStr] "P" Protein or "N" Nucleotide
** @attr Formatstr [AjPStr] Report format (-rformat)
** @attr Fttable [AjPFeattable] Feature table to use (obsolete?)
** @attr Ftquery [AjPFeattabOut] Output definition for features
** @attr Extension [AjPStr] Output file extension
** @attr File [AjPFile] Output file object
** @attr Tagnames [AjPList] List of extra tag names (from ACD)
** @attr Tagprints [AjPList] List of extra tag printnames (from ACD)
** @attr Tagtypes [AjPList] List of extra tag datatypes (from ACD)
** @attr Header [AjPStr] Text to add to header with newlines
** @attr SubHeader [AjPStr] Text to add to subheader with newlines
** @attr Tail [AjPStr] Text to add to tail with newlines
** @attr SubTail [AjPStr] Text to add to subtail with newlines
** @attr FileNames [AjPList] Names of extra files (see FileTypes)
** @attr FileTypes [AjPList] Types of extra files (see FileNames)
** @attr Totseqs [ajlong] Total number of sequences processed
** @attr Totlength [ajlong] Total length of sequences processed
** @attr Precision [ajint] Floating precision for score
** @attr Showacc [AjBool] Report accession number
** @attr Showdes [AjBool] Report sequence description
** @attr Showusa [AjBool] Report USA (-rusa) or only seqname
** @attr Showscore [AjBool] Report score (if optional for format)
** @attr Showstrand [AjBool] Report nucleotide strand (if optional for format)
** @attr Multi [AjBool] if true, assume >1 sequence
** @attr Mintags [ajint] Minimum number of tags to report
** @attr CountSeq [ajint] Number of sequences reported so far
** @attr CountHit [ajint] Number of features reported so far
** @attr TotHits [ajint] Number of features found so far
** @attr MaxHitAll [ajint] Maximum number of hits to report overall
** @attr MaxHitSeq [ajint] Maximum number of hits to report for each sequence
** @attr MaxLimit [AjBool] if true, maximum hits reached
** @attr Format [AjEnum] Report format (index number)
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new ajReportNew Default constructor
** @delete ajReportDel Default destructor
** @output ajReportWrite Master sequence output routine
** @@
******************************************************************************/

typedef struct AjSReport {
    AjPStr Name;
    AjPStr Type;
    AjPStr Formatstr;
    AjPFeattable Fttable;
    AjPFeattabOut Ftquery;
    AjPStr Extension;
    AjPFile File;
    AjPList Tagnames;
    AjPList Tagprints;
    AjPList Tagtypes;
    AjPStr Header;
    AjPStr SubHeader;
    AjPStr Tail;
    AjPStr SubTail;
    AjPList FileNames;
    AjPList FileTypes;
    ajlong Totseqs;
    ajlong Totlength;
    ajint Precision;
    AjBool Showacc;
    AjBool Showdes;
    AjBool Showusa;
    AjBool Showscore;
    AjBool Showstrand;
    AjBool Multi;
    ajint Mintags;
    ajint CountSeq;
    ajint CountHit;
    ajint TotHits;
    ajint MaxHitAll;
    ajint MaxHitSeq;
    AjBool MaxLimit;
    AjEnum Format;
    char   Padding[4];
} AjOReport;

#define AjPReport AjOReport*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void         ajReportClose(AjPReport pthys);
void         ajReportDel(AjPReport* pthys);
void         ajReportDummyFunction(void);
void         ajReportExit(void);
void         ajReportAddFileF(AjPReport thys,
                              AjPFile file, const AjPStr type);
AjBool       ajReportFindFormat(const AjPStr format, ajint* iformat);
AjBool       ajReportFormatDefault(AjPStr* pformat);
AjPReport    ajReportNew(void);
AjBool       ajReportOpen(AjPReport thys, const AjPStr name);
void         ajReportPrintFormat(AjPFile outf, AjBool full);
void         ajReportPrintbookFormat(AjPFile outf);
void         ajReportPrinthtmlFormat(AjPFile outf);
void         ajReportPrintwikiFormat(AjPFile outf);
const AjPStr ajReportGetSeqnameSeq(const AjPReport thys, const AjPSeq seq);
void         ajReportAppendHeaderS(AjPReport thys, const AjPStr header);
void         ajReportAppendHeaderC(AjPReport thys, const char* header);
void         ajReportSetHeaderS(AjPReport thys, const AjPStr header);
void         ajReportSetHeaderC(AjPReport thys, const char* header);
void         ajReportAppendSubheaderS(AjPReport thys, const AjPStr header);
void         ajReportAppendSubheaderC(AjPReport thys, const char* header);
void         ajReportSetSubheaderC(AjPReport thys, const char* header);
void         ajReportSetSubheaderS(AjPReport thys, const AjPStr header);
void         ajReportSetSeqstats(AjPReport thys, const AjPSeqall seqall);
void         ajReportSetSeqsetstats(AjPReport thys, const AjPSeqset seqset);
void         ajReportSetStatistics(AjPReport thys, ajlong totseqs,
                                   ajlong totlength);
AjBool       ajReportSetTagsS(AjPReport thys, const AjPStr taglist);
void         ajReportAppendTailS(AjPReport thys, const AjPStr tail);
void         ajReportAppendTailC(AjPReport thys, const char* tail);
void         ajReportSetTailS(AjPReport thys, const AjPStr tail);
void         ajReportSetTailC(AjPReport thys, const char* tail);
void         ajReportAppendSubtailS(AjPReport thys, const AjPStr tail);
void         ajReportAppendSubtailC(AjPReport thys, const char* tail);
void         ajReportSetSubtailS(AjPReport thys, const AjPStr tail);
void         ajReportSetSubtailC(AjPReport thys, const char* tail);
void         ajReportSetType(AjPReport thys,
                             const AjPFeattable ftable, const AjPSeq seq);
AjBool       ajReportValid(AjPReport thys);
AjBool       ajReportWrite(AjPReport thys,
                           const AjPFeattable ftable,  const AjPSeq seq);
void         ajReportWriteHeader(AjPReport thys,
                                 const AjPFeattable ftable, const AjPSeq seq);
void         ajReportWriteTail(AjPReport thys,
                               const AjPFeattable ftable, const AjPSeq seq);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void     ajReportFileAdd(AjPReport thys,
                                      AjPFile file, const AjPStr type);
__deprecated void     ajReportAppendSubHeader(AjPReport thys,
                                              const AjPStr header);
__deprecated void     ajReportAppendSubHeaderC(AjPReport thys,
                                               const char* header);
__deprecated void     ajReportSetSubHeader(AjPReport thys,
                                           const AjPStr header);
__deprecated AjBool   ajReportSetTags(AjPReport thys,
                                      const AjPStr taglist);
__deprecated void     ajReportAppendTail(AjPReport thys, const AjPStr tail);
__deprecated void     ajReportSetTail(AjPReport thys, const AjPStr tail);
__deprecated void     ajReportAppendHeader(AjPReport thys,
                                           const AjPStr header);
__deprecated void     ajReportSetHeader(AjPReport thys, const AjPStr header);
__deprecated void     ajReportAppendSubTail(AjPReport thys, const AjPStr tail);
__deprecated void     ajReportAppendSubTailC(AjPReport thys, const char* tail);
__deprecated void     ajReportSetSubTail(AjPReport thys, const AjPStr tail);
__deprecated void     ajReportSetSubTailC(AjPReport thys, const char* tail);
__deprecated const    AjPStr ajReportSeqName(const AjPReport thys,
                                             const AjPSeq seq);
__deprecated ajint    ajReportLists(const AjPReport thys,
                                    AjPStr** types, AjPStr** names,
                                    AjPStr** prints, ajuint** tagsizes);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJREPORT_H */

ajresource.h/   1414437289  1010  513   100644  3826      `
/* @include ajresource ********************************************************
**
** AJAX data resource functions
**
** These functions control all aspects of AJAX data resource
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version  $Revision: 1.18 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJRESOURCE_H
#define AJRESOURCE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajresourcedata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPResource  ajResourceNew(void);
AjPResource  ajResourceNewDrcat(const AjPStr dbname);
AjPResource  ajResourceNewResource(const AjPResource res);
void         ajResourceDel(AjPResource *Presource);
void         ajResourceClear(AjPResource resource);
AjBool       ajResourceGetDbdata(const AjPResource resource, AjPQuery qry,
                                 AjBool findformat(const AjPStr format,
                                                   ajint *iformat));
const AjPStr ajResourceGetEntry(const AjPResource resource);
const AjPStr ajResourceGetId(const AjPResource resource);
const char*  ajResourceGetQryC(const AjPResource resource);
const AjPStr ajResourceGetQryS(const AjPResource resource);
void         ajResourceExit(void);
void         ajResourceTrace(const AjPResource thys);

AjPReslink   ajReslinkNew(void);
AjPReslink   ajReslinkNewReslink(const AjPReslink link);
void         ajReslinkDel(AjPReslink*);
AjBool       ajReslinklistClone(const AjPList src, AjPList dest);

AjPResquery  ajResqueryNew(void);
AjPResquery  ajResqueryNewResquery(const AjPResquery qry);
void         ajResqueryDel(AjPResquery*);
AjBool       ajResquerylistClone(const AjPList src, AjPList dest);

AjPResterm   ajRestermNew(void);
AjPResterm   ajRestermNewResterm(const AjPResterm term);
void         ajRestermDel(AjPResterm*);
AjBool       ajRestermlistClone(const AjPList src, AjPList dest);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJRESOURCE_H */
/0              1414437289  1010  513   100644  10487     `
/* @include ajresourcedata ****************************************************
**
** AJAX data resource data structures
**
** These functions control all aspects of AJAX data resource
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version  $Revision: 1.15 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJRESOURCEDATA_H
#define AJRESOURCEDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPResource **********************************************************
**
** Ajax resource object.
**
** Holds the resource itself, plus associated information.
**
** @alias AjSResource
** @alias AjOResource
**
** @attr Id        [AjPStr]  Standard identifier of rerousce
** @attr Idalt     [AjPList] Alternative identifiers for this resource
** @attr Acc       [AjPStr]  Accession number for this resource
** @attr Name      [AjPStr]  Name, usually the ID in full
** @attr Desc      [AjPStr]  Description
** @attr Url       [AjPStr]  Resource web server
** @attr Urllink   [AjPStr]  URL on linking instructions.
** @attr Urlrest   [AjPStr]  URL of documentation on REST interface
** @attr Urlsoap   [AjPStr]  URL of documentation on SOAP interface
** @attr Cat       [AjPList] Database category (from drcat.dat)
** @attr Taxon     [AjPList] NCBI Taxonomy
** @attr Edamdat   [AjPList] EDAM ontology references (retrievable data)
** @attr Edamfmt   [AjPList] EDAM ontology references (retrieved data format)
** @attr Edamid    [AjPList] EDAM ontology references (query fields)
** @attr Edamtpc   [AjPList] EDAM ontology references (data resource topic)
** @attr Xref      [AjPList] Database cross-reference link details
** @attr Query     [AjPList] Formatted query definitions
** @attr Example   [AjPList] Formatted query examples
** @attr Db        [AjPStr]  Database name from input
** @attr Setdb     [AjPStr]  Database name from command line
** @attr Full      [AjPStr]  Full name
** @attr Qry       [AjPStr]  Query for re-reading
** @attr Formatstr [AjPStr]  Input format name
** @attr Filename  [AjPStr]  Original filename
** @attr TextPtr   [AjPStr]  Full text
** @attr Fpos      [ajlong]  File position
** @attr Format    [AjEnum]  Input format enum
** @attr Count     [ajuint]  Number of lines read
** @@
******************************************************************************/

typedef struct AjSResource
{
    AjPStr  Id;
    AjPList Idalt;
    AjPStr  Acc;
    AjPStr  Name;
    AjPStr  Desc;
    AjPStr  Url;
    AjPStr  Urllink;
    AjPStr  Urlrest;
    AjPStr  Urlsoap;
    AjPList Cat;
    AjPList Taxon;
    AjPList Edamdat;
    AjPList Edamfmt;
    AjPList Edamid;
    AjPList Edamtpc;
    AjPList Xref;
    AjPList Query;
    AjPList Example;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr  TextPtr;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint Count;
} AjOResource;

#define AjPResource AjOResource*




/* @data AjPResquery **********************************************************
**
** Ajax data resource query object
**
** Describes a standard public data resource query definition
**
** AjPResquery is implemented as a pointer to a C data structure.
**
** @alias AjSResquery
** @alias AjOResquery
**
** @attr Datatype [AjPStr] Resource query datatype
** @attr Format   [AjPStr] Resource query format
** @attr FormatTerm [AjPStr] Resource query format EDAM term
** @attr Term     [AjPStr] Resource query term
** @attr Url      [AjPStr] Resource query URL
** @attr Nterms   [ajuint] Number of terms
** @attr Padding  [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSResquery
{
    AjPStr Datatype;
    AjPStr Format;
    AjPStr FormatTerm;
    AjPStr Term;
    AjPStr Url;
    ajuint Nterms;
    ajuint Padding;
} AjOResquery;

#define AjPResquery AjOResquery*




/* @data AjPReslink ***********************************************************
**
** Ajax data resource link object
**
** Describes a standard public data resource link definition
**
** AjPReslink is implemented as a pointer to a C data structure.
**
** @alias AjSReslink
** @alias AjOReslink
**
** @attr Source   [AjPStr] Resource link source
** @attr Term     [AjPStr] Resource query terms
** @attr Nterms   [ajuint] Resource query number of terms
** @attr Padding  [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSReslink
{
    AjPStr Source;
    AjPStr Term;
    ajuint Nterms;
    ajuint Padding;
} AjOReslink;

#define AjPReslink AjOReslink*




/* @data AjPResterm ***********************************************************
**
** Ajax data resource term object
**
** Describes a standard public data resource term definition
**
** AjPResterm is implemented as a pointer to a C data structure.
**
** @alias AjSResterm
** @alias AjOResterm
**
** @attr Id       [AjPStr] Term ID in EDAM
** @attr Name     [AjPStr] Term name in EDAM
** @@
******************************************************************************/

typedef struct AjSResterm
{
    AjPStr Id;
    AjPStr Name;
} AjOResterm;

#define AjPResterm AjOResterm*




/* @data AjPResourcein ********************************************************
**
** Ajax resource input object.
**
** Holds the input specification and information needed to read
** the resource and possible further entries
**
** @alias AjSResourcein
** @alias AjOResourcein
**
** @attr Input [AjPTextin] General text input object
** @attr ResourceData [void*] Format data for reuse, e.g. multiple term input
**                         (unused in current code)
** @@
******************************************************************************/

typedef struct AjSResourcein
{
    AjPTextin Input;
    void *ResourceData;
} AjOResourcein;

#define AjPResourcein AjOResourcein*




/* @data AjPResourceall *******************************************************
**
** Ajax data resource all (stream) object.
**
** Inherits an AjPResource but allows more data resources to be read from the
** same input by also inheriting the AjPResourcein input object.
**
** @alias AjSResourceall
** @alias AjOResourceall
**
** @attr Resource [AjPResource] Current term
** @attr Resourcein [AjPResourcein] Data resource input for reading next
** @attr Totresources [ajulong] Count of resources so far
** @attr Count [ajuint] Count of resources so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: data resource object has been returned
**                         to a new owner
**                         and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSResourceall
{
    AjPResource Resource;
    AjPResourcein Resourcein;
    ajulong Totresources;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjOResourceall;

#define AjPResourceall AjOResourceall*




/* @data AjPResourceAccess ****************************************************
**
** Ajax data access database reading object.
**
** Holds information needed to read a resource entry from a database.
** Access methods are defined for each known database type.
**
** Resource entries are read from the database using the defined
** database access function, which is usually a static function
** within ajresourcedb.c
**
** This should be a static data object but is needed for the definition
** of AjPResourcein.
**
** @alias AjSResourceAccess
** @alias AjOResourceAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSResourceAccess
{
    const char *Name;
    AjBool (*Access)(AjPResourcein resourcein);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOResourceAccess;

#define AjPResourceAccess AjOResourceAccess*




AJ_END_DECLS

#endif /* !AJRESOURCEDATA_H */

ajresourcedb.h/ 1414437296  1010  513   100644  2543      `
/* @include ajresourcedb ******************************************************
**
** AJAX data database functions
**
** These functions control all aspects of AJAX data database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.4 $
** @modified Oct 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJRESOURCEDB_H
#define AJRESOURCEDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void           ajResourcedbExit(void);
void           ajResourcedbInit(void);
void           ajResourcedbPrintAccess(AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJRESOURCEDB_H */

/18             1414437289  1010  513   100644  3926      `
/* @include ajresourceread ****************************************************
**
** AJAX data resource reading functions
**
** These functions control all aspects of AJAX data resource reading
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.12 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJRESOURCEREAD_H
#define AJRESOURCEREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajresourcedata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void           ajResourceallClear(AjPResourceall thys);
void           ajResourceallDel(AjPResourceall* pthis);
AjPResourceall ajResourceallNew(void);
AjPResourcein  ajResourceinNewDrcat(const AjPStr dbname);
const AjPStr   ajResourceallGetresourceId(const AjPResourceall thys);

void           ajResourceinClear(AjPResourcein thys);
void           ajResourceinDel(AjPResourcein* pthis);
AjPResourcein  ajResourceinNew(void);
void           ajResourceinQryC(AjPResourcein thys, const char* txt);
void           ajResourceinQryS(AjPResourcein thys, const AjPStr str);
void           ajResourceinTrace(const AjPResourcein thys);

void           ajResourceinprintBook(AjPFile outf);
void           ajResourceinprintHtml(AjPFile outf);
void           ajResourceinprintText(AjPFile outf, AjBool full);
void           ajResourceinprintWiki(AjPFile outf);

AjBool         ajResourceallNext(AjPResourceall thys, AjPResource *Presource);
AjBool         ajResourceinRead(AjPResourcein resourcein, AjPResource thys);

AjBool         ajResourceinformatTerm(const AjPStr term);
AjBool         ajResourceinformatTest(const AjPStr format);
void           ajResourceinExit(void);
const char*    ajResourceinTypeGetFields(void);
const char*    ajResourceinTypeGetQlinks(void);

AjPTable       ajResourceaccessGetDb(void);
const char*    ajResourceaccessMethodGetQlinks(const AjPStr method);
ajuint         ajResourceaccessMethodGetScope(const AjPStr method);
AjBool         ajResourceaccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJRESOURCEREAD_H */
/36             1414437289  1010  513   100644  2873      `
/* @include ajresourcewrite ***************************************************
**
** AJAX data resource handling functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.8 $
** @modified Oct 25 2010 pmr First AJAX version
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJRESOURCEWRITE_H
#define AJRESOURCEWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajresourcedata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajResourceoutWrite(AjPOutfile outf,
                                 const AjPResource resource);

AjBool        ajResourceoutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajResourceoutformatTest(const AjPStr format);

void          ajResourceoutprintBook(AjPFile outf);
void          ajResourceoutprintHtml(AjPFile outf);
void          ajResourceoutprintText(AjPFile outf, AjBool full);
void          ajResourceoutprintWiki(AjPFile outf);

void          ajResourceoutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJRESOURCEWRITE_H */

ajseq.h/        1414437289  1010  513   100644  29304     `
/* @include ajseq *************************************************************
**
** AJAX SEQ (sequence) functions
**
** These functions control all aspects of AJAX sequence
** reading and writing and include simple utilities.
**
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.85 $
** @modified Jun 25 pmr First version
** @modified $Date: 2013/06/29 22:32:55 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSEQ_H
#define AJSEQ_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajseqdata.h"
#include "ajrefseq.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPSeqCvt ************************************************************
**
** Sequence conversion data. Used to convert a sequence to binary.
**
** @new ajSeqCvtNew Creates from a character string of valid bases.
** @new ajSeqCvtNewText Creates from a character string of valid bases.
** @new ajSeqCvtNewZero Creates from a character string of valid bases.
** @new ajSeqCvtNewZeroS Creates from an array of strings of valid bases.
** @new ajSeqCvtNewZeroSS Creates from an array of strings of valid bases.
** @output ajSeqCvtTrace Reports on contents for debugging
*
** @alias AjSSeqCvt
** @alias AjOSeqCvt
**
** @attr size [ajint] Number of characters in table, usually
**                    all possible characters.
** @attr len [ajint] Number of characters defined
** @attr missing [ajint] Index of the missing character value
** @attr nrlabels [ajint] Number of row labels
** @attr bases [AjPStr] The bases which can be converted
** @attr rlabels [AjPStr*] Row labels
** @attr clabels [AjPStr*] Column labels
** @attr table [char*] Binary character value for each character in bases
** @attr nclabels [ajint] Number of column labels
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSSeqCvt
{
    ajint size;
    ajint len;
    ajint missing;
    ajint nrlabels;
    AjPStr bases;
    AjPStr* rlabels;
    AjPStr* clabels;
    char *table;
    ajint nclabels;
    char Padding[4];
} AjOSeqCvt;

#define AjPSeqCvt AjOSeqCvt*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool       ajSeqtestIsAccession(const AjPStr accnum);
const AjPStr ajSeqtestIsSeqversion(const AjPStr sv);

void         ajSeqallDel(AjPSeqall *thys);
ajlong       ajSeqallGetCount(const AjPSeqall seq);
const AjPStr ajSeqallGetFilename(const AjPSeqall thys);
const AjPStr ajSeqallGetseqName(const AjPSeqall thys);
ajint        ajSeqallGetseqBegin(const AjPSeqall seq);
ajint        ajSeqallGetseqEnd(const AjPSeqall seq);
ajint        ajSeqallGetseqLen(const AjPSeqall seqall);
const AjPStr ajSeqallGetName(const AjPSeqall seq);
ajint        ajSeqallGetseqRange(const AjPSeqall thys,
                                 ajint* begin, ajint* end);
ajlong       ajSeqallGetTotlength(const AjPSeqall seq);
const AjPStr ajSeqallGetUsa(const AjPSeqall thys);
AjPSeqall    ajSeqallNew(void);
void         ajSeqallClear(AjPSeqall thys);
void         ajSeqallClearStats(AjPSeqall thys);
AjBool       ajSeqallNext(AjPSeqall seqall, AjPSeq* retseq);
void         ajSeqallSetRange(AjPSeqall seq, ajint ibegin, ajint iend);
void         ajSeqallSetRangeRev(AjPSeqall seq, ajint ibegin, ajint iend);
void         ajSeqAddCmt(AjPSeq thys, AjPStr str);
void         ajSeqAddGene(AjPSeq thys, AjPSeqGene gene);
void         ajSeqAddHost(AjPSeq thys, AjPStr str);
void         ajSeqAddKey(AjPSeq thys, AjPStr str);
void         ajSeqAddRef(AjPSeq thys, AjPSeqRef ref);
void         ajSeqAddXref(AjPSeq thys, AjPSeqXref xref);
void         ajSeqAssignAccC(AjPSeq seq, const char* text);
void         ajSeqAssignAccS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignDescC(AjPSeq seq, const char* text);
void         ajSeqAssignDescS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignEntryC(AjPSeq seq, const char* text);
void         ajSeqAssignEntryS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignFileC(AjPSeq seq, const char* text);
void         ajSeqAssignFileS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignFullC(AjPSeq seq, const char* text);
void         ajSeqAssignFullS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignGiC(AjPSeq seq, const char* text);
void         ajSeqAssignGiS(AjPSeq
                            seq, const AjPStr str);
void         ajSeqAssignNameC(AjPSeq seq, const char* txt);
void         ajSeqAssignNameS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignQualLen(AjPSeq seq, const float* qual, ajuint len);
void         ajSeqAssignSeqC(AjPSeq seq, const char* text);
void         ajSeqAssignSeqLenC(AjPSeq seq, const char* txt, ajuint len);
void         ajSeqAssignSeqS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignSvC(AjPSeq seq, const char* text);
void         ajSeqAssignSvS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignUfoC(AjPSeq seq, const char* text);
void         ajSeqAssignUfoS(AjPSeq seq, const AjPStr str);
void         ajSeqAssignUsaC(AjPSeq seq, const char* text);
void         ajSeqAssignUsaS(AjPSeq seq, const AjPStr str);
ajuint       ajSeqGetBegin(const AjPSeq seq);
const float* ajSeqGetQual(const AjPSeq seq);
const char*  ajSeqGetSeqC(const AjPSeq thys);
const AjPStr ajSeqGetSeqS(const AjPSeq seq);
char*        ajSeqGetSeqCopyC(const AjPSeq seq);
AjPStr       ajSeqGetSeqCopyS(const AjPSeq seq);
ajint        ajSeqCalcCheckgcg(const AjPSeq thys);
void         ajSeqClear(AjPSeq thys);
void         ajSeqComplement(AjPSeq thys);
void         ajSeqstrComplement(AjPStr* thys);
AjBool       ajSeqstrConvertNum(const AjPStr seq, const AjPSeqCvt cvt,
                                AjPStr* Pnumseq);
AjPFeattable ajSeqGetFeatCopy(const AjPSeq thys);
void         ajSeqCalcCount(const AjPSeq thys, ajint *b);
ajuint       ajSeqstrCountGaps(const AjPStr str);
void         ajSeqcvtDel(AjPSeqCvt* thys);
ajint        ajSeqcvtGetCodeK(const AjPSeqCvt thys, char ch);
ajint        ajSeqcvtGetCodeS(const AjPSeqCvt thys, const AjPStr ch);
ajint        ajSeqcvtGetCodeAsymS(const AjPSeqCvt cvt, const AjPStr str);
ajint        ajSeqcvtGetCodeAsymrowS(const AjPSeqCvt cvt, const AjPStr str);
ajuint       ajSeqcvtGetLen(const AjPSeqCvt thys);
AjPSeqCvt    ajSeqcvtNewC(const char* bases);
AjPSeqCvt    ajSeqcvtNewNumberC(const char* bases);
AjPSeqCvt    ajSeqcvtNewEndC(const char* bases);
AjPSeqCvt    ajSeqcvtNewStr(const AjPPStr bases, ajint n);
AjPSeqCvt    ajSeqcvtNewStrAsym(const AjPPStr bases, ajint n,
                                const AjPPStr rbases, ajint rn);
void         ajSeqcvtTrace(const AjPSeqCvt cvt);
AjPSeqDate   ajSeqdateNew(void);
AjPSeqDate   ajSeqdateNewDate(const AjPSeqDate date);
AjBool       ajSeqdateSetCreateS(AjPSeqDate date, const AjPStr datestr);
AjBool       ajSeqdateSetModifyS(AjPSeqDate date, const AjPStr datestr);
AjBool       ajSeqdateSetModseqS(AjPSeqDate date, const AjPStr datestr);
void         ajSeqdateClear(AjPSeqDate date);
void         ajSeqdateDel(AjPSeqDate*);
AjBool       ajSeqdateExists(const AjPSeqDate thys);
AjPSeqDesc   ajSeqdescNew(void);
AjPSeqDesc   ajSeqdescNewDesc(const AjPSeqDesc);
void         ajSeqdescClear(AjPSeqDesc desc);
void         ajSeqdescDel(AjPSeqDesc*);
AjBool       ajSeqdesclistClone(const AjPList src, AjPList dest);
AjPSeqSubdesc ajSeqsubdescNew(void);
AjPSeqSubdesc ajSeqsubdescNewSubdesc(const AjPSeqSubdesc);
void         ajSeqsubdescClear(AjPSeqSubdesc desc);
void         ajSeqsubdescDel(AjPSeqSubdesc*);
AjBool       ajSeqsubdesclistClone(const AjPList src, AjPList dest);
AjPSeqGene   ajSeqgeneNew(void);
AjPSeqGene   ajSeqgeneNewGene(const AjPSeqGene gene);
AjPSeqGene   ajSeqgeneNewName(const AjPStr str);
void         ajSeqgeneDel(AjPSeqGene*);
AjPSeqRange  ajSeqrangeNew(void);
AjPSeqRange  ajSeqrangeNewRange(const AjPSeqRange range);
AjPSeqRange  ajSeqrangeNewValues(ajulong pos, ajulong len, const AjPStr qry);
void         ajSeqrangeDel(AjPSeqRange* Prange);
AjBool       ajSeqrangeSetQuery(AjPSeqRange range, const AjPStr qry);
AjBool       ajSeqrangeSetRange(AjPSeqRange range, ajulong pos, ajulong len);
AjPSeqRef    ajSeqrefNew(void);
AjPSeqRef    ajSeqrefNewRef(const AjPSeqRef);
void         ajSeqrefDel(AjPSeqRef*);
AjPSeqXref   ajSeqxrefNew(void);
AjPSeqXref   ajSeqxrefNewDbC(const AjPStr id, const char* db, ajuint reftype);
AjPSeqXref   ajSeqxrefNewDbS(const AjPStr id, const AjPStr db, ajuint reftype);
AjPSeqXref   ajSeqxrefNewRef(const AjPSeqXref);
void         ajSeqxrefDel(AjPSeqXref*);
AjBool       ajSeqdescAppendName(AjPSeqDesc desc, const AjPStr str);
AjBool       ajSeqdescSetName(AjPSeqDesc desc, const AjPStr str);
AjBool       ajSeqsubdescAppendName(AjPSeqSubdesc desc, const AjPStr str);
AjBool       ajSeqsubdescSetName(AjPSeqSubdesc desc, const AjPStr str);
AjBool       ajSeqgeneAppendName(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgeneAppendSynonyms(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgeneAppendOrf(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgeneAppendOln(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgeneSetName(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgeneSetSynonyms(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgeneSetOrf(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgeneSetOln(AjPSeqGene gene, const AjPStr str);
AjBool       ajSeqgenelistClone(const AjPList src, AjPList dest);
AjBool       ajSeqrefAppendAuthors(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefAppendComment(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefAppendGroupname(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefAppendLocation(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefAppendPosition(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefAppendTitle(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefAppendXref(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefFmtAuthorsEmbl(const AjPSeqRef ref, AjPStr* Pdest);
AjBool       ajSeqrefFmtAuthorsGb(const AjPSeqRef ref, AjPStr* Pdest);
AjBool       ajSeqrefFmtLocationEmbl(const AjPSeqRef ref, AjPStr* Pdest);
AjBool       ajSeqrefFmtLocationGb(const AjPSeqRef ref, AjPStr* Pdest);
AjBool       ajSeqrefFmtTitleGb(const AjPSeqRef ref, AjPStr* Pdest);
AjBool       ajSeqreflistClone(const AjPList src, AjPList dest);
ajuint       ajSeqreflistGetXrefs(const AjPList src, AjPList *Plist);
AjBool       ajSeqrefSetAuthors(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefSetComment(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefSetGroupname(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefSetLocation(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefSetLoctype(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefSetnumNumber(AjPSeqRef ref, ajuint num);
AjBool       ajSeqrefSetPosition(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefSetTitle(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefSetXref(AjPSeqRef ref, const AjPStr str);
AjBool       ajSeqrefStandard(AjPSeqRef ref);
AjBool       ajSeqxreflistClone(const AjPList src, AjPList dest);
AjBool       ajSeqxreflistSort(AjPList list);
void         ajSeqSetCircular(AjPSeq seq);
void         ajSeqSetName(AjPSeq thys, const AjPStr setname);
void         ajSeqSetNameMulti(AjPSeq thys, const AjPStr setname);
void         ajSeqDel(AjPSeq* pthis);
void         ajSeqDelarray(AjPSeq **PPseq);
ajuint       ajSeqGetEnd(const AjPSeq seq);
void         ajSeqExit(void);
void         ajSeqGapFill(AjPSeq seq, ajuint len);
ajuint       ajSeqCountGaps(const AjPSeq seq);
void         ajSeqGapStandard(AjPSeq thys, char gapch);
const char*  ajSeqGetAccC(const AjPSeq thys);
const AjPStr ajSeqGetAccS(const AjPSeq thys);
const char*  ajSeqGetDbC(const AjPSeq thys);
const AjPStr ajSeqGetDbS(const AjPSeq thys);
const char*  ajSeqGetDescC(const AjPSeq thys);
const AjPStr ajSeqGetDescS(const AjPSeq thys);
const char*  ajSeqGetEntryC(const AjPSeq thys);
const AjPStr ajSeqGetEntryS(const AjPSeq thys);
const AjPFeattable ajSeqGetFeat(const AjPSeq thys);
const char*  ajSeqGetGiC(const AjPSeq thys);
const AjPStr ajSeqGetGiS(const AjPSeq thys);
const char*  ajSeqGetNameC(const AjPSeq thys);
const AjPStr ajSeqGetNameS(const AjPSeq thys);
ajuint       ajSeqGetOffend(const AjPSeq seq);
ajuint       ajSeqGetOffset(const AjPSeq seq);
ajuint       ajSeqGetRange(const AjPSeq thys, ajint* begin, ajint* end);
AjBool       ajSeqGetRev(const AjPSeq thys);
const char*  ajSeqGetSvC(const AjPSeq thys);
const AjPStr ajSeqGetSvS(const AjPSeq thys);
const char*  ajSeqGetTaxC(const AjPSeq thys);
const AjPStr ajSeqGetTaxS(const AjPSeq thys);
ajuint       ajSeqGetTaxid(const AjPSeq seq);
const char*  ajSeqGetUsaC(const AjPSeq thys);
const AjPStr ajSeqGetUsaS(const AjPSeq thys);
ajuint       ajSeqGetXrefs(const AjPSeq thys, AjPList list);
AjBool       ajSeqIsCircular(const AjPSeq thys);
AjBool       ajSeqIsNuc(const AjPSeq thys);
AjBool       ajSeqIsProt(const AjPSeq thys);
ajuint       ajSeqGetLen(const AjPSeq seq);
ajuint       ajSeqGetLenTrimmed(const AjPSeq seq);
ajuint       ajSeqGetLenUngapped(const AjPSeq seq);
const char*  ajSeqclsGetEmbl(const AjPStr cls);
const char*  ajSeqclsGetGb(const AjPStr cls);
AjBool       ajSeqclsSetEmbl(AjPStr *cls, const AjPStr clsembl);
AjBool       ajSeqclsSetGb(AjPStr *cls, const AjPStr clsembl);
const char*  ajSeqdivGetEmbl(const AjPStr divi);
const char*  ajSeqdivGetGb(const AjPStr divi);
AjBool       ajSeqdivSetEmbl(AjPStr *Pdivi, const AjPStr divembl);
AjBool       ajSeqdivSetGb(AjPStr *Pdivi, const AjPStr divembl);
const char*  ajSeqmolGetEmbl(const AjPStr mol);
const char*  ajSeqmolGetGb(const AjPStr mol);
AjBool       ajSeqmolSetEmbl(AjPStr *mol, const AjPStr molembl);
AjBool       ajSeqmolSetGb(AjPStr *mol, const AjPStr molgb);
void         ajSeqSetUnique(AjPSeq seq);
float        ajSeqCalcMolwt(const AjPSeq seq);
float        ajSeqstrCalcMolwt(const AjPStr seq);
AjPSeq       ajSeqNew(void);
AjPSeq       ajSeqNewNameC(const char* txt, const char* name);
AjPSeq       ajSeqNewNameS(const AjPStr str, const AjPStr name);
AjPSeq       ajSeqNewRefseq(const AjPRefseq refseq);
AjPSeq       ajSeqNewRes(size_t size);
AjPSeq       ajSeqNewSeq(const AjPSeq seq);
AjPSeq       ajSeqNewRangeC(const char* txt,
                            ajint offset, ajint offend, AjBool rev);
AjPSeq       ajSeqNewRangeS(const AjPStr str,
                            ajint offset, ajint offend, AjBool rev);
AjBool       ajSeqConvertNum(const AjPSeq thys, const AjPSeqCvt cvt,
                             AjPStr *numseq);
AjBool       ajSeqIsReversedTrue(const AjPSeq seq);
AjBool       ajSeqIsReversed(const AjPSeq thys);
AjBool       ajSeqIsSpeciesBsubtilis(const AjPSeq seq);
AjBool       ajSeqIsSpeciesHuman(const AjPSeq seq);
AjBool       ajSeqIsSpeciesMouse(const AjPSeq seq);
AjBool       ajSeqIsSpeciesYeast(const AjPSeq seq);
AjBool       ajSeqIsTaxon(const AjPSeq seq, ajuint taxid);
AjBool       ajSeqIsTrimmed(const AjPSeq thys);
void         ajSeqReverseDo(AjPSeq thys);
void         ajSeqReverseForce(AjPSeq thys);
void         ajSeqstrReverse(AjPStr* thys);
void         ajSeqReverseOnly(AjPSeq thys);
ajuint       ajSeqsetGetBegin(const AjPSeqset seq);
void         ajSeqsetClear(AjPSeqset seq);
void         ajSeqsetDel(AjPSeqset *thys);
void         ajSeqsetDelarray(AjPSeqset **thys);
ajuint       ajSeqsetGetEnd(const AjPSeqset seq);
ajint        ajSeqsetFill(AjPSeqset seq);
const AjPStr ajSeqsetGetFormat(const AjPSeqset thys);
const char*  ajSeqsetGetNameC(const AjPSeqset thys);
const AjPStr ajSeqsetGetNameS(const AjPSeqset thys);
ajint        ajSeqsetGetOffend(const AjPSeqset seq);
ajint        ajSeqsetGetOffset(const AjPSeqset seq);
ajint        ajSeqsetGetRange(const AjPSeqset thys, ajint* begin, ajint* end);
const AjPSeq ajSeqsetGetseqSeq(const AjPSeqset thys, ajuint i);
const char*  ajSeqsetGetseqSeqC(const AjPSeqset thys, ajuint i);
const AjPStr ajSeqsetGetseqSeqS(const AjPSeqset thys, ajuint i);
AjPSeq*      ajSeqsetGetSeqarray(const AjPSeqset thys);
ajint        ajSeqsetGetTotlength(const AjPSeqset seq);
const AjPStr ajSeqsetGetUsa(const AjPSeqset thys);
const AjPStr ajSeqsetGetFilename(const AjPSeqset thys);
AjBool       ajSeqsetIsDna(const AjPSeqset thys);
AjBool       ajSeqsetIsNuc(const AjPSeqset thys);
AjBool       ajSeqsetIsProt(const AjPSeqset thys);
AjBool       ajSeqsetIsRna(const AjPSeqset thys);
ajuint       ajSeqsetGetLen(const AjPSeqset seq);
const char*  ajSeqsetGetseqAccC(const AjPSeqset seq, ajuint i);
const AjPStr ajSeqsetGetseqAccS(const AjPSeqset seq, ajuint i);
const char*  ajSeqsetGetseqNameC(const AjPSeqset seq, ajuint i);
const AjPStr ajSeqsetGetseqNameS(const AjPSeqset seq, ajuint i);
AjPSeqset    ajSeqsetNew(void);
void         ajSeqSetOffsets(AjPSeq seq, ajint ioff, ajint ioriglen);
void         ajSeqSetRange(AjPSeq seq, ajint ibegin, ajint iend);
void         ajSeqSetRangeRev(AjPSeq seq, ajint ibegin, ajint iend);
void         ajSeqsetReverse(AjPSeqset thys);
void         ajSeqsetSetRange(AjPSeqset seq, ajint ibegin, ajint iend);
ajuint       ajSeqsetGetSize(const AjPSeqset seq);
void         ajSeqsetFmtLower(AjPSeqset seq);
void         ajSeqsetFmtUpper(AjPSeqset seq);
float        ajSeqsetGetTotweight(const AjPSeqset seq);
void         ajSeqsetSortLen(AjPSeqset seq);
void         ajSeqsetTrim(AjPSeqset thys);
float        ajSeqsetGetseqWeight(const AjPSeqset seq, ajuint i);
void         ajSeqFmtLower(AjPSeq thys);
void         ajSeqFmtUpper(AjPSeq thys);
void         ajSeqTagRev(AjPSeq seq);
void         ajSeqTrace(const AjPSeq seq);
void         ajSeqTraceTitle(const AjPSeq seq, const char* title);
void         ajSeqTrim(AjPSeq thys);
ajuint       ajSeqGetBeginTrue(const AjPSeq seq);
ajuint       ajSeqGetEndTrue(const AjPSeq seq);
ajuint       ajSeqGetLenTrue(const AjPSeq seq);
ajint        ajSeqCalcTruepos(const AjPSeq thys, ajint ipos);
ajint        ajSeqCalcTrueposMin(const AjPSeq thys, ajint imin, ajint ipos);

/*
** End of prototype definitions
*/

/*
**  These prototypes do not have any corresponding .c code so cannot
**  go into the block above, otherwise the VC compilation will fail
*/

const char*  ajSeqdivGetDdbj(const AjPStr divi);
AjBool       ajSeqdivSetDdbj(AjPStr *Pdivi, const AjPStr divembl);
const char*  ajSeqmolGetDdbj(const AjPStr mol);
AjBool       ajSeqmolSetDdbj(AjPStr *mol, const AjPStr molddbj);

/* End of prototypes without C code */




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated ajint ajSeqallBegin(const AjPSeqall seq);
__deprecated ajint ajSeqallEnd(const AjPSeqall seq);
__deprecated ajint ajSeqallGetRange(const AjPSeqall seq,
                                    ajint* begin, ajint* end);
__deprecated void ajSeqsetToLower(AjPSeqset seqset);
__deprecated void ajSeqsetToUpper(AjPSeqset seqset);

__deprecated AjPSeq       ajSeqNewC(const char* seq, const char* name);
__deprecated AjPSeq       ajSeqNewStr(const AjPStr str);
__deprecated AjPSeq       ajSeqNewRange(const AjPStr seq,
                                        ajint offset, ajint offend,
                                        AjBool rev);
__deprecated AjPSeq       ajSeqNewRangeCI(const char* seq, ajint len,
                                          ajint offset, ajint offend,
                                          AjBool rev);
__deprecated AjPSeq       ajSeqNewL(size_t size);
__deprecated AjPSeq       ajSeqNewS(const AjPSeq seq);

__deprecated void         ajSeqAssAcc(AjPSeq thys, const AjPStr str);
__deprecated void         ajSeqAssAccC(AjPSeq thys, const char* text);
__deprecated void         ajSeqAssDesc(AjPSeq thys, const AjPStr str);
__deprecated void         ajSeqAssDescC(AjPSeq thys, const char* text);
__deprecated void         ajSeqAssEntry(AjPSeq thys, const AjPStr str);
__deprecated void         ajSeqAssEntryC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssFile(AjPSeq thys, const AjPStr str);
__deprecated void          ajSeqAssFileC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssFull(AjPSeq thys, const AjPStr str);
__deprecated void          ajSeqAssFullC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssGi(AjPSeq thys, const AjPStr str);
__deprecated void          ajSeqAssGiC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssName(AjPSeq thys, const AjPStr str);
__deprecated void          ajSeqAssNameC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssSeq(AjPSeq seq, const AjPStr str);
__deprecated void          ajSeqAssSeqC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssSeqCI(AjPSeq thys, const char* text,
                                         ajint ilen);
__deprecated void          ajSeqAssSvC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssSv(AjPSeq thys, const AjPStr str);
__deprecated void          ajSeqAssUfo(AjPSeq thys, const AjPStr str);
__deprecated void          ajSeqAssUfoC(AjPSeq thys, const char* text);
__deprecated void          ajSeqAssUsa(AjPSeq thys, const AjPStr str);
__deprecated void          ajSeqAssUsaC(AjPSeq thys, const char* text);

__deprecated void          ajSeqSetRangeDir(AjPSeq seq,
                                            ajint ibegin, ajint iend,
                                            AjBool rev);
__deprecated void          ajSeqReplace(AjPSeq thys, const AjPStr seq);
__deprecated void          ajSeqReplaceC(AjPSeq thys, const char* seq);
__deprecated void          ajSeqMakeUsa(AjPSeq thys, const AjPSeqin seqin);
__deprecated void          ajSeqMakeUsaS(const AjPSeq thys,
                                         const AjPSeqin seqin, AjPStr* usa);
__deprecated void          ajSeqCompOnly(AjPSeq thys);
__deprecated void          ajSeqToLower(AjPSeq thys);
__deprecated void          ajSeqToUpper(AjPSeq thys);
__deprecated void          ajSeqRevOnly(AjPSeq thys);
__deprecated AjBool        ajSeqReverse(AjPSeq thys);

__deprecated const AjPStr  ajSeqGetAcc(const AjPSeq thys);
__deprecated ajint         ajSeqBegin(const AjPSeq seq);
__deprecated ajint         ajSeqTrueBegin(const AjPSeq seq);
__deprecated const AjPStr  ajSeqGetDesc(const AjPSeq thys);
__deprecated ajint         ajSeqEnd(const AjPSeq seq);
__deprecated ajint         ajSeqTrueEnd(const AjPSeq seq);
__deprecated const AjPStr  ajSeqGetEntry(const AjPSeq thys);
__deprecated AjPFeattable  ajSeqCopyFeat(const AjPSeq thys);
__deprecated const AjPStr  ajSeqGetGi(const AjPSeq thys);
__deprecated ajint         ajSeqLen(const AjPSeq seq);
__deprecated ajint         ajSeqTrueLen(const AjPSeq seq);
__deprecated const char*   ajSeqName(const AjPSeq seq);
__deprecated const AjPStr  ajSeqGetName(const AjPSeq thys);
__deprecated ajint         ajSeqOffend(const AjPSeq seq);
__deprecated ajint         ajSeqOffset(const AjPSeq seq);
__deprecated AjBool        ajSeqGetReverse(const AjPSeq thys);
__deprecated AjBool        ajSeqGetReversed(const AjPSeq thys);

__deprecated const AjPStr  ajSeqStr(const AjPSeq thys);
__deprecated const char*   ajSeqChar(const AjPSeq thys);
__deprecated AjPStr        ajSeqStrCopy(const AjPSeq thys);
__deprecated char*         ajSeqCharCopy(const AjPSeq seq);
__deprecated char*         ajSeqCharCopyL(const AjPSeq seq, size_t size);
__deprecated const AjPStr  ajSeqGetSv(const AjPSeq thys);
__deprecated const AjPStr  ajSeqGetTax(const AjPSeq thys);
__deprecated const AjPStr  ajSeqGetUsa(const AjPSeq thys);

__deprecated AjBool        ajSeqRev(const AjPSeq thys);
__deprecated ajint         ajSeqCheckGcg(const AjPSeq thys);
__deprecated void          ajSeqCount(const AjPSeq thys, ajint *b);

__deprecated ajint         ajSeqPos(const AjPSeq thys, ajint ipos);
__deprecated ajint         ajSeqPosI(const AjPSeq thys,
                                     ajint imin, ajint ipos);
__deprecated ajint         ajSeqPosII(ajint ilen, ajint imin, ajint ipos);

__deprecated ajint         ajSeqTruePos(const AjPSeq thys, ajint ipos);
__deprecated ajint         ajSeqTruePosI(const AjPSeq thys, ajint imin,
                                         ajint ipos);
__deprecated ajint         ajSeqTruePosII(ajint ilen, ajint imin, ajint ipos);

__deprecated void          ajSeqallReverse(AjPSeqall thys);
__deprecated void          ajSeqallToLower(AjPSeqall seqall);
__deprecated void          ajSeqallToUpper(AjPSeqall seqall);
__deprecated void          ajSeqReverseStr(AjPStr* thys);
__deprecated void          ajSeqCompOnlyStr(AjPStr* thys);

__deprecated float         ajSeqMW(const AjPStr seq);
__deprecated ajuint        ajSeqCrc(const AjPStr seq);

__deprecated void         ajSeqCvtDel(AjPSeqCvt* thys);
__deprecated ajint        ajSeqCvtK(const AjPSeqCvt thys, char ch);
__deprecated ajint        ajSeqCvtKS(const AjPSeqCvt thys, const AjPStr ch);
__deprecated ajint        ajSeqCvtKSRow(const AjPSeqCvt thys,
                                        const AjPStr ch);
__deprecated ajint        ajSeqCvtKSColumn(const AjPSeqCvt thys,
                                           const AjPStr ch);
__deprecated ajint        ajSeqCvtLen(const AjPSeqCvt thys);
__deprecated AjPSeqCvt    ajSeqCvtNew(const char* bases);
__deprecated AjPSeqCvt    ajSeqCvtNewText(const char* bases);
__deprecated AjPSeqCvt    ajSeqCvtNewZero(const char* bases);
__deprecated AjPSeqCvt    ajSeqCvtNewZeroS(const AjPPStr bases, ajint n);
__deprecated AjPSeqCvt    ajSeqCvtNewZeroSS(const AjPPStr bases, ajint n,
                                            const AjPPStr rbases, ajint rn);
__deprecated void         ajSeqCvtTrace(const AjPSeqCvt cvt);

__deprecated AjBool       ajIsAccession(const AjPStr accnum);
__deprecated const AjPStr ajIsSeqversion(const AjPStr sv);
__deprecated ajint        ajSeqallLen(const AjPSeqall seqall);
__deprecated const AjPStr ajSeqallGetNameSeq(const AjPSeqall thys);
__deprecated void         ajSeqComplementOnly(AjPSeq pthis);
__deprecated void         ajSeqstrComplementOnly(AjPStr* thys);
__deprecated ajuint       ajSeqCalcCrc(const AjPSeq seq);
__deprecated void         ajSeqDefName(AjPSeq thys, const AjPStr setname,
                                       AjBool multi);
__deprecated ajint        ajSeqFill(AjPSeq seq, ajint len);
__deprecated ajint        ajSeqGapCount(const AjPSeq thys);
__deprecated ajint        ajSeqGapCountS(const AjPStr str);
__deprecated void         ajSeqGapStandardS(AjPStr thys, char gapch);
__deprecated void         ajSeqMod(AjPSeq thys);
__deprecated AjBool       ajSeqNum(const AjPSeq thys, const AjPSeqCvt cvt,
                                   AjPStr *numseq);
__deprecated AjBool       ajSeqNumS(const AjPStr thys, const AjPSeqCvt cvt,
                                    AjPStr *numseq);
__deprecated ajint        ajSeqsetBegin(const AjPSeqset seq);
__deprecated ajint        ajSeqsetEnd(const AjPSeqset seq);
__deprecated const AjPStr ajSeqsetGetName(const AjPSeqset thys);
__deprecated const AjPSeq ajSeqsetGetSeq(const AjPSeqset thys, ajint i);
__deprecated AjPSeq*      ajSeqsetGetSeqArray(const AjPSeqset thys);
__deprecated ajint        ajSeqsetLen(const AjPSeqset seq);
__deprecated const AjPStr ajSeqsetName(const AjPSeqset seq, ajint i);
__deprecated const AjPStr ajSeqsetAcc(const AjPSeqset seq, ajint i);
__deprecated const char*  ajSeqsetSeq(const AjPSeqset seq, ajint i);
__deprecated ajint        ajSeqsetSize(const AjPSeqset seq);
__deprecated float        ajSeqsetTotweight(const AjPSeqset seq);
__deprecated float        ajSeqsetWeight(const AjPSeqset seq, ajint i);
__deprecated void         ajSeqTraceT(const AjPSeq seq, const char* title);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJSEQ_H */
ajseqabi.h/     1414437289  1010  513   100644  3702      `
/* @include ajseqabi **********************************************************
**
** AJAX ABI format sequence processing functions
**
** These functions control all aspects of AJAX ABI file processing
**
** @author Copyright (C) 2000 Peter Rice
** @version $Revision: 1.7 $
** @modified 2000-2011 Peter Rice
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSEQABI_H
#define AJSEQABI_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajarr.h"
#include "ajstr.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

ajint      ajSeqABIGetBaseOffset(AjPFile fp);
void       ajSeqABIGetBasePosition(AjPFile fp,ajlong numBases,
                                   AjPShort* basePositions);
ajint      ajSeqABIGetBasePosOffset(AjPFile fp);
float      ajSeqABIGetBaseSpace(AjPFile fp);
ajint      ajSeqABIGetConfidOffset(AjPFile fp);
void       ajSeqABIGetData(AjPFile fp,const ajlong *Offset,ajlong numPoints,
                           AjPInt2d trace);
ajint      ajSeqABIGetFWO(AjPFile fp);
ajint      ajSeqABIGetNBase(AjPFile fp);
ajint      ajSeqABIGetNData(AjPFile fp);
ajint      ajSeqABIGetPrimerOffset(AjPFile fp);
ajint      ajSeqABIGetPrimerPosition(AjPFile fp);
void       ajSeqABIGetSignal(AjPFile fp,ajlong fwo_,
                             ajshort *sigC,ajshort *sigA,
                             ajshort *sigG,ajshort *sigT);
AjBool     ajSeqABIGetTraceOffset(AjPFile fp, ajlong *Offset);
AjBool     ajSeqABIMachineName(AjPFile fp,AjPStr *machine);
AjBool     ajSeqABIReadConfid(AjPFile fp,ajlong pconO,ajlong numBases,
                              float *Pqual);
AjBool     ajSeqABIReadSeq(AjPFile fp,ajlong baseO,ajlong numBases,
                           AjPStr* nseq);
AjBool     ajSeqABISampleName(AjPFile fp, AjPStr *sample);
AjBool     ajSeqABITest(AjPFile fp);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJSEQABI_H */
ajseqbam.h/     1414437289  1010  513   100644  15082     `
/* @include ajseqbam **********************************************************
**
** AJAX BAM format sequence processing functions
**
** These functions control all aspects of AJAX BAM file processing
**
** @author Copyright (C) 2010 Peter Rice ported from samtools
** @version $Revision: 1.21 $
** @modified 2010-2011 Peter Rice
** @modified $Date: 2012/07/02 17:24:52 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

/* The MIT License
**
**   Copyright (c) 2008 Genome Research Ltd (GRL).
**
**   Permission is hereby granted, free of charge, to any person obtaining
**   a copy of this software and associated documentation files (the
**   "Software"), to deal in the Software without restriction, including
**   without limitation the rights to use, copy, modify, merge, publish,
**   distribute, sublicense, and/or sell copies of the Software, and to
**   permit persons to whom the Software is furnished to do so, subject to
**   the following conditions:
**
**   The above copyright notice and this permission notice shall be
**   included in all copies or substantial portions of the Software.
**
**   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
**   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
**   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
**   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
**   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
**   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
**   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**   SOFTWARE.
*/

/* Contact: Heng Li <lh3@sanger.ac.uk> */

/*
** much modified for EMBOSS by Peter Rice pmr@ebi.ac.uk May 2010
** lists changed to AjPList
** hashes changed to AjPTable
** strings changed to AjPStr
** fixed-length datatypes int32_t etc. changed to EMBOSS types
*/

#ifndef AJSEQBAM_H
#define AJSEQBAM_H

/*
**  BAM library provides I/O and various operations on manipulating files
**  in the BAM (Binary Alignment/Mapping) or SAM (Sequence Alignment/Map)
**  format. It now supports importing from or exporting to TAM, sorting,
**  merging, generating pileup, and quickly retrieval of reads overlapped
**  with a specified region.
**
**  copyright Genome Research Ltd.
*/

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajlist.h"
#include "ajtable.h"

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "zlib.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#ifdef WIN32
#define inline __inline
#endif /* WIN32 */

/* The read is paired in sequencing, no matter whether it is mapped in a pair */
#define BAM_FPAIRED        1

/* The read is mapped in a proper pair */
#define BAM_FPROPER_PAIR   2

/* The read itself is unmapped; conflictive with BAM_FPROPER_PAIR */
#define BAM_FUNMAP         4

/* The mate is unmapped */
#define BAM_FMUNMAP        8

/* The read is mapped to the reverse strand */
#define BAM_FREVERSE      16

/* The mate is mapped to the reverse strand */
#define BAM_FMREVERSE     32

/* This is read1 */
#define BAM_FREAD1        64

/* This is read2 */
#define BAM_FREAD2       128

/* Not primary alignment */
#define BAM_FSECONDARY   256

/* QC failure */
#define BAM_FQCFAIL      512

/* Optical or PCR duplicate */
#define BAM_FDUP        1024


#define BAM_OFDEC          0
#define BAM_OFHEX          1
#define BAM_OFSTR          2


/* Default mask for pileup */
#define BAM_DEF_MASK (BAM_FUNMAP | BAM_FSECONDARY | BAM_FQCFAIL | BAM_FDUP)

#define BAM_CORE_SIZE   sizeof(AjOSeqBamCore)

/*
** Describing how CIGAR operation/length is packed in a 32-bit integer.
*/

#define BAM_CIGAR_SHIFT 4
#define BAM_CIGAR_MASK  ((1 << BAM_CIGAR_SHIFT) - 1)

/*
**  CIGAR operations.
*/

/* CIGAR: M match or mismatch */
#define BAM_CMATCH      0

/* CIGAR: I insertion to the reference */
#define BAM_CINS        1

/* CIGAR: D deletion from the reference */
#define BAM_CDEL        2

/* CIGAR: N skip on the reference (e.g. spliced alignment) */
#define BAM_CREF_SKIP   3

/* CIGAR: S clip on the read with clipped sequence present in qseq */
#define BAM_CSOFT_CLIP  4

/* CIGAR: H clip on the read with clipped sequence trimmed off */
#define BAM_CHARD_CLIP  5

/* CIGAR: P padding */
#define BAM_CPAD        6

/* CIGAR: = match */
#define BAM_CEQUAL        7

/* CIGAR: X mismatch */
#define BAM_CDIFF        8


extern const char* cigarcode;
extern const char* bam_nt16_rev_table;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPSeqBamBgzf ********************************************************
**
** BGZF file handling object
**
** @alias AjOSeqBamBgzf
** @alias AjSSeqBamBgzf
**
** @attr file [FILE*] File object
** @attr cache [AjPTable] Block cache
** @attr uncompressed_block [void*] Uncompressed block data
** @attr compressed_block [void*] Compressed block data
** @attr error [const char*] Error description
** @attr block_address [ajlong] Block offset
** @attr file_descriptor [int] File descriptor
** @attr cache_size [int] Cache size
** @attr uncompressed_block_size [int] Uncompressed block size
** @attr compressed_block_size [int] Compressed block size
** @attr block_length [int] Block length
** @attr block_offset [int] Block offset
** @attr open_mode [char] Open_mode 'r' or 'w'
** @attr owned_file [char] Boolean
** @attr is_uncompressed [char] Boolean
** @attr Padding [char[5]] Padding
**
******************************************************************************/

typedef struct AjSSeqBamBgzf
{
    FILE* file;
    AjPTable cache;
    void* uncompressed_block;
    void* compressed_block;
    const char* error;
    ajlong block_address;
    int file_descriptor;
    int cache_size;
    int uncompressed_block_size;
    int compressed_block_size;
    int block_length;
    int block_offset;
    char open_mode;
    char owned_file;
    char is_uncompressed;
    char Padding[5];
} AjOSeqBamBgzf;

#define AjPSeqBamBgzf AjOSeqBamBgzf*




#define BAM_VIRTUAL_OFFSET16




/* #abstract BAM file handler */

/* @data AjPSeqBamHeader ******************************************************
**
** BAM alignment file header data
**
** @attr  target_name [char**] names of the reference sequences
** @attr  target_len  [ajuint*] lengths of the reference sequences
** @attr  dict        [AjPList] header dictionary
** @attr  hash        [AjPTable] hash table for fast name lookup
** @attr  rg2lib      [AjPTable] hash table for @RG-ID -> LB lookup
** @attr  text        [char*] plain text
** @attr  n_targets   [ajint] number of reference sequences
** @attr  l_text      [ajint] length of the plain text in the header
**
** @@
** discussion Field hash points to null by default. It is a private
**  member.
******************************************************************************/

typedef struct AjSSeqBamheader
{
    char **target_name;
    ajuint *target_len;
    AjPList dict;
    AjPTable hash;
    AjPTable rg2lib;
    char *text;
    ajint n_targets;
    ajint l_text;
} AjOSeqBamHeader;

#define AjPSeqBamHeader AjOSeqBamHeader*




/* @data AjPSeqBamCore ********************************************************
**
** Structure for core alignment information.
**
** @attr  tid     [ajint]  read ID, defined by AjPSeqBamheader
** @attr  pos     [ajint]  0-based leftmost coordinate
** @attr  bin     [ajushort]  bin calculated by ajSeqBamReg2bin()
** @attr  qual    [unsigned char]  mapping quality
** @attr  l_qname [unsigned char]  length of the query name
** @attr  flag    [ajushort]  bitwise flag
** @attr  n_cigar [ajushort]  number of CIGAR operations
** @attr  l_qseq  [ajint]  length of the query sequence (read)
** @attr  mtid    [ajint]  paired read (mate) ID
** @attr  mpos    [ajint]  paired read (mate) position
** @attr  isize   [ajint]  insert size for paired reads
******************************************************************************/

typedef struct AjSBamSeqCore
{
    ajint tid;
    ajint pos;
    ajushort bin;
    unsigned char qual;
    unsigned char l_qname;
    ajushort flag;
    ajushort n_cigar;
    ajint l_qseq;
    ajint mtid;
    ajint mpos;
    ajint isize;
} AjOSeqBamCore;

#define AjPSeqBamCore AjOSeqBamCore*




/* @data AjPSeqBam ************************************************************
**
** Structure for one alignment.
**
** @alias AjSSeqBam
** @alias AjOSeqBam
**
** @attr  core      [AjOSeqBamCore]  core information about the alignment
** @attr  data      [unsigned char*] all variable-length data, concatenated;
**                             structure: cigar-qname-seq-qual-aux
** @attr  l_aux      [int]  length of auxiliary data
** @attr  data_len   [int]  current length of data
** @attr  m_data     [int]  maximum reserved size of data
** @attr  Padding    [int]  Padding to alignment boundary
**
** @@
** discussion Notes:
**
**   1. qname is zero tailed and core.l_qname includes the tailing '\0'.
**
**   2. l_qseq is calculated from the total length of an alignment block
**      on reading or from CIGAR.
******************************************************************************/

typedef struct AjSSeqBam
{
    AjOSeqBamCore core;
    unsigned char *data;
    int l_aux;
    int data_len;
    int m_data;
    int Padding;
} AjOSeqBam;

#define AjPSeqBam AjOSeqBam*



/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




#define MAJSEQBAMSTRAND(b) (((b)->core.flag&BAM_FREVERSE) != 0)
#define MAJSEQBAMMSTRAND(b) (((b)->core.flag&BAM_FMREVERSE) != 0)




/*
**  Get the CIGAR array
**  param  b  pointer to an alignment
**  return    pointer to the CIGAR array
**
**  In the CIGAR array, each element is a 32-bit integer. The
**  lower 4 bits gives a CIGAR operation and the higher 28 bits keep the
**  length of a CIGAR.
*/
#define MAJSEQBAMCIGAR(b) ((ajuint*)((b)->data + (b)->core.l_qname))


/*
**  Get the name of the query
**  param  b  pointer to an alignment
**  return    pointer to the name string, null terminated
*/
#define MAJSEQBAMQNAME(b) ((char*)((b)->data))


/*
**  Get query sequence
**  param  b  pointer to an alignment
**  return    pointer to sequence
**
**  Each base is encoded in 4 bits: 1 for A, 2 for C, 4 for G,
**  8 for T and 15 for N. Two bases are packed in one byte with the base
**  at the higher 4 bits having smaller coordinate on the read. It is
**  recommended to use bam1_seqi() macro to get the base.
*/
#define MAJSEQBAMSEQ(b) ((b)->data + (b)->core.n_cigar*4 + (b)->core.l_qname)


/*
**  Get query quality
**  param  b  pointer to an alignment
**  return    pointer to quality string
*/
#define MAJSEQBAMQUAL(b) ((b)->data + (b)->core.n_cigar*4 +             \
                          (b)->core.l_qname + ((b)->core.l_qseq + 1)/2)

/*
**  Get a base on read
**  param  s  Query sequence returned by bam1_seq()
**  param  i  The i-th position, 0-based
**  return    4-bit integer representing the base.
*/
#define MAJSEQBAMSEQI(s, i) ((s)[(i)/2] >> 4*(1-(i)%2) & 0xf)

/*
**  Get pointer to the list of auxiliary data
**  param  b  pointer to an alignment
**  return    pointer to the concatenated auxiliary data
*/
#define MAJSEQBAMAUX(b) ((b)->data + (b)->core.n_cigar*4 + \
			 (b)->core.l_qname + \
		         (b)->core.l_qseq + ((b)->core.l_qseq + 1)/2)

#ifndef kroundup32
/*
**  Round an integer to the next closest power-2 integer.
**  param  x  integer to be rounded (in place)
**  x will be modified.
*/
#define kroundup32(x) (--(x), (x)|=(x)>>1, (x)|=(x)>>2, (x)|=(x)>>4,    \
                       (x)|=(x)>>8, (x)|=(x)>>16, ++(x))
#endif /* !kroundup32 */




/*
** Prototype definitions
*/

void ajSeqBamAuxAppend(AjPSeqBam b, const char tag[2],
		       char type, int len, const unsigned char* data);

AjPSeqBamBgzf ajSeqBamBgzfNew(FILE* file, const char* mode);

AjPSeqBamBgzf ajSeqBamBgzfOpenfd(int fd, const char *mode);
AjPSeqBamBgzf ajSeqBamBgzfOpenC(const char* path, const char *mode);

ajuint ajSeqBamCalend(const AjPSeqBamCore c, const ajuint *cigar);

int ajSeqBamBgzfClose(AjPSeqBamBgzf fp);
int ajSeqBamBgzfEof(AjPSeqBamBgzf fp);
int ajSeqBamBgzfFlush(AjPSeqBamBgzf fp);
int ajSeqBamBgzfRead(AjPSeqBamBgzf fp, void* data, int length);
ajlong ajSeqBamBgzfSeek(AjPSeqBamBgzf fp, ajlong pos, int where);
AjBool ajSeqBamBgzfSetInfile(AjPSeqBamBgzf gzfile, AjPFile outf);
AjBool ajSeqBamBgzfSetOutfile(AjPSeqBamBgzf gzfile, AjPFile outf);
int ajSeqBamBgzfWrite(AjPSeqBamBgzf fp, const void* data, int length);

void ajSeqBamDel(AjPSeqBam *Pbam);

AjPSeqBamHeader ajSeqBamHeaderNew(void);
AjPSeqBamHeader ajSeqBamHeaderNewN(ajint n);
AjPSeqBamHeader ajSeqBamHeaderNewTextC(const char* txt);
AjPSeqBamHeader ajSeqBamHeaderRead(AjPSeqBamBgzf gzfile);
void ajSeqBamHeaderDel(AjPSeqBamHeader *Pheader);
int ajSeqBamHeaderWrite(AjPSeqBamBgzf fp, const AjPSeqBamHeader header);
AjPTable ajSeqBamHeaderGetRefseqTags(const AjPSeqBamHeader header);
AjPTable ajSeqBamHeaderGetReadgroupTags(const AjPSeqBamHeader header);
const char* ajSeqBamHeaderGetSortorder(const AjPSeqBamHeader header);
void ajSeqBamHeaderSetTextC(AjPSeqBamHeader header, const char* txt);

int ajSeqBamRead(AjPSeqBamBgzf fp, AjPSeqBam b);

int ajSeqBamReg2bin(ajuint beg, ajuint end);

int ajSeqBamValidate(const AjPSeqBamHeader header, const AjPSeqBam b);
int ajSeqBamWrite(AjPSeqBamBgzf fp, const AjPSeqBam b);

const char *ajSeqBamGetLibrary(AjPSeqBamHeader header, const AjPSeqBam b);

AjPTable ajSeqBamHeaderLineParse(const char *headerLine);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJSEQBAM_H */
ajseqdata.h/    1414437289  1010  513   100644  28547     `
/* @include ajseqdata *********************************************************
**
** AJAX SEQ (sequence) data structures
**
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.82 $
** @modified Jun 25 pmr First version
** @modified $Date: 2012/12/07 10:09:13 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSEQDATA_H
#define AJSEQDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"
#include "ajfeatdata.h"
#include "ajtime.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @enum AjEXrefType **********************************************************
**
** Enumerated cross-reference type
**
** @value XREF_UNKNOWN type not defined
** @value XREF_DR      DR line in EMBL, SwissProt
** @value XREF_DBXREF  db_xref in EMBL/Genbank
** @value XREF_EC      EC= in SwissProt
** @value XREF_DESC    Allergen= and CD_Antigen= in SwissProt DE
** @value XREF_TAX     NCBI_TaxID
** @value XREF_RX      RX line in EMBL or SwissProt
** @value XREF_MAX     Beyond last defined value
******************************************************************************/

typedef enum AjOXrefType
{
    XREF_UNKNOWN,
    XREF_DR,
    XREF_DBXREF,
    XREF_EC,
    XREF_DESC,
    XREF_TAX,
    XREF_RX,
    XREF_MAX
} AjEXrefType;




/* @data AjPSeqDesc ***********************************************************
**
** Ajax sequence description object.
**
** Defines the gene fields needed to support various standard
** sequence database entry formats, especially UniProt
**
** @alias AjSSeqDesc
** @alias AjOSeqDesc
**
** @attr Name [AjPStr] Recommended name (only one per sequence)
** @attr Short [AjPList] String list of short names
** @attr EC [AjPList] String list of EC numbers
** @attr Multi [AjPList] String list of multiple description lines
** @attr AltNames [AjPList] List of alternate description objects
** @attr SubNames [AjPList] List of submitted name objects
** @attr Includes [AjPList] List of names for included functional domains
** @attr Contains [AjPList] List of names for post-processing components
** @attr Precursor [AjBool] True if this is a precursor
** @attr Fragments [ajuint] 1 to mark as a fragment, more to mark as fragments
**
** @@
******************************************************************************/

typedef struct AjSSeqDesc
{
    AjPStr Name;
    AjPList Short;
    AjPList EC;
    AjPList Multi;
    AjPList AltNames;
    AjPList SubNames;
    AjPList Includes;
    AjPList Contains;
    AjBool Precursor;
    ajuint Fragments;
} AjOSeqDesc;

#define AjPSeqDesc AjOSeqDesc*




/* @data AjPSeqSubdesc ********************************************************
**
** Ajax sequence sub-description object.
**
** Defines the gene fields needed to support various standard
** sequence database entry formats, especially UniProt
**
** @alias AjSSeqSubdesc
** @alias AjOSeqSubdesc
**
** @attr Name [AjPStr] Recommended name (only one per sequence)
** @attr Short [AjPList] String list of short names
** @attr EC [AjPList] String list of EC numbers
** @attr Allergen [AjPList] String list of Ig-E mediated atopic allergens
** @attr Biotech [AjPList] String list of biotechnology context names
** @attr Cdantigen [AjPList] String list of Cell Differentiation antigens
** @attr Inn [AjPList] String list of International Non-proprietary Names
**
** @@
******************************************************************************/

typedef struct AjSSeqSubdesc
{
    AjPStr Name;
    AjPList Short;
    AjPList EC;
    AjPList Allergen;
    AjPList Biotech;
    AjPList Cdantigen;
    AjPList Inn;
} AjOSeqSubdesc;

#define AjPSeqSubdesc AjOSeqSubdesc*




/* @data AjPSeqGene ***********************************************************
**
** Ajax genes object.
**
** Defines the gene fields needed to support various standard
** sequence database entry formats, especially UniProt
**
** @alias AjSSeqGene
** @alias AjOSeqGene
**
** @attr Name [AjPStr] Gene standard name
** @attr Synonyms [AjPStr] Accepted synonyms
** @attr Orf [AjPStr] Recognised open reading frame (ORF) names
**                         usually for sequencing projects in progress
** @attr Oln [AjPStr] Ordered locus name(s) representing order on chromosome
** @@
******************************************************************************/

typedef struct AjSSeqGene
{
    AjPStr Name;
    AjPStr Synonyms;
    AjPStr Orf;
    AjPStr Oln;
} AjOSeqGene;

#define AjPSeqGene AjOSeqGene*




/* @data AjPSeqDate ***********************************************************
**
** Ajax sequence dates object.
**
** Defines the date fields needed to support various standard
** sequence database entry formats
**
** @alias AjSSeqDate
** @alias AjOSeqDate
**
** @attr CreDate [AjPTime] Creation date
** @attr ModDate [AjPTime] Entry modification date
** @attr SeqDate [AjPTime] Sequence modification date
** @attr CreRel [AjPStr] Database release when first released
** @attr ModRel [AjPStr] Database release when entry last changed
** @attr SeqRel [AjPStr] Database release when sequence last changed
** @attr CreVer [AjPStr] Entry version when last changed
** @attr ModVer [AjPStr] Entry version when last changed
** @attr SeqVer [AjPStr] Entry version when sequence last changed
** @@
******************************************************************************/

typedef struct AjSSeqDate
{
    AjPTime CreDate;
    AjPTime ModDate;
    AjPTime SeqDate;
    AjPStr CreRel;
    AjPStr ModRel;
    AjPStr SeqRel;
    AjPStr CreVer;
    AjPStr ModVer;
    AjPStr SeqVer;
} AjOSeqDate;

#define AjPSeqDate AjOSeqDate*




/* @data AjPSeqRange **********************************************************
**
** Ajax sequence range
**
** Defines the queries that map to positions in a sequence (or physical map)
**
** @alias AjSSeqRange
** @alias AjOSeqRange
**
** @attr Query [AjPStr] Query
** @attr Start [ajulong] Start position
** @attr Length [ajulong] Length
** @@
******************************************************************************/

typedef struct AjSSeqRange
{
    AjPStr Query;
    ajulong Start;
    ajulong Length;
} AjOSeqRange;

#define AjPSeqRange AjOSeqRange*




/* @data AjPSeqRef ************************************************************
**
** Ajax sequence citation object.
**
** Defines the fields needed to support various standard
** entry citation formats
**
** @alias AjSSeqRef
** @alias AjOSeqRef
**
** @attr Position [AjPStr] Sequence positions
** @attr Groupname [AjPStr] Working group or consortium
** @attr Authors [AjPStr] Author list, comma-delimited
** @attr Title [AjPStr] Title
** @attr Comment [AjPStr] Comment
** @attr Xref [AjPStr] Cross reference
** @attr Location [AjPStr] Location (journal, book, submission)
** @attr Loctype [AjPStr] Location type
** @attr Number [ajuint] Reference number. This may be used in the feature
**                       table and references can disappear so the position
**                       in the list is not enough
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSSeqRef
{
    AjPStr Position;
    AjPStr Groupname;
    AjPStr Authors;
    AjPStr Title;
    AjPStr Comment;
    AjPStr Xref;
    AjPStr Location;
    AjPStr Loctype;
    ajuint Number;
    char Padding[4];
} AjOSeqRef;

#define AjPSeqRef AjOSeqRef*




/* @data AjPSeqXref ***********************************************************
**
** Ajax sequence cross-reference object.
**
** Defines the fields needed to support various standard
** entry cross-reference formats
**
** @alias AjSSeqXref
** @alias AjOSeqXref
**
** @attr Db [AjPStr] Database name
** @attr Id [AjPStr] Primary identifier
** @attr Secid [AjPStr] Secondary identifier
** @attr Terid [AjPStr] Tertiary identifier
** @attr Quatid [AjPStr] Quaternary identifier
** @attr Type [ajuint] Type of cross-reference
** @attr Start [ajuint] Start position
** @attr End [ajuint] End position
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSSeqXref
{
    AjPStr Db;
    AjPStr Id;
    AjPStr Secid;
    AjPStr Terid;
    AjPStr Quatid;
    ajuint Type;
    ajuint Start;
    ajuint End;
    char Padding[4];
} AjOSeqXref;

#define AjPSeqXref AjOSeqXref*




/* @data AjPSeq ***************************************************************
**
** Ajax Sequence object.
**
** Holds the sequence itself, plus associated information such as a
** sequence name, accession number, format, type.
**
** Also holds information on a selected sequence range and other
** options.
**
** Sequence features can also be stored, but for efficiency reasons
** features are turned off by default.
**
** @alias AjOSeq
** @alias AjSSeq
**
** @attr Name      [AjPStr] Name (ID)
** @attr Acc       [AjPStr] Accession number (primary only)
** @attr Sv        [AjPStr] SeqVersion number
** @attr Gi        [AjPStr] GI NCBI version number
** @attr Tax       [AjPStr] Main taxonomy (species)
** @attr Taxcommon [AjPStr] Main taxonomy (species) common name
** @attr Taxid     [AjPStr] Main taxonomy (species) id in NCBI taxonomy
** @attr Organelle [AjPStr] Organelle taxonomy
** @attr Type      [AjPStr] Type N or P
** @attr Molecule  [AjPStr] Molecule type
** @attr Class     [AjPStr] Class of entry
** @attr Division  [AjPStr] Database division
** @attr Evidence  [AjPStr] Experimental evidence (e.g. from UniProt)
** @attr Db        [AjPStr] Database name from input
** @attr Setdb     [AjPStr] Database name from command line
** @attr Full      [AjPStr] Full name
** @attr Date      [AjPSeqDate] Creation, modification and sequence mod dates
** @attr Desc      [AjPStr] One-line description
** @attr Fulldesc  [AjPSeqDesc] Detailed description
** @attr Doc       [AjPStr] Obsolete - see TextPtr
** @attr Usa       [AjPStr] USA for re-reading
** @attr Ufo       [AjPStr] UFO for re-reading
** @attr Formatstr [AjPStr] Input format name
** @attr Filename  [AjPStr] Original filename
** @attr Entryname [AjPStr] Entryname (ID)
** @attr TextPtr   [AjPStr] Full text
** @attr Acclist   [AjPList] Secondary accessions
** @attr Keylist   [AjPList] Keyword list
** @attr Taxlist   [AjPList] Taxonomy list (organelle, species, taxa)
** @attr Genelist  [AjPList] Gene names list
** @attr Reflist   [AjPList] Reference citation list
** @attr Cmtlist   [AjPList] Comment block list
** @attr Xreflist  [AjPList] Cross reference list
** @attr Hostlist  [AjPList] Viral host species list
** @attr Seq       [AjPStr] The sequence
** @attr Fttable   [AjPFeattable] Feature table
** @attr Accuracy  [float*] Accuracy values (one per base) from base calling
** @attr Fpos      [ajlong] File position (fseek) for USA
** @attr Rev       [AjBool] true: to be reverse-complemented
** @attr Reversed  [AjBool] true: has been reverse-complemented
** @attr Trimmed   [AjBool] true: has been trimmed
** @attr Circular  [AjBool] true: circular nucleotide molecule
** @attr Begin     [ajint] start position (processed on reading)
** @attr End       [ajint] end position (processed on reading)
** @attr Offset    [ajuint] offset from start
** @attr Offend    [ajuint] offset from end
** @attr Qualsize  [ajuint] Size of Accuracy array
** @attr Weight    [float] Weight from multiple alignment
** @attr Format    [AjEnum] Input format enum
** @attr EType     [AjEnum] unused, obsolete
**
** @@
******************************************************************************/

typedef struct AjSSeq
{
    AjPStr Name;
    AjPStr Acc;
    AjPStr Sv;
    AjPStr Gi;
    AjPStr Tax;
    AjPStr Taxcommon;
    AjPStr Taxid;
    AjPStr Organelle;
    AjPStr Type;
    AjPStr Molecule;
    AjPStr Class;
    AjPStr Division;
    AjPStr Evidence;
    AjPStr Db;
    AjPStr Setdb;
    AjPStr Full;
    AjPSeqDate Date;
    AjPStr Desc;
    AjPSeqDesc Fulldesc;
    AjPStr Doc;
    AjPStr Usa;
    AjPStr Ufo;
    AjPStr Formatstr;
    AjPStr Filename;
    AjPStr Entryname;
    AjPStr TextPtr;
    AjPList Acclist;
    AjPList Keylist;
    AjPList Taxlist;
    AjPList Genelist;
    AjPList Reflist;
    AjPList Cmtlist;
    AjPList Xreflist;
    AjPList Hostlist;
    AjPStr Seq;
    AjPFeattable Fttable;
    float* Accuracy;
    ajlong Fpos;
    AjBool Rev;
    AjBool Reversed;
    AjBool Trimmed;
    AjBool Circular;
    ajint Begin;
    ajint End;
    ajuint Offset;
    ajuint Offend;
    ajuint Qualsize;
    float Weight;
    AjEnum Format;
    AjEnum EType;
} AjOSeq;

#define AjPSeq AjOSeq*




/* @data AjPSeqset ************************************************************
**
** Ajax Sequence set object. A sequence set contains one or more
** sequences together in memory, for example as a sequence alignment.
**
** Holds the sequence set itself, plus associated information such as a
** sequence names, accession number, format, type.
**
** Also holds information on a selected sequence range and other
** options.
**
** Sequence set features can also be stored, but for efficiency reasons
** features are turned off by default.
**
** @alias AjSSeqset
** @alias AjOSeqset
** @other AjPSeq Sequences
** @other AjPSeqall Sequence streams
**
** @attr Size [ajuint] Number of sequences
** @attr Len [ajuint] Maximum sequence length
** @attr Begin [ajint] start position
** @attr End [ajint] end position
** @attr Offset [ajuint] offset from start
** @attr Offend [ajuint] offset from end
** @attr Rev [AjBool] true: reverse-complemented
** @attr Trimmed [AjBool] true: has been trimmed
** @attr Type [AjPStr] Type N or P
** @attr Totweight [float] total weight (usually 1.0 * Size)
** @attr EType [AjEnum] enum type obsolete
** @attr Formatstr [AjPStr] Input format name
** @attr Filename [AjPStr] Original filename
** @attr Full [AjPStr] Full name
** @attr Name [AjPStr] Name
** @attr Usa [AjPStr] USA for re-reading
** @attr Ufo [AjPStr] UFO for re-reading
** @attr Seq [AjPSeq*] Sequence array (see Size)
** @attr Seqweight [float*] Sequence weights (see also AjPSeq)
** @attr Format [AjEnum] Input format enum
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new ajSeqsetNew Default constructor
** @delete ajSeqsetDel Default destructor
** @input ajSeqsetRead Master input routine for a sequence set
** @modify ajSeqsetToLower Converts a sequence set to lower case
** @modify ajSeqsetToUpper Converts a sequence set to upper case
** @cast ajSeqsetLen Returns the maximum length of a sequence set
** @cast ajSeqsetSize Returns the number of sequences in a sequence set
** @cast ajSeqsetAcc Returns the accession number of a sequence in a set
** @cast ajSeqsetName Returns the name of a sequence in a set
** @cast ajSeqsetSeq Returns the char* pointer to a sequence in a set
** @cast ajSeqsetIsNuc Tests whether the sequence set is nucleotide
** @cast ajSeqsetIsProt Tests whether the sequence set is protein
** @cast ajSeqsetGetFilename Returns the filename of a sequence set
** @output ajSeqsetWrite Writes out all sequences in a set
** @@
******************************************************************************/

typedef struct AjSSeqset
{
    ajuint Size;
    ajuint Len;
    ajint Begin;
    ajint End;
    ajuint Offset;
    ajuint Offend;
    AjBool Rev;
    AjBool Trimmed;
    AjPStr Type;
    float Totweight;
    AjEnum EType;
    AjPStr Formatstr;
    AjPStr Filename;
    AjPStr Full;
    AjPStr Name;
    AjPStr Usa;
    AjPStr Ufo;
    AjPSeq* Seq;
    float* Seqweight;
    AjEnum Format;
    char Padding[4];
} AjOSeqset;

#define AjPSeqset AjOSeqset*




/* @data AjPSeqin *************************************************************
**
** Ajax Sequence Input object.
**
** Holds the sequence specification and information needed to read
** the sequence and possible further sequences.
**
** Also holds information on a selected sequence range and other
** options.
**
** @alias AjSSeqin
** @alias AjOSeqin
**
** @other AjPSeq Sequences
** @other AjPSeqset Sequence sets
** @other AjPSeqall Sequence streams
**
** @attr Input     [AjPTextin] Text file input object
** @attr Name      [AjPStr]    Sequence name (replace on reading)
** @attr Acc       [AjPStr]    Sequence accession number (replace on reading)
** @attr Inputtype [AjPStr]    Sequence type from ACD
** @attr Type      [AjPStr]    Sequence type N or P
** @attr Full      [AjPStr]    Full name
** @attr Date      [AjPStr]    Date
** @attr Desc      [AjPStr]    One-line description
** @attr Doc       [AjPStr]    Full text
** @attr Inseq     [AjPStr]    Temporary input sequence holder
** @attr DbSequence   [AjPStr] Field name of sequence string
** @attr Usalist   [AjPList]   List of USA processing nodes
** @attr Begin     [ajint]     Start position
** @attr End       [ajint]     End position
** @attr Ufo       [AjPStr]    UFO for features (if any)
** @attr Fttable   [AjPFeattable] Input feature table (why in AjPSeqin?)
** @attr Ftquery   [AjPFeattabin] Feature table input spec
** @attr Entryname [AjPStr]    Entry name
** @attr Minimal   [AjBool]    true: read minimal information only
** @attr Features  [AjBool]    true: read features if any
** @attr IsNuc     [AjBool]    true: known to be nucleic
** @attr IsProt    [AjBool]    true: known to be protein
** @attr Multiset  [AjBool]    true: seqsetall input
** @attr Multidone [AjBool]    seqsetall input: true when set completed
** @attr Lower     [AjBool]    true: convert to lower case -slower
** @attr Upper     [AjBool]    true: convert to upper case -supper
** @attr Rev       [AjBool]    Reverse/complement if true
** @attr Circular  [AjBool]    Set sequences to be circular
** @attr SeqData   [void*]     Format data for reuse,
**                               e.g. multiple sequence input
** @@
******************************************************************************/

typedef struct AjSSeqin
{
    AjPTextin Input;
    AjPStr Name;
    AjPStr Acc;
    AjPStr Inputtype;
    AjPStr Type;
    AjPStr Full;
    AjPStr Date;
    AjPStr Desc;
    AjPStr Doc;
    AjPStr Inseq;
    AjPStr DbSequence;
    AjPList Usalist;
    ajint Begin;
    ajint End;
    AjPStr Ufo;
    AjPFeattable Fttable;
    AjPFeattabin Ftquery;
    AjPStr Entryname;
    AjBool Minimal;
    AjBool Features;
    AjBool IsNuc;
    AjBool IsProt;
    AjBool Multiset;
    AjBool Multidone;
    AjBool Lower;
    AjBool Upper;
    AjBool Rev;
    AjBool Circular;
    void *SeqData;
} AjOSeqin;

#define AjPSeqin AjOSeqin*




/* @data AjPSeqall ************************************************************
**
** Ajax Sequence all (stream) object.
**
** Inherits an AjPSeq but allows more sequences to be read from the
** same input by also inheriting the AjPSeqin input object.
**
** @alias AjSSeqall
** @alias AjOSeqall
**
** @new ajSeqallNew Default constructor
** @delete ajSeqallDel Default destructor
** @modify ajSeqallNext Master sequence stream input, reads next sequence
**                   from an open input stream.
** @cast ajSeqallGetFilename Returns the filename of a seqall object.
** @other AjPSeq Sequences
** @other AjPSeqin Sequence input
** @other AjPSeqset Sequence sets
**
** @attr Seq [AjPSeq] Current sequence
** @attr Seqin [AjPSeqin] Sequence input for reading next
** @attr Totseqs [ajlong] Count of sequences so far
** @attr Totlength [ajlong] Count of sequence lengths so far
** @attr Count [ajint] Count of sequences so far
** @attr Begin [ajint] start position
** @attr End [ajint] end position
** @attr Rev [AjBool] if true: reverse-complement
** @attr Returned [AjBool] if true: Seq object has been returned to a new owner
**                         and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSSeqall
{
    AjPSeq Seq;
    AjPSeqin Seqin;
    ajlong Totseqs;
    ajlong Totlength;
    ajint Count;
    ajint Begin;
    ajint End;
    AjBool Rev;
    AjBool Returned;
    char Padding[4];
} AjOSeqall;

#define AjPSeqall AjOSeqall*




/* @data AjPSeqAccess *********************************************************
**
** Ajax sequence access database reading object.
**
** Holds information needed to read a sequence from a database.
** Access methods are defined for each known database type.
**
** Sequences are read from the database using the defined
** database access function, which is usually a static function
** within ajtextdb.c ajseqdb.c
**
** This should be a static data object but is needed for the definition
** of AjPSeqin.
**
** @alias AjSSeqAccess
** @alias AjOSeqAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSSeqAccess
{
    const char *Name;
    AjBool (*Access)(AjPSeqin seqin);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOSeqAccess;

#define AjPSeqAccess AjOSeqAccess*




/* @data AjPSeqout ************************************************************
**
** Ajax Sequence Output object.
**
** Holds definition of sequence output.
**
** @alias AjSSeqout
** @alias AjOSeqout
**
** @attr Name [AjPStr] Name (ID)
** @attr Acc [AjPStr] Accession number (primary only)
** @attr Sv [AjPStr] SeqVersion number
** @attr Gi [AjPStr] GI NCBI version number
** @attr Desc [AjPStr] One-line description
** @attr Tax [AjPStr] Main taxonomy (species)
** @attr Taxcommon [AjPStr] Main taxonomy (species) common name
** @attr Taxid [AjPStr] Main taxonomy (species) id in NCBI taxonomy
** @attr Organelle [AjPStr] Organelle taxonomy
** @attr Type [AjPStr] Type N or P
** @attr Outputtype [AjPStr] Output sequence known type
** @attr Molecule [AjPStr] Molecule type
** @attr Class [AjPStr] Class of entry
** @attr Division [AjPStr] Database division
** @attr Evidence [AjPStr] Experimental evidence (e.g. from UniProt)
** @attr Db [AjPStr] Database name from input name
** @attr Setdb [AjPStr] Database name from input command line
** @attr Setoutdb [AjPStr] Database name from command line
** @attr Full [AjPStr] Full name
** @attr Date [AjPSeqDate] Dates
** @attr Fulldesc [AjPSeqDesc] Dates
** @attr Doc [AjPStr] Obsolete - see TextPtr
** @attr Usa [AjPStr] USA for re-reading
** @attr Ufo [AjPStr] UFO for re-reading
** @attr Fttable [AjPFeattable] Feature table
** @attr Ftquery [AjPFeattabOut] Feature table output
** @attr FtFormat [AjPStr] Feature output format (if not in UFO)
** @attr FtFilename [AjPStr] Feature output filename (if not in UFO)
** @attr Informatstr [AjPStr] Input format
** @attr Formatstr [AjPStr] Output format
** @attr EType [AjEnum] unused, obsolete
** @attr Format [AjEnum] Output format index
** @attr Filename [AjPStr] Output filename (if not in USA)
** @attr Directory [AjPStr] Output directory
** @attr Entryname [AjPStr] Entry name
** @attr Acclist [AjPList] Secondary accessions
** @attr Keylist [AjPList] Keyword list
** @attr Taxlist [AjPList] Taxonomy list
** @attr Genelist [AjPList] Gene list
** @attr Reflist [AjPList] References (citations)
** @attr Cmtlist [AjPList] Comment block list
** @attr Xreflist [AjPList] Database cross reference list
** @attr Seq [AjPStr] The sequence
** @attr File [AjPFile] Output file
** @attr Knownfile [AjPFile] Already open output file (we don't close this one)
** @attr Extension [AjPStr] File extension
** @attr Savelist [AjPList] Previous sequences saved for later output
**                          (e.g. MSF format)
** @attr Accuracy [float*] Accuracy values (one per base) from base calling
** @attr Data [void*] Format data for reuse, e.g. multiple sequence output
** @attr Cleanup [void function] Function to write remaining lines on closing
** @attr Rev [AjBool] true: to be reverse-complemented
** @attr Circular [AjBool] true: circular nucleotide molecule
** @attr Single [AjBool] If true, single sequence in each file (-ossingle)
** @attr Features [AjBool] If true, save features with sequence or in file
** @attr Qualsize [ajuint] Size of Accuracy array
** @attr Count [ajint] Number of sequences
** @attr Offset [ajint] offset from start
**
** @new ajSeqoutNew Default constructor
** @delete ajSeqoutDel Default destructor
** @modify ajSeqoutUsa Resets using a new USA
** @modify ajSeqoutClear Resets ready for reuse.
** @modify ajSeqoutOpen If the file is not yet open, calls seqoutUsaProcess
** @cast ajSeqoutCheckGcg Calculates the GCG checksum for a sequence set.
** @modify ajSeqWrite Master sequence output routine
** @modify ajSeqsetWrite Master sequence set output routine
** @modify ajSeqFileNewOut Opens an output file for sequence writing.
** @other AjPSeq Sequences
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSSeqout
{
    AjPStr Name;
    AjPStr Acc;
    AjPStr Sv;
    AjPStr Gi;
    AjPStr Desc;
    AjPStr Tax;
    AjPStr Taxcommon;
    AjPStr Taxid;
    AjPStr Organelle;
    AjPStr Type;
    AjPStr Outputtype;
    AjPStr Molecule;
    AjPStr Class;
    AjPStr Division;
    AjPStr Evidence;
    AjPStr Db;
    AjPStr Setdb;
    AjPStr Setoutdb;
    AjPStr Full;
    AjPSeqDate Date;
    AjPSeqDesc Fulldesc;
    AjPStr Doc;
    AjPStr Usa;
    AjPStr Ufo;
    AjPFeattable Fttable;
    AjPFeattabOut Ftquery;
    AjPStr FtFormat;
    AjPStr FtFilename;
    AjPStr Informatstr;
    AjPStr Formatstr;
    AjEnum EType;
    AjEnum Format;
    AjPStr Filename;
    AjPStr Directory;
    AjPStr Entryname;
    AjPList Acclist;
    AjPList Keylist;
    AjPList Taxlist;
    AjPList Genelist;
    AjPList Reflist;
    AjPList Cmtlist;
    AjPList Xreflist;
    AjPStr Seq;
    AjPFile File;
    AjPFile Knownfile;
    AjPStr Extension;
    AjPList Savelist;
    float* Accuracy;
    void *Data;
    void (*Cleanup)(struct AjSSeqout * outseq);
    AjBool Rev;
    AjBool Circular;
    AjBool Single;
    AjBool Features;
    ajuint Qualsize;
    ajint Count;
    ajint Offset;
    char Padding[4];
} AjOSeqout;

#define AjPSeqout AjOSeqout*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJSEQDATA_H */

ajseqdb.h/      1414437297  1010  513   100644  2600      `
/* @include ajseqdb ***********************************************************
**
** AJAX SEQDB (database) functions
**
** These functions control all aspects of AJAX sequence database access
**
** @author Copyright (C) 1998 Peter Rice
** @author Copyright (C) 2005 Alan Bleasby
** @version $Revision: 1.10 $
** @modified Jun 25 pmr First version
** @modified Apr 2005 ajb B+tree code addition
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
******************************************************************************/

#ifndef AJSEQDB_H
#define AJSEQDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void         ajSeqDbExit(void);
void         ajSeqdbInit(void);
void         ajSeqdbPrintAccess(AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJSEQDB_H */
ajseqread.h/    1414437289  1010  513   100644  5197      `
/* @include ajseqread *********************************************************
**
** AJAX sequence reading functions
**
** These functions control all aspects of AJAX sequence reading
**
** @author Copyright (C) 2001 Peter Rice
** @version $Revision: 1.50 $
** @modified 2001-2011 pmr
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSEQREAD_H
#define AJSEQREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajfile.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

extern AjPTable seqDbMethods;




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPTable     ajSeqaccessGetDb(void);
AjBool       ajSeqaccessMethodTest(const AjPStr method);
const char*  ajSeqaccessMethodGetQlinks(const AjPStr method);
ajuint       ajSeqaccessMethodGetScope(const AjPStr method);
AjPSeqall    ajSeqallFile(const AjPStr usa);
AjBool       ajSeqAllRead(AjPSeq thys, AjPSeqin seqin);
AjBool       ajSeqGetFromUsa(const AjPStr thys, AjBool protein, AjPSeq seq);
AjBool       ajSeqGetFromUsaRange(const AjPStr thys, AjBool protein,
                                  ajint ibegin, ajint iend, AjPSeq seq);
AjBool       ajSeqFormatTest(const AjPStr format);
void         ajSeqinClear(AjPSeqin thys);
void         ajSeqinClearPos(AjPSeqin thys);
void         ajSeqinDel(AjPSeqin* pthis);
AjPSeqin     ajSeqinNew(void);
AjPSeqin     ajSeqinNewQueryC(const char* qrytxt);
AjPSeqin     ajSeqinNewQueryS(const AjPStr qry);
void         ajSeqinSetNuc(AjPSeqin seqin);
void         ajSeqinSetProt(AjPSeqin seqin);
void         ajSeqinSetRange(AjPSeqin seqin, ajint ibegin, ajint iend);
void         ajSeqinUsa(AjPSeqin* pthis, const AjPStr Usa);
void         ajSeqinTrace(const AjPSeqin thys);
const char*  ajSeqinTypeGetFields(void);
const char*  ajSeqinTypeGetQlinks(void);

AjBool       ajSeqParseFasta(const AjPStr str, AjPStr* id, AjPStr* acc,
                             AjPStr* sv, AjPStr* desc);
AjBool       ajSeqParseFastq(const AjPStr str, AjPStr* id, AjPStr* desc);
AjBool       ajSeqParseNcbi(const AjPStr str, AjPStr* id, AjPStr* acc,
                            AjPStr* sv, AjPStr* gi, AjPStr* db, AjPStr* desc);
void         ajSeqPrintInFormat(AjPFile outf, AjBool full);
void         ajSeqPrintbookInFormat(AjPFile outf);
void         ajSeqPrinthtmlInFormat(AjPFile outf);
void         ajSeqPrintwikiInFormat(AjPFile outf);
AjBool       ajSeqRead(AjPSeq thys, AjPSeqin seqin);
void         ajSeqReadExit(void);
ajint        ajSeqsetApp(AjPSeqset thys, const AjPSeq seq);
AjBool       ajSeqsetGetFromUsa(const AjPStr thys, AjPSeqset *seq);
AjBool       ajSeqsetFromList(AjPSeqset thys, const AjPList list);
ajint        ajSeqsetFromPair(AjPSeqset thys,
                              const AjPSeq seqa, const AjPSeq seqb);
AjBool       ajSeqsetallRead(AjPList thys, AjPSeqin seqin);
AjBool       ajSeqsetRead(AjPSeqset thys, AjPSeqin seqin);
AjBool       ajSeqUsaGetBase(const AjPStr usa, AjPStr* baseusa);
AjBool       ajSeqinformatTerm(const AjPStr term);
AjBool       ajSeqinformatTest(const AjPStr format);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjBool       ajSeqMethodTest(const AjPStr method);
__deprecated ajuint       ajSeqMethodGetScope(const AjPStr method);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJSEQREAD_H */

ajseqtype.h/    1414437289  1010  513   100644  3705      `
/* @include ajseqtype *********************************************************
**
** AJAX seqtype functions
**
** @author Copyright (C) 2002 Peter Rice
** @version $Revision: 1.18 $
** @modified 2002-2011 Peter Rice
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSEQTYPE_H
#define AJSEQTYPE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void         ajSeqGap(AjPSeq thys, char gapc, char padc);
void         ajSeqGapLen(AjPSeq thys, char gapc, char padc, ajint ilen);
void         ajSeqGapS(AjPStr* seq, char gapc);
void         ajSeqPrintType(AjPFile outf, AjBool full);
void         ajSeqSetNuc(AjPSeq thys);
void         ajSeqSetProt(AjPSeq thys);
void         ajSeqsetSetNuc(AjPSeqset thys);
void         ajSeqsetSetProt(AjPSeqset thys);

char         ajSeqTypeAnyprotS(const AjPStr pthys);
char         ajSeqTypeDnaS(const AjPStr pthys);
void         ajSeqTypeExit(void);
char         ajSeqTypeGapanyS(const AjPStr pthys);
char         ajSeqTypeGapdnaS(const AjPStr pthys);
char         ajSeqTypeGapnucS(const AjPStr pthys);
char         ajSeqTypeGaprnaS(const AjPStr pthys);
char         ajSeqTypeNucS(const AjPStr pthys);
char         ajSeqTypeProtS(const AjPStr pthys);
AjBool       ajSeqTypeSummary(const AjPStr type_name,
                              AjPStr* Ptype, AjBool* gaps);
char         ajSeqTypeRnaS(const AjPStr pthys);

AjBool       ajSeqTypeIsAny(const AjPStr type_name);
AjBool       ajSeqTypeIsNuc(const AjPStr type_name);
AjBool       ajSeqTypeIsProt(const AjPStr type_name);


void         ajSeqType(AjPSeq thys);
AjBool       ajSeqTypeCheckIn(AjPSeq thys, const AjPSeqin seqin);
AjBool       ajSeqTypeCheckS(AjPStr* pthys, const AjPStr type_name);

void         ajSeqTypeUnused(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJSEQTYPE_H */

ajseqwrite.h/   1414437289  1010  513   100644  6174      `
/* @include ajseqwrite ********************************************************
**
** AJAX seqwrite  functions
**
** @author Copyright (C) 2001 Peter Rice
** @version $Revision: 1.52 $
** @modified 2001-2011 Peter Rice
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSEQWRITE_H
#define AJSEQWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool       ajSeqoutWriteSeq(AjPSeqout outseq, const AjPSeq seq);
AjBool       ajSeqoutOpenFilename(AjPSeqout seqout, const AjPStr name);
ajint        ajSeqoutGetCheckgcg(const AjPSeqout outseq);
const AjPStr ajSeqoutGetFilename(const AjPSeqout thys);
void         ajSeqoutClear(AjPSeqout thys);
void         ajSeqoutGetBasecount(const AjPSeqout seqout, ajuint* bases);
AjBool       ajSeqoutSetNameDefaultC(AjPSeqout thys,
                                     AjBool multi, const char* txt);
AjBool       ajSeqoutSetNameDefaultS(AjPSeqout thys,
                                     AjBool multi, const AjPStr str);
void         ajSeqoutDel(AjPSeqout* thys);
AjBool       ajSeqoutstrGetFormatDefault(AjPStr* Pformat);
AjBool       ajSeqoutstrIsFormatExists(const AjPStr format);
AjBool       ajSeqoutstrIsFormatSingle(const AjPStr format);
AjPSeqout    ajSeqoutNew(void);
AjPSeqout    ajSeqoutNewFile(AjPFile file);
AjPSeqout    ajSeqoutNewFormatC(const char* txt);
AjPSeqout    ajSeqoutNewFormatS(const AjPStr str);
AjBool       ajSeqoutOpen(AjPSeqout thys);
AjBool       ajSeqoutSetFormatC(AjPSeqout thys, const char* format);
AjBool       ajSeqoutSetFormatS(AjPSeqout thys, const AjPStr format);
void         ajSeqoutTrace(const AjPSeqout seq);
void         ajSeqoutPrintFormat(AjPFile outf, AjBool full);
void         ajSeqoutPrintbookFormat(AjPFile outf);
void         ajSeqoutPrinthtmlFormat(AjPFile outf);
void         ajSeqoutPrintwikiFormat(AjPFile outf);
void         ajSeqoutClearUsa(AjPSeqout thys, const AjPStr Usa);
AjBool       ajSeqoutWriteSet(AjPSeqout seqout, const AjPSeqset seq);
void         ajSeqoutClose(AjPSeqout outseq);
void         ajSeqoutCloseEmpty(AjPSeqout outseq);
void         ajSeqoutFlush(AjPSeqout seqout);
void         ajSeqoutExit(void);
void         ajSeqoutReset(AjPSeqout seqout);

void         ajSeqoutDumpSwisslike(AjPSeqout outseq,const AjPStr seq,
                                   const char *prefix);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void         ajSeqoutCount(const AjPSeqout seqout, ajuint* b);
__deprecated void         ajSeqAllWrite(AjPSeqout outseq, const AjPSeq seq);
__deprecated AjBool       ajSeqFileNewOut(AjPSeqout seqout,
                                          const AjPStr name);
__deprecated AjPSeqout    ajSeqoutNewF(AjPFile file);
__deprecated void         ajSeqWrite(AjPSeqout seqout, const AjPSeq seq);
__deprecated void         ajSeqsetWrite(AjPSeqout outseq, const AjPSeqset seq);
__deprecated void         ajSeqWriteClose(AjPSeqout outseq);
__deprecated AjBool       ajSeqOutFormatSingle(AjPStr format);
__deprecated AjBool       ajSeqOutSetFormat(AjPSeqout thys,
                                            const AjPStr format);
__deprecated AjBool       ajSeqOutSetFormatC(AjPSeqout thys,
                                             const char* format);
__deprecated AjBool       ajSeqOutFormatDefault(AjPStr* pformat);

__deprecated void         ajSeqoutUsa(AjPSeqout* pthis, const AjPStr Usa);

__deprecated void         ajSeqPrintOutFormat(AjPFile outf, AjBool full);
__deprecated AjBool       ajSeqFindOutFormat(const AjPStr format,
                                             ajint* iformat);
__deprecated void         ajSeqWriteExit(void);
__deprecated ajint        ajSeqoutCheckGcg(const AjPSeqout outseq);

__deprecated void         ajSeqoutDefName(AjPSeqout thys,
                                          const AjPStr setname, AjBool multi);
__deprecated void         ajSeqWriteXyz(AjPFile outf,
                                        const AjPStr seq, const char *prefix);
__deprecated void         ajSssWriteXyz(AjPFile outf,
                                        const AjPStr seq, const char *prefix);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJSEQWRITE_H */
ajsoap.h/       1414437297  1010  513   100644  3304      `
/* @include ajsoap ************************************************************
**
** support for webservices access using Axis2C library
**
** @author Copyright (c) 2009 Mahmut Uludag
** @version $Revision: 1.3 $
** @modified $Date: 2012/07/15 20:24:49 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSOAP_H
#define AJSOAP_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

#ifdef HAVE_AXIS2C
#include <axiom.h>
#include <axis2_util.h>
#include <axiom_soap.h>
#include <axis2_client.h>
#include <axutil_qname.h>

AJ_BEGIN_DECLS





/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/*
 * default end-points and name-spaces for EBI web-services
 */

#define WSDBFETCH_NS "http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit"
#define WSDBFETCH_EP "http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit"
#define EBEYE_NS     "http://www.ebi.ac.uk/EBISearchService"
#define EBEYE_EP     "http://www.ebi.ac.uk/ebisearch/service.ebi"

#define UNRECOGNISEDXML "cannot parse webservices results"





/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

axiom_node_t* 	    ajSoapAxis2Call(axis2_svc_client_t *client,
              	                    const axutil_env_t *env,
              	                    axiom_node_t *payload);

AjBool              ajSoapAxis2Error(axiom_node_t *fault,
				     const axutil_env_t *env);


axis2_svc_client_t* ajSoapAxis2GetClient(const axutil_env_t *env,
                                         const axis2_char_t *address);

axutil_env_t*       ajSoapAxis2GetEnv(void);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* HAVE_AXIS2C */
#endif  /* !AJSOAP_H */

ajsort.h/       1414437289  1010  513   100644  3225      `
/* @include ajsort ************************************************************
**
** AJAX sort functions
**
** @author Copyright (C) 2001 Alan Bleasby
** @version $Revision: 1.9 $
** @modified $Date: 2011/10/02 10:11:48 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSORT_H
#define AJSORT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void ajSortFloatDecI(const float *a, ajuint *p, ajuint n);
void ajSortIntDecI(const ajint *a, ajuint *p, ajuint n);
void ajSortUintDecI(const ajuint *a, ajuint *p, ajuint n);
void ajSortFloatIncI(const float *a, ajuint *p, ajuint n);
void ajSortIntIncI(const ajint *a, ajuint *p, ajuint n);
void ajSortUintIncI(const ajuint *a, ajuint *p, ajuint n);
void ajSortFloatDec(float *a, ajuint n);
void ajSortIntDec(ajint *a, ajuint n);
void ajSortUintDec(ajuint *a, ajuint n);
void ajSortFloatInc(float *a, ajuint n);
void ajSortIntInc(ajint *a, ajuint n);
void ajSortUintInc(ajuint *a, ajuint n);
void ajSorttwoIntIncI(ajint *a, ajuint *p, ajuint n);
void ajSorttwoUintIncI(ajuint *a, ajuint *p, ajuint n);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void ajSortTwoIntIncI(ajint *a, ajuint *p, ajuint n);
__deprecated void ajSortTwoUintIncI(ajuint *a, ajuint *p, ajuint n);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJSORT_H */

ajsql.h/        1414437289  1010  513   100644  12134     `
/* @include ajsql *************************************************************
**
** AJAX SQL functions
**
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.14 $
** @modified $Date: 2011/10/18 14:23:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSQL_H
#define AJSQL_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajarr.h"
#include "ajtime.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPVoid **************************************************************
**
** Ajax address object.
**
** Holds a void array with additional data.
** The length is known and held internally.
**
** Saves on length calculation, and allows growth in reserved memory without
** changing the pointer in the calling routine.
**
** AjPVoid is implemented as a pointer to a C data structure.
**
** @alias AjSVoid
** @alias AjOVoid
**
** @new    ajVoidNew Default constructor
** @new    ajVoidNewRes Constructor with reserved size
** @delete ajVoidDel Default destructor
** @cast   ajVoidGet Retrieve a pointer from an array
** @modify ajVoidPut Load a pointer array element
**
** @attr Res [ajuint] Reserved space in case of extension
** @attr Len [ajuint] Actual length used
** @attr Ptr [void**] Array of void pointers
** @@
******************************************************************************/

typedef struct AjSVoid
{
    ajuint Res;
    ajuint Len;
    void **Ptr;
} AjOVoid;

#define AjPVoid AjOVoid*




/* @enum AjESqlconnectionClient ***********************************************
**
** AJAX SQL Connection client library enumeration.
**
** @alias AjOSqlconnectionClient
**
** @value ajESqlconnectionClientNULL       Null
** @value ajESqlconnectionClientMySQL      MySQL client
** @value ajESqlconnectionClientPostgreSQL PostgreSQL client
******************************************************************************/

typedef enum AjOSqlconnectionClient
{
    ajESqlconnectionClientNULL,
    ajESqlconnectionClientMySQL,
    ajESqlconnectionClientPostgreSQL
} AjESqlconnectionClient;




/* @data AjPSqlconnection *****************************************************
**
** AJAX SQL Connection.
**
** Holds the client type and a pointer to a SQL client library-specific
** connection object.
**
** @alias AjSSqlconnection
** @alias AjOSqlconnection
**
** @attr Pconnection [void*]  SQL client library-specific connection object
**                            (MYSQL*) for the MySQL client library
**                            (PGconn*) for the PostgreSQL client library
** @attr Client [AjESqlconnectionClient] Client library
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct AjSSqlconnection
{
    void *Pconnection;
    AjESqlconnectionClient Client;
    ajuint Use;
} AjOSqlconnection;

#define AjPSqlconnection AjOSqlconnection*




/* @data AjPSqlstatement ******************************************************
**
** AJAX SQL Statement.
**
** Holds pointers to an AJAX SQL Connection and to a client library-specific
** result object.
**
** @alias AjSSqlstatement
** @alias AjOSqlstatement
**
** @attr Sqlconnection [AjPSqlconnection] AJAX SQL Connection.
** @attr Presult [void*] SQL client library-specific result object
**                        (MYSQL_RES*) for the MySQL client library
**                        (PGresult*) for the PostgreSQL client library
** @attr AffectedRows [ajulong] Number of rows affected by non-SELECT SQL
**                              statements
** @attr SelectedRows [ajulong] Number of rows selected by SELECT-like SQL
**                              statements
** @attr Columns [ajuint] Number of columns returned by SELECT-like statements
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct AjSSqlstatement
{
    AjPSqlconnection Sqlconnection;
    void *Presult;
    ajulong AffectedRows;
    ajulong SelectedRows;
    ajuint Columns;
    ajuint Use;
} AjOSqlstatement;

#define AjPSqlstatement AjOSqlstatement*




/* @data AjPSqlrow ************************************************************
**
** AJAX SQL Result Row.
**
** Holds an AjPChar array of C-type character strings and an AjLong array of
** data lengths for each column data values in SQL client library-specific
** result objects.
**
** @alias AjSSqlrow
** @alias AjOSqlrow
**
** @attr Values [AjPVoid] AJAX Character Array of SQL column values
** @attr Lengths [AjPLong] AJAX Long Integer Array of SQL column value lengths
** @attr Columns [ajuint] Number of columns per row
** @attr Current [ajuint] Current column in column interactions
** @@
******************************************************************************/

typedef struct AjSSqlrow
{
    AjPVoid Values;
    AjPLong Lengths;
    ajuint Columns;
    ajuint Current;
} AjOSqlrow;

#define AjPSqlrow AjOSqlrow*




/* @data AjISqlrow ************************************************************
**
** AJAX SQL Row Iterator.
**
** Allows iteration over AJAX SQL Rows of an AJAX SQL Statement.
**
** @alias AjSSqlrowiter
** @alias AjOSqlrowiter
** @alias AjPSqlrowiter
**
** @attr Sqlstatement [AjPSqlstatement] AJAX SQL Statement
** @attr Sqlrow [AjPSqlrow] AJAX SQL Result Row
** @attr Current [ajulong] Current row number
** @@
******************************************************************************/

typedef struct AjSSqlrowiter
{
    AjPSqlstatement Sqlstatement;
    AjPSqlrow Sqlrow;
    ajulong Current;
} AjOSqlrowiter;

#define AjISqlrow AjOSqlrowiter*
#define AjPSqlrowiter AjOSqlrowiter*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool ajSqlInit(void);

void ajSqlExit(void);

/* AJAX SQL Connection */

AjPSqlconnection ajSqlconnectionNewData(AjESqlconnectionClient client,
                                        const AjPStr user,
                                        const AjPStr password,
                                        const AjPStr host,
                                        const AjPStr port,
                                        const AjPStr socketfile,
                                        const AjPStr database);

AjPSqlconnection ajSqlconnectionNewRef(AjPSqlconnection sqlc);

void ajSqlconnectionDel(AjPSqlconnection* Psqlc);

AjESqlconnectionClient ajSqlconnectionGetClient(const AjPSqlconnection sqlc);

ajuint ajSqlconnectionGetUse(const AjPSqlconnection sqlc);

AjBool ajSqlconnectionTrace(const AjPSqlconnection sqlc, ajuint level);

AjBool ajSqlconnectionEscapeC(const AjPSqlconnection sqlc,
                              char **Ptxt,
                              const AjPStr str);

AjBool ajSqlconnectionEscapeS(const AjPSqlconnection sqlc,
                              AjPStr *Pstr,
                              const AjPStr str);

AjESqlconnectionClient ajSqlconnectionClientFromStr(const AjPStr client);

const char* ajSqlconnectionClientToChar(AjESqlconnectionClient client);

/* AJAX SQL Statement */

AjPSqlstatement ajSqlstatementNewRun(AjPSqlconnection sqlc,
                                     const AjPStr statement);

AjPSqlstatement ajSqlstatementNewRef(AjPSqlstatement sqls);

void ajSqlstatementDel(AjPSqlstatement* Psqls);

ajulong ajSqlstatementGetAffectedrows(const AjPSqlstatement sqls);

ajulong ajSqlstatementGetSelectedrows(const AjPSqlstatement sqls);

ajuint ajSqlstatementGetColumns(const AjPSqlstatement sqls);

ajuint ajSqlstatementGetIdentifier(const AjPSqlstatement sqls);

/* AJAX SQL Row Iterator */

AjISqlrow ajSqlrowiterNew(AjPSqlstatement sqls);

void ajSqlrowiterDel(AjISqlrow *Psqli);

AjBool ajSqlrowiterDone(const AjISqlrow sqli);

AjPSqlrow ajSqlrowiterGet(AjISqlrow sqli);

AjBool ajSqlrowiterRewind(AjISqlrow sqli);

/* AJAX SQL Row */

AjPSqlrow ajSqlrowNew(ajuint columns);

void ajSqlrowDel(AjPSqlrow *Psqlr);

AjPVoid ajSqlrowGetValues(const AjPSqlrow sqlr);

AjPLong ajSqlrowGetLengths(const AjPSqlrow sqlr);

ajuint ajSqlrowGetColumns(const AjPSqlrow sqlr);

ajuint ajSqlrowGetCurrent(const AjPSqlrow sqlr);

AjBool ajSqlcolumnGetValue(AjPSqlrow sqlr, void **Pvalue,
                           ajulong *Plength);

AjBool ajSqlcolumnToStr(AjPSqlrow sqlr, AjPStr *Pvalue);

AjBool ajSqlcolumnToInt(AjPSqlrow sqlr, ajint *Pvalue);

AjBool ajSqlcolumnToUint(AjPSqlrow sqlr, ajuint *Pvalue);

AjBool ajSqlcolumnToLong(AjPSqlrow sqlr, ajlong *Pvalue);

AjBool ajSqlcolumnToUlong(AjPSqlrow sqlr, ajulong *Pvalue);

AjBool ajSqlcolumnToFloat(AjPSqlrow sqlr, float *Pvalue);

AjBool ajSqlcolumnToDouble(AjPSqlrow sqlr, double *Pvalue);

AjBool ajSqlcolumnToBool(AjPSqlrow sqlr, AjBool *Pvalue);

AjBool ajSqlcolumnToTime(AjPSqlrow sqlr, AjPTime *Pvalue);

AjBool ajSqlcolumnRewind(AjPSqlrow sqlr);

AjBool ajSqlcolumnNumberGetValue(const AjPSqlrow sqlr,
                                 ajuint column,
                                 void **Pvalue,
                                 ajulong *Plength);

AjBool ajSqlcolumnNumberToStr(const AjPSqlrow sqlr, ajuint column,
                              AjPStr *Pvalue);

AjBool ajSqlcolumnNumberToInt(const AjPSqlrow sqlr, ajuint column,
                              ajint *Pvalue);

AjBool ajSqlcolumnNumberToUint(const AjPSqlrow sqlr, ajuint column,
                               ajuint *Pvalue);

AjBool ajSqlcolumnNumberToLong(const AjPSqlrow sqlr, ajuint column,
                               ajlong *Pvalue);

AjBool ajSqlcolumnNumberToFloat(const AjPSqlrow sqlr, ajuint column,
                                float *Pvalue);

AjBool ajSqlcolumnNumberToDouble(const AjPSqlrow sqlr, ajuint column,
                                 double *Pvalue);

AjBool ajSqlcolumnNumberToBool(const AjPSqlrow sqlr, ajuint column,
                               AjBool *Pvalue);

AjBool ajSqlcolumnNumberToTime(const AjPSqlrow sqlr, ajuint column,
                               AjPTime *Pvalue);

AjBool ajSqlcolumnNumberToUlong(const AjPSqlrow sqlr, ajuint column,
                                ajulong *Pvalue);

AjBool ajSqlcolumnNumberIsDefined(const AjPSqlrow sqlr, ajuint column);

/* AJAX Void Array */

AjPVoid ajVoidNew(void);

AjPVoid ajVoidNewRes(ajuint size);

void ajVoidDel(AjPVoid *thys);

void *ajVoidGet(const AjPVoid thys, ajuint elem);

ajuint ajVoidLen(const AjPVoid thys);

AjBool ajVoidPut(AjPVoid *thys, ajuint elem, void *v);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJSQL_H */
ajstr.h/        1414437290  1010  513   100644  40379     `
/* @include ajstr *************************************************************
**
** AJAX string functions
**
** AJAX string AjPStr objects are reference counted strings
** Any change will need a new string object if the use count
** is greater than 1, so the original AjPStr is provided as a pointer
** so that it can be reallocated in any routine where string modification
** may be needed.
**
** In many cases the text is always a copy, even of a constant original, so
** that it can be simply freed.
**
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.103 $
** @modified 1998-2011 Peter Rice
** @modified $Date: 2012/12/07 09:52:11 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSTR_H
#define AJSTR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPStr ***************************************************************
**
** Ajax string object.
**
** Holds a null terminated character string with additional data.
** The length is known and held internally.
** The reserved memory size is known and held internally.
** The reference count is known and held internally.
** New pointers can refer to the same string without needing
** to duplicate the character data.
**
** If a string has multiple references it cannot be changed. Any
** instance to be changed is first copied to a new string. This
** means that any function which can change the character data must
** pass a pointer to the string so that the string can be moved.
**
** A default null string is provided. New strings are by default
** implemented as pointers to this with increased reference counters.
**
** AjPStr is implemented as a pointer to a C data structure.
**
** @alias AjPPStr
** @alias AjSStr
** @alias AjOStr
** @iterator AjIStr
**
** @attr Res [size_t] Reserved bytes (usable for expanding in place)
** @attr Len [size_t] Length of current string, excluding NULL at end
** @attr Ptr [char*] The string, as a NULL-terminated C string.
** @attr Use [ajuint] Use count: 1 for single reference, more if several
**                   pointers share the same string.
**                   Must drop to 0 before deleting. Modifying means making
**                   a new string if not 1.
** @attr Padding [ajint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSStr
{
    size_t Res;
    size_t Len;
    char *Ptr;
    ajuint Use;
    ajint Padding;
} AjOStr;

#define AjPStr AjOStr*
typedef AjPStr* AjPPStr;




/* @data AjIStr ***************************************************************
**
** String iterator, used to test iterator functionality.
**
** @alias AjSStrIter
** @alias AjOStrIter
**
** @new ajStrIter Creates and initialises an iterator for a string
**
** @delete ajStrIterFree Destructor for a string iterator
**
** @modify ajStrIterNext Steps to the next iteration
**
** @modify ajStrIterBegin returns result of first iteration
** @modify ajStrIterNext Steps to the next iteration
** @modify ajStrIterBackNext Step to previous character in string iterator.
** @modify ajStrIterEnd   returns result of last iteration
** @cast ajStrIterDone  Tests whether iteration is complete
** @cast ajStrIterGetC  returns the character* from the iterator
** @cast ajStrIterGetK  returns the character from the iterator
**
** @attr Start [char*] Starting string pointer
** @attr End [char*] Final string pointer (NULL character position)
** @attr Ptr [char*] Current string pointer
** @@
******************************************************************************/

typedef struct AjSStrIter
{
    char *Start;
    char *End;
    char *Ptr;
} AjOStrIter;

#define AjIStr  AjOStrIter*




/* @data AjPStrTok ************************************************************
**
** String token parser object for the string parsing functions. These normally
** require a set of characters to be skipped, but some functions use a string
** delimiter instead.
**
** @attr String [AjPStr] String
** @attr Delim [AjPStr] Delimiter set for ajStrToken
** @attr Pos [ajuint] Position in string
** @attr Padding [char[4]] Padding to alignment boundary
**
** @new ajStrTokenInit Generates a string token parser object
** @delete ajStrTokenClear Destroys a string token parser
** @@
******************************************************************************/

typedef struct AjSStrTok
{
    AjPStr String;
    AjPStr Delim;
    ajuint Pos;
    char Padding[4];
} AjOStrTok;

#define AjPStrTok AjOStrTok*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/* === C character string === */

/* constructors */

char*      ajCharNewC(const char* txt);
char*      ajCharNewS(const AjPStr thys);
char*      ajCharNewRes(size_t size);
char*      ajCharNewResC(const char* txt, size_t size);
char*      ajCharNewResS(const AjPStr str, size_t size);
char*      ajCharNewResLenC(const char* txt, size_t size, size_t len);
char*      ajCharNull(void);

/* destructors */

void       ajCharDel(char** Ptxt);

/* filters */

char*      ajCharGetfilter(const char *txt);
char*      ajCharGetfilterCase(const char *txt);
char*      ajCharGetfilterUpper(const char *txt);
char*      ajCharGetfilterLower(const char *txt);

/* formatting */

AjBool     ajCharFmtLower(char *txt);
AjBool     ajCharFmtUpper(char *txt);

/* comparison */

AjBool     ajCharMatchC(const char* txt1, const char* txt2);
AjBool     ajCharMatchCaseC(const char* txt1, const char* txt2);
AjBool     ajCharMatchWildC(const char* txt1, const char* txt2);
AjBool     ajCharMatchWildS(const char* txt, const AjPStr str);
AjBool     ajCharMatchWildCaseC(const char* txt1, const char* txt2);
AjBool     ajCharMatchWildCaseS(const char* txt, const AjPStr str);
AjBool     ajCharMatchWildNextC(const char* txt1, const char* txt2);
AjBool     ajCharMatchWildWordC(const char* str, const char* txt);
AjBool     ajCharMatchWildNextCaseC(const char* txt1, const char* txt2);
AjBool     ajCharMatchWildWordCaseC(const char* str, const char* txt);
AjBool     ajCharPrefixC(const char* txt, const char* pref);
AjBool     ajCharPrefixS(const char* txt, const AjPStr pref);
AjBool     ajCharPrefixCaseC(const char* txt, const char* pref);
AjBool     ajCharPrefixCaseS(const char* txt, const AjPStr pref);
AjBool     ajCharSuffixC(const char* txt, const char* suff);
AjBool     ajCharSuffixS(const char* txt, const AjPStr suff);
AjBool     ajCharSuffixCaseC(const char* txt, const char* suff);
AjBool     ajCharSuffixCaseS(const char* txt, const AjPStr suff);

/* comparison (sorting) */


int        ajCharCmpCase(const char* txt1, const char* txt2);
int        ajCharCmpCaseLen(const char* txt1, const char* txt2, size_t len);
ajint      ajCharCmpWild(const char* txt1, const char* txt2);
ajint      ajCharCmpWildCase(const char* txt1, const char* txt2);

/* parsing */

AjPStr     ajCharParseC(const char* txt, const char* delim);

/* === AjPStr string === */

/* constructors */

AjPStr     ajStrNew(void);
AjPStr     ajStrNewC(const char *txt);
AjPStr     ajStrNewK(char ch);
AjPStr     ajStrNewS(const AjPStr str);
AjPStr     ajStrNewRef(AjPStr str);
AjPStr     ajStrNewRes(size_t size);
AjPStr     ajStrNewResC(const char *txt, size_t size);
AjPStr     ajStrNewResS(const AjPStr str, size_t size);
AjPStr     ajStrNewResLenC(const char *txt, size_t size, size_t len);

const AjPStr ajStrConstEmpty(void);
const AjPStr ajStrConstS(const AjPStr);

/* destructors */

void       ajStrDel(AjPStr* Pstr);
void       ajStrDelarray(AjPStr** PPstr);
AjBool     ajStrDelStatic(AjPStr* Pstr);

#define MAJSTRDEL(Pstr) {                       \
        if(*Pstr)                               \
        {                                               \
            if((*Pstr)->Use <= 1) ajStrDel(Pstr);       \
            else {--(*Pstr)->Use;(*Pstr) = NULL;}       \
        }                                               \
    }
        
/* assignment */

AjBool     ajStrAssignC(AjPStr* Pstr, const char* txt);
AjBool     ajStrAssignK(AjPStr* Pstr, char chr);
AjBool     ajStrAssignS(AjPStr* Pstr, const AjPStr str);
AjBool     ajStrAssignClear(AjPStr* Pstr);
AjBool     ajStrAssignEmptyC(AjPStr* pthis, const char* str);
AjBool     ajStrAssignEmptyS(AjPStr* pthis, const AjPStr str);
AjBool     ajStrAssignLenC(AjPStr* Pstr, const char* txt, size_t ilen);
AjBool     ajStrAssignRef(AjPStr* Pstr, AjPStr refstr);
#define MAJSTRASSIGNREF(Pstr,refstr) {                  \
        MAJSTRDEL(Pstr);                                \
        (refstr)->Use++;                                \
        *(Pstr) = (refstr);                             \
    }

AjBool     ajStrAssignResC(AjPStr* Pstr, size_t size, const char* txt);
AjBool     ajStrAssignResS(AjPStr* Pstr, size_t i, const AjPStr str);
AjBool     ajStrAssignSubC(AjPStr* Pstr, const char* txt,
                           ajlong pos1, ajlong pos2);
AjBool     ajStrAssignSubS(AjPStr* Pstr, const AjPStr str,
                           ajlong pos1, ajlong pos2);

#define MAJSTRASSIGNCLEAR(Pstr) {               \
        if((*Pstr) && (*Pstr)->Use == 1)        \
        {                                       \
            (*Pstr)->Ptr[0]='\0';               \
            (*Pstr)->Len=0;                     \
        } else {                                \
            ajStrAssignClear(Pstr);             \
    }                                           \
}



/* combination */

AjBool     ajStrAppendC(AjPStr* Pstr, const char* txt);
AjBool     ajStrAppendK(AjPStr* Pstr, char chr);
AjBool     ajStrAppendS(AjPStr* Pstr, const AjPStr str);
AjBool     ajStrAppendCountK(AjPStr* Pstr, char chr, ajulong num);
AjBool     ajStrAppendLenC(AjPStr* Pstr, const char* txt, size_t len);
AjBool     ajStrAppendSubC(AjPStr* Pstr, const char* txt,
                           ajlong pos1, ajlong pos2);
AjBool     ajStrAppendSubS(AjPStr* Pstr, const AjPStr str,
                           ajlong pos1, ajlong pos2);

AjBool     ajStrInsertC(AjPStr* pthis, ajlong pos, const char* str);
AjBool     ajStrInsertK(AjPStr* pthis, ajlong begin, char insert);
AjBool     ajStrInsertS(AjPStr* pthis, ajlong pos, const AjPStr str);

AjBool     ajStrJoinC(AjPStr* Pstr, ajlong pos1,
                      const char* txt, ajlong pos2);
AjBool     ajStrJoinS(AjPStr* Pstr, ajlong pos,
                      const AjPStr str, ajlong posb);
AjBool     ajStrMaskIdent(AjPStr* Pstr, const AjPStr str, char maskchar);
AjBool     ajStrMaskRange(AjPStr* Pstr, ajlong begin, ajlong end,
                          char maskchar);
AjBool     ajStrPasteS(AjPStr* Pstr, ajlong pos, const AjPStr str);
AjBool     ajStrPasteCountK(AjPStr* Pstr, ajlong pos, char chr,
                            ajulong num);
AjBool     ajStrPasteMaxC(AjPStr* Pstr, ajlong pos, const char* txt,
                          size_t n);
AjBool     ajStrPasteMaxS(AjPStr* Pstr, ajlong pos, const AjPStr str,
                          size_t n);

/* cut */

AjBool     ajStrCutBraces(AjPStr* Pstr);
AjBool     ajStrCutComments(AjPStr* Pstr);
AjBool     ajStrCutCommentsRestpos(AjPStr* Pstr, AjPStr* Prest, size_t* pos);
AjBool     ajStrCutCommentsStart(AjPStr* Pstr);
AjBool     ajStrCutEnd(AjPStr* Pstr, size_t len);
AjBool     ajStrCutRange(AjPStr* Pstr, ajlong pos1, ajlong pos2);
AjBool     ajStrCutStart(AjPStr* Pstr, size_t len);
AjBool     ajStrKeepRange(AjPStr* Pstr, ajlong pos1, ajlong pos2);
AjBool     ajStrKeepSetC(AjPStr* Pstr, const char* txt);
AjBool     ajStrKeepSetS(AjPStr* Pstr, const AjPStr str);
AjBool     ajStrKeepSetAlpha(AjPStr* Pstr);
AjBool     ajStrKeepSetAlphaC(AjPStr* Pstr, const char* txt);
AjBool     ajStrKeepSetAlphaS(AjPStr* Pstr, const AjPStr str);
AjBool     ajStrKeepSetAlphaRest(AjPStr* Pstr, AjPStr* Prest);
AjBool     ajStrKeepSetAlphaRestC(AjPStr* Pstr, const char* txt,
                                  AjPStr* Prest);
AjBool     ajStrKeepSetAlphaRestS(AjPStr* Pstr, const AjPStr str,
                                  AjPStr* Prest);
AjBool     ajStrKeepSetAscii(AjPStr* Pstr, int minchar, int maxchar);
AjBool     ajStrKeepSetFilter(AjPStr* Pstr, const char* filter);
AjBool     ajStrQuoteStrip(AjPStr *Pstr);
AjBool     ajStrQuoteStripAll(AjPStr *Pstr);
AjBool     ajStrRemoveDupchar(AjPStr* Pstr);
AjBool     ajStrRemoveGap(AjPStr* thys);
AjBool     ajStrRemoveGapF(AjPStr* thys, float *Pfloat);
AjBool     ajStrRemoveHtml(AjPStr* pthis);
AjBool     ajStrRemoveLastNewline(AjPStr* Pstr);
AjBool     ajStrRemoveSetC(AjPStr* Pstr, const char *txt);
AjBool     ajStrRemoveWhite(AjPStr* Pstr);
AjBool     ajStrRemoveWhiteExcess(AjPStr* Pstr);
AjBool     ajStrRemoveWhiteSpaces(AjPStr* Pstr);
AjBool     ajStrRemoveWild(AjPStr* Pstr);
AjBool     ajStrTrimC(AjPStr* pthis, const char* txt);
AjBool     ajStrTrimEndC(AjPStr* Pstr, const char* txt);
AjBool     ajStrTrimStartC(AjPStr* Pstr, const char* txt);
AjBool     ajStrTrimWhite(AjPStr* Pstr);
AjBool     ajStrTrimWhiteEnd(AjPStr* Pstr);
AjBool     ajStrTrimWhiteStart(AjPStr* Pstr);
AjBool     ajStrTruncateLen(AjPStr* Pstr, size_t len);
AjBool     ajStrTruncatePos(AjPStr* Pstr, ajlong pos);

/* substitution */

AjBool     ajStrExchangeCC(AjPStr* Pstr, const char* txt, const char* txtnew);
AjBool     ajStrExchangeCS(AjPStr* Pstr, const char* txt,
                           const AjPStr strnew);
AjBool     ajStrExchangeKK(AjPStr* Pstr, char chr, char chrnew);
AjBool     ajStrExchangeSC(AjPStr* Pstr, const AjPStr str,
                           const char* txtnew);
AjBool     ajStrExchangeSS(AjPStr* Pstr, const AjPStr str,
                           const AjPStr strnew);
AjBool     ajStrExchangePosCC(AjPStr* Pstr, ajlong ipos, const char* txt,
                              const char* txtnew);
AjBool     ajStrExchangeSetCC(AjPStr* Pstr, const char* txt,
                              const char* newc);
AjBool     ajStrExchangeSetSS(AjPStr* Pstr, const AjPStr str,
                              const AjPStr strnew);
AjBool     ajStrExchangeSetRestCK(AjPStr* Pstr, const char* txt,
                                  char chr);
AjBool     ajStrExchangeSetRestSK(AjPStr* Pstr, const AjPStr str,
                                  char chr);
AjBool     ajStrRandom(AjPStr *s);
AjBool     ajStrReverse(AjPStr* Pstr);

/* query */

ajulong    ajStrCalcCountC(const AjPStr str, const char* txt);
ajulong    ajStrCalcCountK(const AjPStr str, char chr);
AjBool     ajStrHasParentheses(const AjPStr str);
AjBool     ajStrIsAlnum(const AjPStr str);
AjBool     ajStrIsAlpha(const AjPStr str);
AjBool     ajStrIsBool(const AjPStr str);
AjBool     ajStrIsCharsetC(const AjPStr str, const char* txt);
AjBool     ajStrIsCharsetS(const AjPStr str, const AjPStr str2);
AjBool     ajStrIsCharsetCaseC(const AjPStr str, const char* txt);
AjBool     ajStrIsCharsetCaseS(const AjPStr str, const AjPStr str2);
AjBool     ajStrIsDouble(const AjPStr str);
AjBool     ajStrIsFilter(const AjPStr str, const char* filter);
AjBool     ajStrIsFloat(const AjPStr str);
AjBool     ajStrIsHex(const AjPStr str);
AjBool     ajStrIsInt(const AjPStr str);
AjBool     ajStrIsLong(const AjPStr str);
AjBool     ajStrIsLower(const AjPStr str);
AjBool     ajStrIsNum(const AjPStr str);
AjBool     ajStrIsUpper(const AjPStr str);
AjBool     ajStrIsWild(const AjPStr str);
AjBool     ajStrIsWhite(const AjPStr str);
AjBool     ajStrIsWord(const AjPStr str);
AjBool     ajStrWhole(const AjPStr str, ajlong pos1, ajlong pos2);

/* element retrieval */

char       ajStrGetAsciiCommon(const AjPStr str);
char       ajStrGetAsciiHigh(const AjPStr str);
char       ajStrGetAsciiLow(const AjPStr str);
char       ajStrGetCharFirst(const AjPStr str);
#define    MAJSTRGETCHARFIRST(str) ((str)->Ptr[0])
char       ajStrGetCharLast(const AjPStr str);
#define    MAJSTRGETCHARLAST(str) ((str)->Len ?                         \
                                   (str)->Ptr[(str)->Len-1] : '\0')

char       ajStrGetCharPos(const AjPStr str, ajlong pos);
#define    MAJSTRGETCHARPOS(str, pos) ((pos) > 0 ?  \
    (str)->Ptr[(pos)] :                             \
    (str)->Ptr[(str)->Len + (pos))
char*      ajStrGetfilter(const AjPStr str);
char*      ajStrGetfilterCase(const AjPStr str);
char*      ajStrGetfilterUpper(const AjPStr str);
char*      ajStrGetfilterLower(const AjPStr str);
size_t     ajStrGetLen(const AjPStr str);
#define    MAJSTRGETLEN(str) ((str) ? (str)->Len : 0)
const char* ajStrGetPtr(const AjPStr str);
#define    MAJSTRGETPTR(str) ((str) ? (str)->Ptr : ajCharNull())
size_t      ajStrGetRes(const AjPStr str);
#define    MAJSTRGETRES(str) ((str) ? (str)->Res : 0)
size_t     ajStrGetRoom(const AjPStr str);
ajuint     ajStrGetUse(const AjPStr str);
#define    MAJSTRGETUSE(str) ((str) ? (str)->Use : 0)
AjBool     ajStrGetValid(const AjPStr thys);

/* modifiable string retrieval */

char*      ajStrGetuniquePtr(AjPStr *Pstr);
#define MAJSTRGETUNIQUEPTR(Pstr) (((*Pstr)->Use > 1) ?                  \
                                  ajStrGetuniquePtr(Pstr) : (*Pstr)->Ptr)
#define MAJSTRGETUNIQUESTR(Pstr) (((*Pstr)->Use > 1) ?                  \
                                  ajStrGetuniqueStr(Pstr) : *Pstr)
AjPStr     ajStrGetuniqueStr(AjPStr *Pstr);

/* element assignment */

AjBool     ajStrSetClear(AjPStr* pthis);
AjBool     ajStrSetRes(AjPStr* Pstr, size_t size);
AjBool     ajStrSetResRound(AjPStr* Pstr, size_t size);
AjBool     ajStrSetValid(AjPStr *Pstr);
AjBool     ajStrSetValidLen(AjPStr* Pstr, size_t len);

#define MAJSTRSETVALIDLEN(Pstr,len) (*Pstr)->Len = len



/* string to datatype conversion functions */

AjBool     ajStrToBool(const AjPStr str, AjBool* Pval);
AjBool     ajStrToDouble(const AjPStr str, double* Pval);
AjBool     ajStrToFloat(const AjPStr str, float* Pval);
AjBool     ajStrToHex(const AjPStr str, ajint* Pval);
AjBool     ajStrToInt(const AjPStr str, ajint* Pval);
AjBool     ajStrToLong(const AjPStr thys, ajlong* result);
AjBool     ajStrToUint(const AjPStr str, ajuint* Pval);
AjBool     ajStrToUlong(const AjPStr str, ajulong* Pval);

/* datatype to string conversion functions */

AjBool     ajStrFromBool(AjPStr* Pstr, AjBool val);
AjBool     ajStrFromDouble(AjPStr* Pstr, double val, ajint precision);
AjBool     ajStrFromDoubleExp(AjPStr* Pstr, double val, ajint precision);
AjBool     ajStrFromFloat(AjPStr* Pstr, float val, ajint precision);
AjBool     ajStrFromInt(AjPStr* Pstr, ajint val);
AjBool     ajStrFromLong(AjPStr* Pstr, ajlong val);
AjBool     ajStrFromUint(AjPStr* Pstr, ajuint val);
AjBool     ajStrFromVoid(AjPStr* Pstr, const void* val);

/* formatting */

AjBool     ajStrFmtBlock(AjPStr* pthis, ajulong blksize);
AjBool     ajStrFmtCapital(AjPStr* Pstr);
AjBool     ajStrFmtLower(AjPStr* Pstr);
AjBool     ajStrFmtLowerSub(AjPStr* Pstr, ajlong pos1, ajlong pos2);
AjBool     ajStrFmtPercentDecode(AjPStr* Pstr);
AjBool     ajStrFmtPercentEncodeC(AjPStr* Pstr, const char* txt);
AjBool     ajStrFmtPercentEncodeS(AjPStr* Pstr, const AjPStr str);
AjBool     ajStrFmtQuery(AjPStr* Pstr);
AjBool     ajStrFmtQuote(AjPStr* Pstr);
AjBool     ajStrFmtTitle(AjPStr* Pstr);
AjBool     ajStrFmtUpper(AjPStr* Pstr);
AjBool     ajStrFmtUpperSub(AjPStr* Pstr, ajlong pos1, ajlong pos2);
AjBool     ajStrFmtWord(AjPStr* Pstr);
AjBool     ajStrFmtWrap(AjPStr* Pstr, ajuint width);
AjBool     ajStrFmtWrapAt(AjPStr* Pstr, ajuint width, char ch);
AjBool     ajStrFmtWrapLeft(AjPStr* Pstr, ajuint width,
                            ajuint margin, ajuint indent);

/* comparison */

AjBool     ajStrMatchC(const AjPStr thys, const char* txt);
AjBool     ajStrMatchS(const AjPStr thys, const AjPStr str);
AjBool     ajStrMatchCaseC(const AjPStr thys, const char* text);
AjBool     ajStrMatchCaseS(const AjPStr thys, const AjPStr str);
AjBool     ajStrMatchWildC(const AjPStr thys, const char* text);
AjBool     ajStrMatchWildS(const AjPStr thys, const AjPStr wild);
AjBool     ajStrMatchWildCaseC(const AjPStr thys, const char* text);
AjBool     ajStrMatchWildCaseS(const AjPStr thys, const AjPStr wild);
AjBool     ajStrMatchWildWordC(const AjPStr str, const char* text);
AjBool     ajStrMatchWildWordS(const AjPStr str, const AjPStr text);
AjBool     ajStrMatchWildWordCaseC(const AjPStr str, const char* text);
AjBool     ajStrMatchWildWordCaseS(const AjPStr str, const AjPStr text);
AjBool     ajStrMatchWordAllS(const AjPStr str, const AjPStr str2);
AjBool     ajStrMatchWordOneS(const AjPStr str, const AjPStr str2);
AjBool     ajStrPrefixC(const AjPStr str, const char* txt2);
AjBool     ajStrPrefixS(const AjPStr str, const AjPStr str2);
AjBool     ajStrPrefixCaseC(const AjPStr str, const char* pref);
AjBool     ajStrPrefixCaseS(const AjPStr str, const AjPStr pref);

AjBool     ajStrSuffixC(const AjPStr thys, const char* suff);
AjBool     ajStrSuffixS(const AjPStr thys, const AjPStr suff);
AjBool     ajStrSuffixCaseC(const AjPStr str, const char* pref);
AjBool     ajStrSuffixCaseS(const AjPStr str, const AjPStr pref);

/* comparison (sorting) */

#define MAJSTRCMPC(str1,txt2) strcmp((str1)->Ptr, txt2)
#define MAJSTRCMPS(str1,str2) strcmp((str1)->Ptr, (str2)->Ptr)

int        ajStrCmpC(const AjPStr thys, const char *text);
int        ajStrCmpS(const AjPStr str, const AjPStr str2);
int        ajStrCmpCaseS(const AjPStr str1, const AjPStr str2);
ajint      ajStrCmpLenC(const AjPStr thys, const char *text, size_t len);
int        ajStrCmpLenS(const AjPStr str, const AjPStr str2, size_t len);
int        ajStrCmpWildC(const AjPStr thys, const char* text);
int        ajStrCmpWildS(const AjPStr thys, const AjPStr str);
int        ajStrCmpWildCaseC(const AjPStr thys, const char* text);
int        ajStrCmpWildCaseS(const AjPStr thys, const AjPStr str);
int        ajStrVcmp(const void* str1, const void* str2);

/* comparison (search) */

ajlong     ajStrFindC(const AjPStr str, const char* txt);
ajlong     ajStrFindK(const AjPStr str, char chr);
ajlong     ajStrFindS(const AjPStr str, const AjPStr str2);
ajlong     ajStrFindAnyC(const AjPStr str, const char* txt);
ajlong     ajStrFindAnyK(const AjPStr str, char chr);
ajlong     ajStrFindAnyS(const AjPStr str, const AjPStr str2);
ajlong     ajStrFindCaseC(const AjPStr str, const char* txt);
ajlong     ajStrFindCaseS(const AjPStr str, const AjPStr str2);
ajlong     ajStrFindNextC(const AjPStr str, ajlong pos, const char* txt);
ajlong     ajStrFindNextK(const AjPStr str, ajlong pos, char chr);
ajlong     ajStrFindNextS(const AjPStr str, ajlong pos, const AjPStr str2);
ajlong     ajStrFindRestC(const AjPStr str, const char* txt);
ajlong     ajStrFindRestS(const AjPStr str, const AjPStr str2);
ajlong     ajStrFindRestCaseC(const AjPStr str, const char* txt);
ajlong     ajStrFindRestCaseS(const AjPStr str, const AjPStr str2);
ajlong     ajStrFindlastC(const AjPStr str, const char* txt);
ajlong     ajStrFindlastK(const AjPStr str, char chr);
ajlong     ajStrFindlastS(const AjPStr str, const AjPStr str2);

/* parsing */

AjBool     ajStrExtractFirst(const AjPStr str, AjPStr* Prest, AjPStr* Pword);
AjBool     ajStrExtractToken(const AjPStr str, AjPStr* Prest, AjPStr* Pword);
AjBool     ajStrExtractWord(const AjPStr str, AjPStr* Prest, AjPStr* Pword);
const AjPStr ajStrParseC(const AjPStr str, const char* txtdelim);
ajuint     ajStrParseCount(const AjPStr line);
ajuint     ajStrParseCountC(const AjPStr line, const char *txtdelim);
ajuint     ajStrParseCountS(const AjPStr line, const AjPStr strdelim);
ajuint     ajStrParseCountMultiC(const AjPStr str, const char *txtdelim);
ajuint     ajStrParseSplit(const AjPStr str, AjPStr **PPstr);
const AjPStr ajStrParseWhite(const AjPStr str);

/* debug */

void       ajStrProbe(AjPStr const * Pstr);
void       ajStrStat(const char* title);
void       ajStrTrace(const AjPStr thys);
void       ajStrTraceFull(const AjPStr thys);
void       ajStrTraceTitle(const AjPStr thys, const char* title);

/* exit */

void       ajStrExit(void);

/* === string iterator === */

/* constructors */

AjIStr     ajStrIterNew(const AjPStr thys);
AjIStr     ajStrIterNewBack(const AjPStr thys);

/* destructors */

void       ajStrIterDel(AjIStr *iter);

/* tests */

AjBool     ajStrIterDone(const AjIStr iter);
AjBool     ajStrIterDoneBack(const AjIStr iter);

/* resets */

void       ajStrIterBegin(AjIStr iter);
void       ajStrIterEnd(AjIStr iter);

/* attributes */

const char* ajStrIterGetC(const AjIStr iter);
char       ajStrIterGetK(const AjIStr iter);

/* modifiers */

void       ajStrIterPutK(AjIStr iter, char chr);

/* stepping */

AjIStr     ajStrIterNext(AjIStr iter);
AjIStr     ajStrIterNextBack(AjIStr iter);

/* === string token parser === */

/* constructors */

AjPStrTok  ajStrTokenNewC(const AjPStr str, const char* txtdelim);
AjPStrTok  ajStrTokenNewS(const AjPStr str, const AjPStr strdelim);

AjPStrTok  ajStrTokenNewcharC(const char* txt, const char* txtdelim);
AjPStrTok  ajStrTokenNewcharS(const char* txt, const AjPStr strdelim);

/* destructors */

void       ajStrTokenDel(AjPStrTok* Ptoken);

/* assignment */

AjBool     ajStrTokenAssign(AjPStrTok* Ptoken, const AjPStr str);
AjBool     ajStrTokenAssignC(AjPStrTok* Ptoken, const AjPStr str,
                             const char* txtdelim);
AjBool     ajStrTokenAssignS(AjPStrTok* Ptoken, const AjPStr str,
			     const AjPStr strdelim);
AjBool     ajStrTokenAssignchar(AjPStrTok* Ptoken, const char *txt);
AjBool     ajStrTokenAssigncharC(AjPStrTok* Ptoken, const char *txt,
                                 const char* txtdelim);
AjBool     ajStrTokenAssigncharS(AjPStrTok* Ptoken, const char *txt,
                                 const AjPStr strdelim);

/* reset */

void       ajStrTokenReset(AjPStrTok token);

/* debug */

void       ajStrTokenTrace(const AjPStrTok token);

/* parsing */

AjBool     ajStrTokenNextFind(AjPStrTok token, AjPStr* Pstr);
AjBool     ajStrTokenNextFindC(AjPStrTok token, const char* strdelim,
                               AjPStr* Pstr);
AjBool     ajStrTokenNextParse(AjPStrTok token, AjPStr* Pstr);
AjBool     ajStrTokenNextParseC(AjPStrTok token, const char* txtdelim,
                                AjPStr* Pstr);
AjBool     ajStrTokenNextParseS(AjPStrTok token, const AjPStr strdelim,
                                AjPStr* Pstr);
AjBool     ajStrTokenNextParseNoskip(AjPStrTok token, AjPStr* Pstr);
AjBool     ajStrTokenNextParseDelimiters(AjPStrTok token, AjPStr* Pstr,
                                         AjPStr* Pdelim);
AjBool     ajStrTokenRestParse(AjPStrTok token, AjPStr* Pstr);
AjBool     ajStrTokenStep(AjPStrTok token);
AjBool     ajStrTokenStepC(AjPStrTok token, const char* txtdelim);
AjBool     ajStrTokenStepS(AjPStrTok token, const AjPStr strdelim);

/*
** End of prototype definitions
*/




/*#define    MAJSTRREF(str) str->Use*/
/*#define    MAJSTRSIZE(str) str->Res*/
/*#define    MAJSTRSUBK(str,pos,c) str->Ptr[pos]=c*/
/*#define    MAJSTRSTR(str) str->Ptr*/


#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

/* =====================================================================
** Deprecated functions - renamed or replaced
** __deprecated The  tag is used by the gcc compiler to report calls
** for other compilers it is defined as an empty string (i.e. removed)
** ===================================================================== */

__deprecated void        ajCharFree(char** txt);
__deprecated char        *ajCharNew(const AjPStr thys);
__deprecated char        *ajCharNewL(size_t size);
__deprecated char        *ajCharNewLS(size_t size, const AjPStr thys);
__deprecated ajint       ajCharPos(const char* txt, ajint ipos);
__deprecated void        ajCharToLower(char *txt);
__deprecated void        ajCharToUpper(char *txt);

__deprecated AjBool      ajStrApp(AjPStr* pthis, const AjPStr src);
__deprecated AjBool      ajStrAppC(AjPStr* pthis, const char *txt);
__deprecated AjBool      ajStrAppCI(AjPStr* pthis, const char *txt, size_t i);
__deprecated AjBool      ajStrAppK(AjPStr* pthis, const char chr);
__deprecated AjBool      ajStrAppKI(AjPStr* pthis, const char chr,
                                    ajint number);
__deprecated AjBool      ajStrAppSub(AjPStr* pthis, const AjPStr src,
                                     ajint begin, ajint end);
__deprecated void        ajStrArrayDel(AjPStr** pthis);
__deprecated AjBool      ajStrAss(AjPStr* pthis, AjPStr str); /* not const */
__deprecated AjBool      ajStrAssC(AjPStr* pthis, const char* txt);
__deprecated AjBool      ajStrAssCI(AjPStr* pthis, const char* txt, size_t i);
__deprecated AjBool      ajStrAssCL(AjPStr* pthis, const char* txt, size_t i);
__deprecated AjBool      ajStrAssI(AjPStr* pthis, const AjPStr str, size_t i);
__deprecated AjBool      ajStrAssK(AjPStr* pthis, const char text);
__deprecated AjBool      ajStrAssL(AjPStr* pthis, const AjPStr str, size_t i);
__deprecated AjBool      ajStrAssS(AjPStr* pthis, const AjPStr str);
__deprecated AjBool      ajStrAssSub(AjPStr* pthis, const AjPStr str,
                                     ajint begin, ajint end);
__deprecated AjBool      ajStrAssSubC(AjPStr* pthis, const char* txt,
                                      ajint begin, ajint end);
__deprecated AjBool      ajStrBlock(AjPStr* pthis, ajint blksize);
__deprecated char        ajStrChar(const AjPStr thys, ajint pos);
__deprecated AjBool      ajStrChomp(AjPStr* pthis);
__deprecated AjBool      ajStrChompC(AjPStr* pthis, const char* delim);
__deprecated AjBool      ajStrChompEnd(AjPStr* pthis);
__deprecated AjBool      ajStrChop(AjPStr* pthis);
__deprecated AjBool      ajStrClean(AjPStr* s);
__deprecated AjBool      ajStrCleanWhite(AjPStr* s);
__deprecated AjBool      ajStrClear(AjPStr* pthis);
__deprecated int         ajStrCmp(const void* str, const void* str2);
__deprecated int         ajStrCmpCase(const AjPStr str, const AjPStr str2);
__deprecated int         ajStrCmpCaseCC(const char* str1, const char* str2);
__deprecated int         ajStrCmpO(const AjPStr thys, const AjPStr anoth);
__deprecated int         ajStrCmpWild(const AjPStr str, const AjPStr str2);
__deprecated int         ajStrCmpWildCC(const char* str, const char* text);
__deprecated AjBool      ajStrConvert(AjPStr* pthis, const AjPStr oldc,
                                      const AjPStr newc);
__deprecated AjBool      ajStrConvertCC(AjPStr* pthis, const char* oldc,
                                        const char* newc);
__deprecated AjBool      ajStrCopy(AjPStr* pthis, AjPStr str); /* not const */
__deprecated AjBool      ajStrCopyC(AjPStr* pthis, const char* str);
__deprecated ajint       ajStrCountC(const AjPStr thys, const char* str);
__deprecated ajint       ajStrCountK(const AjPStr thys, char ch);
__deprecated AjBool      ajStrCut(AjPStr* pthis, ajint begin, ajint end);
__deprecated void        ajStrDegap(AjPStr* pthis);
__deprecated AjBool      ajStrDelReuse(AjPStr* pthis);
__deprecated AjBool      ajStrDelim(AjPStr* pthis, AjPStrTok *ptoken,
                                    const char *delim);
__deprecated AjPStr      ajStrDup(AjPStr thys);
__deprecated void        ajStrFill(AjPStr* pthis, ajint count, char fill);
__deprecated ajint       ajStrFind(const AjPStr str, const AjPStr str2);
__deprecated ajint       ajStrFindCase(const AjPStr str, const AjPStr str2);
__deprecated ajint       ajStrFindK(const AjPStr thys, const char chr);
__deprecated void        ajStrFix(AjPStr *pthys);
__deprecated void        ajStrFixI(AjPStr *pthys, ajint ilen);
__deprecated AjBool      ajStrFromDoubleE(AjPStr* Pstr, double val,
                                          ajint precision);
__deprecated AjBool      ajStrInsert(AjPStr* Pstr, ajint pos,
                                     const AjPStr str);
__deprecated AjBool      ajStrIsSpace(const AjPStr thys);
__deprecated AjBool      ajStrKeepAlphaC(AjPStr* pthis, const char* chars);
__deprecated AjBool      ajStrKeepC(AjPStr* pthis, const char* chars);
__deprecated ajint       ajStrLen(const AjPStr thys);
__deprecated ajint       ajStrListToArray(const AjPStr str, AjPStr **array);
__deprecated AjBool      ajStrMask(AjPStr* str, ajint begin, ajint end,
                                   char maskchar);
__deprecated AjBool      ajStrMatchCaseCC(const char* thys, const char* text);
__deprecated AjBool      ajStrMatchCC(const char* thys, const char* text);
__deprecated AjBool      ajStrMatchWildCC(const char* str, const char* text);
__deprecated AjBool      ajStrMatchWildCO(const char* str, const AjPStr wild);
__deprecated AjBool      ajStrMatchWord(const AjPStr str, const AjPStr text);
__deprecated AjBool      ajStrMatchWordCC(const char* str, const char* text);
__deprecated AjBool      ajStrMod(AjPStr* pthis);
__deprecated AjBool      ajStrModL(AjPStr* pthis, size_t size);
__deprecated AjBool      ajStrModMinL(AjPStr* pthis, ajuint size);
__deprecated AjPStr      ajStrNewL(size_t size);
__deprecated AjBool      ajStrMatch(const AjPStr str, const AjPStr str2);
__deprecated AjBool      ajStrMatchCase(const AjPStr str, const AjPStr str2);
__deprecated AjBool      ajStrMatchWild(const AjPStr str, const AjPStr str2);
__deprecated int         ajStrNCmpC(const AjPStr str, const char* txt,
                                    ajint len);
__deprecated ajint       ajStrNCmpCaseCC(const char* str1, const char* str2,
                                         ajint len);
__deprecated ajint       ajStrNCmpO(const AjPStr thys, const AjPStr anoth,
                                    ajint n);
__deprecated AjPStr      ajStrNewCL(const char *txt, size_t size);
__deprecated AjPStr      ajStrNewCIL(const char *txt, ajint len, size_t size);
__deprecated const       AjPStr ajStrNull(void);
__deprecated AjBool      ajStrParentheses(const AjPStr s);
__deprecated ajint       ajStrPos(const AjPStr thys, ajint ipos);
__deprecated ajint       ajStrPosI(const AjPStr thys, ajint imin, ajint ipos);
__deprecated ajint       ajStrPosII(ajint ilen, ajint imin, ajint ipos);
__deprecated AjBool      ajStrPrefix(const AjPStr str, const AjPStr str2);
__deprecated AjBool      ajStrPrefixCase(const AjPStr str, const AjPStr str2);
__deprecated AjBool      ajStrPrefixCaseCC(const char *str, const char* pref);
__deprecated AjBool      ajStrPrefixCaseCO(const char* thys,
                                           const AjPStr pref);
__deprecated AjBool      ajStrPrefixCC(const char *str, const char* pref);
__deprecated AjBool      ajStrPrefixCO(const char *str, const AjPStr thys);
__deprecated void        ajStrQuote(AjPStr *s);
__deprecated AjBool      ajStrReplace(AjPStr* pthis, ajint pos1,
                                      const AjPStr overwrite, ajint len);
__deprecated AjBool      ajStrReplaceC(AjPStr* pthis, ajint pos1,
                                       const char* overwrite, ajint len);
__deprecated AjBool      ajStrReplaceK(AjPStr* pthis, ajint pos1,
                                       char overwrite, ajint len);
__deprecated AjBool      ajStrReplaceS(AjPStr* pthis,
                                       ajint begin, const AjPStr overwrite);
__deprecated ajint       ajStrRef(const AjPStr thys);
__deprecated void        ajStrRemoveCharsC(AjPStr* thys, const char *strng);
__deprecated void        ajStrRemoveNewline(AjPStr* pthis);
__deprecated AjBool      ajStrRev(AjPStr* pthis);
__deprecated ajint       ajStrRFindC(const AjPStr thys, const char *text);
__deprecated ajint       ajStrRoom(const AjPStr thys);
__deprecated AjBool      ajStrSet(AjPStr* pthis, const AjPStr str);
__deprecated AjBool      ajStrSetC(AjPStr* pthis, const char* str);
__deprecated ajint       ajStrSize(const AjPStr thys);
__deprecated const char  *ajStrStr(const AjPStr thys);
__deprecated char        *ajStrStrMod(AjPStr* thys);
__deprecated AjBool      ajStrSub(AjPStr* pthis, ajint begin, ajint len);
__deprecated AjBool      ajStrSubstitute(AjPStr* pthis, const AjPStr replace,
                                         const AjPStr putin);
__deprecated AjBool      ajStrSubstituteCC(AjPStr* pthis, const char* replace,
                                           const char* putin);
__deprecated AjBool      ajStrSubstituteKK(AjPStr* pthis, char replace,
                                           char putin);
__deprecated AjBool      ajStrSuffix(const AjPStr str, const AjPStr str2);
__deprecated AjBool      ajStrSuffixCC(const char *str, const char* suff);
__deprecated AjBool      ajStrSuffixCO(const char *str, const AjPStr suff);
__deprecated AjBool      ajStrToLower(AjPStr* pthis);
__deprecated AjBool      ajStrToLowerII(AjPStr* pthis, ajint begin, ajint end);
__deprecated AjBool      ajStrToTitle(AjPStr* pthis);
__deprecated AjBool      ajStrToUpper(AjPStr* pthis);
__deprecated AjBool      ajStrToUpperII(AjPStr* pthis, ajint begin, ajint end);
__deprecated AjBool      ajStrTrim(AjPStr* pthis, ajint num);
__deprecated AjBool      ajStrTruncate(AjPStr* Pstr, ajint pos);
__deprecated AjBool      ajStrUncomment(AjPStr* text);
__deprecated AjBool      ajStrUncommentStart(AjPStr* text);
__deprecated AjBool      ajStrWildPrefix(AjPStr* str);
__deprecated AjBool      ajStrWrap(AjPStr* pthis, ajint width);
__deprecated AjBool      ajStrWrapLeft(AjPStr* pthis, ajint width,
                                       ajint left);




__deprecated AjIStr      ajStrIter(const AjPStr thys);
__deprecated AjIStr      ajStrIterBack(const AjPStr thys);
__deprecated AjBool      ajStrIterBackDone(AjIStr iter);
__deprecated AjIStr      ajStrIterBackNext(AjIStr iter);
__deprecated void        ajStrIterFree(AjIStr *iter);
__deprecated AjBool      ajStrIterMore(AjIStr iter);
__deprecated AjBool      ajStrIterMoreBack(AjIStr iter);


__deprecated const AjPStr ajStrTok(const AjPStr thys);
__deprecated const AjPStr ajStrTokC(const AjPStr thys, const char* delim);
__deprecated const AjPStr ajStrTokCC(const char* thys, const char* delim);
__deprecated AjBool      ajStrToken(AjPStr* pthis, AjPStrTok *ptoken,
                                    const char *delim);
__deprecated AjBool      ajStrTokenAss(AjPStrTok *ptok, const AjPStr thys,
                                       const char *delim);
__deprecated void        ajStrTokenClear(AjPStrTok *token);
__deprecated ajint       ajStrTokenCount(const AjPStr line, const char *delim);
__deprecated ajint       ajStrTokenCountR(const AjPStr line, const char *delim);
__deprecated AjPStrTok   ajStrTokenInit(const AjPStr thys, const char *delim);
__deprecated AjBool      ajStrTokenRest(AjPStr* pthis, AjPStrTok* ptoken);

/*#define    MAJSTRLEN(str) str->Len*/
__deprecated const char  *MAJSTRSTR(const AjPStr thys);
__deprecated ajint  MAJSTRLEN(const AjPStr thys);
__deprecated ajint  MAJSTRSIZE(const AjPStr thys);
__deprecated ajint  MAJSTRREF(const AjPStr thys);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJSTR_H */

ajsys.h/        1414437290  1010  513   100644  11756     `
/* @include ajsys *************************************************************
**
** AJAX system functions
**
** Copyright (c) Alan Bleasby 1999
** @version $Revision: 1.38 $
** @modified $Date: 2011/11/23 09:52:54 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJSYS_H
#define AJSYS_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"

#include <sys/types.h>

#ifndef WIN32
#include <unistd.h>
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#ifndef __VMS
#ifndef WIN32
#include <sys/param.h>
#endif
#endif

#include <sys/stat.h>

#ifndef WIN32
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <dirent.h>
#include <unistd.h>
#else
#include <winsock2.h>
#include <io.h>
#include <fcntl.h>
#endif

#include <signal.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/*
** S_IFREG is non-ANSI therefore define it here
** At least keeps all the very dirty stuff in one place
*/

#ifndef S_IFREG
#define S_IFREG 0100000
#endif
#ifndef S_IFDIR
#define S_IFDIR 0x4000
#endif

#ifndef WIN32
#define AJ_FILE_REG S_IFREG
#define AJ_FILE_DIR S_IFDIR
#else
#define AJ_FILE_REG _S_IFREG
#define AJ_FILE_DIR _S_IFDIR
#endif




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/*
** Structure to hold either a UNIX socket or a Windows socket.
** Allows calling functions to use sockets without needing ifdefs.
** Now implemented as an EMBOSS-style typedef though it is really a
** system thing
*/




/* @data AjPSysSocket *********************************************************
**
** Socket data for Unix or Windows systems
**
** @attr sock [ajint] Socket number for Unix
** @cc attr sock [SOCKET] Socket data for Windows
**
******************************************************************************/

typedef struct AjSSysSocket
{
#ifndef WIN32
    ajint sock;
#else
    SOCKET sock;
#endif
} AjOSysSocket;
#define AjPSysSocket AjOSysSocket*




/*
** Structure for use with alarm timeouts
** UNIX uses SIGALRM, but Windows does not have that signal.
** Windows requires setting up a timer. This structure is primarily
** to allow a handle to the timer to be passed back for use
** with the ajSysTimeoutUnset() timer cancellation function.
** On the UNIX side it holds the sigaction structure to allow
** The action handler to be set to SIG_IGN, for extra safety.
** Now implemented as an EMBOSS-style typedef, though it is really a
** system thing.
*/




/* @data AjPSysTimeout ********************************************************
**
** Timeout object for Unix and Windows
**
** @attr sa [struct sigaction] sigaction data for Unix
** @attr Padding [ajint] Padding to alignment boundary
** @cc attr thandle [HANDLE] Timeout handle for Windows
** @cc attr wtime [LARGE_INTEGER] Wide time for Windows
** @attr seconds [ajint] Time limit in seconds
**
******************************************************************************/

typedef struct AjSSysTimeout
{
#ifndef WIN32
    struct sigaction sa;
    ajint Padding;
#else
    HANDLE thandle;
    LARGE_INTEGER wtime;
#endif
    ajint seconds;
} AjOSysTimeout;

#define AjPSysTimeout AjOSysTimeout*




#ifndef WIN32
#define AJBADSOCK -1
#define SOCKRET int
#else
#define AJBADSOCK INVALID_SOCKET
#define SOCKRET SOCKET
#endif




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajSysArglistBuildC(const char* cmdline,
                                 char** Pname, char*** PParglist);
AjBool        ajSysArglistBuildS(const AjPStr cmdline,
                                 char** Pname, char*** PParglist);
void          ajSysArglistFree(char*** arglist);
void          ajSysCanon(AjBool state);
char          ajSysCastItoc(ajint v);
unsigned char ajSysCastItouc(ajint v);
void          ajSysExit(void);
AjBool        ajSysFileUnlinkC(const char* s);
AjBool        ajSysFileUnlinkS(const AjPStr s);
FILE*         ajSysFdFromSocket(const AjOSysSocket sock, const char *mode);
AjBool        ajSysFileRmrfC(const char *path);
AjBool        ajSysFileRmrfS(const AjPStr path);
AjBool        ajSysFileWhich(AjPStr *Pfilename);
AjBool        ajSysFileWhichEnv(AjPStr *Pfilename, char * const env[]);
FILE*         ajSysFuncFdopen(ajint filedes, const char *mode);
char*         ajSysFuncFgets(char *buf, int size, FILE *fp);
FILE*         ajSysFuncFopen(const char *name, const char *flags);
SOCKRET       ajSysFuncSocket(int domain, int type, int protocol);
char*         ajSysFuncStrtokR(const char *s, const char *t,
                               const char **ptrptr,
                               AjPStr *buf);
char*         ajSysFuncStrtok(const char *s, const char *t);
char*         ajSysFuncStrdup(const char *s);
AjBool        ajSysCommandCopyC(const char* filename,
                                const char* newfilename);
AjBool        ajSysCommandCopyS(const AjPStr filename,
                                const AjPStr newfilename);
AjBool        ajSysCommandMakedirC(const char* dirname);
AjBool        ajSysCommandMakedirS(const AjPStr dirname);
AjBool        ajSysCommandRemoveC(const char* filename);
AjBool        ajSysCommandRemoveS(const AjPStr filename);
AjBool        ajSysCommandRemovedirC(const char* dirname);
AjBool        ajSysCommandRemovedirS(const AjPStr dirname);
AjBool        ajSysCommandRenameC(const char* filename,
                                  const char* newfilename);
AjBool        ajSysCommandRenameS(const AjPStr filename,
                                  const AjPStr newfilename);
ajint         ajSysExecC(const char* cl);
ajint         ajSysExecS(const AjPStr clstr);
ajint         ajSysExecLocaleC(const char* cl, const char* localetxt);
ajint         ajSysExecLocaleS(const AjPStr clstr, const AjPStr localestr);
ajint         ajSysExecPathC(const char* cl);
ajint         ajSysExecPathS(const AjPStr clstr);
ajint         ajSysExecEnvC(const char* cls, char * const env[]);
ajint         ajSysExecEnvS(const AjPStr clstr, char * const env[]);
ajint         ajSysExecprogNowaitC(const char *prog,
                                   char * const arg[],
                                   char * const env[]);
ajint         ajSysExecprogNowaitS(const AjPStr progstr,
                                   char * const arg[],
                                   char * const env[]);
ajint         ajSysExecOutnameC(const char* cl, const char* outfnametxt);
ajint         ajSysExecOutnameS(const AjPStr clstr, const AjPStr outfname);
ajint         ajSysExecOutnameAppendC(const char* cl,
                                      const char* outfnametxt);
ajint         ajSysExecOutnameAppendS(const AjPStr clstr,
                                      const AjPStr outfname);
ajint         ajSysExecOutnameErrC(const char* cl, const char* outfnametxt);
ajint         ajSysExecOutnameErrS(const AjPStr clstr, const AjPStr outfname);
ajint         ajSysExecOutnameErrAppendC(const char* cl,
                                         const char* outfnametxt);
ajint         ajSysExecOutnameErrAppendS(const AjPStr clstr,
                                         const AjPStr outfname);
void          ajSysSocketclose(AjOSysSocket sock);

int           ajSysTimeoutSet(AjPSysTimeout ts);
int           ajSysTimeoutUnset(AjPSysTimeout ts);

AjPFile       ajSysCreateInpipeC(const char* commandtxt);
AjPFile       ajSysCreateInpipeS(const AjPStr command);
AjBool        ajSysExecRedirectC(const char *command, int **pipeto,
                                 int **pipefrom);

char          *ajSysGetHomedirFromName(const char *username);
char          *ajSysGetHomedir(void);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated ajint         ajSysExecProgArgEnvNowaitC(const char *prog,
                                                      char * const arg[],
                                                      char * const env[]);
__deprecated ajint         ajSysExecProgArgEnvNowaitS(const AjPStr progstr,
                                                      char * const arg[],
                                                      char * const env[]);
__deprecated void          ajSystem(const AjPStr cl);
__deprecated void          ajSystemEnv(const AjPStr cl, char * const env[]);
__deprecated void          ajSystemOut(const AjPStr cl, const AjPStr outfname);
__deprecated char         *ajSysStrdup(const char *s);
__deprecated char         *ajSysStrtok(const char *s, const char *t);
__deprecated char         *ajSysStrtokR(const char *s, const char *t,
                                        const char **ptrptr, AjPStr *buf);
__deprecated char         *ajSysFgets(char *buf, int size, FILE *fp);
__deprecated FILE         *ajSysFopen(const char *name, const char *flags);
__deprecated FILE         *ajSysFdopen(ajint filedes, const char *mode);
__deprecated AjBool        ajSysWhich(AjPStr *exefile);
__deprecated AjBool        ajSysWhichEnv(AjPStr *exefile, char * const env[]);
__deprecated void          ajSysBasename(AjPStr *filename);
__deprecated void          ajSysArgListFree(char*** arglist);
__deprecated AjBool        ajSysIsDirectory(const char *s);
__deprecated AjBool        ajSysIsRegular(const char *s);
__deprecated AjBool        ajSysArglist(const AjPStr cmdline,
                                        char** Pname, char*** PParglist);
__deprecated AjBool        ajSysArglistBuild(const AjPStr cmdline,
                                             char** Pname, char*** PParglist);
__deprecated char          ajSysItoC(ajint v);
__deprecated unsigned char ajSysItoUC(ajint v);
__deprecated AjBool        ajSysUnlink(const AjPStr s);
__deprecated AjBool        ajSysFileUnlink(const AjPStr s);

__deprecated void          ajSysSystem(const AjPStr cl);
__deprecated void          ajSysSystemEnv(const AjPStr cl, char * const env[]);
__deprecated void          ajSysSystemOut(const AjPStr cl,
                                          const AjPStr outfname);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJSYS_H */
ajtable.h/      1414437290  1010  513   100644  17276     `
/* @include ajtable ***********************************************************
**
** AJAX table functions
**
** Hash table functions.
**
** @author Copyright (C) 1998 Ian Longden
** @version $Revision: 1.40 $
** @modified 2011 pmr Auto-resizing, destructors, table merges
** @modified $Date: 2013/02/17 13:39:55 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTABLE_H
#define AJTABLE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum AjETableType *********************************************************
**
** AJAX Table Type enumeration
**
** @value ajETableTypeUnknown no type set
** @value ajETableTypeChar    char* type
** @value ajETableTypeStr     AJAX String (AjPStr) type
** @value ajETableTypeInt     AJAX integer (ajint) type
** @value ajETableTypeUint    AJAX unsigned integer (ajuint) type
** @value ajETableTypeLong    AJAX long integer (ajlong) type
** @value ajETableTypeUlong   AJAX unsigned long integer (ajulong) type
** @value ajETableTypeUser    user-defined type
** @value ajETableTypeMax     beyond last defined value
**
******************************************************************************/

typedef enum AjOTableType
{
    ajETableTypeUnknown,
    ajETableTypeChar,
    ajETableTypeStr,
    ajETableTypeInt,
    ajETableTypeUint,
    ajETableTypeLong,
    ajETableTypeUlong,
    ajETableTypeUser,
    ajETableTypeMax
} AjETableType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPTableNode *********************************************************
**
** AJAX Table Node object.
**
** @attr Link [struct AjSTableNode*] Link top next AJAX Table Node
** @attr Key [void*] Key data
** @attr Value [void*] Value data
** @@
******************************************************************************/

typedef struct AjSTableNode {
    struct AjSTableNode* Link;
    void* Key;
    void* Value;
} AjOTableNode;

#define AjPTableNode AjOTableNode*




/* @data AjPTable *************************************************************
**
** Hash table object. Tables are key/value pairs with a simple hash function
** to provide rapid searching for keys.
**
** Tables can hold any data type. Special functions are available for
** tables of AjPStr values, but these are in the ajstr library,
** and start with ajStrTable...
**
** In general, these functions are the same
** but with different hash and comparison functions used. Alternative
** function names are provided in all cases to save remembering which
** calls need special cases.
**
** @new ajTableNew Creates a table.
** @delete ajTableFree Deallocates and clears a table.
** @modify ajTablePut Adds or updates a value for a given key.
** @modify ajTableMap Calls a function for each key/value in a table.
** @modify ajTableRemove Removes a key/value pair from a table, and returns
**                    the value.
** @cast ajTableToarray Creates an array to hold each key value pair
**                     in pairs of array elements. The last element is null.
** @cast ajTableGet Returns the value for a given key.
** @cast ajTableLength Returns the number of keys in a table.
** @output ajTableTrace Writes debug messages to trace the contents of a table.
**
** @attr Fcmp [ajint function] Key compare function
**                       (0 for match, -1 or +1 if not matched)
** @attr Fhash [ajulong function] Hash function
** @attr Fkeydel [void function] Key destructor, or NULL if not an object
** @attr Fvaldel [void function] Value destructor, or NULL if not an object
** @attr Buckets [AjPTableNode*] Buckets of AJAX Table Node objects
** @attr Size [ajulong] Size - number of hash buckets
** @attr Length [ajulong] Number of entries
** @attr Timestamp [ajuint] Time stamp
** @attr Use [ajuint] Reference count
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Type [AjETableType] AJAX Table Type enumeration
** @@
******************************************************************************/

typedef struct AjSTable
{
    ajint (*Fcmp)(const void* key1, const void* key2);
    ajulong (*Fhash)(const void* key, ajulong hashsize);
    void (*Fkeydel)(void** Pkey);
    void (*Fvaldel)(void** Pvalue);
    AjPTableNode* Buckets;
    ajulong Size;
    ajulong Length;
    ajuint Timestamp;
    ajuint Use;
    ajuint Padding;
    AjETableType Type;
} AjOTable;

#define AjPTable AjOTable*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void           ajTableExit(void);
void           ajTableClear(AjPTable table);
void           ajTableClearDelete(AjPTable table);
void           ajTableDel(AjPTable* table);
void           ajTableDelKeydelValdel(AjPTable* table,
                                      void (*keydel)(void** Pvalue),
                                      void (*valdel)(void** Pvalue));
void           ajTableDelValdel(AjPTable* table,
                                void (*valdel)(void** Pvalue));
void           ajTableFree(AjPTable* table);

const void*    ajTableFetchV(const AjPTable table, const void* key);
void*          ajTableFetchmodV(const AjPTable table, const void* key);
void*          ajTableFetchmodTraceV(const AjPTable table, const void* key);

const ajint*   ajTableintFetch(const AjPTable table, const ajint* intkey);
ajint*         ajTableintFetchmod(AjPTable table, const ajint* key);

const ajlong*  ajTablelongFetch(const AjPTable table, const ajlong* longkey);
ajlong*        ajTablelongFetchmod(AjPTable table, const ajlong* key);

const ajuint*  ajTableuintFetch(const AjPTable table, const ajuint* uintkey);
ajuint*        ajTableuintFetchmod(AjPTable table, const ajuint* key);

const ajulong* ajTableulongFetch(const AjPTable table,
                                 const ajulong* ulongkey);
ajulong*       ajTableulongFetchmod(AjPTable table, const ajulong* key);

const void*    ajTableFetchC(const AjPTable table, const char* txtkey);
const void*    ajTableFetchS(const AjPTable table, const AjPStr key);
void*          ajTableFetchmodC(const AjPTable table, const char* txtkey);
void*          ajTableFetchmodS(const AjPTable table, const AjPStr key);

ajulong        ajTableGetLength(const AjPTable table);
ajulong        ajTableGetSize(const AjPTable table);
void           ajTableMap(AjPTable table,
                          void (*apply)(const void* key,
                                        void** Pvalue,
                                        void* cl),
                          void* cl);
void           ajTableMapDel(AjPTable table,
                             void (*apply)(void** Pkey,
                                           void** Pvalue,
                                           void* cl),
                             void* cl);
AjBool         ajTableMergeAnd(AjPTable thys, AjPTable table);
AjBool         ajTableMergeEor(AjPTable thys, AjPTable table);
AjBool         ajTableMergeNot(AjPTable thys, AjPTable table);
AjBool         ajTableMergeOr(AjPTable thys, AjPTable table);
void*          ajTablePut(AjPTable table, void* key, void* value);
AjBool         ajTablePutClean(AjPTable table, void* key, void* value,
                               void (*keydel)(void** Pkey),
                               void (*valdel)(void** Pvalue));
void*          ajTablePutTrace(AjPTable table, void* key,
                               void* value);

void*          ajTableRemove(AjPTable table, const void* key);
void*          ajTableRemoveKey(AjPTable table, const void* key,
                                void** truekey);
void           ajTableResizeCount(AjPTable table, ajulong size);

void           ajTableResizeHashsize(AjPTable table, ajulong hashsize);

ajulong        ajTableToarrayKeys(const AjPTable table,
                                  void*** keyarray);
ajulong        ajTableToarrayKeysValues(const AjPTable table,
                                        void*** keyarray, void*** valarray);
ajulong        ajTableToarrayValues(const AjPTable table,
                                    void*** valarray);


AjPTable       ajTablecharNew(ajulong hint);
AjPTable       ajTablecharNewCase(ajulong hint);
AjPTable       ajTablecharNewConst(ajulong hint);
AjPTable       ajTablecharNewCaseConst(ajulong hint);

void           ajTableTrace(const AjPTable table);
void           ajTablecharPrint(const AjPTable table);
void           ajTablestrPrint(const AjPTable table);
void           ajTablestrTrace(const AjPTable table);
void           ajTablestrTracekeys(const AjPTable table);

ajint          ajTablecharCmp(const void* key1, const void* key2);
ajint          ajTablecharCmpCase(const void* key1, const void* key2);
ajint          ajTableintCmp(const void* key1, const void* key2);
ajint          ajTableuintCmp(const void* key1, const void* key2);
ajint          ajTablelongCmp(const void* key1, const void* key2);
ajint          ajTableulongCmp(const void* key1, const void* key2);
ajint          ajTablestrCmp(const void* key1, const void* key2);
ajint          ajTablestrCmpCase(const void* key1, const void* key2);

ajulong        ajTablecharHash(const void* key, ajulong hashsize);
ajulong        ajTablecharHashCase(const void* key, ajulong hashsize);
ajulong        ajTableintHash(const void* key, ajulong hashsize);
ajulong        ajTablelongHash(const void* key, ajulong hashsize);
ajulong        ajTableuintHash(const void* key, ajulong hashsize);
ajulong        ajTableulongHash(const void* key, ajulong hashsize);
ajulong        ajTablestrHash(const void* key, ajulong hashsize);
ajulong        ajTablestrHashCase(const void* key, ajulong hashsize);

AjPTable       ajTableintNew(ajulong size);
AjPTable       ajTableintNewConst(ajulong size);
AjPTable       ajTablelongNew(ajulong size);
AjPTable       ajTablelongNewConst(ajulong size);
AjPTable       ajTableuintNew(ajulong size);
AjPTable       ajTableuintNewConst(ajulong size);
AjPTable       ajTableulongNew(ajulong size);
AjPTable       ajTableulongNewConst(ajulong size);
void           ajTableintFree(AjPTable* ptable);
void           ajTableintFreeKey(AjPTable* ptable);
void           ajTablelongFree(AjPTable* ptable);
void           ajTablelongFreeKey(AjPTable* ptable);
void           ajTableuintFree(AjPTable* ptable);
void           ajTableuintFreeKey(AjPTable* ptable);
void           ajTableulongFree(AjPTable* ptable);
void           ajTableulongFreeKey(AjPTable* ptable);
AjPTable       ajTablestrNew(ajulong size);
AjPTable       ajTablestrNewCase(ajulong size);
AjPTable       ajTablestrNewConst(ajulong size);
AjPTable       ajTablestrNewCaseConst(ajulong size);

void           ajTablestrFree(AjPTable* ptable);
void           ajTablestrFreeKey(AjPTable* ptable);

AjPTable       ajTableNew(ajulong size);
AjPTable       ajTableNewFunctionLen(ajulong size,
                                     ajint (*cmp)(const void* key1,
                                                  const void* key2),
                                     ajulong (*hash)(const void* key,
                                                    ajulong hashsize),
                                     void (*keydel)(void** Pkey),
                                     void (*valdel)(void** Pvalue));
const AjPStr   ajTablestrFetchkeyC(const AjPTable table, const char* key);
const AjPStr   ajTablestrFetchkeyS(const AjPTable table, const AjPStr key);

void           ajTableSetDestroy(AjPTable table,
                                 void (*keydel)(void** Pkey),
                                 void (*valdel)(void** Pvalue));
void           ajTableSetDestroyboth(AjPTable table);
void           ajTableSetDestroykey(AjPTable table,
                                    void (*keydel)(void** Pkey));
void           ajTableSetDestroyvalue(AjPTable table,
                                      void (*valdel)(void** Pvalue));

void           ajTableSettypeDefault(AjPTable table);
void           ajTableSettypeChar(AjPTable table);
void           ajTableSettypeCharCase(AjPTable table);
void           ajTableSettypeInt(AjPTable table);
void           ajTableSettypeLong(AjPTable table);
void           ajTableSettypeUint(AjPTable table);
void           ajTableSettypeUlong(AjPTable table);
void           ajTableSettypeString(AjPTable table);
void           ajTableSettypeStringCase(AjPTable table);
void           ajTableSettypeUser(AjPTable table,
                                  ajint (*cmp)(const void* key1,
                                               const void* key2),
                                  ajulong (*hash)(const void* key,
                                                  ajulong hashsize));

AjBool         ajTableMatchC(const AjPTable table, const char* key);
AjBool         ajTableMatchS(const AjPTable table, const AjPStr key);
AjBool         ajTableMatchV(const AjPTable table, const void* key);

void*          ajTablestrFetchC(const AjPTable table, const char* txtkey);
void*          ajTablestrFetchS(const AjPTable table, const AjPStr key);
AjPStr*        ajTablestrFetchmod(AjPTable table, const AjPStr key);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjPTable   ajTableNewLen(ajuint size);
__deprecated AjPTable   ajTablestrNewCaseLen(ajuint size);
__deprecated AjPTable   ajTablestrNewLen(ajuint size);
__deprecated void*      ajTableFetch(const AjPTable table, const void* key);
__deprecated const void* ajTableFetchKey(const AjPTable table,
                                         const void* key);
__deprecated AjPTable   ajTablecharNewCaseLen(ajuint hint);
__deprecated const AjPStr ajTablestrFetch(const AjPTable table,
                                          const AjPStr key);
__deprecated ajuint     ajTableToarray(const AjPTable table,
                                       void*** keyarray, void*** valarray);
__deprecated ajint      ajTableLength(const AjPTable table);
__deprecated void*      ajTableGet(const AjPTable table, const void* key);
__deprecated ajint      ajStrTableCmp(const void* key1, const void* key2);
__deprecated ajint      ajStrTableCmpC(const void* key1, const void* key2);
__deprecated ajint      ajStrTableCmpCase(const void* key1, const void* key2);
__deprecated ajint      ajStrTableCmpCaseC(const void* key1, const void* key2);
__deprecated ajuint     ajStrTableHash(const void* key, ajuint hashsize);
__deprecated ajuint     ajStrTableHashC(const void* key, ajuint hashsize);
__deprecated ajuint     ajStrTableHashCase(const void* key, ajuint hashsize);
__deprecated ajuint     ajStrTableHashCaseC(const void* key, ajuint hashsize);
__deprecated AjPTable   ajStrTableNewC(ajuint hint);
__deprecated AjPTable   ajStrTableNewCase(ajuint hint);
__deprecated AjPTable   ajStrTableNewCaseC(ajuint hint);
__deprecated void       ajStrTablePrint(const AjPTable table);
__deprecated void       ajStrTablePrintC(const AjPTable table);
__deprecated void       ajStrTableTrace(const AjPTable table);

__deprecated AjPTable   ajTableNewL(ajuint size,
                                    ajint (*cmp)(const void* key1,
                                                 const void* key2),
                                    ajuint (*hash)(const void* key,
                                                   ajuint hashsize));
__deprecated const void* ajTableKey(const AjPTable table, const void* key);
__deprecated void       ajStrTableFree(AjPTable* table);
__deprecated AjPTable   ajStrTableNew(ajuint hint);
__deprecated void       ajStrTableFreeKey(AjPTable* table);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJTABLE_H */
ajtagval.h/     1414437290  1010  513   100644  3678      `
/* @include ajtagval **********************************************************
**
** Handling of tag-value pairs of strings
**
** @author Copyright (C) 2011 Peter Rice
** @version $Revision: 1.2 $
** @modified $Date: 2012/06/26 13:03:59 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
******************************************************************************/

#ifndef AJTAGVAL_H
#define AJTAGVAL_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPTagval ************************************************************
**
** General tag values data structure
**
** @alias AjSTagval
** @alias AjOTagval
**
** @attr Tag [AjPStr] Tag name usually from a controlled internal vocabulary
** @attr Value [AjPStr] Tag value
** @@
******************************************************************************/

typedef struct AjSTagval
{
    AjPStr Tag;
    AjPStr Value;
} AjOTagval;

#define AjPTagval AjOTagval*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPTagval    ajTagvalNewC(const char* tag, const char* value);
AjPTagval    ajTagvalNewS(const AjPStr tag, const AjPStr value);
void         ajTagvalDel(AjPTagval *Ptagval);
const AjPStr ajTagvalGetTag(const AjPTagval tagval);
const AjPStr ajTagvalGetValue(const AjPTagval tagval);
void         ajTagvalFmtLower(AjPTagval tagval);
void         ajTagvalFmtUpper(AjPTagval tagval);
void         ajTagvalAppendC(AjPTagval tagval, const char* txt);
void         ajTagvalAppendS(AjPTagval tagval, const AjPStr str);
void         ajTagvalReplaceC(AjPTagval tagval, const char* txt);
void         ajTagvalReplaceS(AjPTagval tagval, const AjPStr str);

#define MAJTAGVALGETTAG(tagval) ((tagval) ? (tagval)->Tag : NULL)
#define MAJTAGVALGETVALUE(tagval) ((tagval) ? (tagval)->Value : NULL)

/*
** End of prototype definitions
*/

#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* AJTAGVAL_H */
ajtax.h/        1414437290  1010  513   100644  3394      `
/* @include ajtax *************************************************************
**
** AJAX taxonomy functions
**
** These functions control all aspects of AJAX taxonomy
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.12 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTAX_H
#define AJTAX_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtaxdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPTax       ajTaxNew(void);
AjPTax       ajTaxNewTax(const AjPTax tax);
void         ajTaxDel(AjPTax *Ptax);
void         ajTaxClear(AjPTax tax);
const AjPStr ajTaxGetDb(const AjPTax tax);
const AjPStr ajTaxGetId(const AjPTax tax);
const AjPStr ajTaxGetName(const AjPTax tax);
ajuint       ajTaxGetParent(const AjPTax tax);
const char*  ajTaxGetQryC(const AjPTax tax);
const AjPStr ajTaxGetQryS(const AjPTax tax);
const AjPStr ajTaxGetRank(const AjPTax tax);
ajuint       ajTaxGetTree(const AjPTax tax, AjPList taxlist);
AjBool       ajTaxIsHidden(const AjPTax tax);
AjBool       ajTaxIsSpecies(const AjPTax tax);

AjPTaxcit    ajTaxcitNew(void);
void         ajTaxcitDel(AjPTaxcit *Pcit);

AjPTaxcode   ajTaxcodeNew(void);

AjPTaxdel    ajTaxdelNew(void);

AjPTaxdiv    ajTaxdivNew(void);

AjPTaxmerge  ajTaxmergeNew(void);

AjPTaxname   ajTaxnameNew(void);
AjPTaxname   ajTaxnameNewName(const AjPTaxname name);
void         ajTaxnameDel(AjPTaxname *Pname);

void         ajTaxExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTAX_H */
ajtaxdata.h/    1414437290  1010  513   100644  11686     `
/* @include ajtaxdata *********************************************************
**
** AJAX taxonomy data structures
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.10 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTAXDATA_H
#define AJTAXDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPTax ***************************************************************
**
** Ajax tax object.
**
** Holds the tax itself, plus associated information.
**
** @alias AjSTax
** @alias AjOTax
**
** @attr Id        [AjPStr]  Taxonomy id
** @attr Db        [AjPStr]  Database name from input
** @attr Setdb     [AjPStr]  Database name from command line
** @attr Full      [AjPStr]  Full name
** @attr Qry       [AjPStr]  Query for re-reading
** @attr Formatstr [AjPStr]  Input format name
** @attr Filename  [AjPStr]  Original filename
** @attr Rank      [AjPStr]  Rank in taxomony hierarchy
** @attr Emblcode  [AjPStr]  EMBL locus name prefix (not unique)
** @attr Comment   [AjPStr]  Comment
** @attr Name      [AjPStr]  Standard name
** @attr Namelist  [AjPList] Names list
** @attr Citations [AjPList] Citations list
** @attr Lines     [AjPStr*] Lines of input data
** @attr Fpos      [ajlong]  File position
** @attr Format    [AjEnum]  Input format enum
** @attr Count     [ajuint]  Number of lines read
** @attr Taxid     [ajuint]  Taxon node id
** @attr Parent    [ajuint]  Parent taxid
** @attr Flags     [ajuint]  Flags:
**                               if node inherits division from parent
**                               if node inherits genetic code from parent
**                               if node inherits mito gencode from parent
**                               if name is suppressed in GB entry lineage
**                               if this subtree has no sequence data yet
** @attr Divid     [unsigned char]  Division id
** @attr Gencode   [unsigned char]  Genetic code id
** @attr Mitocode  [unsigned char]  Mitochondrial genetic code id
** @attr Padchar   [unsigned char]  Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSTax
{
    AjPStr  Id;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr  Rank;
    AjPStr  Emblcode;
    AjPStr  Comment;
    AjPStr  Name;
    AjPList Namelist;
    AjPList Citations;
    AjPStr *Lines;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint Count;
    ajuint Taxid;
    ajuint Parent;
    ajuint Flags;
    unsigned char Divid;
    unsigned char Gencode;
    unsigned char Mitocode;
    unsigned char Padchar;
} AjOTax;

#define AjPTax AjOTax*




/* @data AjPTaxin *************************************************************
**
** Ajax tax input object.
**
** Holds the input specification and information needed to read
** the tax and possible further entries
**
** @alias AjSTaxin
** @alias AjOTaxin
**
** @attr Input [AjPTextin] General text input object
** @attr TaxData [void*] Format data for reuse, e.g. multiple term input
**                         (unused in current code)
** @@
******************************************************************************/

typedef struct AjSTaxin
{
    AjPTextin Input;
    void *TaxData;
} AjOTaxin;

#define AjPTaxin AjOTaxin*




/* @data AjPTaxall ************************************************************
**
** Ajax taxon all (stream) object.
**
** Inherits an AjPTax but allows more taxons to be read from the
** same input by also inheriting the AjPTaxin input object.
**
** @alias AjSTaxall
** @alias AjOTaxall
**
** @attr Tax [AjPTax] Current taxon
** @attr Taxin [AjPTaxin] Taxon input for reading next
** @attr Totterms [ajulong] Count of terms so far
** @attr Count [ajuint] Count of terms so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: Taxon object has been returned to a new
**                         owner and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSTaxall
{
    AjPTax Tax;
    AjPTaxin Taxin;
    ajulong Totterms;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjOTaxall;

#define AjPTaxall AjOTaxall*




/* @data AjPTaxname ***********************************************************
**
** NCBI taxonomy node name, listed within AjPTax
**
** @alias AjSTaxname
** @alias AjOTaxname
**
** @attr Name          [AjPStr] Name of taxon node
** @attr UniqueName    [AjPStr] Unique name of taxon node
** @attr NameClass     [AjPStr] Synonym, common name, etc.
**
******************************************************************************/

typedef struct AjSTaxname
{
    AjPStr Name;
    AjPStr UniqueName;
    AjPStr NameClass;
} AjOTaxname;

#define AjPTaxname AjOTaxname*




/* @data AjPTaxdiv ************************************************************
**
** NCBI taxonomy division
**
** @alias AjSTaxdiv
** @alias AjOTaxdiv
**
** @attr GbCode       [AjPStr] GenBank division code (three characters)
** @attr GbName       [AjPStr] GenBank division name
** @attr Comments     [AjPStr] Comments
** @attr Divid        [ajuint] Taxonomy division id
** @attr Padding      [ajuint] Padding to alignment boundary
**
******************************************************************************/

typedef struct AjSTaxdiv
{
    AjPStr GbCode;
    AjPStr GbName;
    AjPStr Comments;
    ajuint Divid;
    ajuint Padding;
} AjOTaxdiv;

#define AjPTaxdiv AjOTaxdiv*




/* @data AjPTaxcode ***********************************************************
**
** NCBI taxonomy genetic code
**
** @alias AjSTaxcode
** @alias AjOTaxcode
**
** @attr Abbrev     [AjPStr] Genetic code name abbreviation
** @attr Name       [AjPStr] Genetic code full name
** @attr Trans      [AjPStr] Amino acids for each codon
** @attr Starts     [AjPStr] Start codons
** @attr Gencode    [ajuint]  NCBI genetic code id
** @attr Padding    [ajuint]  Padding to alignment boundary
**
******************************************************************************/

typedef struct AjSTaxcode
{

    AjPStr Abbrev;
    AjPStr Name;
    AjPStr Trans;
    AjPStr Starts;
    ajuint Gencode;
    ajuint Padding;
} AjOTaxcode;

#define AjPTaxcode AjOTaxcode*




/* @data AjPTaxdel ************************************************************
**
** NCBI taxonomy deleted node
**
** @alias AjSTaxdel
** @alias AjOTaxdel
**
** @attr Taxid            [ajuint]  Taxon node id
**
******************************************************************************/

typedef struct AjSTaxdel
{
    ajuint Taxid;
} AjOTaxdel;

#define AjPTaxdel AjOTaxdel*




/* @data AjPTaxmerge **********************************************************
**
** NCBI taxonomy mergednode
**
** @alias AjSTaxmerge
** @alias AjOTaxmerge
**
** @attr Taxid            [ajuint]  Oldaxon node id
** @attr Mergeid          [ajuint]  Merged taxon node id
**
******************************************************************************/

typedef struct AjSTaxmerge
{
    ajuint Taxid;
    ajuint Mergeid;
} AjOTaxmerge;

#define AjPTaxmerge AjOTaxmerge*




/* @data AjPTaxcit ************************************************************
**
** NCBI taxonomy citation, listed within AjPTax
**
** @alias AjSTaxcit
** @alias AjOTaxcit
**
** @attr Citid      [ajuint] Taxonomy citation id
** @attr Pubmed     [ajuint] PubMed id (0 if not found)
** @attr Medline    [ajuint] Medline id (0 if not found)
** @attr Refcount   [ajuint] Reference count
** @attr Key      [AjPStr] Citation key
** @attr Url [AjPStr] Url associated with citation
** @attr Text [AjPStr] Text, usually article name and authors
**
******************************************************************************/

typedef struct AjSTaxcit
{
    ajuint Citid;
    ajuint Pubmed;
    ajuint Medline;
    ajuint Refcount;
    AjPStr Key;
    AjPStr Url;
    AjPStr Text;
} AjOTaxcit;

#define AjPTaxcit AjOTaxcit*




/* @data AjPTaxAccess *********************************************************
**
** Ajax taxonomy access database reading object.
**
** Holds information needed to read a tax entry from a database.
** Access methods are defined for each known database type.
**
** Tax entries are read from the database using the defined
** database access function, which is usually a static function
** within ajtaxdb.c
**
** This should be a static data object but is needed for the definition
** of AjPTaxin.
**
** @alias AjSTaxAccess
** @alias AjOTaxAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSTaxAccess
{
    const char *Name;
    AjBool (*Access) (AjPTaxin taxin);
    AjBool (*AccessFree) (void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOTaxAccess;

#define AjPTaxAccess AjOTaxAccess*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTAXDATA_H */
ajtaxdb.h/      1414437297  1010  513   100644  2521      `
/* @include ajtaxdb ***********************************************************
**
** AJAX taxonomy database functions
**
** These functions control all aspects of AJAX taxonomy database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.4 $
** @modified Oct 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTAXDB_H
#define AJTAXDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void           ajTaxdbExit(void);
void           ajTaxdbInit(void);
void           ajTaxdbPrintAccess(AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJTAXDB_H */

ajtaxread.h/    1414437290  1010  513   100644  3633      `
/* @include ajtaxread *********************************************************
**
** AJAX taxonomy reading functions
**
** These functions control all aspects of AJAX taxonomy reading
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.10 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTAXREAD_H
#define AJTAXREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtaxdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void             ajTaxallClear(AjPTaxall thys);
void             ajTaxallDel(AjPTaxall* pthis);
AjPTaxall        ajTaxallNew(void);
const AjPStr     ajTaxallGettaxId(const AjPTaxall thys);

void             ajTaxinClear(AjPTaxin thys);
void             ajTaxinDel(AjPTaxin* pthis);
AjPTaxin         ajTaxinNew(void);
void             ajTaxinQryC(AjPTaxin thys, const char* txt);
void             ajTaxinQryS(AjPTaxin thys, const AjPStr str);
void             ajTaxinTrace(const AjPTaxin thys);

void             ajTaxinprintBook(AjPFile outf);
void             ajTaxinprintHtml(AjPFile outf);
void             ajTaxinprintText(AjPFile outf, AjBool full);
void             ajTaxinprintWiki(AjPFile outf);

AjBool           ajTaxallNext(AjPTaxall thys, AjPTax *Ptax);
AjBool           ajTaxinRead(AjPTaxin taxin, AjPTax thys);

AjBool           ajTaxinformatTest(const AjPStr format);
void             ajTaxinExit(void);
const char*      ajTaxinTypeGetFields(void);
const char*      ajTaxinTypeGetQlinks(void);

AjPTable         ajTaxaccessGetDb(void);
const char*      ajTaxaccessMethodGetQlinks(const AjPStr method);
ajuint           ajTaxaccessMethodGetScope(const AjPStr method);
AjBool           ajTaxaccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTAXREAD_H */

ajtaxwrite.h/   1414437290  1010  513   100644  2764      `
/* @include ajtaxwrite ********************************************************
**
** AJAX taxonomy writing functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.6 $
** @modified Oct 25 2010 pmr First AJAX version
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTAXWRITE_H
#define AJTAXWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtaxdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajTaxoutWrite(AjPOutfile outf, const AjPTax tax);

void          ajTaxoutprintBook(AjPFile outf);
void          ajTaxoutprintHtml(AjPFile outf);
void          ajTaxoutprintText(AjPFile outf, AjBool full);
void          ajTaxoutprintWiki(AjPFile outf);

AjBool        ajTaxoutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajTaxoutformatTest(const AjPStr format);

void          ajTaxoutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTAXWRITE_H */
ajtext.h/       1414437290  1010  513   100644  2635      `
/* @include ajtext ************************************************************
**
** AJAX TEXT functions
**
** These functions control all aspects of AJAX text
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.5 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTEXT_H
#define AJTEXT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPText      ajTextNew(void);
void         ajTextDel(AjPText *Ptext);
void         ajTextClear(AjPText text);
const char*  ajTextGetQryC(const AjPText text);
const AjPStr ajTextGetQryS(const AjPText text);
void         ajTextExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTEXT_H */

ajtextdata.h/   1414437290  1010  513   100644  9923      `
/* @include ajtextdata ********************************************************
**
** AJAX TEXT data structures
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.16 $
** @modified Oct 5 pmr First version
** @modified $Date: 2013/07/15 20:56:40 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTEXTDATA_H
#define AJTEXTDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"
#include "ajquerydata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @enum AjETextqryType *******************************************************
**
** Enumerated text query type
**
** @value TEXTQRY_UNKNOWN Unknown
** @value TEXTQRY_ENTRY   Single entry
** @value TEXTQRY_QUERY   Query
** @value TEXTQRY_ALL     All entries
******************************************************************************/

typedef enum AjOTextqryType
{
    TEXTQRY_UNKNOWN,
    TEXTQRY_ENTRY,
    TEXTQRY_QUERY,
    TEXTQRY_ALL
} AjETextqryType;




/* @enum AjETextqryLink *******************************************************
**
** Text query link operators
**
** @value TEXTQRY_INIT Undefined
** @value TEXTQRY_OR   Current OR next
** @value TEXTQRY_AND  Current AND next
** @value TEXTQRY_NOT  Current but NOT next
** @value TEXTQRY_EOR  Current EOR next
** @value TEXTQRY_MAX  Beyond last defined value
******************************************************************************/

typedef enum AjOTextqryLink
{
    TEXTQRY_INIT,
    TEXTQRY_OR,
    TEXTQRY_AND,
    TEXTQRY_NOT,
    TEXTQRY_EOR,
    TEXTQRY_MAX
} AjETextqryLink;




/* @data AjPText **************************************************************
**
** Ajax Text data object.
**
** Holds the input specification and information needed to read
** the entry text and possible further entries
**
** @alias AjSText
** @alias AjOText
**
** @attr Id        [AjPStr]  Id of text item
** @attr Db        [AjPStr]  Database name from input
** @attr Setdb     [AjPStr]  Database name from command line
** @attr Full      [AjPStr]  Full name
** @attr Qry       [AjPStr]  Query for re-reading
** @attr Formatstr [AjPStr]  Input format name
** @attr Filename  [AjPStr]  Original filename
** @attr Lines     [AjPList] Lines of input data
** @attr Fpos      [ajlong]  File position
** @attr Format    [AjEnum]  Input format enum
** @attr Count     [ajuint]  Number of lines read
** @@
******************************************************************************/

typedef struct AjSText
{
    AjPStr  Id;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPList Lines;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint Count;
} AjOText;

#define AjPText AjOText*




/* @data AjPTextin ************************************************************
**
** Ajax Text Input object.
**
** Holds the input specification and information needed to read
** the entry text and possible further entries
**
** @alias AjSTextin
** @alias AjOTextin
**
** @attr Db [AjPStr] Database name (from commandline, replace on reading)
** @attr Qry [AjPStr] Querystring for the entry
** @attr Formatstr [AjPStr] Input format name
** @attr QryFields [AjPStr] Query fields or ID list
** @attr Filename [AjPStr] Original filename
** @attr List [AjPList] List of USAs to be read
** @attr Filebuff [AjPFilebuff] Input buffered file
** @attr Fpos [ajlong] Initial file position (fseek) for building USA
** @attr Curpos [ajlong] Current file position (fseek) for latest read
** @attr Query [AjPQuery] Query data
** @attr TextData [void*] Format data for reuse, e.g. multiple entry input
** @attr Search [AjBool] Search for more entries (always true?)
** @attr Single [AjBool] Read single entries
** @attr Multi [AjBool] Multiple entry input
** @attr CaseId [AjBool] Id case sensitive (default false)
** @attr Text [AjBool] true: save full text of entry
** @attr ChunkEntries [AjBool] true: access method returns entries in chunks
**                             and should be called again when input is empty
** @attr Dataread [AjBool] true: input through a loader has started to read
** @attr Datadone [AjBool] true: input through a loader has read everything
** @attr Count [ajuint] count of entries so far. Used when ACD reads first
**                     entry and we need to reuse it in a Next loop
** @attr Filecount [ajuint] Number of files read
** @attr Entrycount [ajuint] Number of entries in file
** @attr Datacount [ajuint] Number of data values read in current entry
** @attr Records [ajuint] Records processed
** @attr TotRecords [ajuint] Records processed
** @attr Format [AjEnum] Text input format enum
** @attr TextFormat [AjEnum] Text input format enum
** @@
******************************************************************************/

typedef struct AjSTextin
{
    AjPStr Db;
    AjPStr Qry;
    AjPStr Formatstr;
    AjPStr QryFields;
    AjPStr Filename;
    AjPList List;
    AjPFilebuff Filebuff;
    ajlong Fpos;
    ajlong Curpos;
    AjPQuery Query;
    void *TextData;
    AjBool Search;
    AjBool Single;
    AjBool Multi;
    AjBool CaseId;
    AjBool Text;
    AjBool ChunkEntries;
    AjBool Dataread;
    AjBool Datadone;
    ajuint Count;
    ajuint Filecount;
    ajuint Entrycount;
    ajuint Datacount;
    ajuint Records;
    ajuint TotRecords;
    AjEnum Format;
    AjEnum TextFormat;
} AjOTextin;

#define AjPTextin AjOTextin*




/* @data AjPTextall ***********************************************************
**
** Ajax text data all (stream) object.
**
** Inherits an AjPText but allows more text blocks to be read from the
** same input by also inheriting the AjPTextin input object.
**
** @alias AjSTextall
** @alias AjOTextall
**
** @attr Text [AjPText] Current text block
** @attr Textin [AjPTextin] Text input for reading next
** @attr Totterms [ajulong] Count of terms so far
** @attr Count [ajuint] Count of terms so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: Text object has been returned to a new owner
**                         and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSTextall
{
    AjPText Text;
    AjPTextin Textin;
    ajulong Totterms;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjOTextall;

#define AjPTextall AjOTextall*




/* @data AjPTextAccess ********************************************************
**
** Ajax Text Access database reading object.
**
** Holds information needed to read a text entry from a database.
** Access methods are defined for each known database type.
**
** Text entries are read from the database using the defined
** database access function, which is usually a static function
** within ajtextdb.c
**
** This should be a static data object but is needed for the definition
** of AjPTextin.
**
** @alias AjSTextAccess
** @alias AjOTextAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSTextAccess
{
    const char *Name;
    AjBool (*Access)(AjPTextin textin);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    ajuint Padding;
} AjOTextAccess;

#define AjPTextAccess AjOTextAccess*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTEXTDATA_H */

ajtextdb.h/     1414437297  1010  513   100644  2558      `
/* @include ajtextdb **********************************************************
**
** AJAX TEXTDB (database) functions
**
** These functions control all aspects of AJAX text-based database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.4 $
** @modified Sep 27 pmr First version using code originally in ajseqdb
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTEXTDB_H
#define AJTEXTDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void          ajTextdbExit(void);
void          ajTextdbInit(void);
void          ajTextdbPrintAccess(AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJTEXTDB_H */

ajtextread.h/   1414437290  1010  513   100644  4732      `
/* @include ajtextread ********************************************************
**
** AJAX text data reading functions
**
** These functions control all aspects of AJAX text data reading
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.14 $
** @modified Oct 5 pmr First version
** @modified $Date: 2013/07/15 20:55:34 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTEXTREAD_H
#define AJTEXTREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

extern AjPTable textDbMethods;




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPTextin    ajTextinNew(void);
AjPTextin    ajTextinNewDatatype(const AjEDataType datatype);
void         ajTextinDel(AjPTextin* pthis);
void         ajTextinDelNofile(AjPTextin* pthis);
void         ajTextinClear(AjPTextin thys);
void         ajTextinClearNewfile(AjPTextin thys);
void         ajTextinClearNewinput(AjPTextin thys);
void         ajTextinClearNofile(AjPTextin thys);
ajuint       ajTextinGetCount(const AjPTextin thys);
ajlong       ajTextinGetFpos(const AjPTextin thys);
const AjPStr ajTextinGetQryS(const AjPTextin thys);
ajuint       ajTextinGetRecords(const AjPTextin thys);
ajuint       ajTextinGetTotrecords(const AjPTextin thys);
void         ajTextinQryC(AjPTextin thys, const char* txt);
void         ajTextinQryS(AjPTextin thys, const AjPStr str);
void         ajTextinStoreClear(AjPTextin thys,
                           ajint lines, const AjPStr rdline,
                           AjPStr *astr);
AjBool       ajTextinStoreReadline(AjPTextin thys,
                                   AjPStr* pdest, AjPStr *astr);
void         ajTextinStoreReset(AjPTextin thys, AjPStr *astr);
void         ajTextinTrace(const AjPTextin thys);
const char*  ajTextinTypeGetFields(void);
const char*  ajTextinTypeGetQlinks(void);

AjPTable     ajTextaccessGetDb(void);
const char*  ajTextaccessMethodGetQlinks(const AjPStr method);
ajuint       ajTextaccessMethodGetScope(const AjPStr method);
AjBool       ajTextaccessMethodTest(const AjPStr method);

AjBool       ajTextinAccessAsis(AjPTextin textin);
AjBool       ajTextinAccessFile(AjPTextin textin);
AjBool       ajTextinAccessFtp(AjPTextin textin);
AjBool       ajTextinAccessHttp(AjPTextin textin);
AjBool       ajTextinAccessOffset(AjPTextin textin);
AjBool       ajTextinformatTerm(const AjPStr term);
AjBool       ajTextinformatTest(const AjPStr format);
AjBool       ajTextinRead(AjPTextin textin, AjPText text);

void         ajTextinprintBook(AjPFile outf);
void         ajTextinprintHtml(AjPFile outf);
void         ajTextinprintText(AjPFile outf, AjBool full);
void         ajTextinprintWiki(AjPFile outf);

AjBool       ajTextallNext(AjPTextall thys, AjPText *Ptext);

void         ajTextallClear(AjPTextall thys);
void         ajTextallDel(AjPTextall* pthis);
AjPTextall   ajTextallNew(void);

void         ajTextinExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTEXTREAD_H */
ajtextwrite.h/  1414437290  1010  513   100644  2839      `
/* @include ajtextwrite *******************************************************
**
* AJAX text data writing functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.6 $
** @modified May 5 pmr 2010 First AJAX version
** @modified Sep 8 2010 pmr Added query and reading functions
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTEXTWRITE_H
#define AJTEXTWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajTextoutWrite(AjPOutfile outf, const AjPText text);

void          ajTextoutprintBook(AjPFile outf);
void          ajTextoutprintHtml(AjPFile outf);
void          ajTextoutprintText(AjPFile outf, AjBool full);
void          ajTextoutprintWiki(AjPFile outf);

AjBool        ajTextoutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajTextoutformatTest(const AjPStr format);

void          ajTextoutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTEXTWRITE_H */

ajtime.h/       1414437290  1010  513   100644  4712      `
/* @include ajtime ************************************************************
**
** AJAX time functions
**
** @author Copyright (C) 1998 Ian Longden
** @author Copyright (C) 2003 Jon Ison
** @version $Revision: 1.27 $
** @modified 2004-2011 Peter Rice
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTIME_H
#define AJTIME_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

#include <time.h>

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPTime **************************************************************
**
** AJAX time and data data structure. The same structure is used for both.
**
** @alias AjSTime
** @alias AjOTime
** @alias AjPDate
**
** @attr time [struct tm] Time in C standard structure
** @attr format [const char*] Format string if specified
** @attr uppercase [AjBool] Convert to upper case on output
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSTime
{
    struct tm time;
    const char *format;
    AjBool uppercase;
    char Padding[4];
} AjOTime, AjODate;

#define AjPTime AjOTime*
#define AjPDate AjODate*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

double        ajTimeDiff(const AjPTime thys, const AjPTime newtime);
void          ajTimeExit(void);
AjBool        ajTimeSetLocal(AjPTime thys, const time_t timer);

AjPTime       ajTimeNewDayFmt(const char *timefmt,
                              ajint mday, ajint mon, ajint year);
AjPTime       ajTimeNewToday(void);
AjPTime       ajTimeNewTodayFmt(const char* timefmt);

void          ajTimeDel(AjPTime *thys);

const AjPTime ajTimeRefToday(void);
const AjPTime ajTimeRefTodayFmt(const char* timefmt);

void          ajTimeTrace(const AjPTime thys);
AjBool        ajTimeSetC(AjPTime thys, const char* timestr);
AjBool        ajTimeSetS(AjPTime thys, const AjPStr timestr);
AjPTime       ajTimeNew(void);
AjPTime       ajTimeNewTime(const AjPTime thys);
time_t        ajTimeGetTimetype(const AjPTime thys);
void          ajTimeReset(void);

ajlong        ajClockNow(void);
void          ajClockReset(void);
double        ajClockDiff(ajlong starttime, ajlong nowtime);
double        ajClockSeconds(void);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated AjPTime       ajTimeToday(void);
__deprecated AjPTime       ajTimeTodayF(const char* timefmt);
__deprecated const AjPTime ajTimeTodayRef(void);
__deprecated const AjPTime ajTimeTodayRefF(const char* timefmt);
__deprecated AjPTime       ajTimeSet(const char *timefmt,
                                     ajint mday, ajint mon, ajint year);
__deprecated time_t        ajTimeMake(const AjPTime thys);
__deprecated AjBool        ajTimeLocal(const time_t timer, AjPTime thys);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJTIME_H */
ajtranslate.h/  1414437290  1010  513   100644  12313     `
/* @include ajtranslate *******************************************************
**
** AJAX translate functions
**
** These functions control all aspects of sequence translation
**
** These functions do not translate to the 'ambiguity' residues
** 'B' (Asn or Asp) and 'Z' (Glu or Gln). So the codons:
** RAC, RAT, RAY, RAU which could code for 'B' return 'X'
** and SAA, SAG, SAR which could code for 'Z' return 'X'.
**
** This translation table doesn't have the doubly ambiguous
** codons set up:
** YTR - L
** MGR - R
** YUR - L
**
** This should be attended to at some time.
**
** @author Copyright (C) 1999 Gary Williams
** @version $Revision: 1.24 $
** @modified Feb 15 1999 GWW First version
** @modified April 19 1999 GWW Second version using NCBI's GC tables
** @modified April 18 2000 GWW Reorganised many of the routines
** @modified 2001-2011 Peter Rice
** @modified $Date: 2013/02/07 10:32:50 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTRANSLATE_H
#define AJTRANSLATE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajseq.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPTrn ***************************************************************
**
** Ajax Sequence translation object.
**
** Holds the Genetic Code specification and information needed to translate
** the sequence and find initiation sites.
**
** @new ajTrnNew Default constructor
** @new ajTrnNewI Default constructor
** @new ajTrnNewC Default constructor
** @delete ajTrnDel Default destructor
** @input ajTrnReadFile Reads a Genetic Code file
** @use ajTrnCodon Translating a codon from an AjPStr
** @use ajTrnRevCodon Reverse complement translating a codon from an AjPStr
** @use ajTrnCodonC Translating a codon from a char* text
** @use ajTrnRevCodonC Translating a codon from a char* text
** @use ajTrnCodonK Translating a codon from a char* to a char
** @use ajTrnRevCodonK Reverse complement translating a codon
**                     from a char* to a char
** @use ajTrnC Translating a sequence from a char* text
** @use ajTrnRevC Reverse complement translating a sequence from a char* text
** @use ajTrnAltRevC (Alt) Reverse complement translating a sequence
**                         from a char* text
** @use ajTrnStr Translating a sequence from a AjPStr
** @use ajTrnRevStr Reverse complement translating a sequence from a AjPStr
** @use ajTrnAltRevStr (Alt) Reverse complement translating a sequence
**                           from a AjPStr
** @use ajTrnSeq Translating a sequence from a AjPSeq
** @use ajTrnRevSeq Reverse complement translating a sequence from a AjPSeq
** @use ajTrnAltRevSeq Reverse complement translating a sequence from a AjPSeq
** @use ajTrnCFrame Translating a sequence from a char* in a frame
** @use ajTrnStrFrame Translating a sequence from a AjPStr in a frame
** @use ajTrnSeqFrame Translating a sequence from a AjPSeq in a frame
** @use ajTrnSeqFramePep Translating a sequence from a AjPSeq in a frame
**                       and returns a new peptide
** @use ajTrnDangleC Translates the last 1 or two bases of a sequence
**                   in a char* text
** @use ajTrnDangleS Translates the last 1 or two bases of a sequence
**                     in a AjStr
** @use ajTrnSeqOrig Translating a sequence
** @cast ajTrnGetTitle Returns description of the translation table
** @cast ajTrnGetFilename Returns file name the translation table was read from
** @use ajTrnCodonstrTypeS Checks whether the input codon is a Start codon,
**                     a Stop codon or something else
** @use ajTrnCodonstrTypeC Checks whether a const char* codon is
**                      a Start codon, a Stop codon or something else
**
** @attr FileName [AjPStr] name of file that held the data
** @attr Title [AjPStr] title of data read from file
** @attr GC [char[16][16][16]] genetic codon table
** @attr Starts [char[16][16][16]] initiation site table
**
** @alias AjSTrn
** @alias AjOTrn
** @@
******************************************************************************/

typedef struct AjSTrn
{
    AjPStr FileName;
    AjPStr Title;
    char GC[16][16][16];
    char Starts[16][16][16];
} AjOTrn;

#define AjPTrn AjOTrn*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void          ajTrnDel(AjPTrn* pthis);
void          ajTrnExit(void);
AjPTrn        ajTrnNew(const AjPStr trnFileName);
AjPTrn        ajTrnNewI(ajint trnFileNameInt);
AjPTrn        ajTrnNewC(const char *trnFileName);
void          ajTrnReadFile(AjPTrn trnObj, AjPFile trnFile);
AjPSeq        ajTrnNewPep(const AjPSeq nucleicSeq, ajint frame);
char          ajTrnCodonS(const AjPTrn trnObj, const AjPStr codon);
char          ajTrnCodonRevS(const AjPTrn trnObj, const AjPStr codon);
char          ajTrnCodonC(const AjPTrn trnObj, const char *codon);
char          ajTrnCodonRevC(const AjPTrn trnObj, const char *codon);
char          ajTrnCodonK(const AjPTrn trnObj, const char *codon);
char          ajTrnRevCodonK(const AjPTrn trnObj, const char *codon);
void          ajTrnRevStr(const AjPTrn trnObj, const AjPStr str,
                          AjPStr *pep);
void          ajTrnSeqC(const AjPTrn trnObj, const char *str, ajint len,
                        AjPStr *pep);
void          ajTrnSeqInitC(const AjPTrn trnObj, const char *str, ajint len,
                            AjPStr *pep);
void          ajTrnSeqRevC(const AjPTrn trnObj, const char *str, ajint len,
                           AjPStr *pep);
void          ajTrnSeqRevinitC(const AjPTrn trnObj, const char *str, ajint len,
                               AjPStr *pep);
void          ajTrnSeqAltRevC(const AjPTrn trnObj, const char *str, ajint len,
                              AjPStr *pep);
void          ajTrnSeqAltRevinitC(const AjPTrn trnObj, const char *str,
                                  ajint len, AjPStr *pep);
void          ajTrnSeqS(const AjPTrn trnObj, const AjPStr str,
                        AjPStr *pep);
void          ajTrnSeqAltRevS(const AjPTrn trnObj, const AjPStr str,
                              AjPStr *pep);
void          ajTrnSeqSeq(const AjPTrn trnObj, const AjPSeq seq,
                          AjPStr *pep);
void          ajTrnSeqRevSeq(const AjPTrn trnObj, const AjPSeq seq,
                             AjPStr *pep);
void          ajTrnSeqAltRevSeq(const AjPTrn trnObj, const AjPSeq seq,
                                AjPStr *pep);
void          ajTrnSeqFrameC(const AjPTrn trnObj, const char *seq, ajint len,
                             ajint frame, AjPStr *pep);
void          ajTrnSeqFrameInitC(const AjPTrn trnObj, const char *seq,
                                 ajint len, ajint frame, AjPStr *pep);
const AjPStr  ajTrnName(ajint trnFileNameInt);
void          ajTrnSeqFrameS(const AjPTrn trnObj, const AjPStr seq,
                             ajint frame, AjPStr *pep);
void          ajTrnSeqFrameInitS(const AjPTrn trnObj, const AjPStr seq,
                                 ajint frame, AjPStr *pep);
void          ajTrnSeqFrameSeq(const AjPTrn trnObj, const AjPSeq seq,
                               ajint frame, AjPStr *pep);
void          ajTrnSeqFrameSeqInit(const AjPTrn trnObj, const AjPSeq seq,
                                   ajint frame, AjPStr *pep);
ajint         ajTrnSeqDangleC(const AjPTrn trnObj, const char *seq,
                              ajint frame, AjPStr *pep);
ajint         ajTrnSeqDangleS(const AjPTrn trnObj, const AjPStr seq,
                              ajint frame, AjPStr *pep);
AjPSeq        ajTrnSeqFramePep(const AjPTrn trnObj, const AjPSeq seq,
                               ajint frame);
AjPStr        ajTrnGetTitle(const AjPTrn thys);
AjPStr        ajTrnGetFilename(const AjPTrn thys);
ajint         ajTrnCodonstrTypeC(const AjPTrn trnObj,
                                 const char *codon, char *aa);
ajint         ajTrnCodonstrTypeS(const AjPTrn trnObj,
                                 const AjPStr codon, char *aa);
AjPSeq        ajTrnSeqInit(const AjPTrn trnObj, const AjPSeq seq,
                           ajint frame);
AjPSeq        ajTrnSeqOrig(const AjPTrn trnObj, const AjPSeq seq,
                           ajint frame);

/*
** End of prototype definitions
*/





#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated ajint         ajTrnStartStop(const AjPTrn trnObj,
                                          const AjPStr codon, char *aa);
__deprecated ajint         ajTrnStartStopC(const AjPTrn trnObj,
                                           const char *codon, char *aa);
__deprecated AjPStr        ajTrnGetFileName(const AjPTrn thys);
__deprecated const  AjPStr ajTrnCodon(const AjPTrn trnObj, const AjPStr codon);
__deprecated const  AjPStr ajTrnRevCodon(const AjPTrn trnObj,
                                         const AjPStr codon);
__deprecated void    ajTrnC(const AjPTrn trnObj, const char *str, ajint len,
                            AjPStr *pep);
__deprecated void    ajTrnRevC(const AjPTrn trnObj, const char *str,
                               ajint len, AjPStr *pep);
__deprecated void    ajTrnAltRevC(const AjPTrn trnObj, const char *str,
                                  ajint len, AjPStr *pep);
__deprecated void    ajTrnStr(const AjPTrn trnObj, const AjPStr str,
                              AjPStr *pep);
__deprecated void    ajTrnAltRevStr(const AjPTrn trnObj, const AjPStr str,
                                    AjPStr *pep);
__deprecated void    ajTrnSeq(const AjPTrn trnObj, const AjPSeq seq,
                              AjPStr *pep);
__deprecated void    ajTrnRevSeq(const AjPTrn trnObj, const AjPSeq seq,
                                 AjPStr *pep);
__deprecated void    ajTrnAltRevSeq(const AjPTrn trnObj, const AjPSeq seq,
                                    AjPStr *pep);
__deprecated void    ajTrnCFrame(const AjPTrn trnObj, const char *seq,
                                 ajint len, ajint frame, AjPStr *pep);
__deprecated void    ajTrnStrFrame(const AjPTrn trnObj, const AjPStr seq,
                                   ajint frame, AjPStr *pep);
__deprecated void    ajTrnSeqFrame(const AjPTrn trnObj, const AjPSeq seq,
                                   ajint frame, AjPStr *pep);
__deprecated ajint   ajTrnCDangle(const AjPTrn trnObj, const char *seq,
                                  ajint len, ajint frame, AjPStr *pep);
__deprecated ajint   ajTrnStrDangle(const AjPTrn trnObj, const AjPStr seq,
                                    ajint frame, AjPStr *pep);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJTRANSLATE_H */

ajtree.h/       1414437290  1010  513   100644  5459      `
/* @include ajtree ************************************************************
**
** AJAX tree functions
**
** These functions create and control trees.
**
** @author Copyright (C) 2004 Peter Rice
** @version $Revision: 1.15 $
** @modified $Date: 2011/10/19 14:52:22 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJTREE_H
#define AJTREE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @enum AjETreeType **********************************************************
**
** Tree type
**
** @value ajETreeAny Any
** @value ajETreeStr String data
** @value ajETreeSpecial Other special data
******************************************************************************/

typedef enum AjOTreeType
{
    ajETreeAny,
    ajETreeStr,
    ajETreeSpecial
} AjETreeType;

#define AjPTreeNode AjOTreeNode*




/* @data AjPTree **************************************************************
**
** Tree data object. Trees are simple linked nodes with back pointers.
**
** Trees can hold any data type. Special functions are available for trees
** of AjPStr values. In general, these functions are the same. Many are
** provided for ease of use to save remembering which calls need special cases.
**
** At the top level, a tree has a list of named nodes and a pointer to the
** top node in the tree.
**
** @new ajTreeNew Creates a new general tree.
** @new ajTreestrNew Creates a new AjPStr tree.
**
** @attr Right [struct AjSTree*] Next tree node
** @attr Left  [struct AjSTree*] Previous tree node
** @attr Up    [struct AjSTree*] Parent tree node
** @attr Down  [struct AjSTree*] First child tree node
** @attr Name [AjPStr] Name string
** @attr Data [void*] Data value
** @attr Freedata [AjBool function] Complex data free function
** @attr Type [AjEnum] Tree type (any, string, etc.)
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSTree
{
    struct AjSTree* Right;
    struct AjSTree* Left;
    struct AjSTree* Up;
    struct AjSTree* Down;
    AjPStr Name;
    void* Data;
    AjBool (*Freedata)(void** data);
    AjEnum Type;
    char Padding[4];
} AjOTree;

#define AjPTree AjOTree*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool  ajTreeAddData(AjPTree thys, const AjPStr name, void* data);
AjPTree ajTreeAddNode(AjPTree thys);
AjPTree ajTreeAddSubNode(AjPTree thys);
AjPTree ajTreeCopy(const AjPTree thys);

void    ajTreeDel(AjPTree* pthis);
void    ajTreeExit(void);
void    ajTreeFree(AjPTree* pthis);
AjPTree ajTreeFollow(const AjPTree thys, const AjPTree parent);
ajuint  ajTreeLength(const AjPTree thys);
void    ajTreeMap(AjPTree thys, void apply(void** x, void* cl), void* cl);
AjPTree ajTreeNew(void);
AjPTree ajTreeNewNewick(const AjPStr newick);
AjBool  ajTreestrAddData(AjPTree thys, const AjPStr name, AjPStr data);
AjPTree ajTreestrCopy(const AjPTree thys);
void    ajTreestrDel(AjPTree* pthis);
void    ajTreestrFree(AjPTree* pthis);
ajuint  ajTreestrLength(const AjPTree thys);
void    ajTreestrMap(AjPTree thys, void apply(AjPStr* x, void* cl), void* cl);
AjPTree ajTreestrNew(void);
ajuint  ajTreestrToArray(const AjPTree thys, AjPStr** array);
ajuint  ajTreeToArray(const AjPTree thys, void*** array);
void    ajTreeToNewick(const AjPTree thys, AjPStr* Pnewick);
void    ajTreeTrace(const AjPTree thys);
void    ajTreestrTrace(const AjPTree thys);

AjPTree ajTreeDown(const AjPTree thys);
AjPTree ajTreeNext(const AjPTree thys);
AjPTree ajTreePrev(const AjPTree thys);
AjPTree ajTreeUp(const AjPTree thys);

void    ajTreeDummyFunction(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJTREE_H */

ajurl.h/        1414437290  1010  513   100644  2701      `
/* @include ajurl *************************************************************
**
** AJAX url functions
**
** These functions control all aspects of AJAX url
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.4 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJURL_H
#define AJURL_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajurldata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPUrl       ajUrlNew(void);
void         ajUrlDel(AjPUrl *Purl);
void         ajUrlClear(AjPUrl url);
const AjPStr ajUrlGetDb(const AjPUrl url);
const AjPStr ajUrlGetId(const AjPUrl url);
const char*  ajUrlGetQryC(const AjPUrl url);
const AjPStr ajUrlGetQryS(const AjPUrl url);
void         ajUrlExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJURL_H */

ajurldata.h/    1414437290  1010  513   100644  7412      `
/* @include ajurldata *********************************************************
**
** AJAX url data structures
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.7 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJURLDATA_H
#define AJURLDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"
#include "ajresourcedata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPUrl ***************************************************************
**
** Ajax url object.
**
** Holds the url itself, plus associated information.
**
** @alias AjSUrl
** @alias AjOUrl
**
** @attr Id        [AjPStr]  Id of term
** @attr Db        [AjPStr]  Database name from input
** @attr Setdb     [AjPStr]  Database name from command line
** @attr Full      [AjPStr]  Full name
** @attr Qry       [AjPStr]  Query for re-reading
** @attr Formatstr [AjPStr]  Input format name
** @attr Filename  [AjPStr]  Original filename
** @attr Lines     [AjPStr*]  Full text
** @attr Resqry    [AjPResquery]  Resource query
** @attr Fpos      [ajlong]  File position
** @attr Format    [AjEnum]  Input format enum
** @attr Count     [ajuint]  Number of lines read
** @@
******************************************************************************/

typedef struct AjSUrl
{
    AjPStr  Id;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr *Lines;
    AjPResquery Resqry;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint Count;
} AjOUrl;

#define AjPUrl AjOUrl*




/* @data AjPUrlin *************************************************************
**
** Ajax url input object.
**
** Holds the input specification and information needed to read
** the url and possible further entries
**
** @alias AjSUrlin
** @alias AjOUrlin
**
** @attr Input [AjPTextin] General text input object
** @attr Resource [AjPResource] Resource object
** @attr UrlList [AjPList] Result URLs list
** @attr QryList [AjPList] Resource query objects for result URLs list
** @attr UrlData [void*] Format data for reuse, e.g. multiple term input
**                         (unused in current code)
** @attr Identifiers [AjPStr] Identifiers of source entry
** @attr Accession [AjPStr] Accession number of source entry
** @attr IdTypes [AjPStr] Identifier types in DRCAT
** @attr IsSwiss [AjBool] True if URL is from a SwissProt reference
** @attr IsEmbl [AjBool] True if URL is from an Embl/GenBank/DDBJ reference
** @@
******************************************************************************/

typedef struct AjSUrlin
{
    AjPTextin Input;
    AjPResource Resource;
    AjPList UrlList;
    AjPList QryList;
    void *UrlData;
    AjPStr Identifiers;
    AjPStr Accession;
    AjPStr IdTypes;
    AjBool IsSwiss;
    AjBool IsEmbl;
} AjOUrlin;

#define AjPUrlin AjOUrlin*




/* @data AjPUrlall ************************************************************
**
** Ajax URL all (stream) object.
**
** Inherits an AjPUrl but allows more URLs to be read from the
** same input by also inheriting the AjPUrlin input object.
**
** @alias AjSUrlall
** @alias AjOUrlall
**
** @attr Url [AjPUrl] Current URL
** @attr Urlin [AjPUrlin] URL input for reading next
** @attr Totterms [ajulong] Count of terms so far
** @attr Count [ajuint] Count of terms so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: URL object has been returned to a new
**                         owner and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSUrlall
{
    AjPUrl Url;
    AjPUrlin Urlin;
    ajulong Totterms;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjOUrlall;

#define AjPUrlall AjOUrlall*




/* @data AjPUrlAccess *********************************************************
**
** Ajax url access database reading object.
**
** Holds information needed to read an url entry from a database.
** Access methods are defined for each known database type.
**
** Url entries are read from the database using the defined
** database access function, which is usually a static function
** within ajurldb.c
**
** This should be a static data object but is needed for the definition
** of AjPUrlin.
**
** @alias AjSUrlAccess
** @alias AjOUrlAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSUrlAccess
{
    const char *Name;
    AjBool (*Access)(AjPUrlin urlin);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOUrlAccess;

#define AjPUrlAccess AjOUrlAccess*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJURLDATA_H */
ajurldb.h/      1414437297  1010  513   100644  2513      `
/* @include ajurldb ***********************************************************
**
** AJAX url database functions
**
** These functions control all aspects of AJAX url database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.3 $
** @modified Oct 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJURLDB_H
#define AJURLDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void           ajUrldbExit(void);
void           ajUrldbInit(void);
void           ajUrldbPrintAccess (AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJTEXTDB_H */

ajurlread.h/    1414437290  1010  513   100644  3677      `
/* @include ajurlread *********************************************************
**
** AJAX url reading functions
**
** These functions control all aspects of AJAX url reading
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.5 $
** @modified Oct 5 pmr First version
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJURLREAD_H
#define AJURLREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajurldata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void             ajUrlallClear(AjPUrlall thys);
void             ajUrlallDel(AjPUrlall* pthis);
AjPUrlall        ajUrlallNew(void);
const AjPStr     ajUrlallGeturlId(const AjPUrlall thys);

void             ajUrlinClear(AjPUrlin thys);
void             ajUrlinDel(AjPUrlin* pthis);
AjPUrlin         ajUrlinNew(void);
void             ajUrlinQryC(AjPUrlin thys, const char* txt);
void             ajUrlinQryS(AjPUrlin thys, const AjPStr str);
void             ajUrlinTrace(const AjPUrlin thys);

void             ajUrlinprintBook(AjPFile outf);
void             ajUrlinprintHtml(AjPFile outf);
void             ajUrlinprintText(AjPFile outf, AjBool full);
void             ajUrlinprintWiki(AjPFile outf);

AjBool           ajUrlallNext(AjPUrlall thys, AjPUrl *Purl);
AjBool           ajUrlinRead(AjPUrlin urlin, AjPUrl thys);

AjBool           ajUrlinformatTerm(const AjPStr term);
AjBool           ajUrlinformatTest(const AjPStr format);
void             ajUrlinExit(void);
const char*      ajUrlinTypeGetFields(void);
const char*      ajUrlinTypeGetQlinks(void);

AjPTable         ajUrlaccessGetDb(void);
const char*      ajUrlaccessMethodGetQlinks(const AjPStr method);
ajuint           ajUrlaccessMethodGetScope(const AjPStr method);
AjBool           ajUrlaccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJURLREAD_H */

ajurlwrite.h/   1414437290  1010  513   100644  2759      `
/* @include ajurlwrite ********************************************************
**
** AJAX url writing functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.6 $
** @modified Oct 25 2010 pmr First AJAX version
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJURLWRITE_H
#define AJURLWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajurldata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajUrloutWrite(AjPOutfile outf, const AjPUrl url);

void          ajUrloutprintBook(AjPFile outf);
void          ajUrloutprintHtml(AjPFile outf);
void          ajUrloutprintText(AjPFile outf, AjBool full);
void          ajUrloutprintWiki(AjPFile outf);

AjBool        ajUrloutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajUrloutformatTest(const AjPStr format);

void          ajUrloutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJURLWRITE_H */

ajutil.h/       1414437290  1010  513   100644  4139      `
/* @include ajutil ************************************************************
**
** AJAX utility functions
** @author Copyright (C) 1998 Ian Longden
** @author Copyright (C) 1998 Peter Rice
** @version $Revision: 1.24 $
** @modified $Date: 2011/10/18 14:23:41 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJUTIL_H
#define AJUTIL_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

__noreturn void   ajExit(void);
__noreturn void   ajExitAbort(void);
__noreturn void   ajExitBad(void);

void          ajByteRevLen2(ajshort* i);
void          ajByteRevLen4(ajint* i);
void          ajByteRevLen8(ajlong* i);
void          ajByteRevLen2u(ajushort* i);
void          ajByteRevLen4u(ajuint* i);
void          ajByteRevLen8u(ajulong* i);
void          ajByteRevInt(ajint* sval);
void          ajByteRevShort(ajshort* ival);
void          ajByteRevLong(ajlong* lval);
void          ajByteRevUint(ajuint* ival);
void          ajByteRevUlong(ajulong* lval);

void          ajReset(void);

void          ajUtilCatch(void);
AjBool        ajUtilGetBigendian(void);
AjBool        ajUtilGetUid(AjPStr* Puid);
void          ajUtilLoginfo(void);
const AjPStr  ajUtilGetProgram(void);
const AjPStr  ajUtilGetCmdline(void);
const AjPStr  ajUtilGetInputs(void);

size_t ajUtilBase64DecodeC(AjPStr *dest, const char *src);
AjBool ajUtilBase64EncodeC(AjPStr *dest, size_t size, const unsigned char *src);

/*
** End of prototype definitions
*/




#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif /* AJ_COMPILE_DEPRECATED_BOOK */

#ifdef AJ_COMPILE_DEPRECATED

__deprecated void  ajAcdProgramS(AjPStr* pgm);
__deprecated const char*  ajAcdProgram(void);
__deprecated const AjPStr  ajAcdGetProgram(void);
__deprecated const AjPStr  ajAcdGetCmdline(void);
__deprecated const AjPStr  ajAcdGetInputs(void);
__deprecated void   ajLogInfo(void);
__deprecated void   ajUtilRev2(short* i);
__deprecated void   ajUtilRev4(ajint* i);
__deprecated void   ajUtilRev8(ajlong* i);
__deprecated void   ajUtilRevInt(ajint* ival);
__deprecated void   ajUtilRevShort(short* ival);
__deprecated void   ajUtilRevLong(ajlong* lval);
__deprecated void   ajUtilRevUint(ajuint* ival);
__deprecated AjBool ajUtilBigendian(void);
__deprecated AjBool ajUtilUid(AjPStr* dest);

#endif /* AJ_COMPILE_DEPRECATED */




AJ_END_DECLS

#endif /* !AJUTIL_H */

ajvar.h/        1414437290  1010  513   100644  3385      `
/* @include ajvar *************************************************************
**
** AJAX variation functions
**
** These functions control all aspects of AJAX variation
** parsing and include simple utilities.
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.7 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/07/02 17:37:28 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJVAR_H
#define AJVAR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajvardata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPVar       ajVarNew(void);
void         ajVarDel(AjPVar *Pvar);
void         ajVarClear(AjPVar var);
void         ajVarReset(AjPVar var);

AjPVarData   ajVardataNew(void);
void         ajVardataDel(AjPVarData *Pvar);
void         ajVardataClear(AjPVarData var);

AjPVarField  ajVarfieldNew(void);
void         ajVarfieldDel(AjPVarField *Pvar);
void         ajVarfieldClear(AjPVarField var);
const char*  ajVarfieldGetNumber(const AjPVarField var);
const char*  ajVarfieldGetType(const AjPVarField var);

AjPVarHeader ajVarheaderNew(void);
void         ajVarheaderDel(AjPVarHeader *Pvar);
void         ajVarheaderClear(AjPVarHeader var);

AjPVarSample ajVarsampleNew(void);
void         ajVarsampleDel(AjPVarSample *Pvar);
void         ajVarsampleClear(AjPVarSample var);

const AjPStr ajVarGetDb(const AjPVar var);
const AjPStr ajVarGetId(const AjPVar var);
const char*  ajVarGetQryC(const AjPVar var);
const AjPStr ajVarGetQryS(const AjPVar var);

void         ajVarExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJVAR_H */

ajvarbcf.h/     1414437290  1010  513   100644  7348      `
/* @include ajvarbcf **********************************************************
**
** BCF files reading/writing functions
**
** @version $Revision: 1.6 $
** @modified 2011 Mahmut Uludag ported from bcftools project (samtools.sf.net)
** @modified $Date: 2012/07/14 16:51:22 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

/* The MIT License

   Copyright (c) 2010 Broad Institute

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   "Software"), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
*/


#ifndef AJVARBCF_H
#define AJVARBCF_H


#define BCF_VERSION "0.1.17-dev (r973:277)"

#define AjPVarBcfFile AjOSeqBamBgzf*

#define bgzf_read(fp, buf, len) ajSeqBamBgzfRead(fp, buf, len)
#define bgzf_write(fp, buf, len) ajSeqBamBgzfWrite(fp, buf, len)

/*
  A member in the structs below is said to "primary" if its content
  cannot be inferred from other members in any of structs below; a
  member is said to be "derived" if its content can be derived from
  other members. For example, AjOVarBcf::str is primary as this comes from
  the input data, while AjOVarBcf::info is derived as it can always be
  correctly set if we know AjOVarBcf::str. Derived members are for quick
  access to the content and must be synchronized with the primary data.
 */


/* @data AjPVarBcfGinfo *******************************************************
**
** Individual BCF variation records
**
** derived info: fmt, len (<-AjOVarBcf::fmt)
**
** @alias AjOVarBcfGinfo
** @alias AjSVarBcfGinfo
**
** @attr fmt [ajuint] format of the block, set by bcf_str2int()
** @attr len [ajint] length of data for each individual
** @attr data [void*] concatenated data
**
******************************************************************************/

typedef struct AjSVarBcfGinfo
{
    ajuint fmt;
    ajint len;
    void *data;
} AjOVarBcfGinfo;

#define AjPVarBcfGinfo AjOVarBcfGinfo*




/* @data AjPVarBcf ********************************************************
**
** Individual BCF variation records
**
** derived info: ref, alt, flt, info, fmt (<-str),
**               n_gi (<-fmt),
**               n_alleles (<-alt),
**               n_smpl (<-bcf_hdr_t::n_smpl)
**
** @alias AjOVarBcf
** @alias AjSVarBcf
**
** @attr tid [ajint] reference sequence id
** @attr pos [ajint] 0-based position
** @attr l_str [ajint] length of ->str
** @attr m_str [ajint] allocated size of ->str
** @attr qual [float] SNP quality
** @attr Padding [ajuint] Padding to alignment boundary
** @attr str [char*] concatenated string of variable length strings in VCF
** 		     (from col.2 to col.7)
** @attr ref [char*] reference sequence name (pointer to ->str)
** @attr alt [char*] alternate allele(s) (pointer to ->str)
** @attr flt [char*] filters applied (pointer to ->str)
** @attr info [char*] variant information (pointer to ->str)
** @attr fmt [char*] format of the genotype fields (pointer to ->str)
** @attr n_gi [ajint] number of genotype fields
** @attr m_gi [ajint] allocated size genotype fields
** @attr gi [AjOVarBcfGinfo*] array of genotype fields
** @attr n_alleles [ajint] number of alleles
** @attr n_smpl [ajint] number of samples
**
******************************************************************************/

typedef struct AjSVarBcf
{
    ajint tid;
    ajint pos;
    ajint l_str;
    ajint m_str;
    float qual;
    ajuint Padding;
    char *str;
    char *ref;
    char *alt;
    char *flt;
    char *info;
    char *fmt;
    ajint n_gi;
    ajint m_gi;
    AjOVarBcfGinfo *gi;
    ajint n_alleles;
    ajint n_smpl;
} AjOVarBcf;

#define AjPVarBcf AjOVarBcf*




/* @data AjPVarBcfHeader ******************************************************
**
** BCF header
**
** derived info: n_ref (<-name),
** 		 n_smpl (<-sname),
** 		 ns (<-name),
** 		 sns (<-sname)
**
** @alias AjOVarBcfHeader
** @alias AjSVarBcfHeader
**
** @attr n_ref  [ajint] number of reference sequences
** @attr n_smpl [ajint] number of samples
** @attr l_nm   [ajint] length of concatenated sequence names; 0 padded
** @attr l_smpl [ajint] length of concatenated sample names; 0 padded
** @attr l_txt  [ajint] length of header text (lines started with ##)
** @attr Padding [ajuint] Padding to alignment boundary
** @attr name   [char*] concatenated sequence names
** @attr sname  [char*] concatenated sample names
** @attr txt    [char*] header text
** @attr ns    [const char**] array of sequence names (pointer to ->name)
** @attr sns   [const char**] array of sample names   (pointer to ->sname)
**
******************************************************************************/

typedef struct AjSVarBcfHeader
{
    ajint n_ref;
    ajint n_smpl;
    ajint l_nm;
    ajint l_smpl;
    ajint l_txt;
    ajuint Padding;
    char *name;
    char *sname;
    char *txt;
    const char **ns;
    const char **sns;
} AjOVarBcfHeader;

#define AjPVarBcfHeader AjOVarBcfHeader*




int      ajVarbcfRead(AjPVarBcfFile fp, ajint nsmpl, AjPVarBcf b);
int      ajVarbcfSync(AjPVarBcf b);
int      ajVarbcfWrite(AjPVarBcfFile fp, ajint nsmpl, const AjPVarBcf b);

AjPVarBcfHeader ajVarbcfHdrRead(AjPVarBcfFile fp);
int      ajVarbcfHdrSync(AjPVarBcfHeader b);
int      ajVarbcfHdrWrite(AjPVarBcfFile fp, const AjPVarBcfHeader h);

void     ajVarbcfHdrDel(AjPVarBcfHeader h);
int      ajVarbcfDel(AjPVarBcf b);

void     ajVarbcfFmtCore(const AjPVarBcfHeader h, AjPVarBcf b, AjPStr* s);




static inline ajuint bcf_str2int(const char *str, int l)
{
    int i;
    ajuint x = 0;

    for (i = 0; i < l && i < 4; ++i)
    {
	if (str[i] == 0)
	    return x;

	x = x<<8 | str[i];
    }

    return x;
}


#endif /* !AJVARBCF_H */
ajvardata.h/    1414437290  1010  513   100644  12794     `
/* @include ajvardata *********************************************************
**
** AJAX variation data structures
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.11 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/04/26 17:36:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJVARDATA_H
#define AJVARDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define varNumAlt  -1
#define varNumGen  -2
#define varNumAny  -3





/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @enum AjEVarType ***********************************************************
**
** Variation metadata value type for INFO and FORMAT definitions
**
** @value AJVAR_UNKNOWN   Unknown
** @value AJVAR_INT       Integer
** @value AJVAR_FLOAT     Float
** @value AJVAR_CHAR      Character
** @value AJVAR_STR       String
** @value AJVAR_FLAG      Flag (INFO, not FORMAT)
** @value AJVAR_MAX       Above last defined value
******************************************************************************/

typedef enum AjOVarType
{
    AJVAR_UNKNOWN, AJVAR_INT, AJVAR_FLOAT, AJVAR_CHAR, AJVAR_STR,
    AJVAR_FLAG, AJVAR_MAX
} AjEVarType;




/* @data AjPVarHeader *********************************************************
**
** Ajax variation header object.
**
** Holds the metadata definitions for variation data
**
** Based on the requirements for VCF format 4.1
**
** @alias AjSVarHeader
** @alias AjOVarHeader
**
** @attr Header    [AjPList] Tag-value list of general header records
** @attr Fields    [AjPList] List of VarField definitions (INFO and FORMAT)
** @attr Samples   [AjPList] List of VarSample definitions
** @attr Filters   [AjPList] List of Filter tag-value definitions
** @attr Alts      [AjPList] List of Alternate tag-value definitions
** @attr Pedigrees [AjPList] List of Pedigree tag-value definitions
** @attr SampleIds [AjPList] List of SampleID strings from column headings
** @attr RefseqIds [AjPTable] Table of reference sequence name-id pairs
** @@
******************************************************************************/

typedef struct AjSVarHeader
{
    AjPList  Header;
    AjPList  Fields;
    AjPList  Samples;
    AjPList  Filters;
    AjPList  Alts;
    AjPList  Pedigrees;
    AjPList  SampleIds;
    AjPTable RefseqIds;
} AjOVarHeader;

#define AjPVarHeader AjOVarHeader*




/* @data AjPVarField **********************************************************
**
** Ajax variation field description object.
**
** Holds the metadata definitions for variation data fields
**
** Based on the requirements for VCF format 4.1
**
** @alias AjSVarField
** @alias AjOVarField
**
** @attr Field  [AjPStr] Field name (INFO, FILTER, FORMAT)
** @attr Id     [AjPStr] Identifier
** @attr Desc   [AjPStr] Description
** @attr Type   [AjEVarType] Type of value
** @attr Number [ajint] Count of values
** @@
******************************************************************************/

typedef struct AjSVarField
{
    AjPStr Field;
    AjPStr Id;
    AjPStr Desc;
    AjEVarType Type;
    ajint Number;
} AjOVarField;

#define AjPVarField AjOVarField*




/* @data AjPVarSample *********************************************************
**
** Ajax variation sample description object.
**
** Holds the metadata definitions for variation data samples
**
** Based on the requirements for VCF format 4.1
**
** @alias AjSVarSample
** @alias AjOVarSample
**
** @attr Id      [AjPStr] Identifier
** @attr Desc    [AjPStr*] Descriptions for each genome identifier
** @attr Genomes [AjPStr*] Genome identifiers
** @attr Mixture [float*] Mixture proportions, summing to 1.0
** @attr Number  [ajuint] Count of genome identifiers
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSVarSample
{
    AjPStr Id;
    AjPStr *Desc;
    AjPStr *Genomes;
    float *Mixture;
    ajuint Number;
    ajuint Padding;
} AjOVarSample;

#define AjPVarSample AjOVarSample*




/* @data AjPVarData ***********************************************************
**
** Ajax variation data object.
**
** Holds the metadata definitions for variation data records
**
** Based on the requirements for VCF format 4.1
**
** @alias AjSVarAlt
** @alias AjOVarAlt
**
** @attr Chrom   [AjPStr] Chromosome
** @attr Id      [AjPStr] Identifier
** @attr Ref     [AjPStr] Reference sequence(s)
** @attr Alt     [AjPStr] Alternate sequence(s)
** @attr Qual    [AjPStr] Quality
** @attr Filter  [AjPStr] Filter(s) failed
** @attr Info    [AjPStr] Info field metadata
** @attr Format  [AjPStr] Format field metadata
** @attr Samples [AjPList] Sample string records
** @attr Pos     [ajuint] Position
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSVarData
{
    AjPStr Chrom;
    AjPStr Id;
    AjPStr Ref;
    AjPStr Alt;
    AjPStr Qual;
    AjPStr Filter;
    AjPStr Info;
    AjPStr Format;
    AjPList Samples;
    ajuint Pos;
    ajuint Padding;
} AjOVarData;

#define AjPVarData AjOVarData*




/* @data AjPVar ***************************************************************
**
** Ajax variation object.
**
** Holds the variation itself, plus associated information.
**
** @alias AjSVar
** @alias AjOVar
**
** @attr Id        [AjPStr]  Id of term
** @attr Db        [AjPStr]  Database name from input
** @attr Setdb     [AjPStr]  Database name from command line
** @attr Full      [AjPStr]  Full name
** @attr Qry       [AjPStr]  Query for re-reading
** @attr Formatstr [AjPStr]  Input format name
** @attr Filename  [AjPStr]  Original filename
** @attr Textptr   [AjPStr]  Full text
** @attr Data      [AjPList] Data records as AjPVarData objects
** @attr Header    [AjPVarHeader] Header record metadata
** @attr Fpos      [ajlong]  File position
** @attr Format    [AjEnum]  Input format enum
** @attr Hasdata   [AjBool]  True when data has been loaded
** @@
******************************************************************************/

typedef struct AjSVar
{
    AjPStr  Id;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPStr  Textptr;
    AjPList Data;
    AjPVarHeader Header;
    ajlong  Fpos;
    AjEnum  Format;
    AjBool Hasdata;
} AjOVar;

#define AjPVar AjOVar*




/* @data AjPVarin *************************************************************
**
** Ajax variation input object.
**
** Holds the input specification and information needed to read
** the variation and possible further entries
**
** @alias AjSVarin
** @alias AjOVarin
**
** @attr Input [AjPTextin] General text input object
** @attr Begin     [ajint]     Start position
** @attr End       [ajint]     End position
** @attr Loading [AjBool] True if data is now loading
** @attr Padding [char[4]] Padding to alignment boundary
** @attr VarData [void*] Format data for reuse, e.g. multiple term input
**                       (unused in current code)
** @@
******************************************************************************/

typedef struct AjSVarin
{
    AjPTextin Input;
    ajint Begin;
    ajint End;
    AjBool Loading;
    char Padding[4];
    void *VarData;
} AjOVarin;

#define AjPVarin AjOVarin*




/* @data AjPVarload ***********************************************************
**
** Ajax variation loader object.
**
** Inherits an AjPVar but allows more variations to be read from the
** same input by also inheriting the AjPVarin input object.
**
** @alias AjSVarload
** @alias AjOVarload
**
** @attr Var [AjPVar] Current variation
** @attr Varin [AjPVarin] Variation input for reading next
** @attr Count [ajuint] Count of terms so far
** @attr Loading [AjBool] True if data is now loading
** @attr Returned [AjBool] if true: Variation object has been returned to a new
**                         owner and is not to be deleted by the destructor
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSVarload
{
    AjPVar Var;
    AjPVarin Varin;
    ajuint Count;
    AjBool Loading;
    AjBool Returned;
    ajuint Padding;
} AjOVarload;

#define AjPVarload AjOVarload*




/* @data AjPVarall ************************************************************
**
** Ajax variation all (stream) object.
**
** Inherits an AjPVar but allows more variations to be read from the
** same input by also inheriting the AjPVarin input object.
**
** @alias AjSVarall
** @alias AjOVarall
**
** @attr Loader [AjPVarload] Variation loader for reading next
** @attr Totterms [ajulong] Count of terms so far
** @attr Count [ajuint] Count of terms so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: Variation object has been returned to a new
**                         owner and is not to be deleted by the destructor
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSVarall
{
    AjPVarload Loader;
    ajulong Totterms;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    ajuint Padding;
} AjOVarall;

#define AjPVarall AjOVarall*




/* @data AjPVarAccess *********************************************************
**
** Ajax variation access database reading object.
**
** Holds information needed to read a variation entry from a database.
** Access methods are defined for each known database type.
**
** Variation entries are read from the database using the defined
** database access function, which is usually a static function
** within ajvardb.c
**
** This should be a static data object but is needed for the definition
** of AjPVarin.
**
** @alias AjSVarAccess
** @alias AjOVarAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @attr Padding [AjBool] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSVarAccess
{
    const char *Name;
    AjBool (*Access)(AjPVarin varin);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
    AjBool Padding;
} AjOVarAccess;

#define AjPVarAccess AjOVarAccess*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJVARDATA_H */
ajvardb.h/      1414437297  1010  513   100644  2524      `
/* @include ajvardb ***********************************************************
**
** AJAX variation database functions
**
** These functions control all aspects of AJAX variation database access
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.3 $
** @modified Oct 2010 pmr first version
** @modified $Date: 2011/10/18 14:23:39 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJVARDB_H
#define AJVARDB_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void           ajVardbExit(void);
void           ajVardbInit(void);
void           ajVardbPrintAccess (AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !AJVARDB_H */
ajvarread.h/    1414437290  1010  513   100644  4030      `
/* @include ajvarread *********************************************************
**
** AJAX variation data reading functions
**
** These functions control all aspects of AJAX variation data reading
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.7 $
** @modified Oct 5 pmr First version
** @modified $Date: 2012/07/02 18:07:01 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJVARREAD_H
#define AJVARREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajvardata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void             ajVarallClear(AjPVarall thys);
void             ajVarallDel(AjPVarall* pthis);
AjPVarall        ajVarallNew(void);
const AjPStr     ajVarallGetvarId(const AjPVarall thys);

void             ajVarloadClear(AjPVarload thys);
void             ajVarloadDel(AjPVarload* pthis);
AjPVarload       ajVarloadNew(void);
const AjPStr     ajVarloadGetvarId(const AjPVarload thys);

void             ajVarinClear(AjPVarin thys);
void             ajVarinDel(AjPVarin* pthis);
AjPVarin         ajVarinNew(void);
void             ajVarinQryC(AjPVarin thys, const char* txt);
void             ajVarinQryS(AjPVarin thys, const AjPStr str);
void             ajVarinTrace(const AjPVarin thys);

void             ajVarinprintBook(AjPFile outf);
void             ajVarinprintHtml(AjPFile outf);
void             ajVarinprintText(AjPFile outf, AjBool full);
void             ajVarinprintWiki(AjPFile outf);

AjBool           ajVarallNext(AjPVarall thys, AjPVarload *Pvarload);
AjBool           ajVarloadMore(AjPVarload thys, AjPVar *Pvar);
AjBool           ajVarloadNext(AjPVarload thys, AjPVar *Pvar);
AjBool           ajVarinLoad(AjPVarin varin, AjPVar thys);

AjBool           ajVarinformatTerm(const AjPStr term);
AjBool           ajVarinformatTest(const AjPStr format);
void             ajVarinExit(void);
const char*      ajVarinTypeGetFields(void);
const char*      ajVarinTypeGetQlinks(void);

AjPTable         ajVaraccessGetDb(void);
const char*      ajVaraccessMethodGetQlinks(const AjPStr method);
ajuint           ajVaraccessMethodGetScope(const AjPStr method);
AjBool           ajVaraccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJVARREAD_H */
ajvarwrite.h/   1414437290  1010  513   100644  2838      `
/* @include ajvarwrite ********************************************************
**
** AJAX variation data writing functions
**
** @author Copyright (C) 2010 Peter Rice
** @version $Revision: 1.7 $
** @modified Oct 25 2010 pmr First AJAX version
** @modified $Date: 2011/12/19 16:33:15 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJVARWRITE_H
#define AJVARWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajvardata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajVaroutWrite(AjPOutfile outf, const AjPVar var);
AjBool        ajVaroutWriteNext(AjPOutfile outf, const AjPVar var);

void          ajVaroutprintBook(AjPFile outf);
void          ajVaroutprintHtml(AjPFile outf);
void          ajVaroutprintText(AjPFile outf, AjBool full);
void          ajVaroutprintWiki(AjPFile outf);

AjBool        ajVaroutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajVaroutformatTest(const AjPStr format);

void          ajVaroutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJVARWRITE_H */
ajvector.h/     1414437290  1010  513   100644  5055      `
/* @include ajvector **********************************************************
**
** AJAX 3D vector functions
**
** AjP3dVector objects are structures each of three floats specifying the
**  components of vectors in Cartesian three-space.
**
** The three float values stored in an AjP3dVector are, respectively,
**  the components of the vector it describes in the positive X, Y and
**  Z directions in a conventional right-handed Cartesian system
**
** Alternatively they can be thought of as the coefficients of the
**  i, j, and k unit vectors in the x y and z directions respectively
**
** @author Copyright (C) 2003 Damian Counsell
** @version $Revision: 1.13 $
** @modified $Date: 2011/10/02 10:11:48 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJVECTOR_H
#define AJVECTOR_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjP3dVector **********************************************************
**
** Ajax 3-D vector object.
**
** Holds three floats
**
** AjP3dVector is implemented as a pointer to a C data structure.
**
** @alias AjS3dVector
** @alias AjO3dVector
**
** @new aj3dVectorNew default constructor
** @new aj3dVectorCreate constructor initialising values of vector components
**
** @delete aj3dVectorDel default destructor
**
** @use aj3dVectorSum return sum of two vectors
** @use aj3dVectorDotProduct return dot product of two vectors
** @use aj3dVectorCrossProduct return cross product of two vectors
** @use aj3dVectorAngle return angle between two vectors
** @use aj3dVectorDihedralAngle return angle between two planes
** @modify aj3dVectorBetweenPoints return vector between two points
**
** @cast aj3dVectorLength return length of vector
**
** @attr x [float] x coordinate
** @attr y [float] y coordinate
** @attr z [float] z coordinate
** @@
******************************************************************************/

typedef struct AjS3dVector
{
    float x;
    float y;
    float z;
} AjO3dVector;

#define AjP3dVector AjO3dVector*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

float       aj3dVectorAngle(const AjP3dVector first,
                            const AjP3dVector fecond);
void        aj3dVectorBetweenPoints(AjP3dVector betweenPoints,
                                    float X, float Y,
                                    float Z, float endX, float endY,
                                    float endZ);
AjP3dVector aj3dVectorCreate(float fX, float fY, float fZ);
void        aj3dVectorCrossProduct(const AjP3dVector first,
                                   const AjP3dVector second,
                                   AjP3dVector crossproduct);
float       aj3dVectorDihedralAngle(const AjP3dVector veca,
                                    const AjP3dVector vecb,
                                    const AjP3dVector vecc);
void        aj3dVectorDel(AjP3dVector* pthys);
float       aj3dVectorDotProduct(const AjP3dVector first,
                                 const AjP3dVector second);
float       aj3dVectorLength(const AjP3dVector thys);
AjP3dVector aj3dVectorNew(void);
void        aj3dVectorSum(const AjP3dVector first,
                          const AjP3dVector second,
                          AjP3dVector sum);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AJVECTOR_H */

ajxml.h/        1414437290  1010  513   100644  2725      `
/* @include ajxml ************************************************************
**
** __AJAX or NUCLEUS__  __LibraryArea__ functions
**
** __ShortDescription__
**
** @author Copyright (C) __Year__  __AuthorName__
** @version $Revision: 1.1 $
** @modified __EditDate__  __EditorName__  __Description of Edit__
** @modified $Date: 2012/09/03 14:14:45 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AJXWYZ_H
#define AJXWYZ_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajxmldata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjPXml      ajXmlNew(void);
void         ajXmlDel(AjPXml *Pxml);
void         ajXmlClear(AjPXml xml);
const AjPStr ajXmlGetDb(const AjPXml xml);
const AjPStr ajXmlGetEntry(const AjPXml xml);
const AjPStr ajXmlGetId(const AjPXml xml);
const char*  ajXmlGetQryC(const AjPXml xml);
const AjPStr ajXmlGetQryS(const AjPXml xml);
void         ajXmlExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AjPXML_H */

ajxmldata.h/    1414437290  1010  513   100644  6787      `
/* @include ajxmldata ********************************************************
**
** __AJAX or NUCLEUS__  __LibraryArea__ functions
**
** __ShortDescription__
**
** @author Copyright (C) __Year__  __AuthorName__
** @version $Revision: 1.2 $
** @modified __EditDate__  __EditorName__  __Description of Edit__
** @modified $Date: 2012/09/03 18:18:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AjPXMLDATA_H
#define AjPXMLDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajtextdata.h"
#include "ajdom.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

#define NULLFPOS -1




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data AjPXml **************************************************************
**
** Ajax xml object.
**
** Holds the xml itself, plus associated information.
**
** @alias AjSXml
** @alias AjOXml
**
** @attr Id        [AjPStr]  Id of term
** @attr Db        [AjPStr]  Database name from input
** @attr Setdb     [AjPStr]  Database name from command line
** @attr Full      [AjPStr]  Full name
** @attr Qry       [AjPStr]  Query for re-reading
** @attr Formatstr [AjPStr]  Input format name
** @attr Filename  [AjPStr]  Original filename
** @attr Doc       [AjPDomDocument]  Parsed document
** @attr TextPtr   [AjPStr] Full text
** @attr Fpos      [ajlong]  File position
** @attr Format    [AjEnum]  Input format enum
** @attr Count     [ajuint]  Number of lines read
** @@
******************************************************************************/

typedef struct AjSXml
{
    AjPStr  Id;
    AjPStr  Db;
    AjPStr  Setdb;
    AjPStr  Full;
    AjPStr  Qry;
    AjPStr  Formatstr;
    AjPStr  Filename;
    AjPDomDocument Doc;
    AjPStr  TextPtr;
    ajlong  Fpos;
    AjEnum  Format;
    ajuint Count;
} AjOXml;

#define AjPXml AjOXml*




/* @data AjPXmlin ************************************************************
**
** Ajax xml input object.
**
** Holds the input specification and information needed to read
** the xml and possible further entries
**
** @alias AjSXmlin
** @alias AjOXmlin
**
** @attr Input [AjPTextin] General text input object
** @attr XmlData [void*] Format data for reuse, e.g. multiple term input
**                         (unused in current code)
** @@
******************************************************************************/

typedef struct AjSXmlin
{
    AjPTextin Input;
    void *XmlData;
} AjOXmlin;

#define AjPXmlin AjOXmlin*




/* @data AjPXmlall ***********************************************************
**
** Ajax xml all (stream) object.
**
** Inherits an AjPXml but allows more xmls to be read from the
** same input by also inheriting the AjPXmlin input object.
**
** @alias AjSXmlall
** @alias AjOXmlall
**
** @attr Xml [AjPXml] Current xml
** @attr Xmlin [AjPXmlin] Xml input for reading next
** @attr Totterms [ajulong] Count of terms so far
** @attr Count [ajuint] Count of terms so far
** @attr Multi [AjBool] True if multiple values are expected
** @attr Returned [AjBool] if true: Xml object has been returned to a new
**                         owner and is not to be deleted by the destructor
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct AjSXmlall
{
    AjPXml Xml;
    AjPXmlin Xmlin;
    ajulong Totterms;
    ajuint Count;
    AjBool Multi;
    AjBool Returned;
    char Padding[4];
} AjOXmlall;

#define AjPXmlall AjOXmlall*




/* @data AjPXmlAccess ********************************************************
**
** Ajax xml access database reading object.
**
** Holds information needed to read a xml entry from a database.
** Access methods are defined for each known database type.
**
** Xml entries are read from the database using the defined
** database access function, which is usually a static function
** within ajxmldb.c
**
** This should be a static data object but is needed for the definition
** of AjPXmlin.
**
** @alias AjSXmlAccess
** @alias AjOXmlAccess
**
** @attr Name [const char*] Access method name used in emboss.default
** @attr Access [AjBool function] Access function
** @attr AccessFree [AjBool function] Access cleanup function
** @attr Qlink [const char*] Supported query link operators
** @attr Desc [const char*] Description
** @attr Alias [AjBool] Alias for another name
** @attr Entry [AjBool] Supports retrieval of single entries
** @attr Query [AjBool] Supports retrieval of selected entries
** @attr All [AjBool] Supports retrieval of all entries
** @attr Chunked [AjBool] Supports retrieval of entries in chunks
** @@
******************************************************************************/

typedef struct AjSXmlAccess
{
    const char *Name;
    AjBool (*Access)(AjPXmlin xmlin);
    AjBool (*AccessFree)(void* qry);
    const char* Qlink;
    const char* Desc;
    AjBool Alias;
    AjBool Entry;
    AjBool Query;
    AjBool All;
    AjBool Chunked;
} AjOXmlAccess;

#define AjPXmlAccess AjOXmlAccess*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AjPXMLDATA_H */

ajxmldb.h/      1414437297  1010  513   100644  320       `
#ifdef __cplusplus
extern "C"
{
#endif

#ifndef AjPXMLDB_H
#define AjPXMLDB_H



/*
** Prototype definitions
*/

void           ajXmldbExit(void);
void           ajXmldbInit(void);
void           ajXmldbPrintAccess (AjPFile outf, AjBool full);

/*
** End of prototype definitions
*/

#endif

#ifdef __cplusplus
}
#endif
ajxmlread.h/    1414437290  1010  513   100644  3703      `
/* @include ajxmlread ********************************************************
**
** __AJAX or NUCLEUS__  __LibraryArea__ functions
**
** __ShortDescription__
**
** @author Copyright (C) __Year__  __AuthorName__
** @version $Revision: 1.2 $
** @modified __EditDate__  __EditorName__  __Description of Edit__
** @modified $Date: 2012/11/14 14:21:13 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AjPXMLREAD_H
#define AjPXMLREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajxmldata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

void             ajXmlallClear(AjPXmlall thys);
void             ajXmlallDel(AjPXmlall* pthis);
AjPXmlall        ajXmlallNew(void);
const AjPStr     ajXmlallGetxmlId(const AjPXmlall thys);

void             ajXmlinClear(AjPXmlin thys);
void             ajXmlinDel(AjPXmlin *pthis);
AjPXmlin         ajXmlinNew(void);
void             ajXmlinQryC(AjPXmlin thys, const char* txt);
void             ajXmlinQryS(AjPXmlin thys, const AjPStr str);
void             ajXmlinTrace(const AjPXmlin thys);

void             ajXmlinprintBook(AjPFile outf);
void             ajXmlinprintHtml(AjPFile outf);
void             ajXmlinprintText(AjPFile outf, AjBool full);
void             ajXmlinprintWiki(AjPFile outf);

AjBool           ajXmlallNext(AjPXmlall thys, AjPXml *Pxml);
AjBool           ajXmlinRead(AjPXmlin xmlin, AjPXml thys);

AjBool           ajXmlinformatTerm(const AjPStr term);
AjBool           ajXmlinformatTest(const AjPStr format);
void             ajXmlinExit(void);
const char*      ajXmlinTypeGetFields(void);
const char*      ajXmlinTypeGetQlinks(void);

AjPTable         ajXmlaccessGetDb(void);
const char*      ajXmlaccessMethodGetQlinks(const AjPStr method);
ajuint           ajXmlaccessMethodGetScope(const AjPStr method);
AjBool           ajXmlaccessMethodTest(const AjPStr method);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AjPXMLREAD_H */

ajxmlwrite.h/   1414437290  1010  513   100644  2836      `
/* @include ajxmlwrite *******************************************************
**
** __AJAX or NUCLEUS__  __LibraryArea__ functions
**
** __ShortDescription__
**
** @author Copyright (C) __Year__  __AuthorName__
** @version $Revision: 1.1 $
** @modified __EditDate__  __EditorName__  __Description of Edit__
** @modified $Date: 2012/09/03 14:14:45 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef AjPXMLWRITE_H
#define AjPXMLWRITE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajxmldata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

AjBool        ajXmloutWrite(AjPOutfile outf, const AjPXml xml);

void          ajXmloutprintBook(AjPFile outf);
void          ajXmloutprintHtml(AjPFile outf);
void          ajXmloutprintText(AjPFile outf, AjBool full);
void          ajXmloutprintWiki(AjPFile outf);

AjBool        ajXmloutformatFind(const AjPStr format, ajint* iformat);
AjBool        ajXmloutformatTest(const AjPStr format);

void          ajXmloutExit(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !AjPXMLWRITE_H */
embaln.h/       1414437300  1010  513   100644  7862      `
/* @include embaln ************************************************************
**
** General routines for alignment.
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.31 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBALN_H
#define EMBALN_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajseqdata.h"
#include "ajalign.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define PAZ  26
#define PAZ1 27




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void embAlignCalcSimilarity(const AjPStr m, const AjPStr n,
			    const AjFloatArray *sub, const AjPSeqCvt cvt,
			    ajint lenm, ajint lenn, float *id, float *sim,
			    float *idx, float *simx);

float embAlignPathCalc(const char *a, const char *b,
                       ajint lena, ajint lenb, float gapopen,
                       float gapextend, float *path,
                       float * const *sub, const AjPSeqCvt cvt,
                       ajint *compass, AjBool show);

float embAlignPathCalcWithEndGapPenalties(const char *a, const char *b,
                       ajint lena, ajint lenb,
                       float gapopen, float gapextend,
                       float endgapopen, float endgapextend,
                       ajint *start1, ajint *start2,
                       float * const *sub, const AjPSeqCvt cvt,
                       float *m, float *ix, float *iy,
                       ajint *compass, AjBool show,
                       AjBool endweight);

float embAlignPathCalcSW(const char *a, const char *b, ajint lena, ajint lenb,
                         float gapopen, float gapextend, float *path,
                         float * const *sub, const AjPSeqCvt cvt,
                         ajint *compass,
                         AjBool show);

void embAlignPrintGlobal(AjPFile outf, const char *a, const char *b,
			 const AjPStr m, const AjPStr n,
			 ajint start1, ajint start2, float score, AjBool mark,
			 float * const *sub, const AjPSeqCvt cvt,
			 const char *namea,
			 const char *nameb, ajint begina, ajint beginb);
void embAlignPrintProfile(AjPFile outf,
			  const AjPStr m, const AjPStr n,
			  ajint start1, ajint start2, float score, AjBool mark,
			  float * const *fmatrix, const char *namea,
			  const char *nameb, ajint begina, ajint beginb);

float embAlignProfilePathCalc(const char *a,
                              ajint mlen, ajint slen, float gapopen,
                              float gapextend, float *path,
                              float * const *fmatrix,
                              ajint *compass, AjBool show);

void embAlignReportGlobal (AjPAlign align,
			   const AjPSeq seqa, const AjPSeq seqb,
			   const AjPStr m, const AjPStr n,
			   ajint start1, ajint start2,
			   float gapopen, float gapextend,
			   float score, AjPMatrixf matrix,
			   ajint offset1, ajint offset2);
void embAlignReportLocal (AjPAlign align,
			  const AjPSeq seqa, const AjPSeq seqb,
			  const AjPStr m, const AjPStr n,
			  ajint start1, ajint start2,
			  float gapopen, float gapextend,
			  float score, AjPMatrixf matrix,
			  ajint offset1, ajint offset2);
void embAlignReportProfile(AjPAlign align,
			   const AjPStr m, const AjPStr n,
			   ajint start1, ajint start2,
			   float score,
			   const char *namea, const char *nameb);

/*float embAlignScoreProfileMatrix(const float *path, const ajint *compass,
				 float gapopen,
				 float gapextend, const AjPStr b,
				 ajint clen, ajint slen,
				 float * const *fmatrix,
				 ajint *start1, ajint *start2);
*/
void embAlignWalkNWMatrix(const float *path,
                          const AjPSeq a, const AjPSeq b,
			  AjPStr *m, AjPStr *n,
                          ajint lena, ajint lenb,
                          ajint *start1, ajint *start2,
                          float gapopen, float gapextend,
                          const ajint *compass);

void embAlignWalkNWMatrixUsingCompass(const char* p, const char* q,
        AjPStr *m, AjPStr *n,
        ajuint lena, ajuint lenb,
        ajint *start1, ajint *start2,
        ajint const *compass);

void embAlignWalkProfileMatrix(const float *path, const ajint *compass,
			       float gapopen, float gapextend,
			       const AjPStr cons, const AjPStr b,
			       AjPStr *m, AjPStr *n,
                               ajint clen, ajint slen,
			       float * const *pmatrix,
			       ajint *start1, ajint *start2);

void embAlignWalkSWMatrix(const float *path, const ajint *compass,
			  float gapopen, float gapextend,
                          const AjPSeq a, const AjPSeq b,
			  AjPStr *m, AjPStr *n,
                          ajint lena, ajint lenb,
			  ajint *start1, ajint *start2);

float embAlignPathCalcSWFast(const char *a, const char *b,
                             ajint lena, ajint lenb,
                             ajint offset, ajint width,
                             float gapopen, float gapextend, float *path,
                             float * const *sub, const AjPSeqCvt cvt,
                             ajint *compass, AjBool show);

void embAlignWalkSWMatrixFast(const float *path, const ajint *compass,
			      float gapopen, float gapextend,
                              const AjPSeq a, const AjPSeq b,
			      AjPStr *m, AjPStr *n,
                              ajint lena, ajint lenb,
			      ajint offset, ajint width,
                              ajint *start1, ajint *start2);

void embAlignUnused(void);

/*
** End of prototype definitions
*/

#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif
#ifdef AJ_COMPILE_DEPRECATED

__deprecated void embAlignPrintLocal(AjPFile outf,
                                     const AjPStr m, const AjPStr n,
                                     ajint start1, ajint start2,
                                     float score, AjBool mark,
                                     float * const *sub, const AjPSeqCvt cvt,
                                     const char *namea, const char *nameb,
                                     ajint begina, ajint beginb);

#endif

AJ_END_DECLS

#endif  /* !EMBALN_H */
embcom.h/       1414437300  1010  513   100644  4278      `
/* @include embcom ************************************************************
**
** General routines for program Complex
**
** NB: THESE ROUTINES DO NOT CONFORM TO THE LIBRARY WRITING STANDARD AND
**     THEREFORE SHOULD NOT BE USED AS A TEMPLATE FOR WRITING EMBOSS CODE
**
** @author Copyright (c) 1999 Donata Colangelo
** @version $Revision: 1.11 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBCOM_H
#define EMBCOM_H


/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPComTrace *********************************************************
**
** Complex utility trace object
**
** @attr ind [ajint] Index
** @attr pc [float] Percent
******************************************************************************/

typedef struct EmbSComTrace {
    ajint ind;
    float pc;
} EmbOComTrace;
#define EmbPComTrace EmbOComTrace*




/* @data EmbPComUjwin *********************************************************
**
** Complex utility UJwin object
**
** @attr Ujwin [float*] UJ windows
******************************************************************************/

typedef struct EmbSComUjwin {
  float *Ujwin;
} EmbOComUjwin;
#define EmbPComUjwin EmbOComUjwin*




/* @data EmbPComUjsim *********************************************************
**
** Complex utility UJsim object
**
** @attr Ujsim [EmbPComUjwin] UJ sim
******************************************************************************/

typedef struct EmbSComUjsim {
  EmbPComUjwin Ujsim;
} EmbOComUjsim;
#define EmbPComUjsim EmbOComUjsim*




/* @data EmbPComSeqsim ********************************************************
**
** Complex utility SEQsim object
**
** @attr Sqsim [char*] Sequence sim
******************************************************************************/

typedef struct EmbSComSeqsim {
  char *Sqsim;
} EmbOComSeqsim;
#define EmbPComSeqsim EmbOComSeqsim*



/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void embComComplexity(const char *seq,const char *name,
		      ajint len, ajint jmin, ajint jmax,
		      ajint l, ajint step, ajint sim, ajint freq, ajint omnia,
		      AjPFile fp, AjPFile pf,
		      ajint print, float *MedValue);
void embComWriteValueOfSeq(AjPFile fp, ajint n,const char *name, ajint len,
			   float MedValue);
void embComWriteFile(AjPFile fp, ajint jmin, ajint jmax, ajint lwin,
		     ajint step, ajint sim);
void embComUnused (void);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBCOM_H */
embcons.h/      1414437300  1010  513   100644  2531      `
/* @include embcons ***********************************************************
**
** General routines for consensus.
**
** @author Copyright (c) Copyright 2001 (C) Tim Carver (tcarver@hgmp.mrc.ac.uk)
** @version $Revision: 1.7 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBCONS_H
#define EMBCONS_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajseqdata.h"
#include "ajmatrices.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void embConsCalc (const AjPSeqset seqset, const AjPMatrix cmpmatrix,
	ajint nseqs, ajint mlen,float fplural, float setcase,
	ajint identity, AjBool gaps, AjPStr *cons);

/*
** End of prototype definitions
*/


AJ_END_DECLS

#endif  /* !EMBCONS_H */

embdata.h/      1414437300  1010  513   100644  2583      `
/* @include embdata ***********************************************************
**
** General routines for data files
**
** @author Copyright (c) 1999 Mark Faller
** @version $Revision: 1.8 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBDATA_H
#define EMBDATA_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajlist.h"
#include "ajtable.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void     embDataListDel(AjPList *data);
AjPTable embDataListGetTable(const AjPList fullList, ajuint required);
void     embDataListGetTables(const AjPList fullList, AjPList returnList,
			      ajuint required);
void     embDataListRead(AjPList data, AjPFile file);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBDATA_H */

embdbi.h/       1414437300  1010  513   100644  8228      `
/* @include embdbi ************************************************************
**
** General routines for alignment.
**
** @author Copyright (c) 2000 Peter Rice
** @version $Revision: 1.24 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBDBI_H
#define EMBDBI_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajlist.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPField ************************************************************
**
** NUCLEUS internal structure for database indexing applications
** to store field tokens with links to the entry index number.
**
** @attr field [char*] field token
** @attr entry [char*] entry name
** @attr nid [ajuint] entry number
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSField {
  char* field;
  char* entry;
  ajuint nid;
  char Padding[4];
} EmbOField;
#define EmbPField EmbOField*




/* @data EmbPEntry ************************************************************
**
** NUCLEUS internal structure for database indexing applications
** to store an entry id with a list of field tokens and file
** positions for writing to the index files.
**
** @attr entry [char*] entry name
** @attr filenum [ajuint] record in division file
** @attr rpos [ajuint] entry offset in data file
** @attr spos [ajuint] entry offset in sequence file
** @attr nfields [ajuint] number of fields
** @attr nfield [ajuint*] number of tokens for each field
** @attr field [char***] array of tokens for each field
** @@
******************************************************************************/

typedef struct EmbSEntry {
  char* entry;
  ajuint filenum;
  ajuint rpos;
  ajuint spos;
  ajuint nfields;
  ajuint* nfield;
  char*** field;
} EmbOEntry;
#define EmbPEntry EmbOEntry*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

ajint     embDbiCmpId (const void* a, const void* b);
ajint     embDbiCmpFieldId (const void* a, const void* b);
ajint     embDbiCmpFieldField (const void* a, const void* b);
void      embDbiDateSet (const AjPStr datestr, char date[4]);
void      embDbiEntryDel(EmbPEntry* Pentry);
void      embDbiEntryDelMap(void** pthys, void* cl);
EmbPEntry embDbiEntryNew (ajuint nfields);
void      embDbiExit(void);
void      embDbiFieldDel(EmbPField* pthys);
void      embDbiFieldDelMap(void** pthys, void* cl);
EmbPField embDbiFieldNew (void);
AjPFile   embDbiFileIn (const AjPStr dbname, const char* extension);
AjPFile   embDbiFileIndex (const AjPStr indexdir, const AjPStr field,
			   const char* extension);
AjPList   embDbiFileList (const AjPStr dir, const AjPStr wildfile,
			  AjBool trim);
AjPList   embDbiFileListExc (const AjPStr dir, const AjPStr wildfile,
			     const AjPStr exclude);
AjPFile   embDbiFileOut (const AjPStr dbname, const char* extension);
AjPFile   embDbiFileSingle (const AjPStr dbname, const char* extension,
			    ajuint num);
AjBool    embDbiFlatOpenlib(const AjPStr lname, AjPFile* libr);
void      embDbiHeader (AjPFile file, ajuint filesize,
			ajuint recordcnt, short recordlen,
			const AjPStr dbname, const AjPStr release,
			const char date[4]);
void      embDbiHeaderSize (AjPFile file, ajuint filesize, ajuint recordcnt);
void      embDbiLogCmdline(AjPFile logfile);
void      embDbiLogFields(AjPFile logfile, AjPStr const * fields,
			  ajuint nfields);
void      embDbiLogFile(AjPFile logfile, const AjPStr curfilename,
			ajuint idCountFile, AjPStr const * fields,
			const ajuint* countField,
			ajuint nfields);
void      embDbiLogFinal(AjPFile logfile, ajuint maxlen,
			 const ajint* maxFieldLen,
			 AjPStr const * fields, const ajuint* fieldTot,
			 ajuint nfields, ajuint nfiles,
			 ajuint idDone, ajuint idCount);
void      embDbiLogHeader(AjPFile logfile, const AjPStr dbname,
			  const AjPStr release, const AjPStr datestr,
			  const AjPStr indexdir,
			  ajuint maxindex);
void      embDbiLogSource(AjPFile logfile, const AjPStr directory,
			  const AjPStr filename, const AjPStr exclude,
			  AjPStr const * inputFiles, ajuint nfiles);
void      embDbiMaxlen (AjPStr* token, ajint* maxlen);
void      embDbiMemEntry (AjPList idlist,
			  AjPList* fieldList, ajuint nfields,
			  EmbPEntry entry, ajuint ifile);
ajuint     embDbiMemWriteEntry (AjPFile entFile, ajuint maxidlen,
			       const AjPList idlist, void ***ids);
ajuint     embDbiMemWriteFields (const AjPStr dbname, const AjPStr release,
				const char date[4], const AjPStr indexdir,
				const AjPStr field, ajuint maxFieldLen,
				const AjPList fieldList,
				void** ids);
void      embDbiRmEntryFile (const AjPStr dbname,  AjBool cleanup);
void      embDbiRmFile (const AjPStr dbname, const char* ext, ajuint nfiles,
			AjBool cleanup);
void      embDbiRmFileI (const AjPStr dbname, const char* ext, ajuint ifile,
			 AjBool cleanup);
void      embDbiSortClose (AjPFile* elistfile, AjPFile* alistfile,
			   ajuint nfields);
void      embDbiSortFile (const AjPStr dbname,
			  const char* ext1, const char* ext2,
			  ajuint nfiles, AjBool cleanup, const AjPStr sortopt);
AjPFile   embDbiSortOpen (AjPFile* alistfile, ajuint ifile,
			  const AjPStr dbname, AjPStr const * fields,
			  ajuint nfields);
ajuint     embDbiSortWriteEntry (AjPFile entFile, ajuint maxidlen,
				const AjPStr dbname, ajuint nfiles,
				AjBool cleanup, const AjPStr sortopt);
ajuint     embDbiSortWriteFields (const AjPStr dbname, const AjPStr release,
				 const char date[4], const AjPStr indexdir,
				 const AjPStr field,  ajuint maxFieldLen,
				 ajuint nfiles, ajuint nentries,
				 AjBool cleanup, const AjPStr sortopt);
void      embDbiWriteDivision (const AjPStr indexdir,
			       const AjPStr dbname, const AjPStr release,
			       const char date[4],
			       ajuint maxfilelen, ajuint nfiles,
			       AjPStr const * divfiles,
			       AjPStr const * seqfiles);
void      embDbiWriteDivisionRecord (AjPFile file,
				     ajuint maxnamlen, short recnum,
				     const AjPStr datfile,
				     const AjPStr seqfile);
void      embDbiWriteEntryRecord (AjPFile file, ajuint maxidlen,
				  const AjPStr id,
				  ajuint rpos, ajuint spos, ajushort filenum);
void      embDbiWriteHit (AjPFile file, ajuint idnum);
void      embDbiWriteTrg (AjPFile file, ajuint maxfieldlen,
			  ajuint idnum, ajuint idcnt, const AjPStr hitstr);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBDBI_H */
embdmx.h/       1414437300  1010  513   100644  5845      `
/* @include embdmx ************************************************************
**
** Algorithms for some of the DOMAINATRIX EMBASSY applications. 
** For use with the Scophit and Scopalign objects.  
** The functionality will eventually be subsumed by other AJAX and NUCLEUS 
** libraries. 
** 
** @author Copyright (C) 2004 Ranjeeva Ranasinghe (rranasin@hgmp.mrc.ac.uk)
** @author Copyright (C) 2004 Jon Ison (jison@hgmp.mrc.ac.uk) 
** @version $Revision: 1.20 $ 
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
** 
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
****************************************************************************/

#ifndef EMBDMX_H
#define EMBDMX_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajlist.h"
#include "ajfile.h"
#include "ajseqdata.h"
#include "ajdmx.h"
#include "ajarr.h"
#include "ajmatrices.h"
#include "embsig.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPDmxNrseq *********************************************************
**
** NUCLEUS data structure for non-redundant sequence testing
**

** @attr Seq [AjPSeq] Sequence to be tested for redundancy
** @attr Garbage [AjBool] True if sequence is to be ignored
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSDmxNrseq {
  AjPSeq Seq;
  AjBool Garbage;
  char Padding[4];
} EmbODmxNrseq;
#define EmbPDmxNrseq EmbODmxNrseq*





/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void          embDmxNrseqDel(EmbPDmxNrseq* Pnrseq);

EmbPDmxNrseq  embDmxNrseqNew(const AjPSeq seq);

AjPList       embDmxScophitReadAllFasta(AjPFile in);

AjBool        embDmxHitlistToScophits(const AjPList in, 
				      AjPList out);

AjBool        embDmxScophitsToHitlist(const AjPList in, 
				      EmbPHitlist *out, 
				      AjIList *iter);

AjBool        embDmxScophitToHit(EmbPHit *to, 
				 const AjPScophit from);

AjBool        embDmxScophitsAccToHitlist(const AjPList in, 
					 EmbPHitlist *out,   
					 AjIList *iter);

AjBool        embDmxHitsWrite(AjPFile outf,
			      EmbPHitlist hits, 
			      ajint maxhits);

AjBool        embDmxScopToScophit(const AjPScop source, 
				  AjPScophit* target);

AjBool        embDmxScopalgToScop(const AjPScopalg align,
				  AjPScop const *scop_arr, 
				  ajint scop_dim, 
				  AjPList* list);

AjBool        embDmxScophitsOverlap(const AjPScophit h1,
				    const AjPScophit h2, 
				    ajuint n);

AjBool        embDmxScophitsOverlapAcc(const AjPScophit h1,
				       const AjPScophit h2, 
				       ajuint n);

AjPScophit    embDmxScophitMerge(const AjPScophit hit1, 
				 const AjPScophit hit2);

AjBool        embDmxScophitMergeInsertThis(const AjPList list,
					   AjPScophit hit1, 
					   AjPScophit hit2,
					   AjIList iter);

AjBool        embDmxScophitMergeInsertThisTarget(const AjPList list, 
						 AjPScophit hit1, 
						 AjPScophit hit2,  
						 AjIList iter);

AjBool        embDmxScophitMergeInsertThisTargetBoth(const AjPList list, 
						     AjPScophit hit1, 
						     AjPScophit hit2,  
						     AjIList iter);

AjBool        embDmxScophitMergeInsertOther(AjPList list,
					    AjPScophit hit1, 
					    AjPScophit hit2);

AjBool        embDmxScophitMergeInsertOtherTargetBoth(AjPList list, 
						      AjPScophit hit1, 
						      AjPScophit hit2);

AjBool        embDmxScophitMergeInsertOtherTarget(AjPList list, 
						  AjPScophit hit1, 
						  AjPScophit hit2);

AjBool        embDmxSeqNR(const AjPList input, 
			  AjPUint *keep, 
			  ajint *nset,
			  const AjPMatrixf matrix,
			  float gapopen, 
			  float gapextend,
			  float thresh, 
			  AjBool CheckGarbage);

AjBool        embDmxSeqNRRange(const AjPList input, 
			       AjPUint *keep, 
			       ajint *nset,
			       const AjPMatrixf matrix, 
			       float gapopen, 
			       float gapextend,
			       float thresh1, 
			       float thresh2, 
			       AjBool CheckGarbage);

AjBool        embDmxSeqCompall(const AjPList input, 
			       AjPFloat2d *scores, 
			       const AjPMatrixf matrix, 
			       float gapopen, 
			       float gapextend);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBDMX_H */

embdomain.h/    1414437300  1010  513   100644  2874      `
/* @include embdomain *********************************************************
**
** Algorithms for handling protein domain data.
** For use with Scop and Cath objects defined in ajdomain.h
** 
** @author Copyright (c) 2004 Jon Ison (jison@hgmp.mrc.ac.uk) 
** @version $Revision: 1.7 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
****************************************************************************/

#ifndef EMBDOMAIN_H
#define EMBDOMAIN_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajdomain.h"
#include "ajstr.h"
#include "ajlist.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */





/*
** Prototype definitions
*/

/* ======================================================================= */
/* ========================== Scop object ================================ */
/* ======================================================================= */

AjPStr   embScopToPdbid(const AjPStr scop, AjPStr *pdb);
AjBool   embScopToSp(const AjPStr scop, AjPStr *spr, const AjPList list);
AjBool   embScopToAcc(const AjPStr scop, AjPStr *acc, const AjPList list);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBDOMAIN_H */















embest.h/       1414437300  1010  513   100644  6187      `
/* @include embest ************************************************************
**
** NUCLEUS EST alignment functions
**
** @author Copyright (C) 1996 Richard Mott
** @author Copyright (C) 1998 Peter Rice revised for EMBOSS
** @version $Revision: 1.13 $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBEST_H
#define EMBEST_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* Definition of the padding-character in CAF */

#define padding_char '-'




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data hash_list ************************************************************
**
** NUCLEUS internal data structure for est2genome EMBOSS application
** to maintain internal hash lists.
**
** @attr name [char*] Name
** @attr offset [unsigned long] Offset
** @attr text_offset [unsigned long] Text offset
** @attr next [struct hash_list*] Next in list
** @@
******************************************************************************/

typedef struct hash_list
{
  char *name;
  unsigned long offset;
  unsigned long text_offset;
  struct hash_list *next;
}
HASH_LIST;




/* @enum directions ***********************************************************
**
** Path matrix cell type and direction
**
** @value INTRON Intron
** @value DIAGONAL Diagonal in path
** @value DELETE_EST Delete in EST sequence
** @value DELETE_GENOME Delete in genome sequence
** @value FORWARD_SPLICED_INTRON Forward spliced intron
** @value REVERSE_SPLICED_INTRON Reverse spliced intron
******************************************************************************/

typedef enum { INTRON=0, DIAGONAL=1, DELETE_EST=2, DELETE_GENOME=3,
	       FORWARD_SPLICED_INTRON=-1, REVERSE_SPLICED_INTRON=-2
} directions;




/* @enum donor_acceptor *******************************************************
**
** Donors and acceptors for slice site junctions
**
** @value NOT_A_SITE Not a splice site
** @value DONOR      Donor site
** @value ACCEPTOR   Acceptor site
******************************************************************************/

typedef enum { NOT_A_SITE=1, DONOR=2, ACCEPTOR=4 } donor_acceptor;




/* @data EmbPEstAlign *********************************************************
**
** NUCLEUS data structure for EST alignments (originally for est2genome)
**
** @attr gstart [ajint] Genomic start
** @attr estart [ajint] EST start
** @attr gstop [ajint] Genomic stop
** @attr estop [ajint] EST stop
** @attr score [ajint] Score
** @attr len [ajint] Length
** @attr align_path [ajint*] Path
** @@
******************************************************************************/

typedef struct EmbSEstAlign
{
  ajint gstart;
  ajint estart;
  ajint gstop;
  ajint estop;
  ajint score;
  ajint len;
  ajint *align_path;
} EmbOEstAlign;
#define EmbPEstAlign EmbOEstAlign*




enum base_types /* just defines a, c, g, t as 0-3, for indexing purposes. */
{
  base_a, base_c, base_g, base_t, base_n, base_i, base_o, nucleotides, anybase
};
/* Definitions for nucleotides */



#define MINUS_INFINITY -10000000




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

EmbPEstAlign embEstAlignNonRecursive ( const AjPSeq est, const AjPSeq genome,
				       ajint gap_penalty, ajint intron_penalty,
				       ajint splice_penalty,
				       const AjPSeq splice_sites,
				       ajint backtrack, ajint needleman,
				       ajint init_path );

EmbPEstAlign embEstAlignLinearSpace ( const AjPSeq est, const AjPSeq genome,
				      ajint match, ajint mismatch,
				      ajint gap_penalty, ajint intron_penalty,
				      ajint splice_penalty,
				      const AjPSeq splice_sites,
				      float max_area );

AjPSeq       embEstFindSpliceSites( const AjPSeq genome, ajint direction );
void         embEstFreeAlign( EmbPEstAlign *ge );
ajint        embEstGetSeed (void);
void         embEstMatInit (ajint match, ajint mismatch, ajint gap,
			    ajint neutral, char pad_char);
void         embEstOutBlastStyle ( AjPFile ofile,
				  const AjPSeq genome, const AjPSeq est,
				  const EmbPEstAlign ge, ajint gap_penalty,
				  ajint intron_penalty,
				  ajint splice_penalty,
				  ajint gapped, ajint reverse  );

void         embEstPrintAlign( AjPFile ofile,
			      const AjPSeq genome, const AjPSeq est,
			      const EmbPEstAlign ge, ajint width );
void         embEstSetDebug (void);
void         embEstSetVerbose (void);
AjPSeq       embEstShuffleSeq( AjPSeq seq, ajint in_place, ajint *seed );

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBEST_H */

embexit.h/      1414437300  1010  513   100644  2342      `
/* @include embexit ***********************************************************
**
** General routines for exiting on success or failure
**
** @author Copyright (c) 1999 Peter Rice
** @version $Revision: 1.6 $
** @modified $Date: 2011/09/27 11:19:27 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBEXIT_H
#define EMBEXIT_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

__noreturn void embExit (void);
__noreturn void embExitBad (void);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBEXIT_H */
embgroup.h/     1414437300  1010  513   100644  8267      `
/* @include embgroup **********************************************************
**
** Group Routines.
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.23 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBGROUP_H
#define EMBGROUP_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajfile.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPGroupProg ********************************************************
**
** Hold details of programs (names and documentation) and the package
** they belong to.
**
** @alias EmbOGroupProg
** @alias EmbSGroupProg
**
** @attr name [AjPStr] Name of group or of program
** @attr doc [AjPStr] Documentation for this program
** @attr keywords [AjPStr] keywords for this program
** @attr package [AjPStr] EMBASSY package, empty for main package
** @attr groups [AjPList] List of group(s) this program belongs to.
** @attr acdtopics [AjPList] List of relation topic attributes
** @attr acdoperations [AjPList] List of relation operation attributes
** @attr acdinputs [AjPList] List of relation input attributes
** @attr acdoutputs [AjPList] List of relation output attributes
** @attr acdparams [AjPList] List of relation parameter attributes
** @@
******************************************************************************/

typedef struct EmbSGroupProg {
    AjPStr name;
    AjPStr doc;
    AjPStr keywords;
    AjPStr package;
    AjPList groups;
    AjPList acdtopics;
    AjPList acdoperations;
    AjPList acdinputs;
    AjPList acdoutputs;
    AjPList acdparams;
} EmbOGroupProg;
#define EmbPGroupProg EmbOGroupProg*




/* @data EmbPGroupRelation ****************************************************
**
** Hold details of relation attributes and the qualifiers they appear in.
**
** @alias EmbOGroupRelation
** @alias EmbSGroupRelation
**
** @attr type [AjPStr] Type of qualifier
** @attr qual [AjPStr] Name of qualifier
** @attr acdgroup [AjPStr] ACD group for qualifier type
** @attr id [AjPStr] EDAM term id
** @attr namespace [AjPStr] EDAM namespace
** @attr name [AjPStr] EDAM term name
** @@
******************************************************************************/

typedef struct EmbSGroupRelation {
    AjPStr type;
    AjPStr qual;
    AjPStr acdgroup;
    AjPStr id;
    AjPStr namespace;
    AjPStr name;
} EmbOGroupRelation;
#define EmbPGroupRelation EmbOGroupRelation*




/* @data EmbPGroupTop *********************************************************
**
** This serves as both a node in a list of names of groups which each hold
** a list of details of programs (names and documentation) and also
** it is a node in a list of the details of programs (names and documentation).
**
** Using the same structure for both is a bit confusing, but it simplifies
** some of the routines which search and output the lists of gnodes of
** groups and program data.
**
** GROUP LIST 	nodes point to	PROGRAM LISTS
** ----------			-------------
**
** group gnode 	-> program gnode - program gnode - program gnode - etc.
**     |
** group gnode 	-> program gnode - program gnode - program gnode - etc.
**     |
**    etc.
**
**
** The layout of the 'alpha' list of alphabetic listing of applications is
** a bit different - instead of applications being grouped, as in 'glist'
** above, the applications all come under one major group and each
** application holds a list of the groups it belongs to:
**
** ALPHA LIST
** ----------
**
** group gnode -> program gnode -> group gnode - group gnode - etc.
** 		   |
** 	       program gnode -> group gnode - group gnode - group gnode - etc.
** 		   |
** 	       program gnode -> group gnode - group gnode - group gnode - etc.
** 		   |
** 	       program gnode -> group gnode - group gnode - group gnode - etc.
** 		   |
** 	       program gnode -> group gnode - group gnode - group gnode - etc.
**                    |
**                   etc.
**
**
** @alias EmbOGroup
** @alias EmbSGroup
**
** @attr name [AjPStr] name of group or of program
** @attr doc [AjPStr] documentation for this program (used by list of programs)
** @attr progs [AjPList] list of programs in this group (used by groups list)
** @@
******************************************************************************/

typedef struct EmbSGroupTop {
    AjPStr name;
    AjPStr doc;
    AjPList progs;
} EmbOGroupTop;
#define EmbPGroupTop EmbOGroupTop*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

ajint         embGrpCompareTwoGnodes(const void * a, const void * b);
ajint         embGrpCompareTwoPnodes(const void * a, const void * b);
void          embGrpExit(void);
AjBool        embGrpGetEmbassy(const AjPStr appname, AjPStr* embassyname);
void          embGrpGetProgGroups(AjPList glist, AjPList alpha,
				  char * const env[],
				  AjBool emboss, AjBool embassy,
				  const AjPStr embassyname,
				  AjBool explode, AjBool colon,
				  AjBool gui);
void          embGrpGroupsListDel(AjPList *groupslist);
void          embGrpProgsListDel(AjPList *progslist);
void          embGrpRelationsListDel(AjPList *relslist);
void          embGrpProgDel(EmbPGroupProg *Pgl);
void          embGrpKeySearchProgs(AjPList newlist, const AjPList glist,
				   const AjPStr key, AjBool all);
void          embGrpSearchProgsEdam(AjPList newlist, const AjPList glist,
                                    const AjPStr key, const char* namespace,
                                    AjBool sensitive, AjBool subclasses,
                                    AjBool obsolete);
void          embGrpKeySearchSeeAlso(AjPList newlist,
				     AjPList *appgroups, AjPStr* package,
				     const AjPList alpha, const AjPList glist,
				     const AjPStr key);
EmbPGroupTop  embGrpMakeNewGnode(const AjPStr name);
EmbPGroupProg embGrpMakeNewPnode(const AjPStr name, const AjPStr doc,
				 const AjPStr keywords, const AjPStr package);
void          embGrpOutputGroupsList(AjPFile outfile,
				     const AjPList groupslist,
				     AjBool showprogs, AjBool html,
				     AjBool showkey,
				     const AjPStr package);
void          embGrpOutputProgsList(AjPFile outfile,  const AjPList progslist,
				    AjBool html, AjBool showkey,
				    const AjPStr package);
void          embGrpSortGroupsList(AjPList groupslist);
void          embGrpSortProgsList(AjPList progslist);
void          embGrpGroupMakeUnique(AjPList list);
void          embGrpProgsMakeUnique(AjPList list);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBGROUP_H */

embiep.h/       1414437300  1010  513   100644  4257      `
/* @include embiep ************************************************************
**
** Isoelectric point routines
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.16 $
** @modified $Date: 2013/06/29 22:38:19 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBIEP_H
#define EMBIEP_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define EMBIEPSIZE 28			/* Usual alpha plus two array */
#define EMBIEPCYSTEINE 2	      /* Array index for C */
#define EMBIEPLYSINE 10		      /* Array index for K */
#define EMBIEPAMINO 26			/* Amino terminus array index  */
#define EMBIEPCARBOXYL 27		/* Carboxyl terminus array index */



/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void   embIepCalcK (double *K, double **pK);
void   embIepCalcKend (double *K, double **pK, ajuint resn, ajuint resc);
AjBool embIepPkNewFile (AjPFile pkfile, double ***pK);
double* *embIepPkNew (void);
void   embIepPkDel (double ***pK);
void   embIepCompC (const char *s, ajuint amino, ajuint carboxyl,
		    ajuint sscount, ajuint modlysine,
		    ajuint *c, ajuint *resn, ajuint *resc);
void   embIepCompS (const AjPStr str, ajuint amino, ajuint carboxyl,
		    ajuint sscount, ajuint modlysine,
		    ajuint *c, ajuint *resn, ajuint *resc);
double embIepGetCharge (const ajuint *c, const double *pro, double *total);
void   embIepGetProto (const double *K, const ajuint *c,
		       ajuint *op, double H, double *pro);
AjBool embIepIepC (const char *s, ajuint amino, ajuint carboxyl,
		   ajuint sscount, ajuint modlysine,
		   double **pK, double *iep, AjBool termini);
AjBool embIepIepS (const AjPStr str, ajuint amino, ajuint carboxyl,
		   ajuint sscount, ajuint modlysine,
		   double **pK, double *iep, AjBool termini);
double embIepPhFromHconc (double H);
double embIepPhToHconc (double pH);
double embIepPhConverge (const ajuint *c, const double *K,
			 ajuint *op, double *pro);
void   embIepPkRead (double **pK);
void   embIepPkReadFile (double **pK, AjPFile pkfile);
double embIepPkToK (double pK);
double embIepPkFromK (double K);

/*
** End of prototype definitions
*/

#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif
#ifdef AJ_COMPILE_DEPRECATED

__deprecated void    embIepComp (const char *s, ajint amino, ajint carboxyl,
                                 ajint *c);
__deprecated AjBool  embIepIEP (const char *s, ajint amino, ajint carboxyl,
                                double *pK, double *iep, AjBool termini);

#endif

AJ_END_DECLS

#endif  /* !EMBIEP_H */

embindex.h/     1414437300  1010  513   100644  12099     `
/* @include embindex **********************************************************
**
** B+ Tree Indexing plus Disc Cache.
**
** @author Copyright (c) 2003 Alan Bleasby
** @version $Revision: 1.34 $
** @modified $Date: 2012/05/24 16:57:10 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBINDEX_H
#define EMBINDEX_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajindex.h"
#include "ajreg.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPBtreeEntry *******************************************************
**
** Index tree entries
**
** @alias EmbOBtreeEntry
** @alias EmbSBtreeEntry
**
** @attr dbname [AjPStr] Database name
** @attr dbrs [AjPStr] Index resource definition
** @attr release [AjPStr] Release number
** @attr date [AjPStr] Release date
** @attr dbtype [AjPStr] Database type
** @attr directory [AjPStr] Database directory
** @attr idirectory [AjPStr] Index directory
** @attr idextension [AjPStr] Id index extension
** @attr maxid [AjPStr] Longest id in data
** @attr files [AjPList] List of data filenames
** @attr reffiles [AjPList*] Lists of data reference filenames
** @attr fields [AjPList] EMBOSS index field structures
** @attr id [AjPStr] Entry identifier
** @attr idcache [AjPBtcache] Id cache structure
** @attr pripagecount [ajlong] Cache primary page count
** @attr secpagecount [ajlong] Cache secondary page count
** @attr do_id [AjBool] If true, build id index
** @attr compressed [AjBool] If true, compress id index
** @attr nfiles [ajuint] Data file count
** @attr refcount [ajuint] Reference file(s) for each entry
** @attr idlen [ajuint] Maximum id length in index
** @attr idmaxlen [ajuint] Maximum id length in data
** @attr idtruncate [ajuint] Number of ids truncated
** @attr pripagesize [ajuint] Default page size
** @attr pricachesize [ajuint] Defalt cache size
** @attr idorder [ajuint] Id index primary order
** @attr idfill [ajuint] Id index primary fill count
** @attr secpagesize [ajuint] Default page size
** @attr seccachesize [ajuint] Defalt cache size
** @attr idsecorder [ajuint] Id index secondary order
** @attr idsecfill [ajuint] Id index secondary fill count
** @attr fpos [ajlong] Input file position
** @attr reffpos [ajlong*] Input extra (reference) file positions
******************************************************************************/

typedef struct EmbSBtreeEntry
{
    AjPStr dbname;
    AjPStr dbrs;
    AjPStr release;
    AjPStr date;
    AjPStr dbtype;

    AjPStr directory;
    AjPStr idirectory;
    AjPStr idextension;
    AjPStr maxid;

    AjPList files;
    AjPList *reffiles;
    AjPList fields;

    AjPStr id;
    AjPBtcache idcache;
    ajlong pripagecount;
    ajlong secpagecount;

    AjBool do_id;
    AjBool compressed;

    ajuint nfiles;

    ajuint refcount;

    ajuint idlen;
    ajuint idmaxlen;
    ajuint idtruncate;

    ajuint pripagesize;
    ajuint pricachesize;

    ajuint idorder;
    ajuint idfill;

    ajuint secpagesize;
    ajuint seccachesize;

    ajuint idsecorder;
    ajuint idsecfill;
    

    ajlong fpos;
    ajlong *reffpos;
    
} EmbOBtreeEntry;
#define EmbPBtreeEntry EmbOBtreeEntry*
 

/* @data EmbPBtreeField *******************************************************
**
** Index tree entries
**
** @alias EmbSBtreeField
** @alias EmbOBtreeField
**
** @attr cache     [AjPBtcache] Cache structure
** @attr data      [AjPList] Keywords to index
** @attr name      [AjPStr] File basename
** @attr extension [AjPStr] File extension
** @attr maxkey    [AjPStr] Longest keyword found
** @attr freelist  [AjPStr*] Free data elements for reuse
** @attr pripagecount [ajulong] Index primary page count
** @attr secpagecount [ajulong] Index secondary page count
** @attr pripagesize  [ajuint] Index primary page size
** @attr secpagesize  [ajuint] Index secondary page size
** @attr pricachesize [ajuint] Index primary cache size
** @attr seccachesize [ajuint] Index secondary cache size
** @attr order     [ajuint] Primary page order
** @attr fill      [ajuint] Primary page fill count
** @attr secorder  [ajuint] Secondary page order
** @attr secfill   [ajuint] Secondary page fill count
** @attr refcount  [ajuint] Number of reference file(s) per entry
** @attr len       [ajuint] Maximum keyword length in index
** @attr idlen     [ajuint] Maximum id length in index
** @attr maxlen    [ajuint] Maximum keyword length in data
** @attr truncate  [ajuint] Number of keywords truncated
** @attr freecount [ajuint] Free list used
** @attr freesize  [ajuint] Free list size
** @attr secondary [AjBool] Secondary index if true
** @attr compressed [AjBool] Compress index if true
** @attr Padding [char[4]] Padding to alignment boundary
******************************************************************************/
    
typedef struct EmbSBtreeField
{
    AjPBtcache cache;
    AjPList data;
    AjPStr name;
    AjPStr extension;
    AjPStr maxkey;
    AjPStr *freelist;
    ajulong pripagecount;
    ajulong secpagecount;
    ajuint pripagesize;
    ajuint secpagesize;
    ajuint pricachesize;
    ajuint seccachesize;
    ajuint order;
    ajuint fill;
    ajuint secorder;
    ajuint secfill;
    ajuint refcount;
    ajuint len;
    ajuint idlen;
    ajuint maxlen;
    ajuint truncate;
    ajuint freecount;
    ajuint freesize;
    AjBool secondary;
    AjBool compressed;
    char   Padding[4];
} EmbOBtreeField;
#define EmbPBtreeField EmbOBtreeField*

/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void   embBtreeIndexEntry(EmbPBtreeEntry entry,
                          ajuint dbno);
void   embBtreeIndexField(EmbPBtreeField field,
                          const EmbPBtreeEntry entry,
                          ajuint dbno);
ajuint embBtreeIndexPrimary(EmbPBtreeField field,
                            const EmbPBtreeEntry entry,
                            ajuint dbno);
ajuint embBtreeIndexSecondary(EmbPBtreeField field,
                              const EmbPBtreeEntry entry);

void   embBtreeFindEmblAc(const AjPStr readline, EmbPBtreeField field,
                          AjPStr *Pstr);
void   embBtreeParseEmblAc(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseEmblDe(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseEmblKw(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseEmblSv(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseEmblTx(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseFastaAc(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseFastaDe(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseFastaSv(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseGenbankAc(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseGenbankDe(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseGenbankKw(const AjPStr readline, EmbPBtreeField field);
void   embBtreeParseGenbankTx(const AjPStr readline, EmbPBtreeField field);

void   embBtreeParseEntry(const AjPStr readline, AjPRegexp regexp,
                          EmbPBtreeEntry entry);
void   embBtreeParseField(const AjPStr readline, AjPRegexp regexp,
                          EmbPBtreeField field);
void   embBtreeParseFieldSecond(const AjPStr readline, AjPRegexp regexp,
                               EmbPBtreeField field);
void   embBtreeParseFieldThird(const AjPStr readline, AjPRegexp regexp,
                               EmbPBtreeField field);
void   embBtreeParseFieldTrim(const AjPStr readline, AjPRegexp regexp,
                              EmbPBtreeField field);
void   embBtreeReportEntry(AjPFile outf, const EmbPBtreeEntry entry);
void   embBtreeReportField(AjPFile outf, const EmbPBtreeField field);
void   embBtreeEmblAC(const AjPStr acline, AjPList aclist);
void   embBtreeEmblKW(const AjPStr kwline, AjPList kwlist, ajuint maxlen);
void   embBtreeEmblDE(const AjPStr deline, AjPList delist, ajuint maxlen);
void   embBtreeEmblSV(const AjPStr idline, AjPList svlist);
void   embBtreeEmblTX(const AjPStr kwline, AjPList kwlist, ajuint maxlen);
void   embBtreeGenBankAC(const AjPStr acline, AjPList aclist);
void   embBtreeGenBankKW(const AjPStr kwline, AjPList kwlist, ajuint maxlen);
void   embBtreeGenBankDE(const AjPStr kwline, AjPList kwlist, ajuint maxlen);
void   embBtreeGenBankTX(const AjPStr kwline, AjPList kwlist, ajuint maxlen);

void   embBtreeFastaDE(const AjPStr kwline, AjPList kwlist, ajuint maxlen);
void   embBtreeFastaSV(const AjPStr kwline, AjPList kwlist, ajuint maxlen);


ajuint  embBtreeReadDir(AjPStr **filelist, const AjPStr fdirectory,
		       const AjPStr files, const AjPStr exclude);
EmbPBtreeEntry embBtreeEntryNew(ajuint refcount);
void           embBtreeEntrySetCompressed(EmbPBtreeEntry entry);
ajuint         embBtreeSetFields(EmbPBtreeEntry entry, AjPStr const * fields);
void           embBtreeEntryDel(EmbPBtreeEntry *thys);
void           embBtreeSetDbInfo(EmbPBtreeEntry entry, const AjPStr name,
				 const AjPStr dbrs,
		                 const AjPStr date, const AjPStr release,
		                 const AjPStr type, const AjPStr directory,
		                 const AjPStr idirectory);
ajuint          embBtreeGetFiles(EmbPBtreeEntry entry, const AjPStr fdirectory,
				const AjPStr files, const AjPStr exclude);
AjBool         embBtreeWriteEntryFile(const EmbPBtreeEntry entry);
void           embBtreeGetRsInfo(EmbPBtreeEntry entry);
AjBool         embBtreeOpenCaches(EmbPBtreeEntry entry);
AjBool         embBtreeCloseCaches(EmbPBtreeEntry entry);
AjBool         embBtreeDumpParameters(EmbPBtreeEntry entry);

EmbPBtreeField embBtreeFieldNewC(const char* nametxt);
EmbPBtreeField embBtreeFieldNewS(const AjPStr name, ajuint refcount);
void           embBtreeFieldDel(EmbPBtreeField *Pthis);
AjBool         embBtreeFieldGetdataS(EmbPBtreeField field, AjPStr *Pstr);
void           embBtreeFieldSetCompressed(EmbPBtreeField field);
void           embBtreeFieldSetSecondary(EmbPBtreeField field);
void           embBtreeFieldSetIdtype(EmbPBtreeField field);
EmbPBtreeField embBtreeGetFieldC(EmbPBtreeEntry entry, const char * nametxt);
EmbPBtreeField embBtreeGetFieldS(EmbPBtreeEntry entry, const AjPStr name);

void           embIndexExit(void);

/*
** End of prototype definitions
*/

#if 0
AjBool         embBtreeProbeCaches(EmbPBtreeEntry entry);
#endif


AJ_END_DECLS

#endif  /* !EMBINDEX_H */


embinit.h/      1414437300  1010  513   100644  2541      `
/* @include embinit ***********************************************************
**
** General routines for initialisation
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.7 $
** @modified $Date: 2011/09/27 11:19:27 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
******************************************************************************/

#ifndef EMBINIT_H
#define EMBINIT_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void embInit (const char *pgm, ajint argc, char * const argv[]);
void embInitP (const char *pgm, ajint argc, char * const argv[],
	       const char *package);

void embInitPV (const char *pgm, ajint argc, char * const argv[],
	       const char *package, const char *packversion);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBINIT_H */

embmat.h/       1414437300  1010  513   100644  5806      `
/* @include embmat ************************************************************
**
** General match routines
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.17 $
** @modified $Date: 2013/03/05 23:08:59 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBMAT_H
#define EMBMAT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajmem.h"
#include "ajmess.h"
#include "ajstr.h"
#include "ajsys.h"
#include "ajbase.h"
#include "ajfileio.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define PRINTS_MAT "PRINTS/prints.mat"

typedef ajuint *PMAT_INT[26];




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPMatPrints ********************************************************
**
** NUCLEUS data structure for PRINTS protein fingerprints
**
** @attr cod [AjPStr] gc line
** @attr acc [AjPStr] gx line
** @attr tit [AjPStr] gt line
** @attr len [ajuint*] Lengths of motifs
** @attr thresh [ajuint*] % of maximum score for matrix
** @attr max [ajuint*] Maximum score for matrix
** @attr matrix [PMAT_INT*] Matrices
** @attr n [ajuint] Number of motifs in fingerprint
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSMatPrints
{
    AjPStr cod;
    AjPStr acc;
    AjPStr tit;
    ajuint    *len;
    ajuint    *thresh;
    ajuint    *max;
    PMAT_INT  *matrix;
    ajuint    n;
    char      Padding[4];
} EmbOMatPrint;
#define EmbPMatPrints EmbOMatPrint*




/* @data EmbPMatMatch *********************************************************
**
** NUCLEUS data structure for sequence matrix matches
**
** @attr seqname [AjPStr] Sequence name
** @attr cod [AjPStr] Matrix name
** @attr acc [AjPStr] Matrix accession number
** @attr tit [AjPStr] Matrix title
** @attr pat [AjPStr] Pattern
** @attr n [ajuint] Number of motifs in fingerprint
** @attr len [ajuint] Lengths of motifs
** @attr thresh [ajuint] % of maximum score for matrix
** @attr max [ajuint] Maximum score for matrix
** @attr element [ajuint] Number of matching element
** @attr start [ajuint] Start of match
** @attr end [ajuint] End of match
** @attr score [ajuint] Score of match
** @attr hpe [ajuint] Hits per element (so far)
** @attr hpm [ajuint] Hits per motif (so far)
** @attr all [AjBool] Can be set if all elements match
** @attr ordered [AjBool] Can be set if "all" and in order
** @attr forward [AjBool] on forward strand
** @attr mm [ajuint] Number of mismatches
** @attr cut1 [ajint] First 5' cut
** @attr cut2 [ajint] First 3' cut
** @attr cut3 [ajint] Reverse 5' cut
** @attr cut4 [ajint] Reverse 3' cut
** @attr len1 [ajuint] Fragment length 5'
** @attr len2 [ajuint] Fragment length 3'
** @attr len3 [ajuint] Fragment length reverse 5'
** @attr len4 [ajuint] Fragment length reverse 3'
** @attr circ12 [AjBool] Circular for cut1 and/or cut2
** @attr circ34 [AjBool] Circular for cut3 and/or cut4
** @attr iso [AjPStr] Holds names of isoschizomers
** @@
******************************************************************************/

typedef struct EmbSMatMatch
{
    AjPStr seqname;
    AjPStr cod;
    AjPStr acc;
    AjPStr tit;
    AjPStr pat;
    ajuint  n;
    ajuint  len;
    ajuint  thresh;
    ajuint  max;
    ajuint  element;
    ajuint  start;
    ajuint  end;
    ajuint  score;
    ajuint  hpe;
    ajuint  hpm;
    AjBool all;
    AjBool ordered;
    AjBool forward;
    ajuint  mm;
    ajint  cut1;
    ajint  cut2;
    ajint  cut3;
    ajint  cut4;
    ajuint len1;
    ajuint len2;
    ajuint len3;
    ajuint len4;
    AjBool circ12;
    AjBool circ34;
    AjPStr iso;
} EmbOMatMatch;
#define EmbPMatMatch EmbOMatMatch*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void   embMatMatchDel (EmbPMatMatch *s);
void   embMatPrintsInit (AjPFile *fp);
void   embMatProtDelInt (EmbPMatPrints *s);
EmbPMatPrints embMatProtReadInt (AjPFile fp);
ajuint    embMatProtScanInt (const AjPStr s, const AjPStr n,
			    const EmbPMatPrints m, AjPList *l,
			    AjBool *all, AjBool *ordered, AjBool overlap);

/*
** End of prototype definitions
*/


AJ_END_DECLS

#endif  /* !EMBMAT_H */
embmisc.h/      1414437300  1010  513   100644  2396      `
/* @include embmisc ***********************************************************
**
** Miscellaneous routines
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.8 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBMISC_H
#define EMBMISC_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

AjBool embMiscMatchPatternDelimC (const AjPStr str, const AjPStr pattern,
                                  const char* delim);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBMISC_H */
embmol.h/       1414437300  1010  513   100644  2901      `
/* @include embmol ************************************************************
**
** Routines for molecular weight matching.
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.13 $
** @modified $Date: 2011/10/18 14:24:24 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBMOL_H
#define EMBMOL_H


/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "embprop.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define EMBMOLPARDISP (double)1000000.0




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPMolFrag **********************************************************
**
** Nucleus sequence molecular fragment object.
**
** @attr begin [ajint] Start
** @attr end [ajint] End
** @attr mwt [double] Molecular weight
** @@
******************************************************************************/

typedef struct EmbSMolFrag
{
    ajint begin;
    ajint end;
    double mwt;
} EmbOMolFrag;
#define EmbPMolFrag EmbOMolFrag*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

ajint embMolGetFrags(const AjPStr thys, ajint rno, EmbPPropMolwt const *mwdata,
		     AjBool mono, AjPList *l);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBMOL_H */

embnmer.h/      1414437300  1010  513   100644  3559      `
/* @include embnmer ***********************************************************
**
** General routines for n-mer alignment.
**
** @author Copyright (c) 1999 Gary Williams
** @version $Revision: 1.8 $
** @modified $Date: 2011/10/18 14:24:25 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBNMER_H
#define EMBNMER_H

/*
* This set of routines was written primarily for the compseq program.
* Feel free to use it for anything you want.
*
* compseq counts the frequency of n-mers (or words) in a sequence.
*
* The easiest way to do this was to make a big ajulong array
* to hold the counts of each type of word.
*
* I needed a way of converting a sequence word into an integer so that I
* could increment the appropriate element of the array.
* (embNmerNuc2int and embNmerProt2int)
*
* I also needed a way of converting an integer back to a short sequence
* so that I could display the word.
* (embNmerInt2nuc and embNmerInt2prot)
*
* embNmerGetNoElements returns the number of elements required to store the
* results.
* In other words it is the number of possible words of size n.
*
* Gary Williams
*
*/





/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

ajulong embNmerNuc2int (const char *seq, ajint wordsize, ajint offset,
			AjBool *otherflag);
ajint   embNmerInt2nuc (AjPStr *seq, ajint wordsize,
			ajulong value);
ajulong embNmerProt2int (const char *seq, ajint wordsize, ajint offset,
			 AjBool *otherflag, AjBool ignorebz);
ajint   embNmerInt2prot (AjPStr *seq, ajint wordsize,
			ajulong value, AjBool ignorebz);
AjBool  embNmerGetNoElements (ajulong *no_elements,
			      ajint word, AjBool seqisnuc,
			      AjBool ignorebz);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBNMER_H */

emboss.h/       1414437300  1010  513   100644  2062      `
/* @include emboss ************************************************************
**
** Master EMBOSS include file for all applications
** 
** @author: Copyright (C) 1998 Peter Rice and Alan Bleasby
** @version $Revision: 1.35 $ 
** @modified $Date: 2012/09/03 14:44:01 $ by $Author: rice $
** @@
** 
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
**
******************************************************************************/

#ifndef EMBOSS_H
#define EMBOSS_H

#include "ajax.h"
#include "ajgraph.h"
#include "ajgraphstruct.h"
#include "ajhist.h"
#include "ensembl.h"

#include "ajtextdb.h"
#include "ajseqdb.h"
#include "ajfeatdb.h"
#include "ajobodb.h"
#include "ajassemdb.h"
#include "ajrefseqdb.h"
#include "ajtaxdb.h"
#include "ajurldb.h"
#include "ajvardb.h"
#include "ajxmldb.h"
#include "ajresourcedb.h"

#include "ajmart.h"
#include "ajacd.h"
#include "embaln.h"
#include "embcom.h"
#include "embcons.h"
#include "embdbi.h"
#include "embread.h"
#include "embiep.h"
#include "embprop.h"
#include "embinit.h"
#include "embword.h"
#include "embpat.h"
#include "embpatlist.h"
#include "embmat.h"
#include "embdata.h"
#include "embnmer.h"
#include "embgroup.h"
#include "embshow.h"
#include "embmisc.h"
#include "embmol.h"
#include "embpdb.h"
#include "embdomain.h"
#include "embsig.h"
#include "embdmx.h"
#include "embexit.h"
#include "embindex.h"
#include "embest.h"

#endif
embpat.h/       1414437300  1010  513   100644  12772     `
/* @include embpat ************************************************************
**
** General routines for pattern matching.
**
** @author Copyright (C) Alan Bleasby 1999
** @version $Revision: 1.25 $
** @modified $Date: 2012/12/07 10:24:56 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBPAT_H
#define EMBPAT_H






/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajfile.h"
#include "ajpat.h"
#include "ajseqdata.h"
#include "ajarr.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */



/* @enum AjEPatType ***********************************************************
**
** Enumerated sequence pattern type
**
** @value PATSEQ_UNKNOWN type not defined
** @value PATSEQ_BMH     Boyer, Moore, Horspool
** @value PATSEQ_BYP     Baeza-Yates, perleberg
** @value PATSEQ_SO      Shift-OR
** @value PATSEQ_BYGC    Baeza-Yates, Gonnet classes
** @value PATSEQ_PROSITE Prosite pattern as regular expression
** @value PATSEQ_TUB     Tarhito, Ukkonen, Bleasby
** @value PATSEQ_OTHER   Brute force processing
** @value PATSEQ_MAX     Beyond last defined value
******************************************************************************/

typedef enum AjOPatseqType
{
    PATSEQ_UNKNOWN,
    PATSEQ_BMH,
    PATSEQ_BYP,
    PATSEQ_SO,
    PATSEQ_BYGC,
    PATSEQ_PROSITE,
    PATSEQ_TUB,
    PATSEQ_OTHER,
    PATSEQ_MAX
} EmbEPatseqType;




/* @data EmbPPatMatch *********************************************************
**
** NUCLEUS data structure for pattern matches
**
** @attr start [ajuint*] Match start positions
** @attr len [ajuint*] Match lengths
** @attr number [ajuint] Number of matches
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSPatMatch {
  ajuint *start;
  ajuint *len;
  ajuint number;
  char Padding[4];
} EmbOPatMatch;
#define EmbPPatMatch EmbOPatMatch*




/* @data EmbPPatRestrict ******************************************************
**
** NUCLEUS data structure for pattern matches
**
** @attr cod [AjPStr] Restriction Enzyme name
** @attr pat [AjPStr] Recognition site
** @attr bin [AjPStr] Binary converted site
** @attr len [ajuint] Pattern length
** @attr blunt [AjBool] Blunt true, sticky false
** @attr cut1 [ajint] First  3' cut
** @attr cut2 [ajint] First  5' cut
** @attr cut3 [ajint] Second 3' cut
** @attr cut4 [ajint] Second 5' cut
** @attr org [AjPStr] Organism
** @attr iso [AjPStr] Isoschizomers
** @attr meth [AjPStr] Methylation
** @attr sou [AjPStr] Source
** @attr sup [AjPStr] Suppliers
** @attr ncuts [ajuint] Number of cuts
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSPatRestrict
{
    AjPStr cod;
    AjPStr pat;
    AjPStr bin;
    ajuint  len;
    AjBool blunt;
    ajint  cut1;
    ajint  cut2;
    ajint  cut3;
    ajint  cut4;
    AjPStr org;
    AjPStr iso;
    AjPStr meth;
    AjPStr sou;
    AjPStr sup;
    ajuint  ncuts;
    char Padding[4];
} EmbOPatRestrict;
#define EmbPPatRestrict EmbOPatRestrict*




#define EmbPPatBYPNode AjOPatBYPNode*
#define EmbOPatBYPNode AjOPatBYPNode




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void            embPatBMHInit (const AjPStr pat, ajuint len, ajint *next);
ajuint          embPatBMHSearch (const AjPStr str, const AjPStr pat,
				 ajuint slen, ajuint plen,
				 const ajint *skip, ajuint start,
				 AjBool left, AjBool right,
				 AjPList l, const AjPStr name, ajuint begin);

ajuint          embPatBruteForce (const AjPStr seq, const AjPStr pat,
				  AjBool amino,
				  AjBool carboxyl,
				  AjPList l, ajuint begin, ajuint mm,
				  const AjPStr name);

void            embPatBYGCInit (const AjPStr pat, ajuint *m, ajuint *table,
				ajuint *limit);
ajuint          embPatBYGSearch (const AjPStr str, const AjPStr name,
				 ajuint begin, ajuint plen,
				 const ajuint *table, ajuint limit,
				 AjPList l, AjBool amino, AjBool carboxyl);

void            embPatBYPInit (const AjPStr pat, ajuint len,
			       EmbPPatBYPNode offset, ajint *buf);
ajuint          embPatBYPSearch (const AjPStr str, const AjPStr name,
				 ajuint begin,
				 ajuint slen, ajuint plen, ajuint mm,
				 EmbPPatBYPNode offset, ajint *buf,
				 AjPList l, AjBool amino, AjBool carboxyl,
				 const AjPStr pat);

AjBool          embPatClassify (const AjPStr pat, AjPStr *cleanpat,
				AjBool *amino, AjBool *carboxyl,
				AjBool *fclass, AjBool *ajcompl,
				AjBool *dontcare, AjBool *range,
				AjBool protein);

void            embPatCompile(ajuint type, const AjPStr pattern,
			      ajuint* plen, ajint** buf,
			      EmbPPatBYPNode off, ajuint** sotable,
			      ajuint* solimit, ajuint* m, AjPStr* regexp,
			      ajuint*** skipm,  ajuint mismatch);

void            embPatFuzzSearch(ajuint type, ajuint begin,
				 const AjPStr pattern,
				 const AjPStr name,
				 const AjPStr text, AjPList l,
				 ajuint plen, ajuint mismatch,
				 AjBool left, AjBool right,
				 ajint *buf, EmbPPatBYPNode off,
				 const ajuint *sotable,
				 ajuint solimit, const AjPStr regexp,
				 ajuint * const *skipm,
				 ajuint *hits, ajuint m, const void **tidy);

void            embPatFuzzSearchAll(ajuint type, ajuint begin,
                                    const AjPStr pattern,
                                    const AjPStr name,
                                    const AjPStr text, AjPList l,
                                    ajuint plen, ajuint mismatch,
                                    AjBool left, AjBool right,
                                    ajint *buf, EmbPPatBYPNode off,
                                    const ajuint *sotable,
                                    ajuint solimit, const AjPStr regexp,
                                    ajuint * const *skipm,
                                    ajuint *hits, ajuint m, const void **tidy);

ajuint          embPatGetType(const AjPStr pattern, AjPStr *cleanpat,
			      ajuint mismatch,
			      AjBool protein,
			      ajuint *m, AjBool *left, AjBool *right);

void		embPatCompileII (AjPPatComp thys, ajuint mismatch);
void		embPatFuzzSearchII (AjPPatComp thys, ajuint begin,
				   const AjPStr name, const AjPStr text,
				   AjPList l, ajuint mismatch, ajuint *hits,
				   const void **tidy);
void		embPatFuzzSearchAllII (AjPPatComp thys, ajuint begin,
                                       const AjPStr name, const AjPStr text,
                                       AjPList l, ajuint mismatch, ajuint *hits,
                                       const void **tidy);
ajuint   	embPatGetTypeII (AjPPatComp thys, const AjPStr pattern,
				 ajuint mismatch, AjBool protein);

void            embPatKMPInit (const AjPStr pat, ajuint len, ajint *next);
ajuint          embPatKMPSearch (const AjPStr str, const AjPStr pat,
				 ajuint slen, ajuint plen,
				 const ajint *next, ajuint start);

void            embPatMatchDel (EmbPPatMatch* pthis);
EmbPPatMatch    embPatMatchFind  (const AjPStr regexp, const AjPStr strng,
				  AjBool left, AjBool right);
EmbPPatMatch    embPatMatchFindC (const AjPStr regexp, const char *sptr,
				  AjBool left, AjBool right);
EmbPPatMatch    embPatMatchFindAll  (const AjPStr regexp, const AjPStr strng,
                                     AjBool left, AjBool right);
EmbPPatMatch    embPatMatchFindAllC (const AjPStr regexp, const char *sptr,
                                     AjBool left, AjBool right);
ajuint          embPatMatchGetEnd (const EmbPPatMatch data, ajuint indexnum);
ajuint          embPatMatchGetLen (const EmbPPatMatch data, ajuint indexnum);
ajuint          embPatMatchGetNumber (const EmbPPatMatch data);
ajuint          embPatMatchGetStart (const EmbPPatMatch data, ajuint indexnum);

AjPStr          embPatPrositeToRegExp (const AjPStr s);
AjPStr          embPatPrositeToRegExpEnds (const AjPStr s,
					   AjBool start, AjBool end);

void            embPatPushHit (AjPList l, const AjPStr name,
			       ajuint pos, ajuint plen,
			       ajuint begin, ajuint mm);

void            embPatRestrictDel (EmbPPatRestrict *thys);
EmbPPatRestrict embPatRestrictNew (void);
ajuint          embPatRestrictMatch (const AjPSeq seq,
				     ajuint begin, ajuint end,
				     AjPFile enzfile, AjPFile methfile,
                                     const AjPStr enzymes,
				     ajuint sitelen, AjBool plasmid,
				     AjBool ambiguity, ajuint min, ajuint max,
				     AjBool blunt, AjBool sticky,
				     AjBool commercial, AjBool methyl,
                                     AjPList l);
void            embPatRestrictPreferred(AjPList l, const AjPTable t);
AjBool          embPatRestrictReadEntry (EmbPPatRestrict re, AjPFile inf);

ajuint          embPatRestrictRestrict (AjPList l, ajuint hits, AjBool isos,
					AjBool alpha);
ajuint          embPatRestrictScan (const EmbPPatRestrict enz,
				    const AjPStr substr,
				    const AjPStr binstr, const AjPStr revstr,
				    const AjPStr binrev, ajuint len,
				    AjBool ambiguity,
				    AjBool plasmid, ajuint min,
				    ajuint max, ajuint begin, AjPList l);

ajint           embPatRestrictCutCompare(const void *a, const void *b);
ajint           embPatRestrictNameCompare(const void *a, const void *b);
ajint           embPatRestrictStartCompare(const void *a, const void *b);
EmbPPatMatch    embPatSeqMatchFind  (const AjPSeq seq, const AjPStr reg);
EmbPPatMatch    embPatSeqMatchFindC (const AjPSeq seq, const char *reg);
EmbPPatMatch    embPatSeqMatchFindAll  (const AjPSeq seq, const AjPStr reg);
EmbPPatMatch    embPatSeqMatchFindAllC (const AjPSeq seq, const char *reg);
AjPStr          embPatSeqCreateRegExp  (const AjPStr thys, AjBool protein);
AjPStr          embPatSeqCreateRegExpC (const char *ptr, AjBool protein);

void            embPatSOInit (const AjPStr pat, ajuint *table,
			      ajuint *limit);
ajuint          embPatSOSearch (const AjPStr str, const AjPStr name,
				ajint first,
				ajuint begin, ajuint plen, const ajuint *table,
				ajuint limit, AjPList l,
				AjBool amino, AjBool carboxyl);

void            embPatTUBInit (const AjPStr pat, ajuint **skipm,
			       ajuint m, ajuint k, ajuint plen);
ajuint          embPatTUBSearch (const AjPStr pat,const AjPStr text,
				 ajuint slen,
				 ajuint * const *skipm, ajuint m,
				 ajuint k, ajuint begin,
				 AjPList l, AjBool amino,
				 AjBool carboxyl, const AjPStr name,
				 ajuint plen);

void            embPatTUInit (const AjPStr pat,
			      ajuint **skipm, ajuint m, ajuint k);
ajuint          embPatTUSearch (const AjPStr pat,
				const AjPStr text, ajuint slen,
				ajuint * const *skipm, ajuint m,
				ajuint k, ajuint begin,
				AjPList l, AjBool amino,
				AjBool carboxyl, const AjPStr name);

ajuint          embPatVariablePattern (const AjPStr pattern,
				       const AjPStr text,
				       const AjPStr patname, AjPList l,
				       ajuint mode,
				       ajuint mismatch, ajuint begin);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBPAT_H */
embpatlist.h/   1414437300  1010  513   100644  3502      `
/* @include embpatlist ********************************************************
**
** Functions for patternlist handling.
**
** @author Copyright (C) 2004 Henrikki Almusa, Medicel Oy,Finland
** @version $Revision: 1.6 $
** @modified $Date: 2011/10/18 14:24:25 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBPATLIST_H
#define EMBPATLIST_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajpat.h"
#include "ajseqdata.h"
#include "ajfeat.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

void   embPatlistSeqSearch(AjPFeattable ftable, const AjPSeq seq,
                           AjPPatlistSeq plist, AjBool reverse);
void   embPatlistSeqSearchAll(AjPFeattable ftable, const AjPSeq seq,
			      AjPPatlistSeq plist, AjBool reverse);
void   embPatlistRegexSearch(AjPFeattable ftable, const AjPSeq seq,
                             AjPPatlistRegex plist, AjBool reverse);
void   embPatlistRegexSearchAll(AjPFeattable ftable, const AjPSeq seq,
                                AjPPatlistRegex plist, AjBool reverse);
void   embPatternRegexSearch(AjPFeattable ftable, const AjPSeq seq,
                             const AjPPatternRegex pat, AjBool reverse);
void   embPatternRegexSearchAll(AjPFeattable ftable, const AjPSeq seq,
                                const AjPPatternRegex pat, AjBool reverse);
void   embPatternSeqSearch(AjPFeattable ftable, const AjPSeq seq,
                           const AjPPatternSeq pat, AjBool reverse);
void   embPatternSeqSearchAll(AjPFeattable ftable, const AjPSeq seq,
			      const AjPPatternSeq pat, AjBool reverse);
AjBool embPatternSeqCompile(AjPPatternSeq pat);

void   embPatlistExit(void);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBPATLIST_H */

embpdb.h/       1414437300  1010  513   100644  4002      `
/* @include embpdb ************************************************************
** 
** Algorithms for handling protein structural data.   
** For use with Atom, Chain and Pdb objects defined in ajpdb.h
** Also for use with Hetent, Het, Vdwres, Vdwall, Cmap and Pdbtosp objects 
** (also in ajpdb.h)
** 
** @author Copyright (C) 2004 Jon Ison (jison@hgmp.mrc.ac.uk) 
** @version $Revision: 1.13 $
** @modified $Date: 2012/04/12 20:39:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
**
******************************************************************************/

#ifndef EMBPDB_H
#define EMBPDB_H




/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajpdb.h"
#include "ajdomain.h"
#include "ajmem.h"
#include "ajmess.h"
#include "ajfmt.h"
#include "ajstr.h"
#include "ajlist.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

/* ======================================================================= */
/* =========================== Pdb object ================================ */
/* ======================================================================= */

AjBool       embAtomInContact(const AjPAtom atm1, const AjPAtom atm2,
			      float thresh,
			      const AjPVdwall vdw);
float        embAtomDistance(const AjPAtom atm1, const AjPAtom atm2,
			     const AjPVdwall vdw);
AjBool       embPdbResidueIndexI(const AjPPdb pdb, ajuint chn, AjPInt *idx);
AjBool       embPdbResidueIndexC(const AjPPdb pdb, char chn, AjPInt *idx);
AjBool       embPdbResidueIndexICA(const AjPPdb pdb, ajuint chn, AjPUint *idx, 
				ajint *nres);
AjBool       embPdbResidueIndexCCA(const AjPPdb pdb, char chn, AjPUint *idx, 
				ajint *nres);
AjBool       embPdbToIdx(ajint *idx, const AjPPdb pdb, const AjPStr res,
			 ajuint chn);
AjBool       embPdbListHeterogens(const AjPPdb pdb, AjPList *list_heterogens, 
				  AjPInt *siz_heterogens, ajint *nhet, 
				  AjPFile logfile);
AjBool       embPdbidToSp(const AjPStr pdb, AjPStr *spr, const AjPList list);
AjBool       embPdbidToAcc(const AjPStr pdb, AjPStr *acc, const AjPList list);
AjBool       embPdbidToScop(const AjPPdb pdb, const AjPList list_allscop, 
			    AjPList *list_pdbscopids);
float        embVdwRad(const AjPAtom atm, const AjPVdwall vdw);
AjBool       embStrideToThree(AjPStr *to, const AjPStr from);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif /* !EMBPDB_H */
embprop.h/      1414437300  1010  513   100644  7137      `
/* @include embprop ***********************************************************
**
** Residue/sequence properties
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.28 $
** @modified 24 Nov 1999 - GWW - Added embPropProtGaps and embPropProt1to3
** @modified 1 Sept 2000 - GWW - Added embPropTransition embPropTranversion
** @modified 4 July 2001 - DMAM - Modified embPropAminoRead embPropCalcMolwt
** @modified 4 July 2001 - DMAM - Added embPropCalcMolwtMod
** @modified 1 July 2008 - JISON - Added embPropGet* functions
** @modified $Date: 2011/10/18 14:24:25 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBPROP_H
#define EMBPROP_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajfile.h"
#include "ajlist.h"
#include "ajseqdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define EMBPROPSIZE 29
#define EMBPROPMOLWT      0
#define EMBEMBPROPTINY    1
#define EMBPROPSMALL      2
#define EMBPROPALIPHATIC  3
#define EMBPROPAROMATIC   4
#define EMBPROPNONPOLAR   5
#define EMBPROPPOLAR      6
#define EMBPROPCHARGE     7
#define EMBPROPPOSITIVE   8
#define EMBPROPNEGATIVE   9
#define EMBPROPABSORBANCE 10

#define EMBPROPHINDEX 26
#define EMBPROPOINDEX 27
#define EMBPROPWINDEX 28

/* define monoisotopic masses for common N- and C- terminal modifications
**
**Values from Expasy
**
**http://www.expasy.org/tools/findmod/findmod_masses.html
*/

#define EMBPROPMSTN_H       1.00783
#define EMBPROPMSTN_FORMYL 29.01823
#define EMBPROPMSTN_ACETYL 43.04013

#define EMBPROPMSTC_OH     17.00274
#define EMBPROPMSTC_AMIDE  16.01804




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPPropAmino ********************************************************
**
** Amino acid properties
**
** @attr tiny [ajint] tiny
** @attr sm_all [ajint] small
** @attr aliphatic [ajint] aliphatic
** @attr aromatic [ajint] aromatic
** @attr nonpolar [ajint] non-polar
** @attr polar [ajint] polar
** @attr charge [float] charge
** @attr pve [ajint] positive
** @attr nve [ajint] negative
** @attr extcoeff [ajint] extinction coefficient
** @attr Padding [char[4]] padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSPropAmino
{
    ajint     tiny;
    ajint     sm_all;
    ajint     aliphatic;
    ajint     aromatic;
    ajint     nonpolar;
    ajint     polar;
    float     charge;
    ajint     pve;
    ajint     nve;
    ajint     extcoeff;
    char      Padding[4];
} EmbOPropAmino;
#define EmbPPropAmino EmbOPropAmino*




/* @data EmbPPropMolwt ********************************************************
**
** Molecular weights
**
** @attr average [double] average molwt
** @attr mono [double] monoisotopic molwt
** @@
******************************************************************************/

typedef struct EmbSPropMolwt
{
    double average;
    double mono;
} EmbOPropMolwt;
#define EmbPPropMolwt EmbOPropMolwt*




typedef struct EmbSPropFrag	/* Enzyme digestion structure */
{
    ajint     start;
    ajint     end;
    double    molwt;
    AjBool    isfrag;
    char      Padding[4];
} EmbOPropFrag;
#define EmbPPropFrag EmbOPropFrag*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

EmbPPropAmino *embPropEaminoRead(AjPFile fp);
EmbPPropMolwt *embPropEmolwtRead(AjPFile fp);
void          embPropAminoDel(EmbPPropAmino **thys);
void          embPropMolwtDel(EmbPPropMolwt **thys);

float embPropMolwtGetMolwt(const EmbPPropMolwt prop);
float embPropGetCharge(const EmbPPropAmino prop);
AjBool embPropGetProperties(const EmbPPropAmino prop, AjPStr* Pstr);
ajint embPropGetTiny(const EmbPPropAmino prop);
ajint embPropGetSmall(const EmbPPropAmino prop);
ajint embPropGetAliphatic(const EmbPPropAmino prop);
ajint embPropGetAromatic(const EmbPPropAmino prop);
ajint embPropGetNonpolar(const EmbPPropAmino prop);
ajint embPropGetPolar(const EmbPPropAmino prop);
ajint embPropGetPve(const EmbPPropAmino prop);
ajint embPropGetNve(const EmbPPropAmino prop);
ajint embPropGetExtcoeff(const EmbPPropAmino prop);



/* void    embPropAminoRead (void); */
void 	embPropCalcFragments (const char *s, ajint n,
			      AjPList *l, AjPList *pa,
			      AjBool unfavoured, AjBool overlap,
			      AjBool allpartials, ajint *ncomp, ajint *npart,
			      AjPStr *rname, AjBool nterm, AjBool cterm,
			      AjBool dorag, EmbPPropMolwt const  *mwdata,
			      AjBool mono);
double  embPropCalcMolextcoeff(const char *s, ajint start, ajint end,
			       AjBool cystine, EmbPPropAmino const *aadata);
double  embPropCalcMolwt (const char *s, ajint start, ajint end,
			  EmbPPropMolwt const *mwdata, AjBool mono);
/* new method for chemically modified ends */
double  embPropCalcMolwtMod (const char *s, ajint start, ajint end,
			     EmbPPropMolwt const *mwdata, AjBool mono,
			     double nmass, double cmass);
const char*   embPropCharToThree (char c);

void    embPropFixF(float matrix[], float missing);
const char*   embPropIntToThree (ajint c);
void    embPropNormalF(float matrix[], float missing);
AjPStr  embPropProtGaps (AjPSeq seq, ajint pad);
AjPStr  embPropProt1to3 (AjPSeq seq, ajint pad);
AjPStr  embPropProt1to3Rev (AjPSeq seq, ajint pad);
AjBool  embPropPurine (char base);
AjBool  embPropPyrimidine (char base);
AjBool  embPropTransversion (char base1, char base2);
AjBool  embPropTransition (char base1, char base2);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBPROP_H */

embread.h/      1414437300  1010  513   100644  2492      `
/* @include embread ***********************************************************
**
** Data file reading routines
**
** @author Copyright (c) 1999 Alan Bleasby
** @version $Revision: 1.6 $
** @modified $Date: 2011/09/27 11:19:27 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBREAD_H
#define EMBREAD_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




#define AJREADAMINO 28



/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */





/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

AjBool embReadAminoDataDoubleC (const char *s, double **a, double fill);
AjBool embReadAminoDataFloatC  (const char *s, float **a, float fill);
AjBool embReadAminoDataIntC    (const char *s, ajint **a, ajint fill);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBREAD_H */
embshow.h/      1414437300  1010  513   100644  13585     `
/* @include embshow ***********************************************************
**
** General routines for sequence display.
**
** @author Copyright (c) 2000 Gary Williams
** @version $Revision: 1.21 $
** @modified $Date: 2011/10/18 14:24:25 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
******************************************************************************/

#ifndef EMBSHOW_H
#define EMBSHOW_H





/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajlist.h"
#include "ajseqdata.h"
#include "ajfeatdata.h"
#include "ajrange.h"
#include "ajtranslate.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @enum ShowEValtype *********************************************************
**
** Descriptor object types
**
** @value SH_SEQ Sequence
** @value SH_BLANK Blank line
** @value SH_TICK Tick marks
** @value SH_TICKNUM Tick numbers
** @value SH_COMP Complementary strand
** @value SH_TRAN Protein translation
** @value SH_RE Restriction enzyme cut sites
** @value SH_FT Features
** @value SH_NOTE Notes
******************************************************************************/

typedef enum
{
    SH_SEQ,
    SH_BLANK,
    SH_TICK,
    SH_TICKNUM,
    SH_COMP,
    SH_TRAN,
    SH_RE,
    SH_FT,
    SH_NOTE
} ShowEValtype;




/* @data EmbPShow *************************************************************
**
** NUCLEUS data structure for EmbPShow object for a sequence
**
** @attr list [AjPList] list of EmbPShowInfo structures
**
** @cc information about the sequence
**
** @attr seq [const AjPSeq] the sequence
** @attr nucleic [AjBool] ajTrue = the sequence is nucleic
** @attr offset [ajuint] offset to start numbering at
** @attr start [ajuint] sequence position to start printing at
** @attr end [ajuint] sequence position to stop printing at
**
** @cc information about the page layout
**
** @attr width [ajuint] width of sequence to display on each line
** @attr length [ajuint] length of a page (0 = indefinite)
** @attr margin [ajuint] margin for numbers
** @attr html [AjBool] ajTrue = format page for HTML
** @@
******************************************************************************/

typedef struct EmbSShow {
  AjPList list;
  const AjPSeq seq;
  AjBool nucleic;
  ajuint offset;
  ajuint start;
  ajuint end;
  ajuint width;
  ajuint length;
  ajuint margin;
  AjBool html;
} EmbOShow;
#define EmbPShow EmbOShow*




/* @data EmbPShowInfo *********************************************************
**
**
** The sequence and associated things to show are held in an ordered list
** of type EmbPShowInfo. This list is held in the structure EmbPShow.
**
** The things to show are displayed around the sequence in the order that
** they are held on the list.
**
** EmbPShowInfo holds the descriptor (one of EmbPShowBlank, EmbPShowTicks,
** EmbPShowSeq, EmbPShowComp, etc.) and the type of the descriptor (one of
** SH_BLANK, SH_TICKS, SH_SEQ, SH_COMP, etc.  )
**
** Each descriptor (EmbPShowSeq, EmbPShowBlank, EmbPShowTicks, etc.) holds
** information that could be useful in displaying its type of information.
**
** So, for example:
**
** EmbPShow could have a list of:
** ----------------------------
**
** EmbPShowInfo->type=SH_BLANK
**    |       ->info=EmbPShowBlank
**    |
** EmbPShowInfo->type=SH_TICKS
**    |       ->info=EmbPShowTicks
**    |
** EmbPShowInfo->type=SH_SEQ
**    |       ->info=EmbPShowSeq
**    |
** EmbPShowInfo->type=SH_COMP
**    |       ->info=EmbPShowComp
**    |
** EmbPShowInfo->type=etc.
**    |       ->info=etc.
**    |
**   etc.
**
** @attr info [void*] Information descriptor (set of available descriptors)
** @attr type [ajint] Type of information (enumerated list)
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSShowInfo {
  void * info;
  ajint type;
  char Padding[4];
} EmbOShowInfo;
#define EmbPShowInfo EmbOShowInfo*




/* @data EmbPShowSeq **********************************************************
**
** NUCLEUS data structure for sequence information, type = SH_SEQ
**
** @attr number [AjBool] ajTrue = number the sequence
** @attr threeletter [AjBool] ajTrue = display proteins in three letter code
** @attr upperrange [const AjPRange] range of sequence to uppercase
** @attr highlight [const AjPRange] range of sequence to colour in HTML
** @@
******************************************************************************/

typedef struct EmbSShowSeq {
  AjBool number;
  AjBool threeletter;
  const AjPRange upperrange;
  const AjPRange highlight;
} EmbOShowSeq;
#define EmbPShowSeq EmbOShowSeq*

/* blank line information, type = SH_BLANK */





/* @data EmbPShowBlank ********************************************************
**
** NUCLEUS data structure for  blank line information, type = SH_BLANK
**
** @attr dummy [AjBool] Dummy attribute - no specific information needed
**                      AJNEW0() falls over if 0 bytes are allocated, so
**                      put in this dummy to pad the structure out
** @@
******************************************************************************/

typedef struct EmbSShowBlank {
  AjBool dummy;
} EmbOShowBlank;
#define EmbPShowBlank EmbOShowBlank*




/* @data EmbPShowTicks ********************************************************
**
** NUCLEUS data structure for tick line information, type = SH_TICK
**
** @attr dummy [AjBool] Dummy attribute - no specific information needed
**                      AJNEW0() falls over if 0 bytes are allocated, so
**                      put in this dummy to pad the structure out
** @@
******************************************************************************/

typedef struct EmbSShowTicks {
  AjBool dummy;
} EmbOShowTicks;
#define EmbPShowTicks EmbOShowTicks*




/* @data EmbPShowTicknum ******************************************************
**
** NUCLEUS data structure for tick number line information, type = SH_TICKNUM
**
** @attr dummy [AjBool] Dummy attribute - no specific information needed
**                      AJNEW0() falls over if 0 bytes are allocated, so
**                      put in this dummy to pad the structure out
** @@
******************************************************************************/

typedef struct EmbSShowTicknum {
  AjBool dummy;
} EmbOShowTicknum;
#define EmbPShowTicknum EmbOShowTicknum*




/* @data EmbPShowTran *********************************************************
**
** NUCLEUS data structure for translation information, type = SH_TRAN
**
** @attr transeq [AjPSeq] Copy of our stored translation
** @attr trnTable [const AjPTrn] translation table
** @attr frame [ajint] 1,2,3,-1,-2 or -3 = frame to translate
** @attr threeletter [AjBool] ajTrue = display in three letter code
** @attr number [AjBool] ajTrue = number the translation
** @attr tranpos [ajuint] store of translation position for numbering
** @attr regions [const AjPRange] only translate in these regions,
**                                NULL = do all
** @attr orfminsize [ajuint] minimum size of ORF to display
** @attr lcinterorf [AjBool] ajTrue = put the inter-orf regions in lower case
** @attr firstorf [AjBool] ajTrue = beginning of the seq is a possible ORF
** @attr lastorf [AjBool] ajTrue = end of the seq is a possible ORF
** @attr showframe [AjBool] ajTrue = write the frame number
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSShowTran {
  AjPSeq transeq;
  const AjPTrn trnTable;
  ajint frame;
  AjBool threeletter;
  AjBool number;
  ajuint tranpos;
  const AjPRange regions;
  ajuint orfminsize;
  AjBool lcinterorf;
  AjBool firstorf;
  AjBool lastorf;
  AjBool showframe;
  char   Padding[4];
} EmbOShowTran;
#define EmbPShowTran EmbOShowTran*




/* @data EmbPShowComp *********************************************************
**
** NUCLEUS data structure for sequence complement information, type = SH_COMP
**
** @attr number [AjBool] ajTrue = number the complement
** @@
******************************************************************************/

typedef struct EmbSShowComp {
  AjBool number;
} EmbOShowComp;
#define EmbPShowComp EmbOShowComp*




/* @data EmbPShowRE ***********************************************************
**
** NUCLEUS data structure for RE cut site information, type = SH_RE
**
** @attr sense [ajint]  1 or -1 = sense to display
** @attr flat [AjBool] ajTrue = display in flat format with recognition sites
** @attr matches [AjPList] list of AjPMatmatch matches
** @attr plasmid [AjBool] ajTrue = Circular (plasmid) sequence. Needed so
**                        that when we display sequences we can decide whether
**                        to show cuts that go past the origin in either
**                        direction
** @attr hits [ajuint]  number of hits in list
** @attr sitelist [AjPList] list of EmbSShowREsite
** @@
******************************************************************************/

typedef struct EmbSShowRE {
  ajint sense;
  AjBool flat;
  AjPList matches;
  AjBool plasmid;
  ajuint hits;
  AjPList sitelist;
} EmbOShowRE;
#define EmbPShowRE EmbOShowRE*




/* @data EmbPShowFT ***********************************************************
**
** NUCLEUS data structure for  Feature information, type = SH_FT
**
** @attr feat [AjPFeattable] Feature table
** @@
******************************************************************************/

typedef struct EmbSShowFT {
  AjPFeattable feat;
} EmbOShowFT;
#define EmbPShowFT EmbOShowFT*




/* @data EmbPShowNote *********************************************************
**
** NUCLEUS data structure for annotation information, type = SH_NOTE
**
** @attr regions [const AjPRange] regions to annotate, NULL = no regions
** @@
******************************************************************************/

typedef struct EmbSShowNote {
  const AjPRange regions;
} EmbOShowNote;
#define EmbPShowNote EmbOShowNote*




/********* assorted structures ***********/




/* @data EmbPShowREsite *******************************************************
**
** NUCLEUS data structure for Restriction Enzyme cut site position list node
**
** @attr name [AjPStr] name of Restriction Enzyme
** @attr pos [ajint] cut site position
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSShowREsite {
  AjPStr name;
  ajint pos;
  char Padding[4];
} EmbOShowREsite;
#define EmbPShowREsite EmbOShowREsite*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

EmbPShow embShowNew (const AjPSeq seq, ajint begin, ajint end, ajint width,
		     ajint length, ajint margin, AjBool html, ajint offset);
void     embShowDel (EmbPShow* pthis);

void     embShowAddSeq (EmbPShow thys, AjBool number, AjBool threeletter,
			const AjPRange upperrange, const AjPRange colour);
void     embShowAddBlank (EmbPShow thys);
void     embShowAddTicks (EmbPShow thys);
void     embShowAddTicknum (EmbPShow thys);
void     embShowAddComp (EmbPShow thys, AjBool number);
void     embShowAddTran (EmbPShow thys, const AjPTrn trnTable, ajint frame,
			 AjBool threeletter, AjBool number,
			 const AjPRange regions,
			 ajint orfminsize, AjBool lcinterorf,
			 AjBool firstorf, AjBool lastorf, AjBool showframe);
void     embShowAddRE (EmbPShow thys, ajint sense, const AjPList restrictlist,
		       AjBool plasmid, AjBool flat);
void     embShowAddFT (EmbPShow thys, const AjPFeattable feat);
void     embShowAddNote (EmbPShow thys, const AjPRange regions);
void     embShowPrint (AjPFile out, const EmbPShow thys);
void     embShowUpperRange (AjPStr *line,
			    const AjPRange upperrange, ajuint pos);
void     embShowColourRange (AjPStr *line,
			     const AjPRange colour, ajuint pos);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBSHOW_H */



embsig.h/       1414437300  1010  513   100644  20807     `
/* @include embsig ************************************************************
** 
** Data structures and algorithms for use with sparse sequence signatures.
** Hit, Hitlist, Sigpos, Sigdat and Signature objects.
** 
** @author Copyright (c) 2004 Jon Ison (jison@hgmp.mrc.ac.uk)
** @modified $Date: 2012/04/12 20:39:51 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
**
*****************************************************************************/

#ifndef EMBSIG_H
#define EMBSIG_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajarr.h"
#include "ajfile.h"
#include "ajlist.h"
#include "ajmatrices.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* @enum EmbESignatureType ****************************************************
**
** NUCLEUS Signature Type enumeration
**
** @value embESignatureTypeNULL NULL
** @value embESignatureTypeCATH CATH for domain signatures
** @value embESignatureTypeSCOP SCOP for domain signatures
** @value embESignatureTypeLIGAND Ligand for ligand signatures
** @@
******************************************************************************/

typedef enum EmbOSignatureType
{
    embESignatureTypeNULL,
    embESignatureTypeCATH,
    embESignatureTypeSCOP,
    embESignatureTypeLIGAND
} EmbESignatureType;




/* @enum EmbESignatureTypesig *************************************************
**
** NUCLEUS Signature Type enumeration
**
** @value embESignatureTypesigNULL NULL
** @value embESignatureTypesig1D 1D
** @value embESignatureTypesig3D 3D
** @@
******************************************************************************/

typedef enum EmbOSignatureTypesig
{
    embESignatureTypesigNULL,
    embESignatureTypesig1D,
    embESignatureTypesig3D
} EmbESignatureTypesig;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPSigpos **********************************************************
**
** Nucleus Sigpos object.
**
** Holds data for compiled signature position
**
** EmbPSigpos is implemented as a pointer to a C data structure.
**
** @alias EmbSSigpos
** @alias EmbOSigpos
**
**
** 

** @attr  gsiz    [ajuint*] Gap sizes 
** @attr  gpen    [float*]  Gap penalties 
** @attr  subs    [float*]  Residue match values 
** @attr  ngaps   [ajuint]  No. of gaps 
** @attr  Padding [char[4]] Padding to alignment boundary
** 
** @new embSigposNew Default Sigdat object constructor
** @delete embSigposDel Default Sigdat object destructor
** @@
****************************************************************************/

typedef struct EmbSSigpos
{
    ajuint   *gsiz;       
    float   *gpen;       
    float   *subs;       
    ajuint  ngaps;      
    char    Padding[4];
} EmbOSigpos;
#define EmbPSigpos EmbOSigpos*





/* @data EmbPSigdat **********************************************************
**
** Nucleus Sigdat object.
**
** Holds empirical data for an (uncompiled) signature position. 
** Important: Functions which manipulate this structure rely on the data in 
** the gap arrays (gsiz and grfq) being filled in order of increasing gap 
** size.
**
** EmbPSigdat is implemented as a pointer to a C data structure.
**
** @alias EmbSSigdat
** @alias EmbOSigdat
**
**
**
** @attr  rids [AjPChar]   Residue id's 
** @attr  rfrq [AjPUint]   Residue frequencies 
** 
** @attr  nres [ajuint]    No. diff. types of residue
** @attr  nenv [ajuint]    No. diff. types of environment
** @attr  eids [AjPStr*]   Environment id's
** @attr  efrq [AjPUint]   Environment frequencies 
**
** @attr  gsiz [AjPUint]   Gap sizes 
** @attr  gfrq [AjPUint]   Frequencies of gaps of each size
** @attr  ngap [ajuint]    No. diff. sizes of empirical gap
** @attr  wsiz [ajuint]    Window size for this gap 
**
** @new embSigdatNew Default Sigdat object constructor
** @delete embSigdatDel Default Sigdat object destructor
** @@
****************************************************************************/

typedef struct EmbSSigdat
{

    AjPChar      rids;
    AjPUint      rfrq;         
    ajuint       nres;
    ajuint       nenv;         
    AjPStr      *eids;
    AjPUint      efrq;         


    AjPUint      gsiz;         
    AjPUint      gfrq;         

    ajuint       ngap;         
    ajuint       wsiz;         
} EmbOSigdat;
#define EmbPSigdat EmbOSigdat*





/* @data EmbPSignature *******************************************************
**
** Nucleus Signature object.
**
** EmbPSignature is implemented as a pointer to a C data structure.
**
** @alias EmbSSignature
** @alias EmbOSignature
**
** 
**
** @attr  Type [EmbESignatureType] NUCLEUS Signature Type enumeration
** @attr  Typesig [EmbESignatureTypesig] NUCLEUS Signature Typesig enumeration
** for sequence or structure-based signatures respectively. 
** @attr  Class        [AjPStr]      SCOP classification.
** @attr  Architecture [AjPStr]      CATH classification.
** @attr  Topology     [AjPStr]      CATH classification.
** @attr  Fold         [AjPStr]      SCOP classification.
** @attr  Superfamily  [AjPStr]      SCOP classification.
** @attr  Family       [AjPStr]      SCOP classification.
** @attr  Sunid_Family [ajuint]       SCOP sunid for family. 
** @attr  npos         [ajuint]       No. of signature positions.
** @attr  pos          [EmbPSigpos*]  Array of derived data for puropses of 
**                                   alignment.
** @attr  dat          [EmbPSigdat*]  Array of empirical data.
**
** @attr  Id    [AjPStr]   Protein id code. 
** @attr  Domid [AjPStr]   Domain id code. 
** @attr  Ligid [AjPStr]   Ligand id code. 
** @attr  Desc  [AjPStr]   Description of ligand (ajLIGAND only)
** @attr  ns    [ajuint]    No. of sites (ajLIGAND only)
** @attr  sn    [ajuint]    Site number (ajLIGAND only)
** @attr  np    [ajuint]    No. of patches (ajLIGAND only)
** @attr  pn    [ajuint]    Patch number (ajLIGAND only)
** @attr  minpatch  [ajuint]   Max. patch size (residues) (ajLIGAND only)
** @attr  maxgap   [ajuint]    Min. gap distance (residues) (ajLIGAND only)
** @new    embSignatureNew Default Signature constructor
** @delete embSignatureDel Default Signature destructor
** @output embSignatureWrite Write signature to file.
** @input  embSignatureReadNew Construct a Signature object from reading a 
**         file in embl-like format (see documentation for the DOMAINATRIX
**         "sigscan" application).
** @output embSignatureWrite Write a Signature object to a file in embl-like 
**         format (see documentation for the DOMAINATRIX "sigscan" 
**         application).
** @input  embSignatureHitsRead Construct a Hitlist object from reading a 
**         signature hits file (see documentation for the DOMAINATRIX 
**         "sigscan" application). 
** @output embSignatureHitsWrite Writes a list of Hit objects to a 
**         signature hits file (see documentation for the DOMAINATRIX 
**         "sigscan" application). 
** @modify embSignatureCompile Compiles a Signature object.  The signature 
**         must first have been allocated by using the embSignatureNew 
**         function.
** @use    embSignatureAlignSeq Performs an alignment of a signature to a 
**         protein sequence. The signature must have first been compiled by 
**         calling embSignatureCompile.  Write a Hit object with the result.
** @use    embSignatureAlignSeqall Performs an alignment of a signature to
**         protein sequences. The signature must have first been compiled by 
**         calling embSignatureCompile.  Write a list of Hit objects with 
**         the result.
** @@
****************************************************************************/

typedef struct EmbSSignature
{
    EmbESignatureType Type;
    EmbESignatureTypesig Typesig;
    AjPStr      Class;
    AjPStr      Architecture;
    AjPStr      Topology;
    AjPStr      Fold;
    AjPStr      Superfamily;
    AjPStr      Family;
    ajuint      Sunid_Family; 
    ajuint      npos;       
    EmbPSigpos *pos;        
    EmbPSigdat *dat;        

    AjPStr    Id;     
    AjPStr    Domid;     
    AjPStr    Ligid;     
    AjPStr    Desc;
    ajuint    ns;
    ajuint    sn;
    ajuint    np;
    ajuint    pn;
    ajuint    minpatch;
    ajuint    maxgap;
} EmbOSignature;
#define EmbPSignature EmbOSignature*






/* @data EmbPHit *************************************************************
**
** Nucleus hit object.
**
** Holds data associated with a protein / domain sequence that is generated 
** and or manipulated by the EMBOSS applications seqsearch, seqsort, and 
** sigscan.
**
** EmbPHit is implemented as a pointer to a C data structure.
**
** @alias EmbSHit
** @alias EmbOHit
**
**
**
** @attr  Seq	   [AjPStr]  Sequence as string.
** @attr  Start    [ajuint]   Start of sequence or signature alignment relative
**	           	     to full length swissprot sequence, this is an 
**		             index so starts at 0. 
** @attr  End      [ajuint]   End of sequence or signature alignment relative
**		             to full length swissprot sequence, this is an
**         		     index so starts at 0. 
** @attr  Acc      [AjPStr]  Accession number of sequence entry.  
** @attr  Spr      [AjPStr]  Swissprot code of sequence entry. 
** @attr  Dom      [AjPStr]  SCOP or CATH database identifier code of entry. 
** @attr  Rank     [ajuint]   Rank order of hit 	
** @attr  Score    [float]   Score of hit 
** @attr  Eval     [float]   E-value of hit 
** @attr  Pval     [float]   p-value of hit 
**  
** @attr  Typeobj  [AjPStr]  Primary (objective) classification of hit.
** @attr  Typesbj  [AjPStr]  Secondary (subjective) classification of hit 
** @attr  Model    [AjPStr]  String for model type if used, one of 
**  PSIBLAST, HMMER, SAM, SPARSE, HENIKOFF or GRIBSKOV
**
** @attr  Alg      [AjPStr]  Alignment, e.g. of a signature to the sequence 
** @attr  Group    [AjPStr]  Grouping of hit, e.g. 'REDUNDANT' or 
**                           'NON_REDUNDANT' 
** @attr  Target   [AjBool]  Used for garbage collection.
** @attr  Target2  [AjBool]  Also used for garbage collection.
** @attr  Sig      [EmbPSignature] Pointer to signature object for which hit
** @attr  Priority [AjBool]  Also used for garbage collection.
** @attr  Padding  [char[4]]  Padding to alignment boundary
** was generated. Used as a pointer only - memory is never freed or allocated
** to it.
**
**
** 
** @new    embHitNew Default Hit constructor
** @new    embHitReadFasta  Construct Hit object from reading the next entry
**         from a file in extended FASTA format (see documentation for the 
**         DOMAINATRIX "seqsearch" application). 
** @delete embHitDel Default Hit destructor
** @assign embHitMerge Create new Hit from merging two Hit objects
** @use    embMatchScore Sort Hit objects by Score element.
** @use    embMatchinvScore Sort (inverted order) Hit objects by Score 
**         element.
** @use    embMatchLigid Sort Hit objects by Ligid element in Sig element.
** @use    embMatch Sort Hit objects by Ligid element in Sig element.

** @use    embHitsOverlap Checks for overlap between two Hit objects.
** 
** @@
****************************************************************************/

typedef struct EmbSHit
{
  AjPStr  Seq;	
  ajuint  Start;      
  ajuint  End;        
  AjPStr  Acc;           
  AjPStr  Spr;        
  AjPStr  Dom;        
  ajuint  Rank;       
  float   Score;      
  float  Eval;       
  float  Pval;       

  AjPStr  Typeobj;    
  AjPStr  Typesbj;    
  AjPStr  Model;      
  AjPStr  Alg;        
  AjPStr  Group;      
  AjBool  Target;     
  AjBool  Target2;    

  EmbPSignature Sig;
  AjBool  Priority;
  char    Padding[4];
} EmbOHit;
#define EmbPHit EmbOHit*






/* @data EmbPHitlist *********************************************************
**
** Nucleus hitlist object.
**
** Holds an array of hit structures and associated SCOP classification 
** records.
**
** EmbPHitlist is implemented as a pointer to a C data structure.
**
** @alias EmbSHitlist
** @alias EmbOHitlist
**
** 
**
** @attr  Class         [AjPStr]    SCOP classification.
** @attr  Architecture  [AjPStr]    CATH classification.
** @attr  Topology      [AjPStr]    CATH classification.
** @attr  Fold          [AjPStr]    SCOP classification.
** @attr  Superfamily   [AjPStr]    SCOP classification.
** @attr  Family        [AjPStr]    SCOP classification.
** @attr  Model         [AjPStr]    SCOP classification.
** @attr  Sunid_Family  [ajuint]     SCOP sunid for family. 
** @attr  Priority      [AjBool]    True if the Hitlist is high priority. 

** @attr  hits          [EmbPHit*]  Array of hits. 
** @attr  Type          [EmbESignatureType] NUCLEUS Signature Type enumeration
** @attr  N             [ajuint]    No. of hits. 
**
** @new    embHitlistNew Default Hitlist constructor
** @delete embHitlistDel Default Hitlist destructor
** @use    embHitlistMatchFold Sort Hitlist objects by Fold element
** @input  embHitlistRead Construct Hitlist object from reading the next entry
**         from a file in embl-like format (see documentation for the 
**         DOMAINATRIX "seqsearch" application). 
** @new    embHitlistReadFasta Construct Hitlist object from reading
**         the next entry
**         from a file in extended FASTA format (see documentation for the 
**         DOMAINATRIX "seqsearch" application). 
** @input  embHitlistReadNode Construct Hitlist object from reading a specific
**         entry from a file in embl-like format (see documentation for the 
**         DOMAINATRIX "seqsearch" application). 
** @new    embHitlistReadNodeFasta Construct Hitlist object from reading
**         a specific entry from a file in extended FASTA format
**         (see documentation for the DOMAINATRIX "seqsearch" application). 
** @output embHitlistWrite Write Hitlist to file in embl-like format (see 
**         documentation for the DOMAINATRIX "seqsearch" application). 
** @output embHitlistWriteSubset Write a subset of a Hitlist to file in 
**         embl-like format (see documentation for the DOMAINATRIX "seqsearch"
**         application). 
** @output embHitlistWriteFasta Write Hitlist to file in extended FASTA format 
**         (see documentation for the DOMAINATRIX "seqsearch" application). 
** @output embHitlistWriteSubsetFasta Write a subset of a Hitlist to file in 
**         extended FASTA format (see documentation for the DOMAINATRIX
**         "seqsearch" application). 
** @output embHitlistWriteHitFasta Write a single Hit from a Hitlist to file 
**         in extended FASTA format (see documentation for the DOMAINATRIX 
**         "seqsearch" application). 
** @use    embHitlistClassify Classifies a list of signature-sequence hits 
**         (held in a Hitlist object) according to list of target sequences 
**         (a list of Hitlist objects).
** @@
****************************************************************************/

typedef struct EmbSHitlist
{
    AjPStr   Class;
    AjPStr   Architecture;
    AjPStr   Topology;
    AjPStr   Fold;
    AjPStr   Superfamily;
    AjPStr   Family;
    AjPStr   Model;
    ajuint   Sunid_Family;
    AjBool   Priority;     
    EmbPHit *hits;         
    EmbESignatureType Type;
    ajuint   N;            
} EmbOHitlist;
#define EmbPHitlist EmbOHitlist*





/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/


/* ======================================================================= */
/* =========================== Sigdat object ============================= */
/* ======================================================================= */
EmbPSigdat   embSigdatNew(ajuint nres, ajuint ngap);
void         embSigdatDel(EmbPSigdat *pthis);




/* ======================================================================= */
/* =========================== Sigpos object ============================= */
/* ======================================================================= */
EmbPSigpos   embSigposNew(ajuint ngap);
void         embSigposDel(EmbPSigpos *thys);




/* ======================================================================= */
/* ========================== Signature object =========================== */
/* ======================================================================= */
EmbPSignature embSignatureNew(ajuint n);
void          embSignatureDel(EmbPSignature *ptr);
EmbPSignature embSignatureReadNew(AjPFile inf);
AjBool        embSignatureWrite(AjPFile outf, const EmbPSignature obj);
AjBool        embSignatureCompile(EmbPSignature *S, float gapo, float gape,
				  const AjPMatrixf matrix);
AjBool        embSignatureAlignSeq(const EmbPSignature S, const AjPSeq seq,
				   EmbPHit *hit, 
				   ajuint nterm);
AjBool        embSignatureAlignSeqall(const EmbPSignature sig, AjPSeqall db, 
				      ajuint n, EmbPHitlist *hitlist, 
				      ajuint nterm);
AjBool        embSignatureHitsWrite(AjPFile outf, const EmbPSignature sig, 
				    const EmbPHitlist hitlist, ajuint n);
EmbPHitlist   embSignatureHitsRead(AjPFile inf);





/* ======================================================================= */
/* ============================= Hit object ============================== */
/* ======================================================================= */
EmbPHit       embHitNew(void);

EmbPHit       embHitReadFasta(AjPFile inf);

void          embHitDel(EmbPHit *ptr);

EmbPHit       embHitMerge(const EmbPHit hit1, 
			  const EmbPHit hit2);

AjBool        embHitsOverlap(const EmbPHit hit1, 
			     const EmbPHit hit2, 
			     ajuint n);

ajint         embMatchScore(const void *hit1, 
			    const void *hit2);

ajint         embMatchinvScore(const void *hit1, 
			       const void *hit2);

ajint         embMatchLigid(const void *hit1, 
			    const void *hit2);

ajint         embMatchSN(const void *hit1, 
			 const void *hit2);


/* ======================================================================= */
/* =========================== Hitlist object ============================ */
/* ======================================================================= */

EmbPHitlist   embHitlistNew(ajuint n);

void          embHitlistDel(EmbPHitlist *ptr);

EmbPHitlist   embHitlistRead(AjPFile inf);

EmbPHitlist   embHitlistReadFasta(AjPFile inf);

AjBool        embHitlistWrite(AjPFile outf, 
			      const EmbPHitlist obj);

AjBool        embHitlistWriteSubset(AjPFile outf, 
				    const EmbPHitlist obj, 
				    const AjPUint ok);

AjBool        embHitlistWriteFasta(AjPFile outf, 
				   const EmbPHitlist obj);

AjBool        embHitlistWriteSubsetFasta(AjPFile outf, 
					 const EmbPHitlist obj, 
					 const AjPUint ok);

AjBool        embHitlistWriteHitFasta(AjPFile outf, 
				      ajuint n, 
				      const EmbPHitlist obj);

AjPList       embHitlistReadNode(AjPFile inf, 
				 const AjPStr fam, 
				 const AjPStr sfam, 	
				 const AjPStr fold, 
				 const AjPStr klass);

AjPList       embHitlistReadNodeFasta(AjPFile inf, 
				      const AjPStr fam, 
				      const AjPStr sfam, 
				      const AjPStr fold, 
				      const AjPStr klass);

AjBool        embHitlistClassify(EmbPHitlist hits, 
				 const AjPList targets, 
				 ajuint thresh);

ajint         embHitlistMatchFold(const void *hit1, 
				  const void *hit2);


void          embSigExit(void);

/*
** End of prototype definitions
*/

AJ_END_DECLS

#endif  /* !EMBSIG_H */














embword.h/      1414437300  1010  513   100644  7961      `
/* @include embword ***********************************************************
**
** Wordmatch routines
**
** @author Copyright (c) 1999 Gary Williams
** @version $Revision: 1.32 $
** @modified $Date: 2011/10/18 14:24:25 $ by $Author: rice $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef EMBWORD_H
#define EMBWORD_H



/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajdefine.h"
#include "ajstr.h"
#include "ajseqdata.h"
#include "ajfeat.h"
#include "ajfile.h"
#include "ajlist.h"
#include "ajtable.h"

AJ_BEGIN_DECLS


/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* @data EmbPWordMatch ********************************************************
**
** NUCLEUS data structure for word matches
**
** @attr seq1start [ajuint] match start point in original sequence
** @attr seq2start [ajuint] match start point in comparison sequence
** @attr sequence [const AjPSeq] need in case we build multiple matches here
**                         so we know which one the match belongs to
** @attr length [ajint] length of match
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSWordMatch {
  ajuint seq1start;
  ajuint seq2start;
  const AjPSeq sequence;
  ajint length;
  char Padding[4];
} EmbOWordMatch;
#define EmbPWordMatch EmbOWordMatch*




/* @data EmbPWord *************************************************************
**
** NUCLEUS data structure for words
**
** @attr fword [const char*] Original word
** @attr seqlocs [AjPTable] Table of word start positions in multiple sequences
** @attr count [ajint] Total number of locations in all sequences
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EmbSWord {
  const char *fword;
  AjPTable seqlocs;
  ajint count;
  char Padding[4];
} EmbOWord;
#define EmbPWord EmbOWord*




/* @data EmbPWordSeqLocs ******************************************************
**
** NUCLEUS data structure for word locations in a given sequence
**
** @attr seq [const AjPSeq] Sequence for word start positions
** @attr locs [AjPList] List of word start positions in the sequence
** @@
******************************************************************************/

typedef struct EmbSWordSeqLocs {
  const AjPSeq seq;
  AjPList locs;
} EmbOWordSeqLocs;
#define EmbPWordSeqLocs EmbOWordSeqLocs*



/* @data EmbPWordRK ***********************************************************
**
** Data structure that extends EmbPWord objects for efficient access
** by Rabin-Karp search. It is constructed using embWordInitRabinKarpSearch
** method for a given sequence-set.
**
** Possible improvements could be achieved by scanning all other words
** during preprocessing to find out a minimum length that can be skipped
** safely when a word is matched.
**
** The first 5 fields (seqindxs-nseqs) are set during initialisation,
** and the last 3 fields (nMatches, lenMatches, nSeqMatches) are calculated
** during search.
**
** @attr word [const EmbPWord] Original word object
** @attr seqindxs [ajuint*] Positions in the seqset
**                          for each sequence the word has been seen
** @attr nnseqlocs [ajuint*] Number of word start positions for each sequence
** @attr locs [ajuint**] List of word start positions for each sequence
** @attr hash [ajulong] Hash value for the word
** @attr nseqs [ajuint] Number of pattern-sequences word has been seen
** @attr nMatches [ajuint] Number of matches in query sequences
** @attr lenMatches [ajulong] Total length of extended matches
** @attr nSeqMatches [ajuint*] Number of matches
**                            recorded on per pattern-sequence base
** @@
******************************************************************************/

typedef struct EmbSWordRK {
    const EmbPWord word;
    ajuint* seqindxs;
    ajuint* nnseqlocs;
    ajuint** locs;
    ajulong hash;
    ajuint nseqs;
    ajuint nMatches;
    ajulong lenMatches;
    ajuint* nSeqMatches;
} EmbOWordRK;

#define EmbPWordRK EmbOWordRK*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */



/*
** Prototype definitions
*/

AjPList embWordBuildMatchTable (const AjPTable seq1MatchTable,
				const AjPSeq seq2, ajint orderit);
void    embWordClear (void);
void    embWordExit(void);
void    embWordFreeTable(AjPTable *table);
AjBool  embWordGetTable (AjPTable *table, const AjPSeq seq);
void    embWordLength (ajint wordlen);
AjBool  embWordMatchIter (AjIList iter, ajint* start1, ajint* start2,
			  ajint* len, const AjPSeq* seq);

EmbPWordMatch embWordMatchNew(const AjPSeq seq, ajuint seq1start,
	                      ajuint seq2start, ajint length);

void    embWordMatchListDelete (AjPList* plist);
void    embWordMatchListPrint (AjPFile file, const AjPList list);
void    embWordPrintTable  (const AjPTable table);
void    embWordPrintTableF (const AjPTable table, AjPFile outf);
void    embWordPrintTableFI (const AjPTable table, ajint mincount,
			     AjPFile outf);
void    embWordMatchListConvToFeat(const AjPList list,
				   AjPFeattable *tab1, AjPFeattable *tab2,
				   const AjPSeq seq1, const AjPSeq seq2);

void    embWordMatchMin(AjPList matchlist);
void    embWordUnused(void);

EmbPWordMatch embWordMatchFirstMax(const AjPList matches);

ajuint embWordRabinKarpSearch(const AjPStr sseq,
                              const AjPSeqset seqset,
                              EmbPWordRK const * patterns,
                              ajuint plen, ajuint nwords,
                              AjPList* l, ajuint* lastlocation,
                              AjBool checkmode);

ajuint embWordRabinKarpInit(const AjPTable table,
	                    EmbPWordRK** ewords, ajuint wordlen,
	                    const AjPSeqset seqset);

/*
** End of prototype definitions
*/


#ifdef AJ_COMPILE_DEPRECATED_BOOK
#endif
#ifdef AJ_COMPILE_DEPRECATED

__deprecated EmbPWordMatch embWordMatchListAppend(AjPList hitlist,
                                                  const AjPSeq seq,
                                                  const ajuint seq1start,
                                                  ajuint seq2start,
                                                  ajint length);

#endif

AJ_END_DECLS

#endif  /* !EMBWORD_H */



ensalign.h/     1414437294  1010  513   100644  12729     `
/* @include ensalign **********************************************************
**
** Ensembl Alignment functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.11 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:22:52 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSALIGN_H
#define ENSALIGN_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPDnaalignfeatureadaptor ******************************************
**
** Ensembl DNA Align Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::DnaAlignFeatureAdaptor
** ##
******************************************************************************/

#define EnsPDnaalignfeatureadaptor EnsPFeatureadaptor




/* @const EnsPProteinalignfeatureadaptor **************************************
**
** Ensembl Protein Align Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::ProteinAlignFeatureAdaptor
** ##
******************************************************************************/

#define EnsPProteinalignfeatureadaptor EnsPFeatureadaptor




/* @const EnsPSupportingfeatureadaptor ****************************************
**
** Ensembl Supporting Feature Adaptor.
** Defined as an alias in EnsPDatabaseadaptor.
**
** #alias EnsPDatabaseadaptor
**
** #cc Bio::EnsEMBL::DBSQL::SupportingFeatureAdaptor
** ##
******************************************************************************/

#define EnsPSupportingfeatureadaptor EnsPDatabaseadaptor




/* @enum EnsEBasealignfeatureType *********************************************
**
** Ensembl Base Align Feature Type enumeration
**
** @value ensEBasealignfeatureTypeNULL Null
** @value ensEBasealignfeatureTypeDNA DNA alignment
** @value ensEBasealignfeatureTypeProtein Protein alignment
** @@
******************************************************************************/

typedef enum EnsOBasealignfeatureType
{
    ensEBasealignfeatureTypeNULL,
    ensEBasealignfeatureTypeDNA,
    ensEBasealignfeatureTypeProtein
} EnsEBasealignfeatureType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPBasealignfeature *************************************************
**
** Ensembl Base Align Feature.
**
** @alias EnsSBasealignfeature
** @alias EnsOBasealignfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Dnaalignfeatureadaptor [EnsPDnaalignfeatureadaptor]
** Ensembl DNA Align Feature Adaptor
** @attr Proteinalignfeatureadaptor [EnsPProteinalignfeatureadaptor]
** Ensembl Protein Align Feature Adaptor
** @cc Bio::EnsEMBL::Featurepair
** @attr Featurepair [EnsPFeaturepair] Ensembl Feature Pair
** @cc Bio::EnsEMBL::Basealignfeature
** @attr FobjectGetFeaturepair [EnsPFeaturepair function]
** Ensembl Object Get Ensembl Feature Pair function
** @attr Cigar [AjPStr] CIGAR line
** @attr Type [EnsEBasealignfeatureType] Type
** @attr Alignmentlength [ajuint] Target component alignment length
** @attr Pairdnaalignfeatureidentifier [ajuint]
** Pair DNA Align Feature identifier
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSBasealignfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPDnaalignfeatureadaptor Dnaalignfeatureadaptor;
    EnsPProteinalignfeatureadaptor Proteinalignfeatureadaptor;
    EnsPFeaturepair Featurepair;
    EnsPFeaturepair (*FobjectGetFeaturepair) (const void *object);
    AjPStr Cigar;
    EnsEBasealignfeatureType Type;
    ajuint Alignmentlength;
    ajuint Pairdnaalignfeatureidentifier;
    ajuint Padding;
} EnsOBasealignfeature;

#define EnsPBasealignfeature EnsOBasealignfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Base Align Feature */

EnsPBasealignfeature ensBasealignfeatureNewCpy(
    const EnsPBasealignfeature baf);

EnsPBasealignfeature ensBasealignfeatureNewFps(
    EnsPFeaturepair fp,
    AjPStr cigar,
    AjPList fps,
    EnsEBasealignfeatureType type,
    ajuint pair);

EnsPBasealignfeature ensBasealignfeatureNewIniD(
    EnsPDnaalignfeatureadaptor dafa,
    ajuint identifier,
    EnsPFeaturepair fp,
    AjPStr cigar,
    ajuint pair);

EnsPBasealignfeature ensBasealignfeatureNewIniP(
    EnsPProteinalignfeatureadaptor pafa,
    ajuint identifier,
    EnsPFeaturepair fp,
    AjPStr cigar);

EnsPBasealignfeature ensBasealignfeatureNewRef(
    EnsPBasealignfeature baf);

void ensBasealignfeatureDel(
    EnsPBasealignfeature *Pbaf);

AjPStr ensBasealignfeatureGetCigar(
    const EnsPBasealignfeature baf);

EnsPDnaalignfeatureadaptor ensBasealignfeatureGetDnaalignfeatureadaptor(
    const EnsPBasealignfeature baf);

EnsPFeaturepair ensBasealignfeatureGetFeaturepair(
    const EnsPBasealignfeature baf);

ajuint ensBasealignfeatureGetIdentifier(
    const EnsPBasealignfeature baf);

ajuint ensBasealignfeatureGetPairdnaalignfeatureidentifier(
    const EnsPBasealignfeature baf);

EnsPProteinalignfeatureadaptor ensBasealignfeatureGetProteinalignfeatureadaptor(
    const EnsPBasealignfeature baf);

EnsEBasealignfeatureType ensBasealignfeatureGetType(
    const EnsPBasealignfeature baf);

AjBool ensBasealignfeatureSetFeaturepair(EnsPBasealignfeature baf,
                                         EnsPFeaturepair fp);

EnsPFeature ensBasealignfeatureGetFeature(const EnsPBasealignfeature baf);

void *ensBasealignfeatureCalculateAdaptor(const EnsPBasealignfeature baf);

ajuint ensBasealignfeatureCalculateAlignmentlength(EnsPBasealignfeature baf);

size_t ensBasealignfeatureCalculateMemsize(const EnsPBasealignfeature baf);

ajuint ensBasealignfeatureCalculateUnitSource(const EnsPBasealignfeature baf);

ajuint ensBasealignfeatureCalculateUnitTarget(const EnsPBasealignfeature baf);

EnsPBasealignfeature ensBasealignfeatureTransfer(
    EnsPBasealignfeature baf,
    EnsPSlice slice);

EnsPBasealignfeature ensBasealignfeatureTransform(
    EnsPBasealignfeature baf,
    const AjPStr csname,
    const AjPStr csversion);

AjBool ensBasealignfeatureTrace(const EnsPBasealignfeature baf, ajuint level);

AjBool ensBasealignfeatureFetchAllFeaturepairs(const EnsPBasealignfeature baf,
                                               AjPList fps);

/* AJAX List of Ensembl Base Align Feature objects */

AjBool ensListBasealignfeatureSortSourceEndAscending(AjPList bafs);

AjBool ensListBasealignfeatureSortSourceEndDescending(AjPList bafs);

AjBool ensListBasealignfeatureSortSourceStartAscending(AjPList bafs);

AjBool ensListBasealignfeatureSortSourceStartDescending(AjPList bafs);

/* Ensembl DNA Align Feature Adaptor */

EnsPDnaalignfeatureadaptor ensRegistryGetDnaalignfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPDnaalignfeatureadaptor ensDnaalignfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensDnaalignfeatureadaptorDel(
    EnsPDnaalignfeatureadaptor *Pdafa);

EnsPBaseadaptor ensDnaalignfeatureadaptorGetBaseadaptor(
    EnsPDnaalignfeatureadaptor dafa);

EnsPDatabaseadaptor ensDnaalignfeatureadaptorGetDatabaseadaptor(
    EnsPDnaalignfeatureadaptor dafa);

EnsPFeatureadaptor ensDnaalignfeatureadaptorGetFeatureadaptor(
    EnsPDnaalignfeatureadaptor dafa);

AjBool ensDnaalignfeatureadaptorFetchAllbyHitname(
    EnsPDnaalignfeatureadaptor dafa,
    const AjPStr hitname,
    const AjPStr anname,
    AjPList bafs);

AjBool ensDnaalignfeatureadaptorFetchAllbyHitunversioned(
    EnsPDnaalignfeatureadaptor dafa,
    const AjPStr hitname,
    const AjPStr anname,
    AjPList bafs);

AjBool ensDnaalignfeatureadaptorFetchAllbySlicecoverage(
    EnsPDnaalignfeatureadaptor dafa,
    EnsPSlice slice,
    float coverage,
    const AjPStr anname,
    AjPList bafs);

AjBool ensDnaalignfeatureadaptorFetchAllbySliceidentity(
    EnsPDnaalignfeatureadaptor dafa,
    EnsPSlice slice,
    float identity,
    const AjPStr anname,
    AjPList bafs);

AjBool ensDnaalignfeatureadaptorFetchAllbySliceexternaldatabasename(
    EnsPDnaalignfeatureadaptor dafa,
    EnsPSlice slice,
    const AjPStr edbname,
    const AjPStr anname,
    AjPList bafs);

AjBool ensDnaalignfeatureadaptorFetchByIdentifier(
    EnsPDnaalignfeatureadaptor dafa,
    ajuint identifier,
    EnsPBasealignfeature *Pbaf);

AjBool ensDnaalignfeatureadaptorRetrieveAllIdentifiers(
    EnsPDnaalignfeatureadaptor dafa,
    AjPList identifiers);

/* Ensembl Protein Align Feature Adaptor */

EnsPProteinalignfeatureadaptor ensRegistryGetProteinalignfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPProteinalignfeatureadaptor ensProteinalignfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensProteinalignfeatureadaptorDel(
    EnsPProteinalignfeatureadaptor *Ppafa);

EnsPBaseadaptor ensProteinalignfeatureadaptorGetBaseadaptor(
    EnsPProteinalignfeatureadaptor pafa);

EnsPDatabaseadaptor ensProteinalignfeatureadaptorGetDatabaseadaptor(
    EnsPProteinalignfeatureadaptor pafa);

EnsPFeatureadaptor ensProteinalignfeatureadaptorGetFeatureadaptor(
    EnsPProteinalignfeatureadaptor pafa);

AjBool ensProteinalignfeatureadaptorFetchAllbyHitname(
    EnsPProteinalignfeatureadaptor pafa,
    const AjPStr hitname,
    const AjPStr anname,
    AjPList bafs);

AjBool ensProteinalignfeatureadaptorFetchAllbyHitunversioned(
    EnsPProteinalignfeatureadaptor pafa,
    const AjPStr hitname,
    const AjPStr anname,
    AjPList bafs);

AjBool ensProteinalignfeatureadaptorFetchAllbySlicecoverage(
    EnsPProteinalignfeatureadaptor pafa,
    EnsPSlice slice,
    float coverage,
    const AjPStr anname,
    AjPList bafs);

AjBool ensProteinalignfeatureadaptorFetchAllbySliceexternaldatabasename(
    EnsPProteinalignfeatureadaptor pafa,
    EnsPSlice slice,
    const AjPStr edbname,
    const AjPStr anname,
    AjPList bafs);

AjBool ensProteinalignfeatureadaptorFetchAllbySliceidentity(
    EnsPProteinalignfeatureadaptor pafa,
    EnsPSlice slice,
    float identity,
    const AjPStr anname,
    AjPList bafs);

AjBool ensProteinalignfeatureadaptorFetchByIdentifier(
    EnsPProteinalignfeatureadaptor pafa,
    ajuint identifier,
    EnsPBasealignfeature *Pbaf);

AjBool ensProteinalignfeatureadaptorRetrieveAllIdentifiers(
    EnsPProteinalignfeatureadaptor pafa,
    AjPList identifiers);

/* Ensembl Supporting Feature Adaptor */

EnsPSupportingfeatureadaptor ensRegistryGetSupportingfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPDatabaseadaptor ensSupportingfeatureadaptorGetDatabaseadaptor(
    EnsPSupportingfeatureadaptor sfa);

AjBool ensSupportingfeatureadaptorFetchAllbyExon(
    EnsPSupportingfeatureadaptor sfa,
    EnsPExon exon,
    AjPList bafs);

AjBool ensSupportingfeatureadaptorFetchAllbyTranscript(
    EnsPSupportingfeatureadaptor sfa,
    EnsPTranscript transcript,
    AjPList bafs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSALIGN_H */

ensanalysis.h/  1414437294  1010  513   100644  8342      `
/* @include ensanalysis *******************************************************
**
** Ensembl Analysis functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.19 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:24:06 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSANALYSIS_H
#define ENSANALYSIS_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensbaseadaptor.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Analysis */

EnsPAnalysis ensAnalysisNewCpy(const EnsPAnalysis analysis);

EnsPAnalysis ensAnalysisNewIni(EnsPAnalysisadaptor aa,
                               ajuint identifier,
                               AjPStr cdate,
                               AjPStr name,
                               AjPStr databasename,
                               AjPStr databaseversion,
                               AjPStr databasefile,
                               AjPStr programname,
                               AjPStr programversion,
                               AjPStr programfile,
                               AjPStr parameters,
                               AjPStr modulename,
                               AjPStr moduleversion,
                               AjPStr gffsource,
                               AjPStr gfffeature,
                               AjPStr description,
                               AjPStr displaylabel,
                               AjPStr webdata,
                               AjBool displayable);

EnsPAnalysis ensAnalysisNewRef(EnsPAnalysis analysis);

void ensAnalysisDel(EnsPAnalysis *Panalysis);

EnsPAnalysisadaptor ensAnalysisGetAdaptor(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetDatabasefile(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetDatabasename(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetDatabaseversion(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetDateCreation(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetDescription(const EnsPAnalysis analysis);

AjBool ensAnalysisGetDisplayable(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetDisplaylabel(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetGfffeature(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetGffsource(const EnsPAnalysis analysis);

ajuint ensAnalysisGetIdentifier(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetModulename(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetModuleversion(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetName(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetParameters(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetProgramfile(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetProgramname(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetProgramversion(const EnsPAnalysis analysis);

AjPStr ensAnalysisGetWebdata(const EnsPAnalysis analysis);

AjBool ensAnalysisSetAdaptor(EnsPAnalysis analysis,
                             EnsPAnalysisadaptor aa);

AjBool ensAnalysisSetDatabasefile(EnsPAnalysis analysis,
                                  AjPStr databasefile);

AjBool ensAnalysisSetDatabasename(EnsPAnalysis analysis,
                                  AjPStr databasename);

AjBool ensAnalysisSetDateCreation(EnsPAnalysis analysis,
                                  AjPStr cdate);

AjBool ensAnalysisSetDescription(EnsPAnalysis analysis,
                                 AjPStr description);

AjBool ensAnalysisSetDisplayable(EnsPAnalysis analysis,
                                 AjBool displayable);

AjBool ensAnalysisSetDisplaylabel(EnsPAnalysis analysis,
                                  AjPStr displaylabel);

AjBool ensAnalysisSetDatabaseversion(EnsPAnalysis analysis,
                                     AjPStr databaseversion);

AjBool ensAnalysisSetIdentifier(EnsPAnalysis analysis,
                                ajuint identifier);

AjBool ensAnalysisSetGfffeature(EnsPAnalysis analysis,
                                AjPStr gfffeature);

AjBool ensAnalysisSetGffsource(EnsPAnalysis analysis,
                               AjPStr gffsource);

AjBool ensAnalysisSetModulename(EnsPAnalysis analysis,
                                AjPStr modulename);

AjBool ensAnalysisSetModuleversion(EnsPAnalysis analysis,
                                   AjPStr moduleversion);

AjBool ensAnalysisSetName(EnsPAnalysis analysis,
                          AjPStr name);

AjBool ensAnalysisSetParameters(EnsPAnalysis analysis,
                                AjPStr parameters);

AjBool ensAnalysisSetProgramfile(EnsPAnalysis analysis,
                                 AjPStr programfile);

AjBool ensAnalysisSetProgramname(EnsPAnalysis analysis,
                                 AjPStr programname);

AjBool ensAnalysisSetProgramversion(EnsPAnalysis analysis,
                                    AjPStr programversion);

AjBool ensAnalysisSetWebdata(EnsPAnalysis analysis,
                             AjPStr webdata);

AjBool ensAnalysisTrace(const EnsPAnalysis analysis, ajuint level);

size_t ensAnalysisCalculateMemsize(const EnsPAnalysis analysis);

AjBool ensAnalysisIsDatabase(const EnsPAnalysis analysis);

AjBool ensAnalysisMatch(const EnsPAnalysis analysis1,
                        const EnsPAnalysis analysis2);

AjBool ensListAnalysisSortIdentifierAscending(AjPList analyses);

AjBool ensListAnalysisSortIdentifierDescending(AjPList analyses);

AjBool ensListAnalysisSortNameAscending(AjPList analyses);

AjBool ensListAnalysisSortNameDescending(AjPList analyses);

/* Ensembl Analysis Adaptor */

EnsPAnalysisadaptor ensRegistryGetAnalysisadaptor(
    EnsPDatabaseadaptor dba);

EnsPAnalysisadaptor ensAnalysisadaptorNew(
    EnsPDatabaseadaptor dba);

AjBool ensAnalysisadaptorCacheClear(EnsPAnalysisadaptor aa);

void ensAnalysisadaptorDel(EnsPAnalysisadaptor *Paa);

EnsPBaseadaptor ensAnalysisadaptorGetBaseadaptor(
    EnsPAnalysisadaptor aa);

EnsPDatabaseadaptor ensAnalysisadaptorGetDatabaseadaptor(
    EnsPAnalysisadaptor aa);

AjBool ensAnalysisadaptorFetchAll(
    EnsPAnalysisadaptor aa,
    AjPList analyses);

AjBool ensAnalysisadaptorFetchAllbyFeatureclass(
    EnsPAnalysisadaptor aa,
    const AjPStr class,
    AjPList analyses);

AjBool ensAnalysisadaptorFetchByIdentifier(
    EnsPAnalysisadaptor aa,
    ajuint identifier,
    EnsPAnalysis *Panalysis);

AjBool ensAnalysisadaptorFetchByName(
    EnsPAnalysisadaptor aa,
    const AjPStr name,
    EnsPAnalysis *Panalysis);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSANALYSIS_H */
ensassembly.h/  1414437294  1010  513   100644  4819      `
/* @include ensassembly *******************************************************
**
** Ensembl Assembly functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.12 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:23 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSASSEMBLY_H
#define ENSASSEMBLY_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPAssembly *********************************************************
**
** Ensembl Assembly
**
** An Ensembl Assembly object encapsulates assembly information how an
** assembled Ensembl Sequence Region is assembled from a particular
** component Ensembl Sequence Region.
**
** @alias EnsSAssembly
** @alias EnsOAssembly
**
** @attr Use [ajuint] Use counter
** @attr AssembledIdentifier [ajuint] Assembled Ensembl Sequence Region
** identifier
** @attr AssembledStart [ajuint] Assembled Ensembl Sequence Region
** start coordinate
** @attr AssembledEnd [ajuint] Assembled Ensembl Sequence Region
** end coordinate
** @attr ComponentIdentifier [ajuint] Component Ensembl Sequence Region
** identifier
** @attr ComponentStart [ajuint] Component Ensembl Sequence Region
** start coordinate
** @attr ComponentEnd [ajuint] Component Ensembl Sequence Region
** end coordinate
** @attr Orientation [ajint] Relative orientation
** @@
******************************************************************************/

typedef struct EnsSAssembly
{
    ajuint Use;
    ajuint AssembledIdentifier;
    ajuint AssembledStart;
    ajuint AssembledEnd;
    ajuint ComponentIdentifier;
    ajuint ComponentStart;
    ajuint ComponentEnd;
    ajint Orientation;
} EnsOAssembly;

#define EnsPAssembly EnsOAssembly*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Assembly */

EnsPAssembly ensAssemblyNewCpy(const EnsPAssembly assembly);

EnsPAssembly ensAssemblyNewIni(ajuint asmsrid,
                               ajuint asmstart,
                               ajuint asmend,
                               ajuint cmpsrid,
                               ajuint cmpstart,
                               ajuint cmpend,
                               ajint orientation);

EnsPAssembly ensAssemblyNewRef(EnsPAssembly assembly);

void ensAssemblyDel(EnsPAssembly *Passembly);

ajuint ensAssemblyGetAssembledEnd(const EnsPAssembly assembly);

ajuint ensAssemblyGetAssembledIdentifier(const EnsPAssembly assembly);

ajuint ensAssemblyGetAssembledStart(const EnsPAssembly assembly);

ajuint ensAssemblyGetComponentEnd(const EnsPAssembly assembly);

ajuint ensAssemblyGetComponentIdentifier(const EnsPAssembly assembly);

ajuint ensAssemblyGetComponentStart(const EnsPAssembly assembly);

ajint ensAssemblyGetOrientation(const EnsPAssembly assembly);

AjBool ensAssemblyTrace(const EnsPAssembly assembly, ajuint level);

size_t ensAssemblyCalculateMemsize(const EnsPAssembly assembly);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSASSEMBLY_H */

/55             1414437294  1010  513   100644  10127     `
/* @include ensassemblyexception **********************************************
**
** Ensembl Assembly Exception functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.25 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:26:10 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSASSEMBLYEXCEPTION_H
#define ENSASSEMBLYEXCEPTION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdatabaseadaptor.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsEAssemblyexceptionType ********************************************
**
** Ensembl Assembly Exception Type enumeration
**
** @value ensEAssemblyexceptionTypeNULL Null
** @value ensEAssemblyexceptionTypeHAP Haplotype Region
** @value ensEAssemblyexceptionTypePAR Pseudo-Autosomal Region
** @value ensEAssemblyexceptionTypePatchFix Sequence Patch Region
** @value ensEAssemblyexceptionTypePatchNovel Novel Patch Region
** @value ensEAssemblyexceptionTypeHAPRef Haplotype Reference Region
** @value ensEAssemblyexceptionTypePatchFixRef Sequence Patch Reference Region
** @value ensEAssemblyexceptionTypePatchNovelRef Novel Patch Reference Region
** @@
******************************************************************************/

typedef enum EnsOAssemblyexceptionType
{
    ensEAssemblyexceptionTypeNULL,
    ensEAssemblyexceptionTypeHAP,
    ensEAssemblyexceptionTypePAR,
    ensEAssemblyexceptionTypePatchFix,
    ensEAssemblyexceptionTypePatchNovel,
    ensEAssemblyexceptionTypeHAPRef,
    ensEAssemblyexceptionTypePatchFixRef,
    ensEAssemblyexceptionTypePatchNovelRef
} EnsEAssemblyexceptionType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPAssemblyexceptionadaptor *****************************************
**
** Ensembl Assembly Exception Adaptor.
**
** @alias EnsSAssemblyexceptionadaptor
** @alias EnsOAssemblyexceptionadaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** @attr CacheByReferenceSeqregion [AjPTable]
** AJAX Table of AJAX unsigned integer (Ensembl Sequence Region identifier) key
** and Ensembl Assembly Exception value data
** @@
******************************************************************************/

typedef struct EnsSAssemblyexceptionadaptor
{
    EnsPDatabaseadaptor Adaptor;
    AjPTable CacheByReferenceSeqregion;
} EnsOAssemblyexceptionadaptor;

#define EnsPAssemblyexceptionadaptor EnsOAssemblyexceptionadaptor*




/* @data EnsPAssemblyexception ************************************************
**
** Ensembl Assembly Exception.
**
** An Ensembl Assembly Exception object encapsulates information about
** exceptions in the reference assembly path. Currently, the Ensembl system
** models two types of assembly exceptions.
**
** Haplotype (HAPs) assemblies represent alternative assembly paths of regions
** of increased genetic variablility.
** Pseudo-autosomal regions (PARs) are paired stretches at either tip of
** (mammalian) sex chromosomes where frequent chrossing over events occur.
** Due to the frequent exchange of genetic material those sequences represent
** exact copies of each other.
**
** @alias EnsSAssemblyexception
** @alias EnsOAssemblyexception
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPAssemblyexceptionadaptor] Ensembl Assembly
**                                              Exception Adaptor
** @cc Bio::EnsEMBL::AssemblyException
** @attr ReferenceSeqregion [ajuint] Ensembl Sequence Region identifier
** @attr ReferenceStart [ajuint] Ensembl Sequence Region start
** @attr ReferenceEnd [ajuint] Ensembl Sequence Region end
** @attr ExceptionSeqregion [ajuint] Ensembl Sequence Region identifier
** @attr ExceptionStart [ajuint] Ensembl Sequence Region start
** @attr ExceptionEnd [ajuint] Ensembl Sequence Region end
** @attr Orientation [ajint] Orientation
** @attr Type [EnsEAssemblyexceptionType] Type
** @@
******************************************************************************/

typedef struct EnsSAssemblyexception
{
    ajuint Use;
    ajuint Identifier;
    EnsPAssemblyexceptionadaptor Adaptor;
    ajuint ReferenceSeqregion;
    ajuint ReferenceStart;
    ajuint ReferenceEnd;
    ajuint ExceptionSeqregion;
    ajuint ExceptionStart;
    ajuint ExceptionEnd;
    ajint Orientation;
    EnsEAssemblyexceptionType Type;
} EnsOAssemblyexception;

#define EnsPAssemblyexception EnsOAssemblyexception*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Assembly Exception */

EnsPAssemblyexception ensAssemblyexceptionNewCpy(
    const EnsPAssemblyexception ae);

EnsPAssemblyexception ensAssemblyexceptionNewIni(
    EnsPAssemblyexceptionadaptor aea,
    ajuint identifier,
    ajuint srid,
    ajuint srstart,
    ajuint srend,
    ajuint erid,
    ajuint erstart,
    ajuint erend,
    ajint ori,
    EnsEAssemblyexceptionType aet);

EnsPAssemblyexception ensAssemblyexceptionNewRef(
    EnsPAssemblyexception ae);

void ensAssemblyexceptionDel(
    EnsPAssemblyexception *Pae);

EnsPAssemblyexceptionadaptor ensAssemblyexceptionGetAdaptor(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionGetExceptionEnd(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionGetExceptionSeqregion(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionGetExceptionStart(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionGetIdentifier(
    const EnsPAssemblyexception ae);

ajint ensAssemblyexceptionGetOrientation(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionGetReferenceEnd(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionGetReferenceSeqregion(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionGetReferenceStart(
    const EnsPAssemblyexception ae);

EnsEAssemblyexceptionType ensAssemblyexceptionGetType(
    const EnsPAssemblyexception ae);

AjBool ensAssemblyexceptionSetAdaptor(
    EnsPAssemblyexception ae,
    EnsPAssemblyexceptionadaptor aea);

AjBool ensAssemblyexceptionSetExceptionEnd(
    EnsPAssemblyexception ae,
    ajuint erend);

AjBool ensAssemblyexceptionSetExceptionSeqregion(
    EnsPAssemblyexception ae,
    ajuint erid);

AjBool ensAssemblyexceptionSetExceptionStart(
    EnsPAssemblyexception ae,
    ajuint erstart);

AjBool ensAssemblyexceptionSetIdentifier(
    EnsPAssemblyexception ae,
    ajuint identifier);

AjBool ensAssemblyexceptionSetOrientation(
    EnsPAssemblyexception ae,
    ajint orientation);

AjBool ensAssemblyexceptionSetReferenceEnd(
    EnsPAssemblyexception ae,
    ajuint srend);

AjBool ensAssemblyexceptionSetReferenceSeqregion(
    EnsPAssemblyexception ae,
    ajuint srid);

AjBool ensAssemblyexceptionSetReferenceStart(
    EnsPAssemblyexception ae,
    ajuint srstart);

AjBool ensAssemblyexceptionSetType(
    EnsPAssemblyexception ae,
    EnsEAssemblyexceptionType type);

AjBool ensAssemblyexceptionTrace(
    const EnsPAssemblyexception ae,
    ajuint level);

ajuint ensAssemblyexceptionCalculateExceptionLength(
    const EnsPAssemblyexception ae);

size_t ensAssemblyexceptionCalculateMemsize(
    const EnsPAssemblyexception ae);

ajuint ensAssemblyexceptionCalculateReferenceLength(
    const EnsPAssemblyexception ae);

EnsEAssemblyexceptionType ensAssemblyexceptionTypeFromStr(
    const AjPStr type);

const char *ensAssemblyexceptionTypeToChar(
    const EnsEAssemblyexceptionType aet);

/* AJAX List of Ensembl Assembly Excepion objects */

AjBool ensListAssemblyexceptionSortReferenceEndAscending(AjPList aes);

AjBool ensListAssemblyexceptionSortReferenceEndDescending(AjPList aes);

/* Ensembl Assembly Exception Adaptor */

EnsPAssemblyexceptionadaptor ensRegistryGetAssemblyexceptionadaptor(
    EnsPDatabaseadaptor dba);

EnsPAssemblyexceptionadaptor ensAssemblyexceptionadaptorNew(
    EnsPDatabaseadaptor dba);

EnsPDatabaseadaptor ensAssemblyexceptionadaptorGetDatabaseadaptor(
    EnsPAssemblyexceptionadaptor aea);

void ensAssemblyexceptionadaptorDel(
    EnsPAssemblyexceptionadaptor *Paea);

AjBool ensAssemblyexceptionadaptorFetchAll(
    const EnsPAssemblyexceptionadaptor aea,
    AjPList aes);

AjBool ensAssemblyexceptionadaptorFetchAllbyReferenceSeqregion(
    const EnsPAssemblyexceptionadaptor aea,
    ajuint srid,
    AjPList aes);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSASSEMBLYEXCEPTION_H */

/79             1414437294  1010  513   100644  11646     `
/* @include ensassemblymapper *************************************************
**
** Ensembl Assembly Mapper functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.18 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:03:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSASSEMBLYMAPPER_H
#define ENSASSEMBLYMAPPER_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Generic Assembly Mapper */

EnsPGenericassemblymapper ensGenericassemblymapperNewIni(
    EnsPAssemblymapperadaptor ama,
    EnsPCoordsystem asmcs,
    EnsPCoordsystem cmpcs);

EnsPGenericassemblymapper ensGenericassemblymapperNewRef(
    EnsPGenericassemblymapper gam);

AjBool ensGenericassemblymapperClear(EnsPGenericassemblymapper gam);

void ensGenericassemblymapperDel(EnsPGenericassemblymapper *Pgam);

EnsPAssemblymapperadaptor ensGenericassemblymapperGetAdaptor(
    const EnsPGenericassemblymapper gam);

const EnsPCoordsystem ensGenericassemblymapperGetCoordsystemAssembled(
    const EnsPGenericassemblymapper gam);

const EnsPCoordsystem ensGenericassemblymapperGetCoordsystemComponent(
    const EnsPGenericassemblymapper gam);

EnsPMapper ensGenericassemblymapperGetMapper(
    const EnsPGenericassemblymapper gam);

ajuint ensGenericassemblymapperGetMaximum(
    const EnsPGenericassemblymapper gam);

AjBool ensGenericassemblymapperSetAdaptor(EnsPGenericassemblymapper gam,
                                          EnsPAssemblymapperadaptor ama);

AjBool ensGenericassemblymapperSetMaximum(EnsPGenericassemblymapper gam,
                                          ajuint maximum);

AjBool ensGenericassemblymapperTrace(const EnsPGenericassemblymapper gam,
                                     ajuint level);

ajuint ensGenericassemblymapperGetCount(
    const EnsPGenericassemblymapper gam);

AjBool ensGenericassemblymapperRegisterAll(EnsPGenericassemblymapper gam);

AjBool ensGenericassemblymapperRegisterAssembled(EnsPGenericassemblymapper gam,
                                                 ajuint asmsrid,
                                                 ajint chunkid);

AjBool ensGenericassemblymapperRegisterComponent(EnsPGenericassemblymapper gam,
                                                 ajuint cmpsrid);

AjBool ensGenericassemblymapperCheckAssembled(
    const EnsPGenericassemblymapper gam,
    ajuint asmsrid,
    ajint chunkid);

AjBool ensGenericassemblymapperCheckComponent(
    const EnsPGenericassemblymapper gam,
    ajuint cmpsrid);

AjBool ensGenericassemblymapperMap(EnsPGenericassemblymapper gam,
                                   const EnsPSeqregion sr,
                                   ajint srstart,
                                   ajint srend,
                                   ajint srstrand,
                                   AjBool fastmap,
                                   AjPList mrs);

/* Ensembl Chained Assembly Mapper */

EnsPChainedassemblymapper ensChainedassemblymapperNewIni(
    EnsPAssemblymapperadaptor ama,
    EnsPCoordsystem srccs,
    EnsPCoordsystem midcs,
    EnsPCoordsystem trgcs);

EnsPChainedassemblymapper ensChainedassemblymapperNewRef(
    EnsPChainedassemblymapper cam);

void ensChainedassemblymapperDel(EnsPChainedassemblymapper *Pcam);

AjBool ensChainedassemblymapperClear(EnsPChainedassemblymapper cam);

EnsPAssemblymapperadaptor ensChainedassemblymapperGetAdaptor(
    const EnsPChainedassemblymapper cam);

const EnsPCoordsystem ensChainedassemblymapperGetCoordsystemMiddle(
    const EnsPChainedassemblymapper cam);

const EnsPCoordsystem ensChainedassemblymapperGetCoordsystemSource(
    const EnsPChainedassemblymapper cam);

const EnsPCoordsystem ensChainedassemblymapperGetCoordsystemTarget(
    const EnsPChainedassemblymapper cam);

EnsPMapper ensChainedassemblymapperGetMapperSourceMiddle(
    const EnsPChainedassemblymapper cam);

EnsPMapper ensChainedassemblymapperGetMapperSourceTarget(
    const EnsPChainedassemblymapper cam);

EnsPMapper ensChainedassemblymapperGetMapperTargetMiddle(
    const EnsPChainedassemblymapper cam);

ajuint ensChainedassemblymapperGetMaximum(
    const EnsPChainedassemblymapper cam);

EnsPMapperrangeregistry ensChainedassemblymapperGetRegistrySource(
    const EnsPChainedassemblymapper cam);

EnsPMapperrangeregistry ensChainedassemblymapperGetRegistryTarget(
    const EnsPChainedassemblymapper cam);

AjBool ensChainedassemblymapperSetAdaptor(EnsPChainedassemblymapper cam,
                                          EnsPAssemblymapperadaptor ama);

AjBool ensChainedassemblymapperSetMaximum(EnsPChainedassemblymapper cam,
                                          ajuint maximum);

AjBool ensChainedassemblymapperTrace(const EnsPChainedassemblymapper cam,
                                     ajuint level);
ajuint ensChainedassemblymapperGetCount(
    const EnsPChainedassemblymapper cam);

AjBool ensChainedassemblymapperMap(EnsPChainedassemblymapper cam,
                                   const EnsPSeqregion sr,
                                   ajint srstart,
                                   ajint srend,
                                   ajint srstrand,
                                   const EnsPSeqregion optsr,
                                   AjBool fastmap,
                                   AjPList mrs);

AjBool ensChainedassemblymapperRegisterAll(EnsPChainedassemblymapper cam);

/* Ensembl Top-level Assembly Mapper */

EnsPToplevelassemblymapper ensToplevelassemblymapperNewIni(
    EnsPAssemblymapperadaptor ama,
    EnsPCoordsystem asmcs,
    EnsPCoordsystem cmpcs);

EnsPToplevelassemblymapper ensToplevelassemblymapperNewRef(
    EnsPToplevelassemblymapper tlam);

void ensToplevelassemblymapperDel(
    EnsPToplevelassemblymapper *Ptlam);

EnsPAssemblymapperadaptor ensToplevelassemblymapperGetAdaptor(
    const EnsPToplevelassemblymapper tlam);

const EnsPCoordsystem ensToplevelassemblymapperGetCoordsystemAssembled(
    const EnsPToplevelassemblymapper tlam);

const EnsPCoordsystem ensToplevelassemblymapperGetCoordsystemComponent(
    const EnsPToplevelassemblymapper tlam);

AjBool ensToplevelassemblymapperSetAdaptor(
    EnsPToplevelassemblymapper tlam,
    EnsPAssemblymapperadaptor ama);

AjBool ensToplevelassemblymapperTrace(const EnsPToplevelassemblymapper tlam,
                                      ajuint level);

AjBool ensToplevelassemblymapperMap(EnsPToplevelassemblymapper tlam,
                                    const EnsPSeqregion sr,
                                    ajint srstart,
                                    ajint srend,
                                    ajint srstrand,
                                    AjBool fastmap,
                                    AjPList mrs);

/* Ensembl Assembly Mapper */

EnsPAssemblymapper ensAssemblymapperNewIni(
    EnsPAssemblymapperadaptor ama,
    EnsPGenericassemblymapper gam,
    EnsPChainedassemblymapper cam,
    EnsPToplevelassemblymapper tlam);

EnsPAssemblymapper ensAssemblymapperNewRef(
    EnsPAssemblymapper am);

void ensAssemblymapperDel(
    EnsPAssemblymapper *Pam);

AjBool ensAssemblymapperTrace(
    const EnsPAssemblymapper am,
    ajuint level);

AjBool ensAssemblymapperMapSeqregion(
    EnsPAssemblymapper am,
    const EnsPSeqregion sr,
    ajint srstart,
    ajint srend,
    ajint srstrand,
    AjBool fastmap,
    AjPList mrs);

AjBool ensAssemblymapperMapSlice(
    EnsPAssemblymapper am,
    const EnsPSlice slice,
    AjBool fastmap,
    AjPList mrs);

AjBool ensAssemblymapperMapToSeqregion(
    EnsPAssemblymapper am,
    const EnsPSeqregion sr,
    ajint srstart,
    ajint srend,
    ajint srstrand,
    const EnsPSeqregion optsr,
    AjBool fastmap,
    AjPList mrs);

AjBool ensAssemblymapperMapToSlice(
    EnsPAssemblymapper am,
    const EnsPSlice slice,
    const EnsPSlice optslice,
    AjBool fastmap,
    AjPList mrs);

/* Ensembl Assembly Mapper Adaptor */

EnsPAssemblymapperadaptor ensRegistryGetAssemblymapperadaptor(
    EnsPDatabaseadaptor dba);

EnsPAssemblymapperadaptor ensAssemblymapperadaptorNew(
    EnsPDatabaseadaptor dba);

AjBool ensAssemblymapperadaptorClear(
    EnsPAssemblymapperadaptor ama);

void ensAssemblymapperadaptorDel(
    EnsPAssemblymapperadaptor *Pama);

EnsPDatabaseadaptor ensAssemblymapperadaptorGetDatabaseadaptor(
    EnsPAssemblymapperadaptor ama);

AjBool ensAssemblymapperadaptorFetchByCoordsystems(
    EnsPAssemblymapperadaptor ama,
    EnsPCoordsystem cs1,
    EnsPCoordsystem cs2,
    EnsPAssemblymapper *Pam);

AjBool ensAssemblymapperadaptorFetchBySlices(
    EnsPAssemblymapperadaptor ama,
    EnsPSlice slice1,
    EnsPSlice slice2,
    EnsPAssemblymapper *Pam);

AjBool ensAssemblymapperadaptorRegisterChainedAll(
    EnsPAssemblymapperadaptor ama,
    EnsPChainedassemblymapper cam);

AjBool ensAssemblymapperadaptorRegisterChainedRegion(
    EnsPAssemblymapperadaptor ama,
    EnsPChainedassemblymapper cam,
    const AjPStr source,
    ajuint srcsrid,
    ajuint optsrid,
    AjPList ranges);

AjBool ensAssemblymapperadaptorRegisterChainedSpecial(
    EnsPAssemblymapperadaptor ama,
    EnsPChainedassemblymapper cam,
    const AjPStr source,
    ajuint srcsrid,
    ajuint optsrid,
    AjPList ranges);

AjBool ensAssemblymapperadaptorRegisterGenericAll(
    EnsPAssemblymapperadaptor ama,
    EnsPGenericassemblymapper gam);

AjBool ensAssemblymapperadaptorRegisterGenericAssembled(
    EnsPAssemblymapperadaptor ama,
    EnsPGenericassemblymapper gam,
    ajuint asmsrid,
    ajint regstart,
    ajint regend);

AjBool ensAssemblymapperadaptorRegisterGenericComponent(
    EnsPAssemblymapperadaptor ama,
    EnsPGenericassemblymapper gam,
    ajuint cmpsrid);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSASSEMBLYMAPPER_H */
ensattribute.h/ 1414437294  1010  513   100644  7140      `
/* @include ensattribute ******************************************************
**
** Ensembl Attribute functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.15 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:29:03 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSATTRIBUTE_H
#define ENSATTRIBUTE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Attribute */

EnsPAttribute ensAttributeNewCpy(const EnsPAttribute attribute);

EnsPAttribute ensAttributeNewIni(EnsPAttributetype at,
                                 AjPStr value);

EnsPAttribute ensAttributeNewRef(EnsPAttribute attribute);

void ensAttributeDel(EnsPAttribute *Pattribute);

EnsPAttributetype ensAttributeGetAttributetype(const EnsPAttribute attribute);

AjPStr ensAttributeGetValue(const EnsPAttribute attribute);

AjBool ensAttributeTrace(const EnsPAttribute attribute, ajuint level);

size_t ensAttributeCalculateMemsize(const EnsPAttribute attribute);

AjPStr ensAttributeGetCode(const EnsPAttribute attribute);

AjPStr ensAttributeGetDescription(const EnsPAttribute attribute);

AjPStr ensAttributeGetName(const EnsPAttribute attribute);

/* Ensembl Attribute Adaptor */

EnsPAttributeadaptor ensRegistryGetAttributeadaptor(
    EnsPDatabaseadaptor dba);

EnsPDatabaseadaptor ensAttributeadaptorGetDatabaseadaptor(
    EnsPAttributeadaptor ata);

AjBool ensAttributeadaptorFetchAllbyGene(
    EnsPAttributeadaptor ata,
    const EnsPGene gene,
    const AjPStr code,
    AjPList attributes);

AjBool ensAttributeadaptorFetchAllbyOperon(
    EnsPAttributeadaptor ata,
    const EnsPOperon operon,
    const AjPStr code,
    AjPList attributes);

AjBool ensAttributeadaptorFetchAllbyOperontranscript(
    EnsPAttributeadaptor ata,
    const EnsPOperontranscript ot,
    const AjPStr code,
    AjPList attributes);

AjBool ensAttributeadaptorFetchAllbySeqregion(
    EnsPAttributeadaptor ata,
    const EnsPSeqregion sr,
    const AjPStr code,
    AjPList attributes);

AjBool ensAttributeadaptorFetchAllbySlice(
    EnsPAttributeadaptor ata,
    const EnsPSlice slice,
    const AjPStr code,
    AjPList attributes);

AjBool ensAttributeadaptorFetchAllbyTranscript(
    EnsPAttributeadaptor ata,
    const EnsPTranscript transcript,
    const AjPStr code,
    AjPList attributes);

AjBool ensAttributeadaptorFetchAllbyTranslation(
    EnsPAttributeadaptor ata,
    const EnsPTranslation translation,
    const AjPStr code,
    AjPList attributes);

/* Ensembl Attribute Type */

EnsPAttributetype ensAttributetypeNewCpy(const EnsPAttributetype at);

EnsPAttributetype ensAttributetypeNewIni(EnsPAttributetypeadaptor ata,
                                         ajuint identifier,
                                         AjPStr code,
                                         AjPStr name,
                                         AjPStr description);

EnsPAttributetype ensAttributetypeNewRef(EnsPAttributetype at);

void ensAttributetypeDel(EnsPAttributetype *Pat);

EnsPAttributetypeadaptor ensAttributetypeGetAdaptor(
    const EnsPAttributetype at);

AjPStr ensAttributetypeGetCode(
    const EnsPAttributetype at);

AjPStr ensAttributetypeGetDescription(
    const EnsPAttributetype at);

ajuint ensAttributetypeGetIdentifier(
    const EnsPAttributetype at);

AjPStr ensAttributetypeGetName(
    const EnsPAttributetype at);

AjBool ensAttributetypeSetAdaptor(EnsPAttributetype at,
                                  EnsPAttributetypeadaptor ata);

AjBool ensAttributetypeSetCode(EnsPAttributetype at,
                               AjPStr code);

AjBool ensAttributetypeSetDescription(EnsPAttributetype at,
                                      AjPStr description);

AjBool ensAttributetypeSetIdentifier(EnsPAttributetype at,
                                     ajuint identifier);

AjBool ensAttributetypeSetName(EnsPAttributetype at,
                               AjPStr name);

AjBool ensAttributetypeTrace(const EnsPAttributetype at, ajuint level);

size_t ensAttributetypeCalculateMemsize(const EnsPAttributetype at);

/* Ensembl Attribute Type Adaptor */

EnsPAttributetypeadaptor ensRegistryGetAttributetypeadaptor(
    EnsPDatabaseadaptor dba);

EnsPAttributetypeadaptor ensAttributetypeadaptorNew(
    EnsPDatabaseadaptor dba);

AjBool ensAttributetypeadaptorCacheClear(EnsPAttributetypeadaptor ata);

void ensAttributetypeadaptorDel(EnsPAttributetypeadaptor *Pata);

EnsPBaseadaptor ensAttributetypeadaptorGetBaseadaptor(
    EnsPAttributetypeadaptor ata);

EnsPDatabaseadaptor ensAttributetypeadaptorGetDatabaseadaptor(
    EnsPAttributetypeadaptor ata);

AjBool ensAttributetypeadaptorFetchAll(EnsPAttributetypeadaptor ata,
                                       AjPList ats);

AjBool ensAttributetypeadaptorFetchByCode(EnsPAttributetypeadaptor ata,
                                          const AjPStr code,
                                          EnsPAttributetype *Pat);

AjBool ensAttributetypeadaptorFetchByIdentifier(EnsPAttributetypeadaptor ata,
                                                ajuint identifier,
                                                EnsPAttributetype *Pat);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSATTRIBUTE_H */
/100            1414437294  1010  513   100644  5549      `
/* @include ensbaseadaptor ****************************************************
**
** Ensembl Base Adaptor functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.24 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:03:48 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSBASEADAPTOR_H
#define ENSBASEADAPTOR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensassemblymapper.h"
#include "ensdata.h"
#include "ensslice.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

extern const ajuint ensKBaseadaptorMaximumIdentifiers;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Base Adaptor */

EnsPBaseadaptor ensBaseadaptorNew(
    EnsPDatabaseadaptor dba,
    const char *const *Ptablenames,
    const char *const *Pcolumnnames,
    const EnsPBaseadaptorLeftjoin leftjoins,
    const char *defaultcondition,
    const char *finalcondition,
    AjBool (*Fstatement) (EnsPBaseadaptor ba,
                          const AjPStr statement,
                          EnsPAssemblymapper am,
                          EnsPSlice slice,
                          AjPList objects));

void ensBaseadaptorDel(EnsPBaseadaptor *Pba);

const char *const *ensBaseadaptorGetColumnnames(const EnsPBaseadaptor ba);

EnsPDatabaseadaptor ensBaseadaptorGetDatabaseadaptor(const EnsPBaseadaptor ba);

const char *const *ensBaseadaptorGetTablenames(const EnsPBaseadaptor ba);

AjBool ensBaseadaptorSetColumnnames(EnsPBaseadaptor ba,
                                    const char *const *Pcolumnnames);

AjBool ensBaseadaptorSetDefaultcondition(EnsPBaseadaptor ba,
                                         const char *defaultcondition);

AjBool ensBaseadaptorSetFinalcondition(EnsPBaseadaptor ba,
                                       const char *finalcondition);

AjBool ensBaseadaptorSetTablenames(EnsPBaseadaptor ba,
                                   const char *const *Ptablenames);

AjBool ensBaseadaptorEscapeC(EnsPBaseadaptor ba,
                             char **Ptxt,
                             const AjPStr str);

AjBool ensBaseadaptorEscapeS(EnsPBaseadaptor ba,
                             AjPStr *Pstr,
                             const AjPStr str);

AjBool ensBaseadaptorGetMultispecies(const EnsPBaseadaptor ba);

const char *ensBaseadaptorGetPrimarytable(const EnsPBaseadaptor ba);

ajuint ensBaseadaptorGetSpeciesidentifier(const EnsPBaseadaptor ba);

AjBool ensBaseadaptorCountAll(
    EnsPBaseadaptor ba,
    ajuint *Pcount);

AjBool ensBaseadaptorCountAllbyConstraint(
    EnsPBaseadaptor ba,
    const AjPStr constraint,
    ajuint *Pcount);

AjBool ensBaseadaptorFetchAll(
    EnsPBaseadaptor ba,
    AjPList objects);

AjBool ensBaseadaptorFetchAllbyConstraint(
    EnsPBaseadaptor ba,
    const AjPStr constraint,
    EnsPAssemblymapper am,
    EnsPSlice slice,
    AjPList objects);

AjBool ensBaseadaptorFetchAllbyIdentifiers(
    EnsPBaseadaptor ba,
    EnsPSlice slice,
    ajuint (*FobjectGetIdentifier) (const void *object),
    AjPTable objects);

AjBool ensBaseadaptorFetchByIdentifier(
    EnsPBaseadaptor ba,
    ajuint identifier,
    void **Pobject);

AjBool ensBaseadaptorRetrieveAllIdentifiers(
    EnsPBaseadaptor ba,
    const AjPStr tablename,
    const AjPStr columnname,
    AjPList identifiers);

AjBool ensBaseadaptorRetrieveAllStrings(
    EnsPBaseadaptor ba,
    const AjPStr tablename,
    const AjPStr columnname,
    AjPList strings);

AjBool ensBaseadaptorRetrieveFeature(
    EnsPBaseadaptor ba,
    ajuint analysisid,
    ajuint srid,
    ajuint srstart,
    ajuint srend,
    ajint srstrand,
    EnsPAssemblymapper am,
    EnsPSlice slice,
    EnsPFeature *Pfeature);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSBASEADAPTOR_H */

enscache.h/     1414437294  1010  513   100644  5989      `
/* @include enscache **********************************************************
**
** Ensembl Cache functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.23 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:30:58 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSCACHE_H
#define ENSCACHE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsECacheType ********************************************************
**
** Ensembl Cache Type enumeration
**
** @value ensECacheTypeNULL Null
** @value ensECacheTypeNumeric Numeric
** @value ensECacheTypeAlphaNumeric Alphanumeric
** @@
******************************************************************************/

typedef enum EnsOCacheType
{
    ensECacheTypeNULL,
    ensECacheTypeNumeric,
    ensECacheTypeAlphaNumeric
} EnsECacheType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPCache ************************************************************
**
** Ensembl Cache.
**
** @alias EnsSCache
** @alias EnsOCache
**
** @attr Label [AjPStr] Cache label for statistics output
** @attr List [AjPList] AJAX List implementing LRU functionality
** @attr Table [AjPTable] AJAX Table implementing lookup functionality
** @attr Freference [void* function] Object-specific referencing function
** @attr Fdelete [void function] Object-specific deletion function
** @attr Fsize [size_t function] Object-specific memory sizing function
** @attr Fread [void* function] Object-specific reading function
** @attr Fwrite [AjBool function] Object-specific writing function
** @attr Type [EnsECacheType] Ensembl Cache type
** @attr Synchron [AjBool] ajTrue: Immediately write-back value data
**                         ajFalse: Write-back value data later
** @cc Memory limits
** @attr Bytes [size_t] Current number of cached bytes
** @attr MaxBytes [size_t] Maximum number of allowed bytes
** @attr MaxSize [size_t] Maximum memory size of an object
** @cc Counter limits
** @attr Count [ajuint] Current number of cached entry
** @attr MaxCount [ajuint] Maximum number of allowed entries
** @cc Performance statistics
** @attr Dropped [ajuint] Number of entries dropped by the LRU algorithm
** @attr Removed [ajuint] Number of entries explicitly removed
** @attr Stored [ajuint] Number of entries currently stored
** @attr Hit [ajuint] Number of cache hits
** @attr Miss [ajuint] Number of cache misses
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSCache
{
    AjPStr Label;
    AjPList List;
    AjPTable Table;
    void *(*Freference) (void *value);
    void (*Fdelete) (void **Pvalue);
    size_t (*Fsize) (const void *value);
    void *(*Fread) (const void *key);
    AjBool (*Fwrite) (const void *value);
    EnsECacheType Type;
    AjBool Synchron;
    size_t Bytes;
    size_t MaxBytes;
    size_t MaxSize;
    ajuint Count;
    ajuint MaxCount;
    ajuint Dropped;
    ajuint Removed;
    ajuint Stored;
    ajuint Hit;
    ajuint Miss;
    ajuint Padding;
} EnsOCache;

#define EnsPCache EnsOCache*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Cache */

EnsPCache ensCacheNew(const EnsECacheType type,
                      size_t maxbytes,
                      ajuint maxcount,
                      size_t maxsize,
                      void *(*Freference) (void *value),
                      void (*Fdelete) (void **Pvalue),
                      size_t (*Fsize) (const void *value),
                      void *(*Fread) (const void *key),
                      AjBool (*Fwrite) (const void *value),
                      AjBool synchron,
                      const char *label);

void ensCacheDel(EnsPCache *Pcache);

AjBool ensCacheClear(EnsPCache cache);

AjBool ensCacheTrace(const EnsPCache cache, ajuint level);

AjBool ensCacheFetch(EnsPCache cache, void *key, void **Pvalue);

AjBool ensCacheRemove(EnsPCache cache, const void *key);

AjBool ensCacheStore(EnsPCache cache, void *key, void **Pvalue);

AjBool ensCacheSynchronise(EnsPCache cache);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSCACHE_H */

/118            1414437294  1010  513   100644  8895      `
/* @include enscoordsystem ****************************************************
**
** Ensembl Coordinate System functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.22 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:04:02 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSCOORDSYSTEM_H
#define ENSCOORDSYSTEM_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdatabaseadaptor.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

struct EnsSCoordsystem;




/* @data EnsPCoordsystemadaptor ***********************************************
**
** Ensembl Coordinate System Adaptor
**
** @alias EnsSCoordsystemadaptor
** @alias EnsOCoordsystemadaptor
**
** @cc Bio::EnsEMBL::DBSQL::BaseAdaptor
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** cc Bio::EnsEMBL::DBSQL::CoordSystemAdaptor
** @attr CacheByIdentifier [AjPTable] Database identifier cache
** @attr CacheByName [AjPTable] Name cache
** @attr CacheByRank [AjPTable] Rank cache
** @attr CacheByDefault [AjPTable] Default Ensembl Coordinate System objects
** @attr MappingPaths [AjPTable] Mapping paths between coordinate systems
** @attr ExternalToInternal [AjPTable]
** AJAX Table of AJAX unsigned integer
** (external Ensembl Sequence Region identifier) key data and
** AJAX unsigned integer
** (internal Ensembl Sequence Region identifier) value data
** @attr InternalToExternal [AjPTable]
** AJAX Table of AJAX unsigned integer
** (internal Ensembl Sequence Region identifier) key data and
** AJAX unsigned integer
** (external Ensembl Sequence Region identifier) value data
** @attr Seqlevel [struct EnsSCoordsystem*]
** Sequence-level Ensembl Coordinate System
** @attr Toplevel [struct EnsSCoordsystem*]
** Top-level Ensembl Coordinate System
** @@
******************************************************************************/

typedef struct EnsSCoordsystemadaptor
{
    EnsPDatabaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByName;
    AjPTable CacheByRank;
    AjPTable CacheByDefault;
    AjPTable MappingPaths;
    AjPTable ExternalToInternal;
    AjPTable InternalToExternal;
    struct EnsSCoordsystem *Seqlevel;
    struct EnsSCoordsystem *Toplevel;
} EnsOCoordsystemadaptor;

#define EnsPCoordsystemadaptor EnsOCoordsystemadaptor*




/* @data EnsPCoordsystem ******************************************************
**
** Ensembl Coordinate System
**
** @alias EnsSCoordsystem
** @alias EnsOCoordsystem
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPCoordsystemadaptor] Ensembl Coordinate System Adaptor
** @cc Bio::EnsEMBL::CoordSystem
** @attr Name [AjPStr] Coordinate System name
** @attr Version [AjPStr] Coordinate System version
** @attr Default [AjBool] Default Coordinate System version of this name
** @attr SequenceLevel [AjBool] Sequence-level attribute
** @attr Toplevel [AjBool] Top-level attribute
** @attr Rank [ajuint] Coordinate System rank
** @@
******************************************************************************/

typedef struct EnsSCoordsystem
{
    ajuint Use;
    ajuint Identifier;
    EnsPCoordsystemadaptor Adaptor;
    AjPStr Name;
    AjPStr Version;
    AjBool Default;
    AjBool SequenceLevel;
    AjBool Toplevel;
    ajuint Rank;
} EnsOCoordsystem;

#define EnsPCoordsystem EnsOCoordsystem*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Coordinate System */

EnsPCoordsystem ensCoordsystemNewCpy(const EnsPCoordsystem cs);

EnsPCoordsystem ensCoordsystemNewIni(EnsPCoordsystemadaptor csa,
                                     ajuint identifier,
                                     AjPStr name,
                                     AjPStr version,
                                     ajuint rank,
                                     AjBool deflt,
                                     AjBool toplvl,
                                     AjBool seqlvl);

EnsPCoordsystem ensCoordsystemNewRef(EnsPCoordsystem cs);

void ensCoordsystemDel(EnsPCoordsystem *Pcs);

EnsPCoordsystemadaptor ensCoordsystemGetAdaptor(const EnsPCoordsystem cs);

AjBool ensCoordsystemGetDefault(const EnsPCoordsystem cs);

ajuint ensCoordsystemGetIdentifier(const EnsPCoordsystem cs);

const AjPStr ensCoordsystemGetName(const EnsPCoordsystem cs);

ajuint ensCoordsystemGetRank(const EnsPCoordsystem cs);

AjBool ensCoordsystemGetSeqlevel(const EnsPCoordsystem cs);

AjBool ensCoordsystemGetToplevel(const EnsPCoordsystem cs);

const AjPStr ensCoordsystemGetVersion(const EnsPCoordsystem cs);

AjBool ensCoordsystemSetAdaptor(EnsPCoordsystem cs,
                                EnsPCoordsystemadaptor csa);

AjBool ensCoordsystemSetIdentifier(EnsPCoordsystem cs, ajuint identifier);

AjBool ensCoordsystemTrace(const EnsPCoordsystem cs, ajuint level);

size_t ensCoordsystemCalculateMemsize(const EnsPCoordsystem cs);

AjBool ensCoordsystemMatch(const EnsPCoordsystem cs1,
                           const EnsPCoordsystem cs2);

AjPStr ensCoordsystemGetSpecies(const EnsPCoordsystem cs);

AjBool ensListCoordsystemSortIdentifierAscending(AjPList css);

AjBool ensListCoordsystemSortIdentifierDescending(AjPList css);

AjBool ensListCoordsystemSortRankAscending(AjPList css);

AjBool ensListCoordsystemSortRankDescending(AjPList css);

AjBool ensListCoordsystemTrace(const AjPList css, ajuint level);

/* Ensembl Coordinate System Adaptor */

EnsPCoordsystemadaptor ensRegistryGetCoordsystemadaptor(
    EnsPDatabaseadaptor dba);

EnsPCoordsystemadaptor ensCoordsystemadaptorNew(
    EnsPDatabaseadaptor dba);

void ensCoordsystemadaptorDel(EnsPCoordsystemadaptor *Pcsa);

EnsPDatabaseadaptor ensCoordsystemadaptorGetDatabaseadaptor(
    EnsPCoordsystemadaptor csa);

AjBool ensCoordsystemadaptorFetchAll(
    const EnsPCoordsystemadaptor csa,
    AjPList css);

AjBool ensCoordsystemadaptorFetchAllbyName(
    const EnsPCoordsystemadaptor csa,
    const AjPStr name,
    AjPList css);

AjBool ensCoordsystemadaptorFetchByIdentifier(
    const EnsPCoordsystemadaptor csa,
    ajuint identifier,
    EnsPCoordsystem *Pcs);

AjBool ensCoordsystemadaptorFetchByName(
    const EnsPCoordsystemadaptor csa,
    const AjPStr name,
    const AjPStr version,
    EnsPCoordsystem *Pcs);

AjBool ensCoordsystemadaptorFetchByRank(
    const EnsPCoordsystemadaptor csa,
    ajuint rank,
    EnsPCoordsystem *Pcs);

AjBool ensCoordsystemadaptorFetchSeqlevel(
    const EnsPCoordsystemadaptor csa,
    EnsPCoordsystem *Pcs);

AjBool ensCoordsystemadaptorFetchToplevel(
    const EnsPCoordsystemadaptor csa,
    EnsPCoordsystem *Pcs);

const AjPList ensCoordsystemadaptorGetMappingpath(
    const EnsPCoordsystemadaptor csa,
    EnsPCoordsystem cs1,
    EnsPCoordsystem cs2);

ajuint ensCoordsystemadaptorGetSeqregionidentifierExternal(
    const EnsPCoordsystemadaptor csa,
    ajuint srid);

ajuint ensCoordsystemadaptorGetSeqregionidentifierInternal(
    const EnsPCoordsystemadaptor csa,
    ajuint srid);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSCOORDSYSTEM_H */

ensdata.h/      1414437294  1010  513   100644  59704     `
/* @include ensdata ***********************************************************
**
** Ensembl Data functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.53 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:04:31 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSDATA_H
#define ENSDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "enscache.h"
#include "enscoordsystem.h"
#include "ensmapper.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPAttributeadaptor ************************************************
**
** Ensembl Attribute Adaptor
**
** Defined as an alias in EnsPDatabaseadaptor.
**
** #alias EnsPDatabaseadaptor
**
** #cc Bio::EnsEMBL::DBSQL::AttributeAdaptor
** ##
******************************************************************************/

#define EnsPAttributeadaptor EnsPDatabaseadaptor




/* @const EnsPDatabaseentryadaptor ********************************************
**
** Ensembl Database Entry Adaptor
**
** Defined as an alias in EnsPDatabaseadaptor.
**
** #alias EnsPDatabaseadaptor
**
** #cc Bio::EnsEMBL::DBSQL::DBEntryAdaptor
** ##
******************************************************************************/

#define EnsPDatabaseentryadaptor EnsPDatabaseadaptor




/* @const EnsPGeneadaptor *****************************************************
**
** Ensembl Gene Adaptor
**
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::GeneAdaptor
** ##
******************************************************************************/

#define EnsPGeneadaptor EnsPFeatureadaptor




/* @const EnsPIntronsupportingevidenceadaptor *********************************
**
** Ensembl Intron Supporting Evidence Adaptor
**
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::IntronsupportingevidenceAdaptor
** ##
******************************************************************************/

#define EnsPIntronsupportingevidenceadaptor EnsPFeatureadaptor




/* @const EnsPOperonadaptor ***************************************************
**
** Ensembl Operon Adaptor
**
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::OperonAdaptor
** ##
******************************************************************************/

#define EnsPOperonadaptor EnsPFeatureadaptor




/* @const EnsPOperontranscriptadaptor *****************************************
**
** Ensembl Operon Transcript Adaptor
**
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::OperonTranscriptAdaptor
** ##
******************************************************************************/

#define EnsPOperontranscriptadaptor EnsPFeatureadaptor




/* @const EnsPSeqregionsynonymadaptor *****************************************
**
** Ensembl Sequence Region Synonym Adaptor
**
** Defined as an alias in EnsPBaseadaptor.
**
** #alias EnsPBaseadaptor
**
** #cc Bio::EnsEMBL::DBSQL::SeqRegionSynonymAdaptor
** ##
******************************************************************************/

#define EnsPSeqregionsynonymadaptor EnsPBaseadaptor




/* @const EnsPTranscriptadaptor ***********************************************
**
** Ensembl Transcript Adaptor
**
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::TranscriptAdaptor
** ##
******************************************************************************/

#define EnsPTranscriptadaptor EnsPFeatureadaptor




/* @const EnsPTranslationadaptor **********************************************
**
** Ensembl Translation Adaptor
**
** Defined as an alias in EnsPBaseadaptor.
**
** #alias EnsPBaseadaptor
**
** #cc Bio::EnsEMBL::DBSQL::TranslationAdaptor
** ##
******************************************************************************/

#define EnsPTranslationadaptor EnsPBaseadaptor




/* @enum EnsEExternaldatabaseStatus *******************************************
**
** Ensembl External Database Status enumeration
**
** @value ensEExternaldatabaseStatusNULL Null
** @value ensEExternaldatabaseStatusKnownXref Known external reference
** @value ensEExternaldatabaseStatusKnown Known
** @value ensEExternaldatabaseStatusXref External reference
** @value ensEExternaldatabaseStatusPred Predicted
** @value ensEExternaldatabaseStatusOrth Orthologue
** @value ensEExternaldatabaseStatusPseudo Pseudo
** @@
******************************************************************************/

typedef enum EnsOExternaldatabaseStatus
{
    ensEExternaldatabaseStatusNULL,
    ensEExternaldatabaseStatusKnownXref,
    ensEExternaldatabaseStatusKnown,
    ensEExternaldatabaseStatusXref,
    ensEExternaldatabaseStatusPred,
    ensEExternaldatabaseStatusOrth,
    ensEExternaldatabaseStatusPseudo
} EnsEExternaldatabaseStatus;




/* @enum EnsEExternaldatabaseType *********************************************
**
** Ensembl External Database Type enumeration
**
** @value ensEExternaldatabaseTypeNULL Null
** @value ensEExternaldatabaseTypeArray Array
** @value ensEExternaldatabaseTypeAltTrans Alternative Translation
** @value ensEExternaldatabaseTypeAltGene Alternative Gene
** @value ensEExternaldatabaseTypeMisc Miscellaneous
** @value ensEExternaldatabaseTypeLit Literature
** @value ensEExternaldatabaseTypePrimaryDbSynonym Primary database synonym
** @value ensEExternaldatabaseTypeEnsembl Ensembl
** @value ensEExternaldatabaseTypeIgnore Ignore
** @@
******************************************************************************/

typedef enum EnsOExternaldatabaseType
{
    ensEExternaldatabaseTypeNULL,
    ensEExternaldatabaseTypeArray,
    ensEExternaldatabaseTypeAltTrans,
    ensEExternaldatabaseTypeAltGene,
    ensEExternaldatabaseTypeMisc,
    ensEExternaldatabaseTypeLit,
    ensEExternaldatabaseTypePrimaryDbSynonym,
    ensEExternaldatabaseTypeEnsembl,
    ensEExternaldatabaseTypeIgnore
} EnsEExternaldatabaseType;




/* @enum EnsEExternalreferenceInfotype ****************************************
**
** Ensembl External Reference Information Type enumeration
**
** @value ensEExternalreferenceInfotypeNULL Null
** @value ensEExternalreferenceInfotypeProjection Projection
** @value ensEExternalreferenceInfotypeMisc Miscellaneous
** @value ensEExternalreferenceInfotypeDependent Dependent
** @value ensEExternalreferenceInfotypeDirect Direct
** @value ensEExternalreferenceInfotypeSequenceMatch Sequence Match
** @value ensEExternalreferenceInfotypeInferredPair Inferred Pair
** @value ensEExternalreferenceInfotypeProbe Probe
** @value ensEExternalreferenceInfotypeUnmapped Unmapped
** @value ensEExternalreferenceInfotypeCoordinateOverlap Coordinate Overlap
** @@
******************************************************************************/

typedef enum EnsOExternalreferenceInfotype
{
    ensEExternalreferenceInfotypeNULL,
    ensEExternalreferenceInfotypeProjection,
    ensEExternalreferenceInfotypeMisc,
    ensEExternalreferenceInfotypeDependent,
    ensEExternalreferenceInfotypeDirect,
    ensEExternalreferenceInfotypeSequenceMatch,
    ensEExternalreferenceInfotypeInferredPair,
    ensEExternalreferenceInfotypeProbe,
    ensEExternalreferenceInfotypeUnmapped,
    ensEExternalreferenceInfotypeCoordinateOverlap
} EnsEExternalreferenceInfotype;




/* @enum EnsEExternalreferenceObjecttype **************************************
**
** Ensembl External Reference Object Type enumeration
**
** @value ensEExternalreferenceObjecttypeNULL Null
** @value ensEExternalreferenceObjecttypeRawContig Raw Contig
** @value ensEExternalreferenceObjectypeTranscript Transcript
** @value ensEExternalreferenceObjecttypeGene Gene
** @value ensEExternalreferenceObjecttypeTranslation Translation
** @@
******************************************************************************/

typedef enum EnsOExternalreferenceObjecttype
{
    ensEExternalreferenceObjecttypeNULL,
    ensEExternalreferenceObjecttypeRawContig,
    ensEExternalreferenceObjectypeTranscript,
    ensEExternalreferenceObjecttypeGene,
    ensEExternalreferenceObjecttypeTranslation
} EnsEExternalreferenceObjecttype;




/* @enum EnsEGeneStatus *******************************************************
**
** Ensembl Gene Status enumeration
**
** @value ensEGeneStatusNULL Null
** @value ensEGeneStatusKnown Known
** @value ensEGeneStatusNovel Novel
** @value ensEGeneStatusPutative Putative
** @value ensEGeneStatusPredicted Predicted
** @value ensEGeneStatusKnownByProjection Known by projection
** @value ensEGeneStatusUnknown Unknown
** @@
******************************************************************************/

typedef enum EnsOGeneStatus
{
    ensEGeneStatusNULL,
    ensEGeneStatusKnown,
    ensEGeneStatusNovel,
    ensEGeneStatusPutative,
    ensEGeneStatusPredicted,
    ensEGeneStatusKnownByProjection,
    ensEGeneStatusUnknown
} EnsEGeneStatus;




/* @enum EnsEIntronsupportingevidenceType *************************************
**
** Ensembl Intron Supporting Evidence Type enumeration
**
** @value ensEIntronsupportingevidenceTypeNULL Null
** @value ensEIntronsupportingevidenceTypeNone None
** @value ensEIntronsupportingevidenceTypeDepth Depth
** @@
******************************************************************************/

typedef enum EnsOIntronsupportingevidenceType
{
    ensEIntronsupportingevidenceTypeNULL,
    ensEIntronsupportingevidenceTypeNone,
    ensEIntronsupportingevidenceTypeDepth
} EnsEIntronsupportingevidenceType;




/* @enum EnsESliceTopology ****************************************************
**
** Ensembl Slice Topology enumeration
**
** @value ensESliceTopologyNULL Null
** @value ensESliceTopologyLinear Linear
** @value ensESliceTopologyCircular Circular
** @@
******************************************************************************/

typedef enum EnsOSliceTopology
{
    ensESliceTopologyNULL,
    ensESliceTopologyLinear,
    ensESliceTopologyCircular
} EnsESliceTopology;




/* @enum EnsESliceType ********************************************************
**
** Ensembl Slice Type enumeration
**
** @value ensESliceTypeNULL Null
** @value ensESliceTypeLinear Linear
** @value ensESliceTypeCircular Circular
** @value ensESliceTypeLrg Locus Reference Genome
** @@
******************************************************************************/

typedef enum EnsOSliceType
{
    ensESliceTypeNULL,
    ensESliceTypeLinear,
    ensESliceTypeCircular,
    ensESliceTypeLrg
} EnsESliceType;




/* @enum EnsETranscriptStatus *************************************************
**
** Ensembl Transcript Status enumeration
**
** @value ensETranscriptStatusNULL Null
** @value ensETranscriptStatusKnown Known
** @value ensETranscriptStatusNovel Novel
** @value ensETranscriptStatusPutative Putative
** @value ensETranscriptStatusPredicted Predicted
** @value ensETranscriptStatusKnownByProjection Known by projection
** @value ensETranscriptStatusUnknown Unknown
** @value ensETranscriptStatusAnnotated Annotated
** @@
******************************************************************************/

typedef enum EnsOTranscriptStatus
{
    ensETranscriptStatusNULL,
    ensETranscriptStatusKnown,
    ensETranscriptStatusNovel,
    ensETranscriptStatusPutative,
    ensETranscriptStatusPredicted,
    ensETranscriptStatusKnownByProjection,
    ensETranscriptStatusUnknown,
    ensETranscriptStatusAnnotated
} EnsETranscriptStatus;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPSeqregionadaptor *************************************************
**
** Ensembl Sequence Region Adaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** @attr CacheByIdentifier [EnsPCache] Ensembl Cache to store Ensembl Sequence
** Region objects with AJAX unsigned integer (SQL-database identifier) objects
** as index
** @attr CacheByName [AjPTable] AJAX Table to cache Ensembl Sequence Region
** objects with "Sequence Region Name:Coordinate System Identifier" AJAX String
** objects as index
** @attr CacheLocusReferenceGenomic [AjPList] AJAX List to cache Ensembl
** Sequence Region objects, which are associated with an Ensembl Attribute of
** code "LRG" and correspond to Locus Reference Genomic entries.
** See http://www.lrg-sequence.org/ for details.
** @attr CacheNonReference [AjPList] AJAX List to cache Ensembl Sequence
** Region objects, which are associated with an Ensembl Attribute of code
** "non_ref" that is usually set for haplotype assembly paths.
** @@
******************************************************************************/

typedef struct EnsSSeqregionadaptor
{
    EnsPDatabaseadaptor Adaptor;
    EnsPCache CacheByIdentifier;
    AjPTable CacheByName;
    AjPList CacheLocusReferenceGenomic;
    AjPList CacheNonReference;
} EnsOSeqregionadaptor;

#define EnsPSeqregionadaptor EnsOSeqregionadaptor*




/* @data EnsPSeqregion ********************************************************
**
** Ensembl Sequence Region
**
** @attr Use [ajuint] Usage counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPSeqregionadaptor] Ensembl Sequence Region Adaptor
** @cc Bio::EnsEMBL::???
** @attr Coordsystem [EnsPCoordsystem] Ensembl Coordinate System
** @attr Name [AjPStr] Name
** @attr Attributes [AjPList] AJAX List of Ensembl Attribute objects
** @attr Seqregionsynonyms [AjPList]
** AJAX List of Ensembl Sequence Region Synonym objects
** @attr Length [ajint] Length
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSSeqregion
{
    ajuint Use;
    ajuint Identifier;
    EnsPSeqregionadaptor Adaptor;
    EnsPCoordsystem Coordsystem;
    AjPStr Name;
    AjPList Attributes;
    AjPList Seqregionsynonyms;
    ajint Length;
    ajuint Padding;
} EnsOSeqregion;

#define EnsPSeqregion EnsOSeqregion*




/* @data EnsPSliceadaptor *****************************************************
**
** Ensembl Slice Adaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** @attr CacheByIdentifier [EnsPCache] Caches Ensembl Slice objects by their
** Ensembl Sequence Region identifier, start, end and strand coordinate
** @attr CacheByName [AjPTable] Caches Ensembl Slice objects by their
** Ensembl Sequence Region name, start, end and strand coordinate
** @@
******************************************************************************/

typedef struct EnsSSliceadaptor
{
    EnsPDatabaseadaptor Adaptor;
    EnsPCache CacheByIdentifier;
    AjPTable CacheByName;
} EnsOSliceadaptor;

#define EnsPSliceadaptor EnsOSliceadaptor*




/* @data EnsPSlice ************************************************************
**
** Ensembl Slice
**
** Holds information about a genome sequence slice.
**
** @alias EnsSSlice
** @alias EnsOSlice
**
** @attr Adaptor [EnsPSliceadaptor] Ensembl Slice Adaptor
** @attr Seqregion [EnsPSeqregion] Ensembl Sequence Region
** @attr Sequence [AjPStr] Sequence
** @attr Topology [EnsESliceTopology] Slice Topology enumeration
** @attr Type [EnsESliceType] Ensembl Slice Type enumeration
** @attr Start [ajint] Start coordinate
** @attr End [ajint] End coordinate
** @attr Strand [ajint] Strand information (+1|-1)
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct EnsSSlice
{
    EnsPSliceadaptor Adaptor;
    EnsPSeqregion Seqregion;
    AjPStr Sequence;
    EnsESliceTopology Topology;
    EnsESliceType Type;
    ajint Start;
    ajint End;
    ajint Strand;
    ajuint Use;
} EnsOSlice;

#define EnsPSlice EnsOSlice*




/* @data EnsPAssemblymapperadaptor ********************************************
**
** Ensembl Assembly Mapper Adaptor
**
** The Ensembl Assembly Mapper Adaptor is used to retrieve Ensembl Mapper
** objects between any two Ensembl Coordinate System objects which makeup is
** described by the "assembly" table. Currently, one-step (explicit) and
** two-step (implict) pairwise mapping is supported. In one-step mapping an
** explicit relationship between the Coordinate System objects is defined in
** the "assembly" table. In two-step "chained" mapping no explicit mapping is
** present, but the Coordinate System objects must share a common mapping to
** an intermediate Coordinate System.
**
** @alias EnsSAssemblymapperadaptor
** @alias EnsOAssemblymapperadaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** @attr CacheByIdentifiers [AjPTable]
** AJAX Table of AJAX String (Ensembl Coordinate System identifiers
** concatenated by ':' characters) key data and
** Ensembl Assembly Mapper value data
** @attr MultipleMappings [AjPTable]
** AJAX Table of AJAX unsigned integer (Ensembl Sequence Region identifier)
** key data and Ensembl Sequence Region value data for objects that have more
** than one entry in the Ensembl Core "assembly" table, i. e. they map to
** more than one location.
** @@
******************************************************************************/

typedef struct EnsSAssemblymapperadaptor
{
    EnsPDatabaseadaptor Adaptor;
    AjPTable CacheByIdentifiers;
    AjPTable MultipleMappings;
} EnsOAssemblymapperadaptor;

#define EnsPAssemblymapperadaptor EnsOAssemblymapperadaptor*




/* @data EnsPGenericassemblymapper ********************************************
**
** Ensembl Generic Assembly Mapper
**
** The Ensembl Generic Assembly Mapper handles mappings between two Ensembl
** Coordinate System objects using the information stored in the "assembly"
** SQL table of an Ensembl Core database.
**
** The Ensembl Generic Assembly Mapper is a database aware mapper, which
** facilitates conversion of coordinates between any two Ensembl Coordinate
** System objects with a relationship explicitly defined in the "assembly"
** SQL table. In future, it may be possible to perform multiple step (implicit)
** mapping between Ensembl Coordinate System objects.
**
** It is implemented using the Ensembl Mapper object, which is a generic mapper
** object between disjoint Ensembl Coordinate System objects.
**
** @alias EnsSGenericassemblymapper
** @alias EnsOGenericassemblymapper
**
** @attr Adaptor [EnsPAssemblymapperadaptor] Ensembl Assembly Mapper Adaptor
** @attr CoordsystemAssembled [EnsPCoordsystem] Assembled Ensembl Coordinate
** System
** @attr CoordsystemComponent [EnsPCoordsystem] Component Ensembl Coordinate
** System
** @attr RegisterAssembled [AjPTable] Assembled Register
** @attr RegisterComponent [AjPTable] Component Register
** @attr Mapper [EnsPMapper] Ensembl Mapper
** @attr Maximum [ajuint] Maximum Ensembl Mapper Pair count
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct EnsSGenericassemblymapper
{
    EnsPAssemblymapperadaptor Adaptor;
    EnsPCoordsystem CoordsystemAssembled;
    EnsPCoordsystem CoordsystemComponent;
    AjPTable RegisterAssembled;
    AjPTable RegisterComponent;
    EnsPMapper Mapper;
    ajuint Maximum;
    ajuint Use;
} EnsOGenericassemblymapper;

#define EnsPGenericassemblymapper EnsOGenericassemblymapper*




/* @data EnsPChainedassemblymapper ********************************************
**
** Ensembl Chained Assembly Mapper
**
** The Ensembl Chained Assembly Mapper is an extension of the regular
** Ensembl Generic Assembly Mapper that allows for mappings between
** Ensembl Coordinate System objects that require multi-step mapping.
** For example if explicit mappings are defined between the following
** Coordinate System objects, chromosome/contig and contig/clone,
** the Ensembl Chained Assembly Mapper would be able to perform implicit
** mapping between the "chromosome" and "clone" Ensembl Coordinate System
** objects. This should be transparent to the user of this module, and users
** should not even realise that they are using an Ensembl Chained Assembly
** Mapper as opposed to an Ensembl Generic Assembly Mapper.
**
** @alias EnsSChainedassemblymapper
** @alias EnsOChainedassemblymapper
**
** @attr Adaptor [EnsPAssemblymapperadaptor] Ensembl Assembly Mapper Adaptor
** @attr CoordsystemSource [EnsPCoordsystem] Source Ensembl Coordinate System
** @attr CoordsystemMiddle [EnsPCoordsystem] Middle Ensembl Coordinate System
** @attr CoordsystemTarget [EnsPCoordsystem] Target Ensembl Coordinate System
** @attr MapperSourceMiddle [EnsPMapper] Source to middle Ensembl Mapper
** @attr MapperTargetMiddle [EnsPMapper] Target to middle Ensembl Mapper
** @attr MapperSourceTarget [EnsPMapper] Source to target Ensembl Mapper
** @attr RegistrySource [EnsPMapperrangeregistry]
** Source Ensembl Mapper Range Registry
** @attr RegistryTarget [EnsPMapperrangeregistry]
** Target Ensembl Mapper Range Registry
** @attr Maximum [ajuint] Maximum Ensembl Mapper Pair count
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct EnsSChainedassemblymapper
{
    EnsPAssemblymapperadaptor Adaptor;
    EnsPCoordsystem CoordsystemSource;
    EnsPCoordsystem CoordsystemMiddle;
    EnsPCoordsystem CoordsystemTarget;
    EnsPMapper MapperSourceMiddle;
    EnsPMapper MapperTargetMiddle;
    EnsPMapper MapperSourceTarget;
    EnsPMapperrangeregistry RegistrySource;
    EnsPMapperrangeregistry RegistryTarget;
    ajuint Maximum;
    ajuint Use;
} EnsOChainedassemblymapper;

#define EnsPChainedassemblymapper EnsOChainedassemblymapper*




/* @data EnsPToplevelassemblymapper *******************************************
**
** Ensembl Top-Level Assembly Mapper
**
** The Ensembl Top-Level Assembly Mapper performs mapping between a provided
** Ensembl Coordinate System and the top-level pseudo Cooordinate System.
** The top-level Coordinate System is not a real Coordinate System, but
** represents the highest Coordinate System that can be mapped to in a given
** Sequence Region. It is only possible to perform unidirectional mapping
** using this Mapper, because it does not make sense to map from the top-level
** Coordinate System to another Coordinate System.
**
** @alias EnsSToplevelassemblymapper
** @alias EnsOToplevelassemblymapper
**
** @attr Adaptor [EnsPAssemblymapperadaptor]
** Ensembl Assembly Mapper Adaptor
** @attr Coordsystems [AjPList]
** AJAX List of Ensembl Coordinate System objects
** @attr CoordsystemAssembled [EnsPCoordsystem]
** Top-level Ensembl Coordinate System
** @attr CoordsystemComponent [EnsPCoordsystem]
** Other Ensembl Coordinate System
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSToplevelassemblymapper
{
    EnsPAssemblymapperadaptor Adaptor;
    AjPList Coordsystems;
    EnsPCoordsystem CoordsystemAssembled;
    EnsPCoordsystem CoordsystemComponent;
    ajuint Use;
    ajuint Padding;
} EnsOToplevelassemblymapper;

#define EnsPToplevelassemblymapper EnsOToplevelassemblymapper*




/* @data EnsPAssemblymapper ***************************************************
**
** Ensembl Assembly Mapper
**
** The Ensembl Assembly Mapper is a wrapper for specialised
** Ensembl Assembly Mapper objects.
**
** @alias EnsSAssemblymapper
** @alias EnsOAssemblymapper
**
** @attr Adaptor [EnsPAssemblymapperadaptor] Ensembl Assembly Mapper Adaptor
** @attr Generic [EnsPGenericassemblymapper] Ensembl Generic Assembly Mapper
** @attr Chained [EnsPChainedassemblymapper] Ensembl Chained Assembly Mapper
** @attr Toplevel [EnsPToplevelassemblymapper]
** Ensembl Top-Level Assembly Mapper
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
** NOTE: This object subsumes the following Perl objects all returned by the
** Bio::EnsEMBL::DBSQL::AssemblyMapperAdaptor
**
** Bio::EnsEMBL::AssemblyMapper (here Ensembl Generic Assembly Mapper)
** Bio::EnsEMBL::ChainedAssemblyMapper
** Bio::EnsEMBL::TopLevelAssemblyMapper
**
** The objects can be distinguished by their Type member.
******************************************************************************/

typedef struct EnsSAssemblymapper
{
    EnsPAssemblymapperadaptor Adaptor;
    EnsPGenericassemblymapper Generic;
    EnsPChainedassemblymapper Chained;
    EnsPToplevelassemblymapper Toplevel;
    ajuint Use;
    ajuint Padding;
} EnsOAssemblymapper;

#define EnsPAssemblymapper EnsOAssemblymapper*




/* @data EnsPBaseadaptorLeftjoin **********************************************
**
** Ensembl Base Adaptor SQL LEFT JOIN condition
**
** @alias EnsSBaseadaptorLeftjoin
** @alias EnsOBaseadaptorLeftjoin
**
** @attr Tablename [const char*] SQL table name
** @attr Condition [const char*] SQL LEFT JOIN condition
** @@
******************************************************************************/

typedef struct EnsSBaseadaptorLeftjoin
{
    const char *Tablename;
    const char *Condition;
} EnsOBaseadaptorLeftjoin;

#define EnsPBaseadaptorLeftjoin EnsOBaseadaptorLeftjoin*




/* @data EnsPBaseadaptor ******************************************************
**
** Ensembl Base Adaptor
**
** @alias EnsSBaseadaptor
** @alias EnsOBaseadaptor
**
** @alias EnsPDitagadaptor
** @alias EnsPGvindividualadaptor
** @alias EnsPGvpopulationadaptor
** @alias EnsPGvsampleadaptor
** @alias EnsPGvvariationsetadaptor
** @alias EnsPMarkeradaptor
** @alias EnsPOntologytermadaptor
** @alias EnsPProteinfeatureadaptor
** @alias EnsPQcalignmentadaptor
** @alias EnsPQcdasfeatureadaptor
** @alias EnsPQcsubmissionadaptor
** @alias EnsPQcvariationadaptor
** @alias EnsPRepeatconsensusadaptor
** @alias EnsPSeqregionsynonymadaptor
** @alias EnsPTranslationadaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** @attr Tablenames [const char* const*] SQL table name array
** @attr Columnnames [const char* const*] SQL column name array
** @attr Leftjoins [const EnsPBaseadaptorLeftjoin]
** SQL LEFT JOIN condition array
** @attr Defaultcondition [const char*] SQL SELECT default condition
** @attr Finalcondition [const char*] SQL SELECT final condition
** @attr Mysqlstraightjoin [AjBool]
** Set the MySQL-specific SQL SELECT STRAIGHT_JOIN option
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Fstatement [AjBool function] Statement function address
** @@
** NOTE: In constrast to the Perl API, this implementation does not feature a
** species_id member, which is already set in the Ensembl Database Adaptor.
******************************************************************************/

typedef struct EnsSBaseadaptor
{
    EnsPDatabaseadaptor Adaptor;
    const char *const *Tablenames;
    const char *const *Columnnames;
    const EnsPBaseadaptorLeftjoin Leftjoins;
    const char *Defaultcondition;
    const char *Finalcondition;
    AjBool Mysqlstraightjoin;
    ajuint Padding;
    AjBool (*Fstatement) (struct EnsSBaseadaptor *dba,
                          const AjPStr sql,
                          EnsPAssemblymapper am,
                          EnsPSlice slice,
                          AjPList objects);
} EnsOBaseadaptor;

#define EnsPBaseadaptor EnsOBaseadaptor*




/* @data EnsPAnalysisadaptor **************************************************
**
** Ensembl Analysis Adaptor
**
** @alias EnsSAnalysisadaptor
** @alias EnsOAnalysisadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByName [AjPTable] Name cache
** @@
******************************************************************************/

typedef struct EnsSAnalysisadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByName;
} EnsOAnalysisadaptor;

#define EnsPAnalysisadaptor EnsOAnalysisadaptor*




/* @data EnsPAnalysis *********************************************************
**
** Ensembl Analysis
**
** An Ensembl Analysis object stores details of an analysis within the
** Ensembl genome analysis and annotation pipeline.
**
** @alias EnsSAnalysis
** @alias EnsOAnalysis
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPAnalysisadaptor] Ensembl Analysis Adaptor
** @cc Bio::EnsEMBL::Analysis
** @cc "analysis" SQL table
** @attr DateCreation [AjPStr] Creation date
** @attr Name [AjPStr] Name
** @attr Databasename [AjPStr] Database name
** @attr Databaseversion [AjPStr] Database version
** @attr Databasefile [AjPStr] Database file
** @attr Programname [AjPStr] Program name
** @attr Programversion [AjPStr] Program version
** @attr Programfile [AjPStr] Program file
** @attr Parameters [AjPStr] Parameters
** @attr Modulename [AjPStr] Module name
** @attr Moduleversion [AjPStr] Module version
** @attr Gffsource [AjPStr] GFF source
** @attr Gfffeature [AjPStr] GFF feature
** @cc "analysis_description" SQL table
** @attr Description [AjPStr] Description
** @attr Displaylabel [AjPStr] Display label for the Ensembl website
** @attr Webdata [AjPStr] Configuration information for the Ensembl web site
** @attr Displayable [AjBool] Displayable on the Ensembl web site
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSAnalysis
{
    ajuint Use;
    ajuint Identifier;
    EnsPAnalysisadaptor Adaptor;
    AjPStr DateCreation;
    AjPStr Name;
    AjPStr Databasename;
    AjPStr Databaseversion;
    AjPStr Databasefile;
    AjPStr Programname;
    AjPStr Programversion;
    AjPStr Programfile;
    AjPStr Parameters;
    AjPStr Modulename;
    AjPStr Moduleversion;
    AjPStr Gffsource;
    AjPStr Gfffeature;
    AjPStr Description;
    AjPStr Displaylabel;
    AjPStr Webdata;
    AjBool Displayable;
    ajuint Padding;
} EnsOAnalysis;

#define EnsPAnalysis EnsOAnalysis*




/* @data EnsPExternaldatabaseadaptor ******************************************
**
** Ensembl External Database Adaptor
**
** @alias EnsSExternaldatabaseadaptor
** @alias EnsOExternaldatabaseadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByName [AjPTable] Name cache
** @@
******************************************************************************/

typedef struct EnsSExternaldatabaseadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByName;
} EnsOExternaldatabaseadaptor;

#define EnsPExternaldatabaseadaptor EnsOExternaldatabaseadaptor*




/* @data EnsPAttributetypeadaptor *********************************************
**
** Ensembl Attribute Type Adaptor
**
** @alias EnsSAttributetypeadaptor
** @alias EnsOAttributetypeadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByCode [AjPTable] Code cache
** @@
******************************************************************************/

typedef struct EnsSAttributetypeadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByCode;
} EnsOAttributetypeadaptor;

#define EnsPAttributetypeadaptor EnsOAttributetypeadaptor*




/* @data EnsPAttributetype ****************************************************
**
** Ensembl Attribute Type
**
** @alias EnsSAttributetype
** @alias EnsOAttributetype
**
** @attr Use [ajuint] Usage counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPAttributetypeadaptor] Ensembl Attribute Type Adaptor
** @cc Bio::EnsEMBL::???
** @attr Code [AjPStr] Code
** @attr Name [AjPStr] Name
** @attr Description [AjPStr] Description
** @@
******************************************************************************/

typedef struct EnsSAttributetype
{
    ajuint Use;
    ajuint Identifier;
    EnsPAttributetypeadaptor Adaptor;
    AjPStr Code;
    AjPStr Name;
    AjPStr Description;
} EnsOAttributetype;

#define EnsPAttributetype EnsOAttributetype*




/* @data EnsPAttribute ********************************************************
**
** Ensembl Attribute
**
** @alias EnsSAttribute
** @alias EnsOAttribute
**
** @cc Bio::EnsEMBL::Attribute
** @attr Attributetype [EnsPAttributetype] Ensembl Attribute Type
** @attr Value [AjPStr] Value
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSAttribute
{
    EnsPAttributetype Attributetype;
    AjPStr Value;
    ajuint Use;
    ajuint Padding;
} EnsOAttribute;

#define EnsPAttribute EnsOAttribute*




/* @data EnsPExternaldatabase *************************************************
**
** Ensembl External Database
**
** @alias EnsSExternaldatabase
** @alias EnsOExternaldatabase
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPExternaldatabaseadaptor]
** Ensembl External Database Adaptor
** @cc Bio::EnsEMBL::???
** @cc "external_db" SQL table
** @attr Name [AjPStr] Database name
** @attr Release [AjPStr] Database release
** @attr Displayname [AjPStr] Database display name
** @attr Secondaryname [AjPStr] Secondary database name
** @attr Secondarytable [AjPStr] Secondary database table
** @attr Description [AjPStr] Description
** @attr Status [EnsEExternaldatabaseStatus] Status
** @attr Type [EnsEExternaldatabaseType] Type
** @attr Priority [ajint] Priority
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSExternaldatabase
{
    ajuint Use;
    ajuint Identifier;
    EnsPExternaldatabaseadaptor Adaptor;
    AjPStr Name;
    AjPStr Release;
    AjPStr Displayname;
    AjPStr Secondaryname;
    AjPStr Secondarytable;
    AjPStr Description;
    EnsEExternaldatabaseStatus Status;
    EnsEExternaldatabaseType Type;
    ajint Priority;
    ajuint Padding;
} EnsOExternaldatabase;

#define EnsPExternaldatabase EnsOExternaldatabase*




/* @data EnsPExternalreference ************************************************
**
** Ensembl External Reference
**
** @alias EnsSExternalreference
** @alias EnsOExternalreference
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @cc "xref" SQL table
** @attr Externaldatabase [EnsPExternaldatabase] Ensembl External Database
** @attr Primaryidentifier [AjPStr] Primary identifier
** @attr Displayidentifier [AjPStr] Display identifier
** @attr Version [AjPStr] Version
** @attr Description [AjPStr] Description
** @attr Linkageannotation [AjPStr] Linkage annotation
** @attr Infotext [AjPStr] Information text
** @attr Infotype [EnsEExternalreferenceInfotype]
** Ensembl External Reference Information Type enumeration
** @attr Objecttype [EnsEExternalreferenceObjecttype]
** Ensembl External Reference Object Type enumeration
** @attr Objectidentifier [ajuint] Ensembl Object identifier
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSExternalreference
{
    ajuint Use;
    ajuint Identifier;
    EnsPAnalysis Analysis;
    EnsPExternaldatabase Externaldatabase;
    AjPStr Primaryidentifier;
    AjPStr Displayidentifier;
    AjPStr Version;
    AjPStr Description;
    AjPStr Linkageannotation;
    AjPStr Infotext;
    EnsEExternalreferenceInfotype Infotype;
    EnsEExternalreferenceObjecttype Objecttype;
    ajuint Objectidentifier;
    ajuint Padding;
} EnsOExternalreference;

#define EnsPExternalreference EnsOExternalreference*




/* @data EnsPIdentityreference ************************************************
**
** Ensembl Identity Reference
**
** @alias EnsSIdentityreference
** @alias EnsOIdentityreference
**
** @cc Bio::EnsEMBL::IdentityXref
** @cc "identity_xref" SQL table
** @attr Cigar [AjPStr] Cigar line (See exonerate(1))
** @attr QueryStart [ajint] Query start
** @attr QueryEnd [ajint] Query end
** @attr QueryIdentity [ajint] Query sequence identity
** @attr TargetStart [ajint] Target start
** @attr TargetEnd [ajint] Target end
** @attr TargetIdentity [ajint] Target sequence identity
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Evalue [double] e-Value
** @attr Score [double] Score
** @@
******************************************************************************/

typedef struct EnsSIdentityreference
{
    AjPStr Cigar;
    ajint QueryStart;
    ajint QueryEnd;
    ajint QueryIdentity;
    ajint TargetStart;
    ajint TargetEnd;
    ajint TargetIdentity;
    ajuint Use;
    ajuint Padding;
    double Evalue;
    double Score;
} EnsOIdentityreference;

#define EnsPIdentityreference EnsOIdentityreference*




/* @data EnsPDatabaseentry ****************************************************
**
** Ensembl Database Entry
**
** @alias EnsSDatabaseentry
** @alias EnsODatabaseentry
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPDatabaseentryadaptor] Ensembl Database Entry Adaptor
** @cc Bio::EnsEMBL::DBEntry
** @cc "xref" SQL table
** @attr Externalreference [EnsPExternalreference] Ensembl External Reference
** @cc Bio::EnsEMBL::IdentityXref
** @attr Identityreference [EnsPIdentityreference] Ensembl Identity Reference
** @cc "external_synonym" SQL table
** @attr Synonyms [AjPList] Synonyms
** @attr Ontologylinkages [AjPList] AJAX List of
** Ensembl Ontology Linkage objects
** @@
******************************************************************************/

typedef struct EnsSDatabaseentry
{
    ajuint Use;
    ajuint Identifier;
    EnsPDatabaseentryadaptor Adaptor;
    EnsPExternalreference Externalreference;
    EnsPIdentityreference Identityreference;
    AjPList Synonyms;
    AjPList Ontologylinkages;
} EnsODatabaseentry;

#define EnsPDatabaseentry EnsODatabaseentry*




/* @data EnsPOntologylinkage **************************************************
**
** Ensembl Ontology Linkage
**
** @alias EnsSOntologylinkage
** @alias EnsOOntologylinkage
**
** @cc "ontology_xref" SQL table
** @attr LinkageType [AjPStr] Likage type (Ontology Evidence Code)
** @attr Source [EnsPDatabaseentry] Source Ensembl Database Entry
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSOntologylinkage
{
    AjPStr LinkageType;
    EnsPDatabaseentry Source;
    ajuint Use;
    ajuint Padding;
} EnsOOntologylinkage;

#define EnsPOntologylinkage EnsOOntologylinkage*




/* @data EnsPFeature **********************************************************
**
** Ensembl Feature
**
** @alias EnsSFeature
** @alias EnsOFeature
**
** @cc Bio::EnsEMBL::Feature
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @attr Slice [EnsPSlice] Ensembl Slice
** @attr Sequencename [AjPStr] Sequence name
** @attr Start [ajint] Start coordinate
** @attr End [ajint] End coordinate
** @attr Strand [ajint] Strand orientation
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct EnsSFeature
{
    EnsPAnalysis Analysis;
    EnsPSlice Slice;
    AjPStr Sequencename;
    ajint Start;
    ajint End;
    ajint Strand;
    ajuint Use;
} EnsOFeature;

#define EnsPFeature EnsOFeature*




/* @data EnsPFeatureadaptor ***************************************************
**
** Ensembl Feature Adaptor
**
** @alias EnsSFeatureadaptor
** @alias EnsOFeatureadaptor
**
** @alias EnsPExonadaptor
** @alias EnsPDnaalignfeatureadaptor
** @alias EnsPDensityfeatureadaptor
** @alias EnsPDitagfeatureadaptor
** @alias EnsPGeneadaptor
** @alias EnsPIntronsupportingevidenceadaptor
** @alias EnsPKaryotypebandadaptor
** @alias EnsPMarkerfeatureadaptor
** @alias EnsPMiscellaneousfeatureadaptor
** @alias EnsPOperonadaptor
** @alias EnsPOperontranscriptadaptor
** @alias EnsPPredictionexonadaptor
** @alias EnsPPredictiontranscriptadaptor
** @alias EnsPProteinalignfeatureadaptor
** @alias EnsPRepeatfeatureadaptor
** @alias EnsPSimplefeatureadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr Cache [EnsPCache] Ensembl LRU Cache
** @attr Tablenames [char**] SQL table name array, which is used for
**                           multi-species databases only.
**                           The array is dynamically allocated to extend for
**                           "seq_region" and "coord_system" table names.
**                           The array is then set in the Ensembl Base Adaptor
**                           object.
** @attr Defaultcondition [char*] SQL SELECT default condition, which is used
**                         for multi-species databases only. This character
**                         string is dynamically allocated to extend for
**                         "seq_region" and "coord_system" conditions.
**                         The string is then set in the Ensembl Base Adaptor
**                         object.
** @attr FobjectGetFeature [EnsPFeature function]
** Ensembl Object-specific objectGetFeature member function
** @attr Freference [void* function]
** Ensembl Object-specific referencing function
** @attr Fdelete [void function]
** Ensembl Object-specific deletion function
** @attr Startequalsend [AjBool] Simplified SQL in featureadaptorSliceFetch
** @attr Maximumlength [ajint] Maximum length of a particular Feature type
** @@
******************************************************************************/

typedef struct EnsSFeatureadaptor
{
    EnsPBaseadaptor Adaptor;
    EnsPCache Cache;
    char **Tablenames;
    char *Defaultcondition;
    EnsPFeature (*FobjectGetFeature) (const void *object);
    void *(*Freference) (void *value);
    void (*Fdelete) (void **Pvalue);
    AjBool Startequalsend;
    ajint Maximumlength;
} EnsOFeatureadaptor;

#define EnsPFeatureadaptor EnsOFeatureadaptor*




/* @data EnsPExonadaptor ******************************************************
**
** Ensembl Exon Adaptor
**
** @alias EnsSExonadaptor
** @alias EnsOExonadaptor
**
**
** @attr Exonadaptor [EnsPFeatureadaptor] Ensembl Feature Adaptor
** @attr Exontranscriptadaptor [EnsPFeatureadaptor] Ensembl Feature Adaptor
** @@
******************************************************************************/

typedef struct EnsSExonadaptor
{
    EnsPFeatureadaptor Exonadaptor;
    EnsPFeatureadaptor Exontranscriptadaptor;
} EnsOExonadaptor;

#define EnsPExonadaptor EnsOExonadaptor*




/* @data EnsPExon *************************************************************
**
** Ensembl Exon
**
** @alias EnsSExon
** @alias EnsOExon
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPExonadaptor] Ensembl Exon Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Exon
** @cc "exon" SQL table
** @attr PhaseStart [ajint] Phase of Exon start
** @attr PhaseEnd [ajint] Phase of Exon end
** @attr Current [AjBool] Current
** @attr Constitutive [AjBool] Consitutive
** @cc "exon_stable_id" SQL table
** @attr Stableidentifier [AjPStr] Stable identifier
** @attr Version [ajuint] Version
** @attr Padding [ajuint] Padding to alignment boundary
** @attr DateCreation [AjPStr] Creation date
** @attr DateModification [AjPStr] Modification date
** @cc Additional members not in SQL tables
** @attr SequenceCache [AjPStr] Sequence Cache
** @attr Supportingfeatures [AjPList]
** AJAX List of Ensembl Base Align Feature objects
** @@
******************************************************************************/

typedef struct EnsSExon
{
    ajuint Use;
    ajuint Identifier;
    EnsPExonadaptor Adaptor;
    EnsPFeature Feature;
    ajint PhaseStart;
    ajint PhaseEnd;
    AjBool Current;
    AjBool Constitutive;
    AjPStr Stableidentifier;
    ajuint Version;
    ajuint Padding;
    AjPStr DateCreation;
    AjPStr DateModification;
    AjPStr SequenceCache;
    AjPList Supportingfeatures;
} EnsOExon;

#define EnsPExon EnsOExon*




/* @data EnsPIntron ***********************************************************
**
** Ensembl Intron
**
** @alias EnsSIntron
** @alias EnsOIntron
**
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Intron
** @attr PreviousExon [EnsPExon] Previous Ensembl Exon
** @attr NextExon [EnsPExon] Next Ensembl Exon
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSIntron
{
    EnsPFeature Feature;
    EnsPExon PreviousExon;
    EnsPExon NextExon;
    ajuint Use;
    ajuint Padding;
} EnsOIntron;

#define EnsPIntron EnsOIntron*




/* @data EnsPIntronsupportingevidence *****************************************
**
** Ensembl Intron Supporting Evidence
**
** @alias EnsSIntronsupportingevidence
** @alias EnsOIntronsupportingevidence
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPIntronsupportingevidenceadaptor]
** Ensembl Intron Supporting Evidence Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::IntronSupportingEvidence
** @attr Intron [EnsPIntron] Ensembl Intron
** @attr Hitname [AjPStr] Hit name
** @attr Canonical [AjBool] Canonical splice sites
** @attr Score [double] Socre
** @attr Type [EnsEIntronsupportingevidenceType]
** Ensembl Intron Supporting Evidence Type enumeration
** @@
******************************************************************************/

typedef struct EnsSIntronsupportingevidence
{
    ajuint Use;
    ajuint Identifier;
    EnsPIntronsupportingevidenceadaptor Adaptor;
    EnsPFeature Feature;
    EnsPIntron Intron;
    AjPStr Hitname;
    AjBool Canonical;
    double Score;
    EnsEIntronsupportingevidenceType Type;
} EnsOIntronsupportingevidence;

#define EnsPIntronsupportingevidence EnsOIntronsupportingevidence*




/* @data EnsPTranslation ******************************************************
**
** Ensembl Translation
**
** @alias EnsSTranslation
** @alias EnsOTranslation
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPTranslationadaptor] Ensembl Translation Adaptor
** @cc Bio::EnsEMBL::Translation
** @cc "translation" SQL table
** @attr Startexon [EnsPExon]
** Ensembl Exon in which the Translation start coordinate is annotated
** @attr Endexon [EnsPExon]
** Ensembl Exon in which the Translation end coordinate is annotated
** @attr Start [ajuint] Start coordinate relative to the start Ensembl Exon
** @attr End [ajuint] End coordinate relative to the end Ensembl Exon
** @cc "translation_stable_id" SQL table
** @attr Stableidentifier [AjPStr] Stable identifier
** @attr DateCreation [AjPStr] Creation date
** @attr DateModification [AjPStr] Modification date
** @attr Version [ajuint] Version
** @attr Padding [ajuint] Padding to alignment boundary
** @cc Additional members not in SQL tables
** @attr Attributes [AjPList] AJAX List of Ensembl Attribute objects
** @attr Databaseentries [AjPList] AJAX List of Ensembl Database Entry objects
** @attr Proteinfeatures [AjPList] AJAX List of Ensembl Protein Feature objects
** @attr Sequence [AjPStr] Sequence
** @attr TranscriptStart [ajuint]
** Start coordinate relative to the Ensembl Transcript (cDNA)
** @attr TranscriptEnd [ajuint]
** End coordinate relative to the Ensembl Transcript (cDNA)
** @attr SliceStart [ajint] Start coordinate relative to the Ensembl Slice
** @attr SliceEnd [ajint] End coordinate relative to the Ensembl Slice
** @@
******************************************************************************/

typedef struct EnsSTranslation
{
    ajuint Use;
    ajuint Identifier;
    EnsPTranslationadaptor Adaptor;
    EnsPExon Startexon;
    EnsPExon Endexon;
    ajuint Start;
    ajuint End;
    AjPStr Stableidentifier;
    AjPStr DateCreation;
    AjPStr DateModification;
    ajuint Version;
    ajuint Padding;
    AjPList Attributes;
    AjPList Databaseentries;
    AjPList Proteinfeatures;
    AjPStr Sequence;
    ajuint TranscriptStart;
    ajuint TranscriptEnd;
    ajint SliceStart;
    ajint SliceEnd;
} EnsOTranslation;

#define EnsPTranslation EnsOTranslation*




/* @data EnsPTranscript *******************************************************
**
** Ensembl Transcript
**
** @alias EnsSTranscript
** @alias EnsOTranscript
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPTranscriptadaptor] Ensembl Transcript Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Transcript
** @cc "transcript" SQL table
** @attr Displayreference [EnsPDatabaseentry] Display External Reference
** @attr Description [AjPStr] Description
** @attr Biotype [AjPStr] Biological type
** @attr Status [EnsETranscriptStatus] Status
** @attr Current [AjBool] Current attribute
** @cc "transcript_stable_id" SQL table
** @attr Stableidentifier [AjPStr] Stable identifier
** @attr DateCreation [AjPStr] Creation date
** @attr DateModification [AjPStr] Modification date
** @attr Version [ajuint] Version
** @cc Additional members not in SQL tables
** @attr Geneidentifier [ajuint] Ensembl Gene identifier
** @attr Alternativetranslations [AjPList]
** AJAX List of alternative Ensembl Translation objects
** @attr Attributes [AjPList]
** AJAX List of Ensembl Attribute objects
** @attr Databaseentries [AjPList]
** AJAX List of Ensembl Database Entry objects
** @attr Exons [AjPList]
** AJAX List of Ensembl Exon objects
** @attr Intronsupportingevidences [AjPList]
** AJAX List of Ensembl Intron Supporting Evidence objects
** @attr Supportingfeatures [AjPList]
** AJAX List of Ensembl Base Align Feature objects
** @attr Translation [EnsPTranslation] Ensembl Translation
** @attr Sequenceedits [AjBool] Enable Ensembl Sequence Edit objects
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Canonical [AjBool*] Canonical attribute
** @cc Bio::EnsEMBL::TranscriptMapper
** @attr ExonCoordMapper [EnsPMapper] Ensembl Mapper
** @@
******************************************************************************/

typedef struct EnsSTranscript
{
    ajuint Use;
    ajuint Identifier;
    EnsPTranscriptadaptor Adaptor;
    EnsPFeature Feature;
    EnsPDatabaseentry Displayreference;
    AjPStr Description;
    AjPStr Biotype;
    EnsETranscriptStatus Status;
    AjBool Current;
    AjPStr Stableidentifier;
    AjPStr DateCreation;
    AjPStr DateModification;
    ajuint Version;
    ajuint Geneidentifier;
    AjPList Alternativetranslations;
    AjPList Attributes;
    AjPList Databaseentries;
    AjPList Exons;
    AjPList Intronsupportingevidences;
    AjPList Supportingfeatures;
    EnsPTranslation Translation;
    AjBool Sequenceedits;
    ajuint Padding;
    AjBool *Canonical;
    EnsPMapper ExonCoordMapper;
} EnsOTranscript;

#define EnsPTranscript EnsOTranscript*




/* @data EnsPGene *************************************************************
**
** Ensembl Gene
**
** @alias EnsSGene
** @alias EnsOGene
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPGeneadaptor] Ensembl Gene Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Gene
** @cc "gene" SQL table
** @attr Displayreference [EnsPDatabaseentry] Display External Reference
** @attr Description [AjPStr] Description
** @attr Source [AjPStr] Source
** @attr Biotype [AjPStr] Biological type
** @attr Status [EnsEGeneStatus] Status
** @attr Current [AjBool] Current attribute
** @attr Canonicalannotation [AjPStr] Canonical annotation
** @attr Canonicaltranscriptidentifier [ajuint]
** Canonical Ensembl Transcript identifier
** @attr Version [ajuint] Version
** @cc "gene_stable_id" SQL table
** @attr Stableidentifier [AjPStr] Stable identifier
** @attr DateCreation [AjPStr] Creation date
** @attr DateModification [AjPStr] Modification date
** @cc Additional members not in SQL tables
** @attr Attributes [AjPList] AJAX List of Ensembl Attribute objects
** @attr Databaseentries [AjPList] AJAX List of Ensembl Database Entry objects
** @attr Transcripts [AjPList] AJAX List of Ensembl Transcript objects
** @@
******************************************************************************/

typedef struct EnsSGene
{
    ajuint Use;
    ajuint Identifier;
    EnsPGeneadaptor Adaptor;
    EnsPFeature Feature;
    EnsPDatabaseentry Displayreference;
    AjPStr Description;
    AjPStr Source;
    AjPStr Biotype;
    EnsEGeneStatus Status;
    AjBool Current;
    AjPStr Canonicalannotation;
    ajuint Canonicaltranscriptidentifier;
    ajuint Version;
    AjPStr Stableidentifier;
    AjPStr DateCreation;
    AjPStr DateModification;
    AjPList Attributes;
    AjPList Databaseentries;
    AjPList Transcripts;
} EnsOGene;

#define EnsPGene EnsOGene*




/* @data EnsPOperon ***********************************************************
**
** Ensembl Operon
**
** @alias EnsSOperon
** @alias EnsOOperon
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPOperonadaptor] Ensembl Operon Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Operon
** @cc "operon" SQL table
** @attr Displaylabel [AjPStr] Display Label
** @attr Stableidentifier [AjPStr] Stable identifier
** @attr DateCreation [AjPStr] Creation date
** @attr DateModification [AjPStr] Modification date
** @attr Version [ajuint] Version
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Attributes [AjPList] AJAX List of Ensembl Attribute objects
** @attr Databaseentries [AjPList] AJAX List of Ensembl Database Entry objects
** @attr Operontranscripts [AjPList]
** AJAX List of Ensembl Operon Transcript objects
** @@
******************************************************************************/

typedef struct EnsSOperon
{
    ajuint Use;
    ajuint Identifier;
    EnsPOperonadaptor Adaptor;
    EnsPFeature Feature;
    AjPStr Displaylabel;
    AjPStr Stableidentifier;
    AjPStr DateCreation;
    AjPStr DateModification;
    ajuint Version;
    ajuint Padding;
    AjPList Attributes;
    AjPList Databaseentries;
    AjPList Operontranscripts;
} EnsOOperon;

#define EnsPOperon EnsOOperon*




/* @data EnsPOperontranscript *************************************************
**
** Ensembl Operon Transcript
**
** @alias EnsSOperontranscript
** @alias EnsOOperontranscript
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPOperontranscriptadaptor]
** Ensembl Operon Transcript Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::OperonTranscript
** @cc "operon_transcript" SQL table
** @attr Displaylabel [AjPStr] Display Label
** @attr Stableidentifier [AjPStr] Stable identifier
** @attr DateCreation [AjPStr] Creation date
** @attr DateModification [AjPStr] Modification date
** @attr Version [ajuint] Version
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Attributes [AjPList] AJAX List of Ensembl Attribute objects
** @attr Databaseentries [AjPList] AJAX List of Ensembl Database Entry objects
** @attr Genes [AjPList] AJAX List of Ensembl Gene objects
** @@
******************************************************************************/

typedef struct EnsSOperontranscript
{
    ajuint Use;
    ajuint Identifier;
    EnsPOperontranscriptadaptor Adaptor;
    EnsPFeature Feature;
    AjPStr Displaylabel;
    AjPStr Stableidentifier;
    AjPStr DateCreation;
    AjPStr DateModification;
    ajuint Version;
    ajuint Padding;
    AjPList Attributes;
    AjPList Databaseentries;
    AjPList Genes;
} EnsOOperontranscript;

#define EnsPOperontranscript EnsOOperontranscript*




/* @data EnsPSeqregionsynonym *************************************************
**
** Ensembl Sequence Region Synonym
**
** @attr Use [ajuint] Usage counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPSeqregionsynonymadaptor]
** Ensembl Sequence Region Synonym Adaptor
** @cc Bio::EnsEMBL::SeqRegionSynonym
** @attr Externaldatabase [EnsPExternaldatabase] Ensembl External Database
** @attr Name [AjPStr] Name
** @attr Seqregionidentifier [ajuint] Ensembl Sequence Region identifier
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSSeqregionsynonym
{
    ajuint Use;
    ajuint Identifier;
    EnsPSeqregionsynonymadaptor Adaptor;
    EnsPExternaldatabase Externaldatabase;
    AjPStr Name;
    ajuint Seqregionidentifier;
    ajuint Padding;
} EnsOSeqregionsynonym;

#define EnsPSeqregionsynonym EnsOSeqregionsynonym*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSDATA_H */
/136            1414437294  1010  513   100644  9925      `
/* @include ensdatabaseadaptor ************************************************
**
** Ensembl Database Adaptor functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.28 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:37:32 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSDATABASEADAPTOR_H
#define ENSDATABASEADAPTOR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdatabaseconnection.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

extern const char *ensKDatabaseadaptorRegCollection;
extern const char *ensKDatabaseadaptorRegMulti;
extern const char *ensKDatabaseadaptorRegSpecies;




/* @const EnsMDatabaseadaptorGroups *******************************************
**
** Number of Ensembl Database Adaptor groups
**
** The number of Ensembl Database Adaptor groups has to correlate with the
** EnsEDatabaseadaptorGroup enumeration list and the
** static const char *databaseadaptorGroup[] array. It is used by the
** ensregistry.[ch] module.
**
******************************************************************************/

#define EnsMDatabaseadaptorGroups 17




/* @enum EnsEDatabaseadaptorGroup *********************************************
**
** Ensembl Database Adaptor Group enumeration
**
** @value ensEDatabaseadaptorGroupNULL Null
** @value ensEDatabaseadaptorGroupCore Core
** @value ensEDatabaseadaptorGroupVega Vega
** @value ensEDatabaseadaptorGroupOtherFeatures Other features
** @value ensEDatabaseadaptorGroupCopyDNA DNA reference
** @value ensEDatabaseadaptorGroupGeneticVariation Genetic variation
** @value ensEDatabaseadaptorGroupFunctionalGenomics Functional genomics
** @value ensEDatabaseadaptorGroupComparativeGenomics Comparative genomics
** @value ensEDatabaseadaptorGroupOntology Ontology
** @value ensEDatabaseadaptorGroupQualityCheck Quality check
** @value ensEDatabaseadaptorGroupPipeline Pipleine
** @value ensEDatabaseadaptorGroupHive Hive
** @value ensEDatabaseadaptorGroupCoreExpressionEST Core expression EST
** @value ensEDatabaseadaptorGroupCoreExpressionGNF Core expression GNF
** @value ensEDatabaseadaptorGroupAncestral Ancestral
** @value ensEDatabaseadaptorGroupWebsite Webiste
** @value ensEDatabaseadaptorGroupProduction Production
** @@
******************************************************************************/

typedef enum EnsODatabaseadaptorGroup
{
    ensEDatabaseadaptorGroupNULL,
    ensEDatabaseadaptorGroupCore,
    ensEDatabaseadaptorGroupVega,
    ensEDatabaseadaptorGroupOtherFeatures,
    ensEDatabaseadaptorGroupCopyDNA,
    ensEDatabaseadaptorGroupGeneticVariation,
    ensEDatabaseadaptorGroupFunctionalGenomics,
    ensEDatabaseadaptorGroupComparativeGenomics,
    ensEDatabaseadaptorGroupOntology,
    ensEDatabaseadaptorGroupQualityCheck,
    ensEDatabaseadaptorGroupPipeline,
    ensEDatabaseadaptorGroupHive,
    ensEDatabaseadaptorGroupCoreExpressionEST,
    ensEDatabaseadaptorGroupCoreExpressionGNF,
    ensEDatabaseadaptorGroupAncestral,
    ensEDatabaseadaptorGroupWebsite,
    ensEDatabaseadaptorGroupProduction
} EnsEDatabaseadaptorGroup;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPDatabaseadaptor **************************************************
**
** Ensembl Database Adaptor.
**
** Holds the Ensembl Database Group, the species name and the Ensembl
** Database Connection object connected to this SQL database.
**
** @alias EnsSDatabaseadaptor
** @alias EnsODatabaseadaptor
**
** @alias EnsPAttributeadaptor
** @alias EnsPDatabaseentryadaptor
** @alias EnsPGvgenotypeadaptor
** @alias EnsPGvsynonymadaptor
** @alias EnsPMarkermaplocationadaptor
** @alias EnsPMarkersynonymadaptor
** @alias EnsPSupportingfeatureadaptor
**
** @attr Databaseconnection [EnsPDatabaseconnection]
** Ensembl Database Connection
** @attr Species [AjPStr] Species
** @attr SpeciesNames [AjPList]
** AJAX List of AJAX String (species name) objects
** @attr Group [EnsEDatabaseadaptorGroup]
** Ensembl Database Adaptor Group enumeration
** @attr Multispecies [AjBool] Multi-species database
** @attr Identifier [ajuint] Species identifier, defaults to 1U
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSDatabaseadaptor
{
    EnsPDatabaseconnection Databaseconnection;
    AjPStr Species;
    AjPList SpeciesNames;
    EnsEDatabaseadaptorGroup Group;
    AjBool Multispecies;
    ajuint Identifier;
    ajuint Padding;
} EnsODatabaseadaptor;

#define EnsPDatabaseadaptor EnsODatabaseadaptor*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Database Adaptor */

EnsPDatabaseadaptor ensRegistryGetDatabaseadaptor(
    EnsEDatabaseadaptorGroup dbag,
    AjPStr alias);

EnsPDatabaseadaptor ensRegistryGetReferenceadaptor(EnsPDatabaseadaptor dba);

EnsPDatabaseadaptor ensDatabaseadaptorNewDatabasename(
    EnsPDatabaseconnection dbc,
    AjPStr database);

EnsPDatabaseadaptor ensDatabaseadaptorNewIni(EnsPDatabaseconnection dbc,
                                             AjPStr database,
                                             AjPStr species,
                                             EnsEDatabaseadaptorGroup dbag,
                                             AjBool multi,
                                             ajuint identifier);

EnsPDatabaseadaptor ensDatabaseadaptorNewUrl(const AjPStr url);

void ensDatabaseadaptorDel(EnsPDatabaseadaptor *Pdba);

EnsPDatabaseconnection ensDatabaseadaptorGetDatabaseconnection(
    const EnsPDatabaseadaptor dba);

EnsEDatabaseadaptorGroup ensDatabaseadaptorGetGroup(
    const EnsPDatabaseadaptor dba);

ajuint ensDatabaseadaptorGetIdentifier(
    const EnsPDatabaseadaptor dba);

AjBool ensDatabaseadaptorGetMultispecies(
    const EnsPDatabaseadaptor dba);

AjPStr ensDatabaseadaptorGetSpecies(
    const EnsPDatabaseadaptor dba);

const AjPList ensDatabaseadaptorLoadSpeciesnames(EnsPDatabaseadaptor dba);

AjBool ensDatabaseadaptorSetDatabaseconnection(EnsPDatabaseadaptor dba,
                                               EnsPDatabaseconnection dbc);

AjBool ensDatabaseadaptorSetGroup(EnsPDatabaseadaptor dba,
                                  EnsEDatabaseadaptorGroup dbag);

AjBool ensDatabaseadaptorSetIdentifier(EnsPDatabaseadaptor dba,
                                       ajuint identifier);

AjBool ensDatabaseadaptorSetMultispecies(EnsPDatabaseadaptor dba,
                                         AjBool multi);

AjBool ensDatabaseadaptorSetSpecies(EnsPDatabaseadaptor dba, AjPStr species);

AjBool ensDatabaseadaptorTrace(const EnsPDatabaseadaptor dba, ajuint level);

AjBool ensDatabaseadaptorMatch(const EnsPDatabaseadaptor dba1,
                               const EnsPDatabaseadaptor dba2);

AjBool ensDatabaseadaptorMatchcomponents(const EnsPDatabaseadaptor dba,
                                         const EnsPDatabaseconnection dbc,
                                         const AjPStr species,
                                         EnsEDatabaseadaptorGroup dbag,
                                         AjBool multi,
                                         ajuint identifier);

AjBool ensDatabaseadaptorDisconnect(EnsPDatabaseadaptor dba);

AjBool ensDatabaseadaptorEscapeC(EnsPDatabaseadaptor dba,
                                 char **Ptxt,
                                 const AjPStr str);

AjBool ensDatabaseadaptorEscapeS(EnsPDatabaseadaptor dba,
                                 AjPStr *Pstr,
                                 const AjPStr str);

AjBool ensDatabaseadaptorSqlstatementDel(EnsPDatabaseadaptor dba,
                                         AjPSqlstatement *Psqls);

AjPSqlstatement ensDatabaseadaptorSqlstatementNew(EnsPDatabaseadaptor dba,
                                                  const AjPStr statement);

AjBool ensDatabaseadaptorFetchSchemabuild(EnsPDatabaseadaptor dba,
                                          AjPStr *Pbuild);

EnsEDatabaseadaptorGroup ensDatabaseadaptorGroupFromStr(const AjPStr group);

const char *ensDatabaseadaptorGroupToChar(EnsEDatabaseadaptorGroup dbag);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSDATABASEADAPTOR_H */

/158            1414437294  1010  513   100644  6559      `
/* @include ensdatabaseconnection *********************************************
**
** Ensembl Database Connection functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.16 $
** @modified $Date: 2012/02/04 10:30:23 $ by $Author: mks $
** @modified $Date: 2012/02/04 10:30:23 $ by $Author: mks $
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSDATABASECONNECTION_H
#define ENSDATABASECONNECTION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPDatabaseconnection ***********************************************
**
** Ensembl Database Connection.
**
** Holds information to connect to a particular SQL database on a
** relational database management system (RDBMS) instance.
**
** @alias EnsSDatabaseconnection
** @alias EnsODatabaseconnection
**
** @attr Sqlconnection [AjPSqlconnection] AJAX SQL Connection
** @attr Username [AjPStr] User name
** @attr Password [AjPStr] Password
** @attr Hostname [AjPStr] Host name or IP address
** @attr Hostport [AjPStr] Host TCP/IP port
** @attr Socketfile [AjPStr] UNIX socket file
** @attr Databasename [AjPStr] SQL database name
** @attr Autodisconnect [AjBool] Automatic disconnections
** @attr Sqlconnectionclient [AjESqlconnectionClient] AJAX SQL
**                                                    Connection client
** @attr Timeout [ajuint] Timeout in seconds for closing idle, non-interactive
**                        connections
** @attr Use [ajuint] Use counter
**
** @@
******************************************************************************/

typedef struct EnsSDatabaseconnection
{
    AjPSqlconnection Sqlconnection;
    AjPStr Username;
    AjPStr Password;
    AjPStr Hostname;
    AjPStr Hostport;
    AjPStr Socketfile;
    AjPStr Databasename;
    AjBool Autodisconnect;
    AjESqlconnectionClient Sqlconnectionclient;
    ajuint Timeout;
    ajuint Use;
} EnsODatabaseconnection;

#define EnsPDatabaseconnection EnsODatabaseconnection*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

EnsPDatabaseconnection ensDatabaseconnectionNewCpy(
    EnsPDatabaseconnection dbc,
    AjPStr database);

EnsPDatabaseconnection ensDatabaseconnectionNewIni(
    AjESqlconnectionClient client,
    AjPStr user,
    AjPStr password,
    AjPStr host,
    AjPStr port,
    AjPStr socketfile,
    AjPStr database,
    ajuint dbctimeout);

EnsPDatabaseconnection ensDatabaseconnectionNewRef(EnsPDatabaseconnection dbc);

EnsPDatabaseconnection ensDatabaseconnectionNewUrl(const AjPStr url);

void ensDatabaseconnectionDel(EnsPDatabaseconnection *Pdbc);

AjBool ensDatabaseconnectionGetAutodisconnect(
    const EnsPDatabaseconnection dbc);

AjPStr ensDatabaseconnectionGetDatabasename(
    const EnsPDatabaseconnection dbc);

AjPStr ensDatabaseconnectionGetHostname(
    const EnsPDatabaseconnection dbc);

AjPStr ensDatabaseconnectionGetHostport(
    const EnsPDatabaseconnection dbc);

AjPStr ensDatabaseconnectionGetPassword(
    const EnsPDatabaseconnection dbc);

AjPStr ensDatabaseconnectionGetSocketfile(
    const EnsPDatabaseconnection dbc);

AjPSqlconnection ensDatabaseconnectionGetSqlconnection(
    const EnsPDatabaseconnection dbc);

AjESqlconnectionClient ensDatabaseconnectionGetSqlconnectionclient(
    const EnsPDatabaseconnection dbc);

ajuint ensDatabaseconnectionGetTimeout(
    const EnsPDatabaseconnection dbc);

AjPStr ensDatabaseconnectionGetUsername(
    const EnsPDatabaseconnection dbc);

AjBool ensDatabaseconnectionSetAutodisconnect(
    EnsPDatabaseconnection dbc,
    AjBool autodisconnect);

AjBool ensDatabaseconnectionTrace(const EnsPDatabaseconnection dbc,
                                  ajuint level);

AjBool ensDatabaseconnectionIsConnected(const EnsPDatabaseconnection dbc);

AjBool ensDatabaseconnectionMatch(const EnsPDatabaseconnection dbc1,
                                  const EnsPDatabaseconnection dbc2);

AjBool ensDatabaseconnectionConnect(EnsPDatabaseconnection dbc);

AjBool ensDatabaseconnectionDisconnect(EnsPDatabaseconnection dbc);

AjBool ensDatabaseconnectionEscapeC(EnsPDatabaseconnection dbc,
                                    char **Ptxt,
                                    const AjPStr str);

AjBool ensDatabaseconnectionEscapeS(EnsPDatabaseconnection dbc,
                                    AjPStr *Pstr,
                                    const AjPStr str);

AjBool ensDatabaseconnectionSqlstatementDel(
    EnsPDatabaseconnection dbc,
    AjPSqlstatement *Psqls);

AjPSqlstatement ensDatabaseconnectionSqlstatementNew(
    EnsPDatabaseconnection dbc,
    const AjPStr statement);

AjBool ensDatabaseconnectionFetchUrl(const EnsPDatabaseconnection dbc,
                                     AjPStr *Purl);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSDATABASECONNECTION_H */

/183            1414437294  1010  513   100644  19766     `
/* @include ensdatabaseentry **************************************************
**
** Ensembl Database Entry functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.30 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:05:09 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSDATABASEENTRY_H
#define ENSDATABASEENTRY_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensanalysis.h"
#include "ensexternaldatabase.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsEOntologylinkageType **********************************************
**
** Ensembl Ontology Linkage Type enumeration
**
** @value ensEOntologylinkageTypeNULL
** Null
** @value ensEOntologylinkageTypeIC
** Inferred by Curator
** @value ensEOntologylinkageTypeIDA
** Inferred from Direct Assay
** @value ensEOntologylinkageTypeIEA
** Inferred from Electronic Annotation
** @value ensEOntologylinkageTypeIEP
** Inferred from Expression Pattern
** @value ensEOntologylinkageTypeIGI
** Inferred from Genetic Interaction
** @value ensEOntologylinkageTypeIMP
** Inferred from Mutant Phenotype
** @value ensEOntologylinkageTypeIPI
** Inferred from Physical Interaction
** @value ensEOntologylinkageTypeISS
** Inferred from Sequence or Structural Similarity
** @value ensEOntologylinkageTypeNAS
** Non-traceable Author Statement
** @value ensEOntologylinkageTypeND
** No biological Data available
** @value ensEOntologylinkageTypeTAS
** Traceable Author Statement
** @value ensEOntologylinkageTypeNR
** Not Recorded
** @value ensEOntologylinkageTypeRCA
** Inferred from Reviewed Computational Analysis
** @value ensEOntologylinkageTypeEXP
** Inferred from Experiment
** @value ensEOntologylinkageTypeISO
** Inferred from Sequence Orthology
** @value ensEOntologylinkageTypeISA
** Inferred from Sequence Alignment
** @value ensEOntologylinkageTypeISM
** Inferred from Sequence Model
** @value ensEOntologylinkageTypeIGC
** Inferred from Genomic Context
** @@
******************************************************************************/

typedef enum EnsOOntologylinkageType
{
    ensEOntologylinkageTypeNULL,
    ensEOntologylinkageTypeIC,
    ensEOntologylinkageTypeIDA,
    ensEOntologylinkageTypeIEA,
    ensEOntologylinkageTypeIEP,
    ensEOntologylinkageTypeIGI,
    ensEOntologylinkageTypeIMP,
    ensEOntologylinkageTypeIPI,
    ensEOntologylinkageTypeISS,
    ensEOntologylinkageTypeNAS,
    ensEOntologylinkageTypeND,
    ensEOntologylinkageTypeTAS,
    ensEOntologylinkageTypeNR,
    ensEOntologylinkageTypeRCA,
    ensEOntologylinkageTypeEXP,
    ensEOntologylinkageTypeISO,
    ensEOntologylinkageTypeISA,
    ensEOntologylinkageTypeISM,
    ensEOntologylinkageTypeIGC
} EnsEOntologylinkageType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl External Reference */

EnsPExternalreference ensExternalreferenceNewCpy(
    const EnsPExternalreference er);

EnsPExternalreference ensExternalreferenceNewIni(
    ajuint identifier,
    EnsPAnalysis analysis,
    EnsPExternaldatabase edb,
    AjPStr primaryid,
    AjPStr displayid,
    AjPStr version,
    AjPStr description,
    AjPStr linkageannotation,
    AjPStr infotext,
    EnsEExternalreferenceInfotype erit,
    EnsEExternalreferenceObjecttype erot,
    ajuint objectid);

EnsPExternalreference ensExternalreferenceNewRef(
    EnsPExternalreference er);

void ensExternalreferenceDel(
    EnsPExternalreference *Per);

EnsPAnalysis ensExternalreferenceGetAnalysis(
    const EnsPExternalreference er);

AjPStr ensExternalreferenceGetDescription(
    const EnsPExternalreference er);

AjPStr ensExternalreferenceGetDisplayidentifier(
    const EnsPExternalreference er);

EnsPExternaldatabase ensExternalreferenceGetExternaldatabase(
    const EnsPExternalreference er);

ajuint ensExternalreferenceGetIdentifier(
    const EnsPExternalreference er);

AjPStr ensExternalreferenceGetInfotext(
    const EnsPExternalreference er);

EnsEExternalreferenceInfotype ensExternalreferenceGetInfotype(
    const EnsPExternalreference er);

AjPStr ensExternalreferenceGetLinkageannotation(
    const EnsPExternalreference er);

ajuint ensExternalreferenceGetObjectidentifier(
    const EnsPExternalreference er);

EnsEExternalreferenceObjecttype ensExternalreferenceGetObjecttype(
    const EnsPExternalreference er);

AjPStr ensExternalreferenceGetPrimaryidentifier(
    const EnsPExternalreference er);

AjPStr ensExternalreferenceGetVersion(
    const EnsPExternalreference er);

AjBool ensExternalreferenceSetAnalysis(EnsPExternalreference er,
                                       EnsPAnalysis analysis);

AjBool ensExternalreferenceSetDescription(EnsPExternalreference er,
                                          AjPStr description);

AjBool ensExternalreferenceSetDisplayidentifier(EnsPExternalreference er,
                                                AjPStr displayid);

AjBool ensExternalreferenceSetExternaldatabase(EnsPExternalreference er,
                                               EnsPExternaldatabase edb);

AjBool ensExternalreferenceSetIdentifier(EnsPExternalreference er,
                                         ajuint identifier);

AjBool ensExternalreferenceSetInfotext(EnsPExternalreference er,
                                       AjPStr infotext);

AjBool ensExternalreferenceSetInfotype(EnsPExternalreference er,
                                       EnsEExternalreferenceInfotype erit);

AjBool ensExternalreferenceSetLinkageannotation(EnsPExternalreference er,
                                                AjPStr linkageannotation);

AjBool ensExternalreferenceSetObjectidentifier(EnsPExternalreference er,
                                               ajuint objectid);

AjBool ensExternalreferenceSetObjecttype(EnsPExternalreference er,
                                         EnsEExternalreferenceObjecttype erot);

AjBool ensExternalreferenceSetPrimaryidentifier(EnsPExternalreference er,
                                                AjPStr primaryid);

AjBool ensExternalreferenceSetVersion(EnsPExternalreference er,
                                      AjPStr version);

AjBool ensExternalreferenceTrace(const EnsPExternalreference er, ajuint level);

size_t ensExternalreferenceCalculateMemsize(const EnsPExternalreference er);

EnsEExternalreferenceInfotype ensExternalreferenceInfotypeFromStr(
    const AjPStr infotype);

const char *ensExternalreferenceInfotypeToChar(
    EnsEExternalreferenceInfotype erit);

EnsEExternalreferenceObjecttype ensExternalreferenceObjecttypeFromStr(
    const AjPStr objecttype);

const char *ensExternalreferenceObjecttypeToChar(
    EnsEExternalreferenceObjecttype erot);

/* Ensembl Identity Reference */

EnsPIdentityreference ensIdentityreferenceNewCpy(
    const EnsPIdentityreference ir);

EnsPIdentityreference ensIdentityreferenceNewIni(AjPStr cigar,
                                                 ajint qstart,
                                                 ajint qend,
                                                 ajint qidentity,
                                                 ajint tstart,
                                                 ajint tend,
                                                 ajint tidentity,
                                                 double score,
                                                 double evalue);

EnsPIdentityreference ensIdentityreferenceNewRef(
    EnsPIdentityreference ir);

void ensIdentityreferenceDel(EnsPIdentityreference *Pir);

AjPStr ensIdentityreferenceGetCigar(const EnsPIdentityreference ir);

double ensIdentityreferenceGetEvalue(const EnsPIdentityreference ir);

ajint ensIdentityreferenceGetQueryEnd(const EnsPIdentityreference ir);

ajint ensIdentityreferenceGetQueryIdentity(const EnsPIdentityreference ir);

ajint ensIdentityreferenceGetQueryStart(const EnsPIdentityreference ir);

double ensIdentityreferenceGetScore(const EnsPIdentityreference ir);

ajint ensIdentityreferenceGetTargetEnd(const EnsPIdentityreference ir);

ajint ensIdentityreferenceGetTargetIdentity(const EnsPIdentityreference ir);

ajint ensIdentityreferenceGetTargetStart(const EnsPIdentityreference ir);

AjBool ensIdentityreferenceSetCigar(EnsPIdentityreference ir,
                                    AjPStr cigar);

AjBool ensIdentityreferenceSetEvalue(EnsPIdentityreference ir,
                                     double evalue);

AjBool ensIdentityreferenceSetQueryEnd(EnsPIdentityreference ir,
                                       ajint qend);

AjBool ensIdentityreferenceSetQueryIdentity(EnsPIdentityreference ir,
                                            ajint qidentity);

AjBool ensIdentityreferenceSetQueryStart(EnsPIdentityreference ir,
                                         ajint qstart);

AjBool ensIdentityreferenceSetScore(EnsPIdentityreference ir,
                                    double score);

AjBool ensIdentityreferenceSetTargetEnd(EnsPIdentityreference ir,
                                        ajint tend);

AjBool ensIdentityreferenceSetTargetIdentity(EnsPIdentityreference ir,
                                             ajint tidentity);

AjBool ensIdentityreferenceSetTargetStart(EnsPIdentityreference ir,
                                          ajint tstart);

AjBool ensIdentityreferenceTrace(const EnsPIdentityreference ir, ajuint level);

size_t ensIdentityreferenceCalculateMemsize(const EnsPIdentityreference ir);

/* Ensembl Ontology Linkage */

EnsPOntologylinkage ensOntologylinkageNewCpy(
    const EnsPOntologylinkage ol);

EnsPOntologylinkage ensOntologylinkageNewIni(
    AjPStr linkagetype,
    EnsPDatabaseentry source);

EnsPOntologylinkage ensOntologylinkageNewRef(
    EnsPOntologylinkage ol);

void ensOntologylinkageDel(EnsPOntologylinkage *Pol);

/* Ensembl Ontology Linkage Type */

EnsEOntologylinkageType ensOntologylinkageTypeFromStr(const AjPStr type);

const char *ensOntologylinkageTypeToChar(EnsEOntologylinkageType olt);

/* Ensembl Database Entry */

EnsPDatabaseentry ensDatabaseentryNewCpy(const EnsPDatabaseentry dbe);

EnsPDatabaseentry ensDatabaseentryNewIni(
    EnsPDatabaseentryadaptor dbea,
    ajuint identifier,
    EnsPAnalysis analysis,
    EnsPExternaldatabase edb,
    AjPStr primaryid,
    AjPStr displayid,
    AjPStr version,
    AjPStr description,
    AjPStr linkageannotation,
    AjPStr infotext,
    EnsEExternalreferenceInfotype erit,
    EnsEExternalreferenceObjecttype erot,
    ajuint objectid);

EnsPDatabaseentry ensDatabaseentryNewRef(EnsPDatabaseentry dbe);

void ensDatabaseentryDel(EnsPDatabaseentry *Pdbe);

EnsPDatabaseentryadaptor ensDatabaseentryGetAdaptor(
    const EnsPDatabaseentry dbe);

ajuint ensDatabaseentryGetIdentifier(
    const EnsPDatabaseentry dbe);

const AjPList ensDatabaseentryGetOntologylinkages(
    const EnsPDatabaseentry dbe);

AjPList ensDatabaseentryGetSynonyms(
    const EnsPDatabaseentry dbe);

AjBool ensDatabaseentryTrace(const EnsPDatabaseentry dbe, ajuint level);

size_t ensDatabaseentryCalculateMemsize(const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetDbDisplayname(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetDbName(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetDbRelease(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetDescription(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetDisplayidentifier(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetInfotext(
    const EnsPDatabaseentry dbe);

EnsEExternalreferenceInfotype ensDatabaseentryGetInfotype(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetLinkageannotation(
    const EnsPDatabaseentry dbe);

ajuint ensDatabaseentryGetObjectidentifier(
    const EnsPDatabaseentry dbe);

EnsEExternalreferenceObjecttype ensDatabaseentryGetObjecttype(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetPrimaryidentifier(
    const EnsPDatabaseentry dbe);

ajint ensDatabaseentryGetPriority(
    const EnsPDatabaseentry dbe);

EnsEExternaldatabaseStatus ensDatabaseentryGetStatus(
    const EnsPDatabaseentry dbe);

EnsEExternaldatabaseType ensDatabaseentryGetType(
    const EnsPDatabaseentry dbe);

AjPStr ensDatabaseentryGetVersion(
    const EnsPDatabaseentry dbe);

AjBool ensDatabaseentryAddOntologylinkage(EnsPDatabaseentry dbe,
                                          AjPStr linkagetype,
                                          EnsPDatabaseentry source);

AjBool ensDatabaseentryClearOntologylinkages(EnsPDatabaseentry dbe);

AjBool ensDatabaseentryFetchAllDependents(
    EnsPDatabaseentry dbe,
    AjPList dbes);

AjBool ensDatabaseentryFetchAllDependentsByGene(
    EnsPDatabaseentry dbe,
    const EnsPGene gene,
    AjPList dbes);

AjBool ensDatabaseentryFetchAllDependentsByTranscript(
    EnsPDatabaseentry dbe,
    const EnsPTranscript transcript,
    AjPList dbes);

AjBool ensDatabaseentryFetchAllDependentsByTranslation(
    EnsPDatabaseentry dbe,
    const EnsPTranslation translation,
    AjPList dbes);

AjBool ensDatabaseentryFetchAllLinkagetypes(const EnsPDatabaseentry dbe,
                                            AjPList types);

AjBool ensDatabaseentryFetchAllMasters(
    EnsPDatabaseentry dbe,
    AjPList dbes);

AjBool ensDatabaseentryFetchAllMastersByGene(
    EnsPDatabaseentry dbe,
    const EnsPGene gene,
    AjPList dbes);

AjBool ensDatabaseentryFetchAllMastersByTranscript(
    EnsPDatabaseentry dbe,
    const EnsPTranscript transcript,
    AjPList dbes);

AjBool ensDatabaseentryFetchAllMastersByTranslation(
    EnsPDatabaseentry dbe,
    const EnsPTranslation translation,
    AjPList dbes);

/* Ensembl Database Entry Adaptor */

EnsPDatabaseentryadaptor ensRegistryGetDatabaseentryadaptor(
    EnsPDatabaseadaptor dba);

EnsPDatabaseadaptor ensDatabaseentryadaptorGetDatabaseadaptor(
    EnsPDatabaseentryadaptor dbea);

AjBool ensDatabaseentryadaptorFetchAllDependents(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllDependentsByGene(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    const EnsPGene gene,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllDependentsByTranscript(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    const EnsPTranscript transcript,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllDependentsByTranslation(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    const EnsPTranslation translation,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllMasters(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllMastersByGene(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    const EnsPGene gene,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllMastersByTranscript(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    const EnsPTranscript transcript,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllMastersByTranslation(
    EnsPDatabaseentryadaptor dbea,
    const EnsPDatabaseentry dbe,
    const EnsPTranslation translation,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllbyDescription(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr description,
    const AjPStr dbname,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllbyGene(
    EnsPDatabaseentryadaptor dbea,
    const EnsPGene gene,
    const AjPStr dbname,
    EnsEExternaldatabaseType dbtype,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllbyName(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr name,
    const AjPStr dbname,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllbyObject(
    EnsPDatabaseentryadaptor dbea,
    ajuint objectidentifier,
    const AjPStr objecttype,
    const AjPStr dbname,
    EnsEExternaldatabaseType dbtype,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllbySource(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr source,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllbyTranscript(
    EnsPDatabaseentryadaptor dbea,
    const EnsPTranscript transcript,
    const AjPStr dbname,
    EnsEExternaldatabaseType dbtype,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchAllbyTranslation(
    EnsPDatabaseentryadaptor dbea,
    const EnsPTranslation translation,
    const AjPStr dbname,
    EnsEExternaldatabaseType dbtype,
    AjPList dbes);

AjBool ensDatabaseentryadaptorFetchByAccession(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr dbname,
    const AjPStr accession,
    EnsPDatabaseentry *Pdbe);

AjBool ensDatabaseentryadaptorFetchByIdentifier(
    EnsPDatabaseentryadaptor dbea,
    ajuint identifier,
    EnsPDatabaseentry *Pdbe);

AjBool ensDatabaseentryadaptorRetrieveAllGeneidentifiersByExternaldatabasename(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr dbname,
    AjPTable identifiers);

AjBool ensDatabaseentryadaptorRetrieveAllGeneidentifiersByExternalname(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr name,
    const AjPStr dbname,
    AjBool override,
    AjPTable identifiers);

AjBool ensDatabaseentryadaptorRetrieveAllTranscriptidentifiersByExternaldatabasename(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr dbname,
    AjPTable identifiers);

AjBool ensDatabaseentryadaptorRetrieveAllTranscriptidentifiersByExternalname(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr name,
    const AjPStr dbname,
    AjBool override,
    AjPTable identifiers);

AjBool ensDatabaseentryadaptorRetrieveAllTranslationidentifiersByExternaldatabasename(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr dbname,
    AjPTable identifiers);

AjBool ensDatabaseentryadaptorRetrieveAllTranslationidentifiersByExternalname(
    EnsPDatabaseentryadaptor dbea,
    const AjPStr name,
    const AjPStr dbname,
    AjBool override,
    AjPTable identifiers);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSDATABASEENTRY_H */
ensdensity.h/   1414437294  1010  513   100644  11381     `
/* @include ensdensity ********************************************************
**
** Ensembl Density functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.22 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:42:27 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSDENSITY_H
#define ENSDENSITY_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPDensityfeatureadaptor *******************************************
**
** Ensembl Density Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** # Bio::EnsEMBL::DBSQL::DensityFeatureAdaptor
** ##
******************************************************************************/

#define EnsPDensityfeatureadaptor EnsPFeatureadaptor




/* @enum EnsEDensitytypeType **************************************************
**
** Ensembl Density Type type enumeration
**
** @value ensEDensitytypeTypeNULL Null
** @value ensEDensitytypeTypeSum Sum
** @value ensEDensitytypeTypeRatio Ratio
** @@
******************************************************************************/

typedef enum EnsODensitytypeType
{
    ensEDensitytypeTypeNULL,
    ensEDensitytypeTypeSum,
    ensEDensitytypeTypeRatio
} EnsEDensitytypeType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPDensitytypeadaptor ***********************************************
**
** Ensembl Density Type Adaptor.
**
** @alias EnsSDensitytypeadaptor
** @alias EnsODensitytypeadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @@
******************************************************************************/

typedef struct EnsSDensitytypeadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
} EnsODensitytypeadaptor;

#define EnsPDensitytypeadaptor EnsODensitytypeadaptor*




/* @data EnsPDensitytype ******************************************************
**
** Ensembl Density Type.
**
** @alias EnsSDensitytype
** @alias EnsODensitytype
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPDensitytypeadaptor] Ensembl Density Type Adaptor
** @cc Bio::EnsEMBL::Densitytype
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @attr Type [EnsEDensitytypeType] Type enumeration
** @attr Size [ajuint] Block size
** @attr Features [ajuint] Number of Ensembl Density Features per
**                         Ensembl Sequence Region
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSDensitytype
{
    ajuint Use;
    ajuint Identifier;
    EnsPDensitytypeadaptor Adaptor;
    EnsPAnalysis Analysis;
    EnsEDensitytypeType Type;
    ajuint Size;
    ajuint Features;
    ajuint Padding;
} EnsODensitytype;

#define EnsPDensitytype EnsODensitytype*




/* @data EnsPDensityfeature ***************************************************
**
** Ensembl Density Feature.
**
** @alias EnsSDensityfeature
** @alias EnsODensityfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPDensityfeatureadaptor] Ensembl Density Feature Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Densityfeature
** @attr Densitytype [EnsPDensitytype] Ensembl Density Type
** @attr Value [float] Value
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSDensityfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPDensityfeatureadaptor Adaptor;
    EnsPFeature Feature;
    EnsPDensitytype Densitytype;
    float Value;
    ajuint Padding;
} EnsODensityfeature;

#define EnsPDensityfeature EnsODensityfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Density Type */

EnsPDensitytype ensDensitytypeNewCpy(const EnsPDensitytype dt);

EnsPDensitytype ensDensitytypeNewIni(EnsPDensitytypeadaptor dta,
                                     ajuint identifier,
                                     EnsPAnalysis analysis,
                                     EnsEDensitytypeType type,
                                     ajuint size,
                                     ajuint features);

EnsPDensitytype ensDensitytypeNewRef(EnsPDensitytype dt);

void ensDensitytypeDel(EnsPDensitytype *Pdt);

EnsPDensitytypeadaptor ensDensitytypeGetAdaptor(const EnsPDensitytype dt);

EnsPAnalysis ensDensitytypeGetAnalysis(const EnsPDensitytype dt);

ajuint ensDensitytypeGetFeatures(const EnsPDensitytype dt);

ajuint ensDensitytypeGetIdentifier(const EnsPDensitytype dt);

ajuint ensDensitytypeGetSize(const EnsPDensitytype dt);

EnsEDensitytypeType ensDensitytypeGetType(const EnsPDensitytype dt);

AjBool ensDensitytypeSetAdaptor(EnsPDensitytype dt,
                                EnsPDensitytypeadaptor dta);

AjBool ensDensitytypeSetIdentifier(EnsPDensitytype dt,
                                   ajuint identifier);

AjBool ensDensitytypeSetAnalysis(EnsPDensitytype dt,
                                 EnsPAnalysis analysis);

AjBool ensDensitytypeSetFeatures(EnsPDensitytype dt,
                                 ajuint features);

AjBool ensDensitytypeSetType(EnsPDensitytype dt,
                             EnsEDensitytypeType type);

AjBool ensDensitytypeSetSize(EnsPDensitytype dt,
                             ajuint size);

AjBool ensDensitytypeTrace(const EnsPDensitytype dt, ajuint level);

size_t ensDensitytypeCalculateMemsize(const EnsPDensitytype dt);

EnsEDensitytypeType ensDensitytypeTypeFromStr(const AjPStr type);

const char *ensDensitytypeTypeToChar(const EnsEDensitytypeType dtt);

/* Ensembl Density Type Adaptor */

EnsPDensitytypeadaptor ensRegistryGetDensitytypeadaptor(
    EnsPDatabaseadaptor dba);

EnsPDensitytypeadaptor ensDensitytypeadaptorNew(
    EnsPDatabaseadaptor dba);

void ensDensitytypeadaptorDel(EnsPDensitytypeadaptor *Pdta);

EnsPBaseadaptor ensDensitytypeadaptorGetBaseadaptor(
    EnsPDensitytypeadaptor dta);

EnsPDatabaseadaptor ensDensitytypeadaptorGetDatabaseadaptor(
    EnsPDensitytypeadaptor dta);

AjBool ensDensitytypeadaptorFetchAll(
    EnsPDensitytypeadaptor dta,
    AjPList dts);

AjBool ensDensitytypeadaptorFetchAllbyAnalysisname(
    EnsPDensitytypeadaptor dta,
    const AjPStr name,
    AjPList dts);

AjBool ensDensitytypeadaptorFetchByIdentifier(
    EnsPDensitytypeadaptor dta,
    ajuint identifier,
    EnsPDensitytype *Pdt);

/* Ensembl Density Feature */

EnsPDensityfeature ensDensityfeatureNewCpy(const EnsPDensityfeature df);

EnsPDensityfeature ensDensityfeatureNewIni(EnsPDensityfeatureadaptor dfa,
                                           ajuint identifier,
                                           EnsPFeature feature,
                                           EnsPDensitytype dt,
                                           float value);

EnsPDensityfeature ensDensityfeatureNewRef(EnsPDensityfeature df);

void ensDensityfeatureDel(EnsPDensityfeature *Pdf);

EnsPDensityfeatureadaptor ensDensityfeatureGetAdaptor(
    const EnsPDensityfeature df);

EnsPDensitytype ensDensityfeatureGetDensitytype(const EnsPDensityfeature df);

EnsPFeature ensDensityfeatureGetFeature(const EnsPDensityfeature df);

ajuint ensDensityfeatureGetIdentifier(const EnsPDensityfeature df);

float ensDensityfeatureGetValue(const EnsPDensityfeature df);

AjBool ensDensityfeatureSetAdaptor(EnsPDensityfeature df,
                                   EnsPDensityfeatureadaptor dfa);

AjBool ensDensityfeatureSetDensitytype(EnsPDensityfeature df,
                                       EnsPDensitytype dt);

AjBool ensDensityfeatureSetFeature(EnsPDensityfeature df,
                                   EnsPFeature feature);

AjBool ensDensityfeatureSetIdentifier(EnsPDensityfeature df,
                                      ajuint identifier);

AjBool ensDensityfeatureSetValue(EnsPDensityfeature df,
                                 float value);

AjBool ensDensityfeatureTrace(const EnsPDensityfeature df, ajuint level);

size_t ensDensityfeatureCalculateMemsize(const EnsPDensityfeature df);

/* AJAX List of Ensembl Density Feature objects */

AjBool ensListDensityfeatureSortEndAscending(AjPList dfs);

AjBool ensListDensityfeatureSortEndDescending(AjPList dfs);

AjBool ensListDensityfeatureSortIdentifierAscending(AjPList dfs);

AjBool ensListDensityfeatureSortStartAscending(AjPList dfs);

AjBool ensListDensityfeatureSortStartDescending(AjPList dfs);

/* Ensembl Density Feature Adaptor */

EnsPDensityfeatureadaptor ensRegistryGetDensityfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPDensityfeatureadaptor ensDensityfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensDensityfeatureadaptorDel(EnsPDensityfeatureadaptor *Pdfa);

EnsPBaseadaptor ensDensityfeatureadaptorGetBaseadaptor(
    EnsPDensityfeatureadaptor dfa);

EnsPDatabaseadaptor ensDensityfeatureadaptorGetDatabaseadaptor(
    EnsPDensityfeatureadaptor dfa);

EnsPFeatureadaptor ensDensityfeatureadaptorGetFeatureadaptor(
    EnsPDensityfeatureadaptor dfa);

AjBool ensDensityfeatureadaptorFetchAllbySlice(
    EnsPDensityfeatureadaptor dfa,
    EnsPSlice slice,
    const AjPStr anname,
    ajuint blocks,
    AjBool interpolate,
    float maxratio,
    AjPList dfs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSDENSITY_H */

ensditag.h/     1414437294  1010  513   100644  12369     `
/* @include ensditag **********************************************************
**
** Ensembl Ditag functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.24 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:43:54 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSDITAG_H
#define ENSDITAG_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPDitagadaptor ****************************************************
**
** Ensembl Ditag Adaptor.
** Defined as an alias in EnsPBaseadaptor.
**
** #alias EnsPBaseadaptor
**
** #cc Bio::EnsEMBL::Map::DBSQL::DitagAdaptor
** ##
******************************************************************************/

#define EnsPDitagadaptor EnsPBaseadaptor




/* @const EnsPDitagfeatureadaptor *********************************************
**
** Ensembl Ditag Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::Map::DBSQL::Ditagfeatureadaptor
** ##
******************************************************************************/

#define EnsPDitagfeatureadaptor EnsPFeatureadaptor




/* @enum EnsEDitagfeatureSide *************************************************
**
** Ensembl Ditag Feature Side enumeration
**
** @value ensEDitagfeatureSideNULL Null
** @value ensEDitagfeatureSideLeft Left side
** @value ensEDitagfeatureSideRight Right side
** @value ensEDitagfeatureSideFull Full
** @@
******************************************************************************/

typedef enum EnsODitagfeatureSide
{
    ensEDitagfeatureSideNULL,
    ensEDitagfeatureSideLeft,
    ensEDitagfeatureSideRight,
    ensEDitagfeatureSideFull
} EnsEDitagfeatureSide;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPDitag ************************************************************
**
** Ensembl Ditag
**
** @alias EnsSDitag
** @alias EnsODitag
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPDitagadaptor] Ensembl Ditag Adaptor
** @cc Bio::EnsEMBL::Map::Ditag
** @attr Name [AjPStr] Name
** @attr Type [AjPStr] Source
** @attr Sequence [AjPStr] Sequence
** @attr Count [ajuint] Count
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSDitag
{
    ajuint Use;
    ajuint Identifier;
    EnsPDitagadaptor Adaptor;
    AjPStr Name;
    AjPStr Type;
    AjPStr Sequence;
    ajuint Count;
    ajuint Padding;
} EnsODitag;

#define EnsPDitag EnsODitag*




/* @data EnsPDitagfeature *****************************************************
**
** Ensembl Ditag Feature
**
** @alias EnsSDitagfeature
** @alias EnsODitagfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPDitagfeatureadaptor] Ensembl Ditag Feature Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Map::DitagFeature
** @attr Ditag [EnsPDitag] Ditag
** @attr Cigar [AjPStr] CIGAR line
** @attr Side [EnsEDitagfeatureSide] Side
** @attr TargetStart [ajint] Target start
** @attr TargetEnd [ajint] Target end
** @attr TargetStrand [ajint] Target strand
** @attr Pairidentifier [ajuint] Pair identifier
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSDitagfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPDitagfeatureadaptor Adaptor;
    EnsPFeature Feature;
    EnsPDitag Ditag;
    AjPStr Cigar;
    EnsEDitagfeatureSide Side;
    ajint TargetStart;
    ajint TargetEnd;
    ajint TargetStrand;
    ajuint Pairidentifier;
    ajuint Padding;
} EnsODitagfeature;

#define EnsPDitagfeature EnsODitagfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Ditag */

EnsPDitag ensDitagNewCpy(const EnsPDitag dt);

EnsPDitag ensDitagNewIni(EnsPDitagadaptor dta,
                         ajuint identifier,
                         AjPStr name,
                         AjPStr type,
                         AjPStr sequence,
                         ajuint count);

EnsPDitag ensDitagNewRef(EnsPDitag dt);

void ensDitagDel(EnsPDitag *Pdt);

EnsPDitagadaptor ensDitagGetAdaptor(const EnsPDitag dt);

ajuint ensDitagGetCount(const EnsPDitag dt);

ajuint ensDitagGetIdentifier(const EnsPDitag dt);

AjPStr ensDitagGetName(const EnsPDitag dt);

AjPStr ensDitagGetSequence(const EnsPDitag dt);

AjPStr ensDitagGetType(const EnsPDitag dt);

AjBool ensDitagSetAdaptor(EnsPDitag dt, EnsPDitagadaptor dta);

AjBool ensDitagSetCount(EnsPDitag dt, ajuint count);

AjBool ensDitagSetIdentifier(EnsPDitag dt, ajuint identifier);

AjBool ensDitagSetName(EnsPDitag dt, AjPStr name);

AjBool ensDitagSetSequence(EnsPDitag dt, AjPStr sequence);

AjBool ensDitagSetType(EnsPDitag dt, AjPStr type);

AjBool ensDitagTrace(const EnsPDitag dt, ajuint level);

size_t ensDitagCalculateMemsize(const EnsPDitag dt);

/* Ensembl Ditag Adaptor */

EnsPDitagadaptor ensRegistryGetDitagadaptor(
    EnsPDatabaseadaptor dba);

EnsPDitagadaptor ensDitagadaptorNew(EnsPDatabaseadaptor dba);

void ensDitagadaptorDel(EnsPDitagadaptor *Pdta);

EnsPBaseadaptor ensDitagadaptorGetBaseadaptor(
    EnsPDitagadaptor dta);

EnsPDatabaseadaptor ensDitagadaptorGetDatabaseadaptor(
    EnsPDitagadaptor dta);

AjBool ensDitagadaptorFetchAll(EnsPDitagadaptor dta,
                               const AjPStr name,
                               const AjPStr type,
                               AjPList dts);

AjBool ensDitagadaptorFetchAllbyIdentifiers(EnsPDitagadaptor dta,
                                            AjPTable dts);

AjBool ensDitagadaptorFetchAllbyName(EnsPDitagadaptor dta,
                                     const AjPStr name,
                                     AjPList dts);

AjBool ensDitagadaptorFetchAllbyType(EnsPDitagadaptor dta,
                                     const AjPStr type,
                                     AjPList dts);

AjBool ensDitagadaptorFetchByIdentifier(EnsPDitagadaptor dta,
                                        ajuint identifier,
                                        EnsPDitag *Pdt);

/* Ensembl Ditag Feature */

EnsPDitagfeature ensDitagfeatureNewCpy(const EnsPDitagfeature dtf);

EnsPDitagfeature ensDitagfeatureNewIni(EnsPDitagfeatureadaptor dtfa,
                                       ajuint identifier,
                                       EnsPFeature feature,
                                       EnsPDitag dt,
                                       AjPStr cigar,
                                       EnsEDitagfeatureSide side,
                                       ajint tstart,
                                       ajint tend,
                                       ajint tstrand,
                                       ajuint pairid);

EnsPDitagfeature ensDitagfeatureNewRef(EnsPDitagfeature dtf);

void ensDitagfeatureDel(EnsPDitagfeature *Pdtf);

EnsPDitagfeatureadaptor ensDitagfeatureGetAdaptor(const EnsPDitagfeature dtf);

AjPStr ensDitagfeatureGetCigar(const EnsPDitagfeature dtf);

EnsPDitag ensDitagfeatureGetDitag(const EnsPDitagfeature dtf);

EnsPFeature ensDitagfeatureGetFeature(const EnsPDitagfeature dtf);

ajuint ensDitagfeatureGetIdentifier(const EnsPDitagfeature dtf);

ajuint ensDitagfeatureGetPairidentifier(const EnsPDitagfeature dtf);

EnsEDitagfeatureSide ensDitagfeatureGetSide(const EnsPDitagfeature dtf);

ajint ensDitagfeatureGetTargetEnd(const EnsPDitagfeature dtf);

ajint ensDitagfeatureGetTargetStart(const EnsPDitagfeature dtf);

ajint ensDitagfeatureGetTargetStrand(const EnsPDitagfeature dtf);

AjBool ensDitagfeatureSetAdaptor(EnsPDitagfeature dtf,
                                 EnsPDitagfeatureadaptor dtfa);

AjBool ensDitagfeatureSetIdentifier(EnsPDitagfeature dtf, ajuint identifier);

AjBool ensDitagfeatureSetFeature(EnsPDitagfeature dtf, EnsPFeature feature);

AjBool ensDitagfeatureSetDitag(EnsPDitagfeature dtf, EnsPDitag dt);

AjBool ensDitagfeatureSetCigar(EnsPDitagfeature dtf, AjPStr cigar);

AjBool ensDitagfeatureSetSide(EnsPDitagfeature dtf, EnsEDitagfeatureSide side);

AjBool ensDitagfeatureSetTargetStart(EnsPDitagfeature dtf, ajint tstart);

AjBool ensDitagfeatureSetTargetEnd(EnsPDitagfeature dtf, ajint tend);

AjBool ensDitagfeatureSetTargetStrand(EnsPDitagfeature dtf, ajint tstrand);

AjBool ensDitagfeatureSetPairidentifier(EnsPDitagfeature dtf, ajuint pairid);

AjBool ensDitagfeatureTrace(const EnsPDitagfeature dtf, ajuint level);

size_t ensDitagfeatureCalculateMemsize(const EnsPDitagfeature dtf);

EnsEDitagfeatureSide ensDitagfeatureSideFromStr(const AjPStr side);

const char *ensDitagfeatureSideToChar(const EnsEDitagfeatureSide dtfs);

/* AJAX List of Ensembl Ditag Feature objects */

AjBool ensListDitagfeatureSortEndAscending(AjPList dtfs);

AjBool ensListDitagfeatureSortEndDescending(AjPList dtfs);

AjBool ensListDitagfeatureSortIdentifierAscending(AjPList dtfs);

AjBool ensListDitagfeatureSortStartAscending(AjPList dtfs);

AjBool ensListDitagfeatureSortStartDescending(AjPList dtfs);

/* Ensembl Ditag Feature Adaptor */

EnsPDitagfeatureadaptor ensRegistryGetDitagfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPDitagfeatureadaptor ensDitagfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensDitagfeatureadaptorDel(EnsPDitagfeatureadaptor *Pdtfa);

EnsPBaseadaptor ensDitagfeatureadaptorGetBaseadaptor(
    EnsPDitagfeatureadaptor dtfa);

EnsPDatabaseadaptor ensDitagfeatureadaptorGetDatabaseadaptor(
    EnsPDitagfeatureadaptor dtfa);

EnsPFeatureadaptor ensDitagfeatureadaptorGetFeatureadaptor(
    EnsPDitagfeatureadaptor dtfa);

AjBool ensDitagfeatureadaptorFetchAllbyDitag(
    EnsPDitagfeatureadaptor dtfa,
    const EnsPDitag dt,
    AjPList dtfs);

AjBool ensDitagfeatureadaptorFetchAllbySlice(
    EnsPDitagfeatureadaptor dtfa,
    EnsPSlice slice,
    const AjPStr type,
    const AjPStr anname,
    AjPList dtfs);

AjBool ensDitagfeatureadaptorFetchAllbyType(
    EnsPDitagfeatureadaptor dtfa,
    const AjPStr type,
    AjPList dtfs);

AjBool ensDitagfeatureadaptorFetchByIdentifier(
    EnsPDitagfeatureadaptor dtfa,
    ajuint identifier,
    EnsPDitagfeature *Pdtf);

AjBool ensDitagfeatureadaptorRetrieveAllIdentifiers(
    EnsPDitagfeatureadaptor dtfa,
    AjPList identifiers);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSDITAG_H */

ensembl.h/      1414437294  1010  513   100644  4063      `
/* @include ensembl ***********************************************************
**
** Ensembl Master Include file
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.13 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:44:36 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSEMBL_H
#define ENSEMBL_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

#include "ensalign.h"
#include "ensanalysis.h"
#include "ensassembly.h"
#include "ensassemblyexception.h"
#include "ensassemblymapper.h"
#include "ensattribute.h"
#include "ensbaseadaptor.h"
#include "enscache.h"
#include "enscoordsystem.h"
#include "ensdata.h"
#include "ensdatabaseadaptor.h"
#include "ensdatabaseconnection.h"
#include "ensdatabaseentry.h"
#include "ensdensity.h"
#include "ensditag.h"
#include "ensexon.h"
#include "ensexternaldatabase.h"
#include "ensfeature.h"
#include "ensgene.h"
#include "ensgvallele.h"
#include "ensgvattribute.h"
#include "ensgvbaseadaptor.h"
#include "ensgvdata.h"
#include "ensgvdatabaseadaptor.h"
#include "ensgvgenotype.h"
#include "ensgvindividual.h"
#include "ensgvpopulation.h"
#include "ensgvsample.h"
#include "ensgvsource.h"
#include "ensgvsynonym.h"
#include "ensgvvariation.h"
#include "ensintron.h"
#include "enskaryotype.h"
#include "ensmapper.h"
#include "ensmarker.h"
#include "ensmetacoordinate.h"
#include "ensmetainformation.h"
#include "ensmiscellaneous.h"
#include "ensontology.h"
#include "ensoperon.h"
#include "ensprediction.h"
#include "ensprojectionsegment.h"
#include "ensprotein.h"
#include "ensqc.h"
#include "ensqcalignment.h"
#include "ensqcdasfeature.h"
#include "ensqcdatabase.h"
#include "ensqcsequence.h"
#include "ensqcsubmission.h"
#include "ensqcvariation.h"
#include "ensregistry.h"
#include "ensrepeat.h"
#include "ensseqregion.h"
#include "enssequence.h"
#include "enssequenceedit.h"
#include "enssimple.h"
#include "ensslice.h"
#include "enssoftware.h"
#include "ensstorable.h"
#include "enstable.h"
#include "enstranscript.h"
#include "enstranslation.h"
#include "ensutility.h"
#include "ensvariation.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSEMBL_H */

ensexon.h/      1414437294  1010  513   100644  11259     `
/* @include ensexon ***********************************************************
**
** Ensembl Exon functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.26 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:45:57 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSEXON_H
#define ENSEXON_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPExoncoordinates **************************************************
**
** Ensembl Exon Coordinates.
**
** Holds Ensembl Exon coordinates relative to a particular associated
** Ensembl Transcript, as well as coding region coordinates relative to an
** Ensembl Slice and a particular associated Translation.
**
** @alias EnsSExoncoordinates
** @alias EnsOExoncoordinates
**
** @attr TranscriptStart [ajuint] Exon start on Transcript
** @attr TranscriptEnd [ajuint] Exon end on Transcript
** @attr TranscriptCodingStart [ajuint] Coding region start on Transcript
** @attr TranscriptCodingEnd [ajuint] Coding region end on Transcript
** @attr SliceCodingStart [ajint] Coding region start on Slice
** @attr SliceCodingEnd [ajint] Coding region end on Slice
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSExoncoordinates
{
    ajuint TranscriptStart;
    ajuint TranscriptEnd;
    ajuint TranscriptCodingStart;
    ajuint TranscriptCodingEnd;
    ajint SliceCodingStart;
    ajint SliceCodingEnd;
    ajuint Use;
    ajuint Padding;
} EnsOExoncoordinates;

#define EnsPExoncoordinates EnsOExoncoordinates*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Excon Coordinates */

EnsPExoncoordinates ensExoncoordinatesNewCpy(const EnsPExoncoordinates ec);

EnsPExoncoordinates ensExoncoordinatesNewIni(EnsPExon exon,
                                             EnsPTranscript transcript,
                                             EnsPTranslation translation);

EnsPExoncoordinates ensExoncoordinatesNewRef(EnsPExoncoordinates ec);

void ensExoncoordinatesDel(EnsPExoncoordinates *Pec);

ajint ensExoncoordinatesGetSliceCodingEnd(
    const EnsPExoncoordinates ec);

ajint ensExoncoordinatesGetSliceCodingStart(
    const EnsPExoncoordinates ec);

ajuint ensExoncoordinatesGetTranscriptCodingEnd(
    const EnsPExoncoordinates ec);

ajuint ensExoncoordinatesGetTranscriptCodingStart(
    const EnsPExoncoordinates ec);

ajuint ensExoncoordinatesGetTranscriptEnd(
    const EnsPExoncoordinates ec);

ajuint ensExoncoordinatesGetTranscriptStart(
    const EnsPExoncoordinates ec);

AjBool ensExoncoordinatesTrace(const EnsPExoncoordinates ec, ajuint level);

size_t ensExoncoordinatesCalculateMemsize(const EnsPExoncoordinates ec);

/* Ensembl Exon */

EnsPExon ensExonNewCpy(const EnsPExon object);

EnsPExon ensExonNewIni(EnsPExonadaptor ea,
                       ajuint identifier,
                       EnsPFeature feature,
                       ajint sphase,
                       ajint ephase,
                       AjBool current,
                       AjBool constitutive,
                       AjPStr stableid,
                       ajuint version,
                       AjPStr cdate,
                       AjPStr mdate);

EnsPExon ensExonNewRef(EnsPExon exon);

void ensExonDel(EnsPExon *Pexon);

EnsPExonadaptor ensExonGetAdaptor(const EnsPExon exon);

AjBool ensExonGetConstitutive(const EnsPExon exon);

AjBool ensExonGetCurrent(const EnsPExon exon);

AjPStr ensExonGetDateCreation(const EnsPExon exon);

AjPStr ensExonGetDateModification(const EnsPExon exon);

EnsPFeature ensExonGetFeature(const EnsPExon exon);

ajuint ensExonGetIdentifier(const EnsPExon exon);

ajint ensExonGetPhaseEnd(const EnsPExon exon);

ajint ensExonGetPhaseStart(const EnsPExon exon);

AjPStr ensExonGetStableidentifier(const EnsPExon exon);

ajuint ensExonGetVersion(const EnsPExon exon);

const AjPList ensExonLoadSupportingfeatures(EnsPExon exon);

AjBool ensExonSetAdaptor(EnsPExon exon, EnsPExonadaptor ea);

AjBool ensExonSetConstitutive(EnsPExon exon, AjBool constitutive);

AjBool ensExonSetCurrent(EnsPExon exon, AjBool current);

AjBool ensExonSetDateCreation(EnsPExon exon, AjPStr cdate);

AjBool ensExonSetDateModification(EnsPExon exon, AjPStr mdate);

AjBool ensExonSetFeature(EnsPExon exon, EnsPFeature feature);

AjBool ensExonSetIdentifier(EnsPExon exon, ajuint identifier);

AjBool ensExonSetPhaseEnd(EnsPExon exon, ajint ephase);

AjBool ensExonSetPhaseStart(EnsPExon exon, ajint sphase);

AjBool ensExonSetStableidentifier(EnsPExon exon, AjPStr stableid);

AjBool ensExonSetVersion(EnsPExon exon, ajuint version);

AjBool ensExonTrace(const EnsPExon exon, ajuint level);

ajint ensExonCalculateFrame(const EnsPExon exon);

size_t ensExonCalculateMemsize(const EnsPExon exon);

ajint ensExonCalculateSliceCodingEnd(EnsPExon exon,
                                     EnsPTranscript transcript,
                                     EnsPTranslation translation);

ajint ensExonCalculateSliceCodingStart(EnsPExon exon,
                                       EnsPTranscript transcript,
                                       EnsPTranslation translation);

ajuint ensExonCalculateTranscriptCodingEnd(EnsPExon exon,
                                           EnsPTranscript transcript,
                                           EnsPTranslation translation);

ajuint ensExonCalculateTranscriptCodingStart(EnsPExon exon,
                                             EnsPTranscript transcript,
                                             EnsPTranslation translation);

ajuint ensExonCalculateTranscriptStart(EnsPExon exon,
                                       EnsPTranscript transcript);

ajuint ensExonCalculateTranscriptEnd(EnsPExon exon,
                                     EnsPTranscript transcript);

EnsPExon ensExonTransfer(EnsPExon exon, EnsPSlice slice);

EnsPExon ensExonTransform(EnsPExon exon,
                          const AjPStr csname,
                          const AjPStr csversion);

AjBool ensExonFetchDisplayidentifier(const EnsPExon exon, AjPStr *Pidentifier);

AjBool ensExonFetchSequenceSliceSeq(EnsPExon exon, AjPSeq *Psequence);

AjBool ensExonFetchSequenceSliceStr(EnsPExon exon, AjPStr *Psequence);

AjBool ensExonFetchSequenceTranslationSeq(EnsPExon exon,
                                          EnsPTranscript transcript,
                                          EnsPTranslation translation,
                                          AjPSeq *Psequence);

AjBool ensExonFetchSequenceTranslationStr(EnsPExon exon,
                                          EnsPTranscript transcript,
                                          EnsPTranslation translation,
                                          AjPStr *Psequence);

AjBool ensExonMatch(const EnsPExon exon1, const EnsPExon exon2);

AjBool ensExonSimilarity(const EnsPExon exon1, const EnsPExon exon2);

/* AJAX List of Ensembl Exon objects */

AjBool ensListExonSortEndAscending(AjPList exons);

AjBool ensListExonSortEndDescending(AjPList exons);

AjBool ensListExonSortIdentifierAscending(AjPList exons);

AjBool ensListExonSortStartAscending(AjPList exons);

AjBool ensListExonSortStartDescending(AjPList exons);

AjBool ensSequenceAddFeatureExon(AjPSeq seq,
                                 EnsPExon exon,
                                 ajint rank,
                                 AjPFeature *Pfeature);

/* Ensembl Exon Adaptor */

EnsPExonadaptor ensRegistryGetExonadaptor(
    EnsPDatabaseadaptor dba);

EnsPExonadaptor ensExonadaptorNew(
    EnsPDatabaseadaptor dba);

void ensExonadaptorDel(EnsPExonadaptor *Pea);

EnsPBaseadaptor ensExonadaptorGetBaseadaptor(EnsPExonadaptor ea);

EnsPDatabaseadaptor ensExonadaptorGetDatabaseadaptor(EnsPExonadaptor ea);

EnsPFeatureadaptor ensExonadaptorGetFeatureadaptor(EnsPExonadaptor ea);

AjBool ensExonadaptorFetchAll(EnsPExonadaptor ea,
                              AjPList exons);

AjBool ensExonadaptorFetchAllbySlice(EnsPExonadaptor ea,
                                     EnsPSlice slice,
                                     const AjPStr constraint,
                                     AjPList exons);

AjBool ensExonadaptorFetchAllbyStableidentifier(EnsPExonadaptor ea,
                                                const AjPStr stableid,
                                                AjPList exons);

AjBool ensExonadaptorFetchAllbyTranscript(EnsPExonadaptor ea,
                                          const EnsPTranscript transcript,
                                          AjPList exons);

AjBool ensExonadaptorFetchByIdentifier(EnsPExonadaptor ea,
                                       ajuint identifier,
                                       EnsPExon *Pexon);

AjBool ensExonadaptorFetchByStableidentifier(EnsPExonadaptor ea,
                                             const AjPStr stableid,
                                             ajuint version,
                                             EnsPExon *Pexon);

AjBool ensExonadaptorRetrieveAllIdentifiers(EnsPExonadaptor ea,
                                            AjPList identifiers);

AjBool ensExonadaptorRetrieveAllStableidentifiers(EnsPExonadaptor ea,
                                                  AjPList stableids);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSEXON_H */

/203            1414437294  1010  513   100644  6739      `
/* @include ensexternaldatabase ***********************************************
**
** Ensembl External Database functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.20 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:47:13 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSEXTERNALDATABASE_H
#define ENSEXTERNALDATABASE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl External Database */

EnsPExternaldatabase ensExternaldatabaseNewCpy(
    const EnsPExternaldatabase edb);

EnsPExternaldatabase ensExternaldatabaseNewIni(
    EnsPExternaldatabaseadaptor edba,
    ajuint identifier,
    AjPStr name,
    AjPStr release,
    AjPStr displayname,
    AjPStr secondaryname,
    AjPStr secondarytable,
    AjPStr description,
    EnsEExternaldatabaseStatus status,
    EnsEExternaldatabaseType type,
    ajint priority);

EnsPExternaldatabase ensExternaldatabaseNewRef(EnsPExternaldatabase edb);

void ensExternaldatabaseDel(EnsPExternaldatabase *Pedb);

EnsPExternaldatabaseadaptor ensExternaldatabaseGetAdaptor(
    const EnsPExternaldatabase edb);

AjPStr ensExternaldatabaseGetDescription(
    const EnsPExternaldatabase edb);

AjPStr ensExternaldatabaseGetDisplayname(
    const EnsPExternaldatabase edb);

ajuint ensExternaldatabaseGetIdentifier(
    const EnsPExternaldatabase edb);

AjPStr ensExternaldatabaseGetName(
    const EnsPExternaldatabase edb);

ajint ensExternaldatabaseGetPriority(
    const EnsPExternaldatabase edb);

AjPStr ensExternaldatabaseGetRelease(
    const EnsPExternaldatabase edb);

AjPStr ensExternaldatabaseGetSecondaryname(
    const EnsPExternaldatabase edb);

AjPStr ensExternaldatabaseGetSecondarytable(
    const EnsPExternaldatabase edb);

EnsEExternaldatabaseStatus ensExternaldatabaseGetStatus(
    const EnsPExternaldatabase edb);

EnsEExternaldatabaseType ensExternaldatabaseGetType(
    const EnsPExternaldatabase edb);

AjBool ensExternaldatabaseSetAdaptor(EnsPExternaldatabase edb,
                                     EnsPExternaldatabaseadaptor edba);

AjBool ensExternaldatabaseSetDescription(EnsPExternaldatabase edb,
                                         AjPStr description);

AjBool ensExternaldatabaseSetDisplayname(EnsPExternaldatabase edb,
                                         AjPStr displayname);

AjBool ensExternaldatabaseSetIdentifier(EnsPExternaldatabase edb,
                                        ajuint identifier);

AjBool ensExternaldatabaseSetName(EnsPExternaldatabase edb,
                                  AjPStr name);

AjBool ensExternaldatabaseSetPriority(EnsPExternaldatabase edb,
                                      ajint priority);

AjBool ensExternaldatabaseSetRelease(EnsPExternaldatabase edb,
                                     AjPStr release);

AjBool ensExternaldatabaseSetSecondaryname(EnsPExternaldatabase edb,
                                           AjPStr secondaryname);

AjBool ensExternaldatabaseSetSecondarytable(EnsPExternaldatabase edb,
                                            AjPStr secondarytable);

AjBool ensExternaldatabaseSetStatus(EnsPExternaldatabase edb,
                                    EnsEExternaldatabaseStatus status);

AjBool ensExternaldatabaseSetType(EnsPExternaldatabase edb,
                                  EnsEExternaldatabaseType type);

AjBool ensExternaldatabaseTrace(const EnsPExternaldatabase edb, ajuint level);

size_t ensExternaldatabaseCalculateMemsize(const EnsPExternaldatabase edb);

EnsEExternaldatabaseStatus ensExternaldatabaseStatusFromStr(
    const AjPStr status);

const char *ensExternaldatabaseStatusToChar(EnsEExternaldatabaseStatus edbs);

EnsEExternaldatabaseType ensExternaldatabaseTypeFromStr(
    const AjPStr type);

const char *ensExternaldatabaseTypeToChar(EnsEExternaldatabaseType edbt);

/* Ensembl External Database Adaptor */

EnsPExternaldatabaseadaptor ensRegistryGetExternaldatabaseadaptor(
    EnsPDatabaseadaptor dba);

EnsPExternaldatabaseadaptor ensExternaldatabaseadaptorNew(
    EnsPDatabaseadaptor dba);

void ensExternaldatabaseadaptorDel(
    EnsPExternaldatabaseadaptor *Pedba);

EnsPBaseadaptor ensExternaldatabaseadaptorGetBaseadaptor(
    EnsPExternaldatabaseadaptor edba);

EnsPDatabaseadaptor ensExternaldatabaseadaptorGetDatabaseadaptor(
    EnsPExternaldatabaseadaptor edba);

AjBool ensExternaldatabaseadaptorFetchAll(
    EnsPExternaldatabaseadaptor edba,
    AjPList edbs);

AjBool ensExternaldatabaseadaptorFetchByIdentifier(
    EnsPExternaldatabaseadaptor edba,
    ajuint identifier,
    EnsPExternaldatabase *Pedb);

AjBool ensExternaldatabaseadaptorFetchByName(
    EnsPExternaldatabaseadaptor edba,
    const AjPStr name,
    const AjPStr release,
    EnsPExternaldatabase *Pedb);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSEXTERNALDATABASE_H */

ensfeature.h/   1414437294  1010  513   100644  21560     `
/* @include ensfeature ********************************************************
**
** Ensembl Feature functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.44 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:05:44 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSFEATURE_H
#define ENSFEATURE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensanalysis.h"
#include "ensassemblyexception.h"
#include "ensdata.h"
#include "ensslice.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPFeaturepair ******************************************************
**
** Ensembl Feature Pair.
**
** @alias EnsSFeaturepair
** @alias EnsOFeaturepair
**
** @cc Bio::EnsEMBL::Featurepair
** @attr SourceFeature [EnsPFeature] Source Ensembl Feature (Query)
** @attr TargetFeature [EnsPFeature] Target Ensembl Feature (Target)
** @attr Externaldatabase [EnsPExternaldatabase] Ensembl External Database
** @attr Extradata [AjPStr] Extra data
** @attr SourceSpecies [AjPStr] Source species name
** @attr TargetSpecies [AjPStr] Target species name
** @attr Groupidentifier [ajuint] Group identifier
** @attr Levelidentifier [ajuint] Level identifier
** @attr Evalue [double] e- or p-value
** @attr Score [double] Score
** @attr SourceCoverage [float] Source coverage in percent
** @attr TargetCoverage [float] Target coverage in percent
** @attr Identity [float] Sequence identity in percent
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct EnsSFeaturepair
{
    EnsPFeature SourceFeature;
    EnsPFeature TargetFeature;
    EnsPExternaldatabase Externaldatabase;
    AjPStr Extradata;
    AjPStr SourceSpecies;
    AjPStr TargetSpecies;
    ajuint Groupidentifier;
    ajuint Levelidentifier;
    double Evalue;
    double Score;
    float SourceCoverage;
    float TargetCoverage;
    float Identity;
    ajuint Use;
} EnsOFeaturepair;

#define EnsPFeaturepair EnsOFeaturepair*




/* @data EnsPAssemblyexceptionfeatureadaptor **********************************
**
** Ensembl Assembly Exception Feature Adaptor.
**
** @alias EnsSAssemblyexceptionfeatureadaptor
** @alias EnsOAssemblyexceptionfeatureadaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** @attr Cache [AjPList]
** AJAX List of Ensembl Assembly Exception Feature objects
** @attr CacheByIdentifier [AjPTable]
** AJAX Table of Ensembl Assembly Exception Feature objects
** @attr CacheBySlice [EnsPCache] Ensembl Cache by Ensembl Slice names
** @@
******************************************************************************/

typedef struct EnsSAssemblyexceptionfeatureadaptor
{
    EnsPDatabaseadaptor Adaptor;
    AjPList Cache;
    AjPTable CacheByIdentifier;
    EnsPCache CacheBySlice;
} EnsOAssemblyexceptionfeatureadaptor;

#define EnsPAssemblyexceptionfeatureadaptor EnsOAssemblyexceptionfeatureadaptor*




/* @data EnsPAssemblyexceptionfeature *****************************************
**
** Ensembl Assembly Exception Feature.
**
** @alias EnsSAssemblyexceptionfeature
** @alias EnsOAssemblyexceptionfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPAssemblyexceptionfeatureadaptor]
**                Ensembl Assembly Exception Feature Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Assemblyexceptionfeature
** @attr ExceptionSlice [EnsPSlice] Exception Ensembl Slice
** @attr Type [EnsEAssemblyexceptionType] Ensembl Assembly Exception type
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSAssemblyexceptionfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPAssemblyexceptionfeatureadaptor Adaptor;
    EnsPFeature Feature;
    EnsPSlice ExceptionSlice;
    EnsEAssemblyexceptionType Type;
    ajuint Padding;
} EnsOAssemblyexceptionfeature;

#define EnsPAssemblyexceptionfeature EnsOAssemblyexceptionfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Feature */

EnsPFeature ensFeatureNewCpy(const EnsPFeature feature);

EnsPFeature ensFeatureNewIniN(EnsPAnalysis analysis,
                              AjPStr seqname,
                              ajint start,
                              ajint end,
                              ajint strand);

EnsPFeature ensFeatureNewIniS(EnsPAnalysis analysis,
                              EnsPSlice slice,
                              ajint start,
                              ajint end,
                              ajint strand);

EnsPFeature ensFeatureNewRef(EnsPFeature feature);

void ensFeatureDel(EnsPFeature *Pfeature);

EnsPAnalysis ensFeatureGetAnalysis(const EnsPFeature feature);

ajint ensFeatureGetEnd(const EnsPFeature feature);

AjPStr ensFeatureGetSequencename(const EnsPFeature feature);

EnsPSlice ensFeatureGetSlice(const EnsPFeature feature);

ajint ensFeatureGetStart(const EnsPFeature feature);

ajint ensFeatureGetStrand(const EnsPFeature feature);

AjBool ensFeatureSetAnalysis(EnsPFeature feature, EnsPAnalysis analysis);

AjBool ensFeatureSetEnd(EnsPFeature feature, ajint end);

AjBool ensFeatureSetSequencename(EnsPFeature, AjPStr seqname);

AjBool ensFeatureSetSlice(EnsPFeature feature, EnsPSlice slice);

AjBool ensFeatureSetStart(EnsPFeature feature, ajint start);

AjBool ensFeatureSetStrand(EnsPFeature feature, ajint strand);

AjBool ensFeatureTrace(const EnsPFeature feature, ajuint level);

ajuint ensFeatureCalculateLength(const EnsPFeature feature);

size_t ensFeatureCalculateMemsize(const EnsPFeature feature);

char ensFeatureCalculateStrand(const EnsPFeature feature);

ajint ensFeatureGetSeqregionEnd(const EnsPFeature feature);

ajuint ensFeatureGetSeqregionLength(const EnsPFeature feature);

const AjPStr ensFeatureGetSeqregionName(const EnsPFeature feature);

const EnsPSeqregion ensFeatureGetSeqregionObject(const EnsPFeature feature);

ajint ensFeatureGetSeqregionStart(const EnsPFeature feature);

ajint ensFeatureGetSeqregionStrand(const EnsPFeature feature);

AjBool ensFeatureFetchAllAlternativelocations(EnsPFeature feature,
                                              AjBool all,
                                              AjPList features);

AjBool ensFeatureFetchSequencename(const EnsPFeature feature, AjPStr *Pname);

AjBool ensFeatureMove(EnsPFeature feature,
                      ajint start,
                      ajint end,
                      ajint strand);

AjBool ensFeatureProject(const EnsPFeature feature,
                         const AjPStr csname,
                         const AjPStr csversion,
                         AjPList pss);

AjBool ensFeatureProjectslice(const EnsPFeature feature,
                              EnsPSlice slice,
                              AjPList pss);

EnsPFeature ensFeatureTransform(EnsPFeature feature,
                                const AjPStr csname,
                                const AjPStr csversion,
                                EnsPSlice slice);

EnsPFeature ensFeatureTransfer(EnsPFeature feature, EnsPSlice slice);

AjBool ensFeatureMatch(const EnsPFeature feature1,
                       const EnsPFeature feature2);

AjBool ensFeatureOverlap(const EnsPFeature feature1,
                         const EnsPFeature feature2);

AjBool ensFeatureSimilarity(const EnsPFeature feature1,
                            const EnsPFeature feature2);

int ensFeatureCompareEndAscending(const EnsPFeature feature1,
                                  const EnsPFeature feature2);

int ensFeatureCompareEndDescending(const EnsPFeature feature1,
                                   const EnsPFeature feature2);

int ensFeatureCompareStartAscending(const EnsPFeature feature1,
                                    const EnsPFeature feature2);

int ensFeatureCompareStartDescending(const EnsPFeature feature1,
                                     const EnsPFeature feature2);

/* AJAX List of Ensembl Feature objects */

AjBool ensListFeatureSortEndAscending(AjPList features);

AjBool ensListFeatureSortEndDescending(AjPList features);

AjBool ensListFeatureSortStartAscending(AjPList features);

AjBool ensListFeatureSortStartDescending(AjPList features);

/* Ensembl Feature Adaptor */

EnsPFeatureadaptor ensFeatureadaptorNew(
    EnsPDatabaseadaptor dba,
    const char *const *Ptablenames,
    const char *const *Pcolumnnames,
    const EnsPBaseadaptorLeftjoin leftjoins,
    const char *defaultcondition,
    const char *finalcondition,
    AjBool (*Fstatement) (EnsPBaseadaptor ba,
                          const AjPStr statement,
                          EnsPAssemblymapper am,
                          EnsPSlice slice,
                          AjPList objects),
    void *(*Fread) (const void *key),
    void *(*Freference) (void *value),
    AjBool (*Fwrite) (const void *value),
    void (*Fdelete) (void **Pvalue),
    size_t (*Fsize) (const void *value),
    EnsPFeature (*Fgetfeature) (const void *object),
    const char *label);

void ensFeatureadaptorDel(EnsPFeatureadaptor *Pfa);

EnsPBaseadaptor ensFeatureadaptorGetBaseadaptor(
    const EnsPFeatureadaptor fa);

EnsPCache ensFeatureadaptorGetCache(
    const EnsPFeatureadaptor fa);

EnsPDatabaseadaptor ensFeatureadaptorGetDatabaseadaptor(
    const EnsPFeatureadaptor fa);

ajint ensFeatureadaptorGetMaximumlength(
    const EnsPFeatureadaptor fa);

AjBool ensFeatureadaptorGetStartequalsend(
    const EnsPFeatureadaptor fa);

AjBool ensFeatureadaptorSetColumnnames(EnsPFeatureadaptor fa,
                                       const char *const *Pcolumnnames);

AjBool ensFeatureadaptorSetDefaultcondition(EnsPFeatureadaptor fa,
                                            const char *defaultcondition);

AjBool ensFeatureadaptorSetFinalcondition(EnsPFeatureadaptor fa,
                                          const char *finalcondition);

AjBool ensFeatureadaptorSetMaximumlength(EnsPFeatureadaptor fa,
                                         ajint length);

AjBool ensFeatureadaptorSetStartequalsend(EnsPFeatureadaptor fa,
                                          AjBool flag);

AjBool ensFeatureadaptorSetTablenames(EnsPFeatureadaptor fa,
                                      const char *const *Ptablenames);

AjBool ensFeatureadaptorEscapeC(EnsPFeatureadaptor fa,
                                char **Ptxt,
                                const AjPStr str);

AjBool ensFeatureadaptorEscapeS(EnsPFeatureadaptor fa,
                                AjPStr *Pstr,
                                const AjPStr str);

AjBool ensFeatureadaptorConstraintAppendAnalysisname(
    const EnsPFeatureadaptor fa,
    AjPStr *Pconstraint,
    const AjPStr anname);

AjBool ensFeatureadaptorFetchAllbyAnalysisname(EnsPFeatureadaptor fa,
                                               const AjPStr anname,
                                               AjPList objects);

AjBool ensFeatureadaptorFetchAllbySlice(EnsPFeatureadaptor fa,
                                        EnsPSlice slice,
                                        const AjPStr constraint,
                                        const AjPStr anname,
                                        AjPList objects);

AjBool ensFeatureadaptorFetchAllbySlicescore(EnsPFeatureadaptor fa,
                                             EnsPSlice slice,
                                             double score,
                                             const AjPStr anname,
                                             AjPList objects);

/* Ensembl Feature Pair */

EnsPFeaturepair ensFeaturepairNewCpy(const EnsPFeaturepair fp);

EnsPFeaturepair ensFeaturepairNewIni(EnsPFeature srcfeature,
                                     EnsPFeature trgfeature,
                                     EnsPExternaldatabase edb,
                                     AjPStr extra,
                                     AjPStr srcspecies,
                                     AjPStr trgspecies,
                                     ajuint groupid,
                                     ajuint levelid,
                                     double evalue,
                                     double score,
                                     float srccoverage,
                                     float trgcoverage,
                                     float identity);

EnsPFeaturepair ensFeaturepairNewRef(EnsPFeaturepair fp);

void ensFeaturepairDel(EnsPFeaturepair *Pfp);

double ensFeaturepairGetEvalue(
    const EnsPFeaturepair fp);

EnsPExternaldatabase ensFeaturepairGetExternaldatabase(
    const EnsPFeaturepair fp);

AjPStr ensFeaturepairGetExtradata(
    const EnsPFeaturepair fp);

ajuint ensFeaturepairGetGroupidentifier(
    const EnsPFeaturepair fp);

float ensFeaturepairGetIdentity(
    const EnsPFeaturepair fp);

ajuint ensFeaturepairGetLevelidentifier(
    const EnsPFeaturepair fp);

double ensFeaturepairGetScore(
    const EnsPFeaturepair fp);

float ensFeaturepairGetSourceCoverage(
    const EnsPFeaturepair fp);

EnsPFeature ensFeaturepairGetSourceFeature(
    const EnsPFeaturepair fp);

AjPStr ensFeaturepairGetSourceSpecies(
    const EnsPFeaturepair fp);

float ensFeaturepairGetTargetCoverage(
    const EnsPFeaturepair fp);

EnsPFeature ensFeaturepairGetTargetFeature(
    const EnsPFeaturepair fp);

AjPStr ensFeaturepairGetTargetSpecies(
    const EnsPFeaturepair fp);

AjBool ensFeaturepairSetEvalue(EnsPFeaturepair fp,
                               double evalue);

AjBool ensFeaturepairSetExternaldatabase(EnsPFeaturepair fp,
                                         EnsPExternaldatabase edb);

AjBool ensFeaturepairSetExtradata(EnsPFeaturepair fp,
                                  AjPStr extra);

AjBool ensFeaturepairSetGroupidentifier(EnsPFeaturepair fp,
                                        ajuint groupid);

AjBool ensFeaturepairSetLevelidentifier(EnsPFeaturepair fp,
                                        ajuint levelid);

AjBool ensFeaturepairSetScore(EnsPFeaturepair fp,
                              double score);

AjBool ensFeaturepairSetSourceCoverage(EnsPFeaturepair fp,
                                       float coverage);

AjBool ensFeaturepairSetSourceFeature(EnsPFeaturepair fp,
                                      EnsPFeature feature);

AjBool ensFeaturepairSetSourceSpecies(EnsPFeaturepair fp,
                                      AjPStr species);

AjBool ensFeaturepairSetTargetCoverage(EnsPFeaturepair fp,
                                       float coverage);

AjBool ensFeaturepairSetTargetFeature(EnsPFeaturepair fp,
                                      EnsPFeature feature);

AjBool ensFeaturepairSetTargetSpecies(EnsPFeaturepair fp,
                                      AjPStr species);

AjBool ensFeaturepairTrace(const EnsPFeaturepair fp, ajuint level);

AjBool ensFeaturepairSetIdentity(EnsPFeaturepair fp, float identity);

size_t ensFeaturepairCalculateMemsize(const EnsPFeaturepair fp);

EnsPFeaturepair ensFeaturepairTransfer(EnsPFeaturepair fp,
                                       EnsPSlice slice);

EnsPFeaturepair ensFeaturepairTransform(const EnsPFeaturepair fp,
                                        const AjPStr csname,
                                        const AjPStr csversion);

ajint ensFeaturepairGetSourceEnd(const EnsPFeaturepair fp);

ajint ensFeaturepairGetSourceStart(const EnsPFeaturepair fp);

ajint ensFeaturepairGetSourceStrand(const EnsPFeaturepair fp);

ajint ensFeaturepairGetTargetEnd(const EnsPFeaturepair fp);

ajint ensFeaturepairGetTargetStart(const EnsPFeaturepair fp);

ajint ensFeaturepairGetTargetStrand(const EnsPFeaturepair fp);

int ensFeaturepairCompareSourceEndAscending(const EnsPFeaturepair fp1,
                                            const EnsPFeaturepair fp2);

int ensFeaturepairCompareSourceEndDescending(const EnsPFeaturepair fp1,
                                             const EnsPFeaturepair fp2);

int ensFeaturepairCompareSourceStartAscending(const EnsPFeaturepair fp1,
                                              const EnsPFeaturepair fp2);

int ensFeaturepairCompareSourceStartDescending(const EnsPFeaturepair fp1,
                                               const EnsPFeaturepair fp2);

/* AJAX List of Ensembl Feature Pair objects */

AjBool ensListFeaturepairSortSourceEndAscending(AjPList fps);

AjBool ensListFeaturepairSortSourceEndDescending(AjPList fps);

AjBool ensListFeaturepairSortSourceStartAscending(AjPList fps);

AjBool ensListFeaturepairSortSourceStartDescending(AjPList fps);

/* Ensembl Assembly Exception Feature */

EnsPAssemblyexceptionfeature ensAssemblyexceptionfeatureNewCpy(
    const EnsPAssemblyexceptionfeature aef);

EnsPAssemblyexceptionfeature ensAssemblyexceptionfeatureNewIni(
    EnsPAssemblyexceptionfeatureadaptor aefa,
    ajuint identifier,
    EnsPFeature feature,
    EnsPSlice slice,
    EnsEAssemblyexceptionType type);

EnsPAssemblyexceptionfeature ensAssemblyexceptionfeatureNewRef(
    EnsPAssemblyexceptionfeature aef);

void ensAssemblyexceptionfeatureDel(EnsPAssemblyexceptionfeature *Paef);

EnsPAssemblyexceptionfeatureadaptor ensAssemblyexceptionfeatureGetAdaptor(
    const EnsPAssemblyexceptionfeature aef);

EnsPSlice ensAssemblyexceptionfeatureGetExceptionSlice(
    const EnsPAssemblyexceptionfeature aef);

EnsPFeature ensAssemblyexceptionfeatureGetFeature(
    const EnsPAssemblyexceptionfeature aef);

ajuint ensAssemblyexceptionfeatureGetIdentifier(
    const EnsPAssemblyexceptionfeature aef);

EnsEAssemblyexceptionType ensAssemblyexceptionfeatureGetType(
    const EnsPAssemblyexceptionfeature aef);

AjBool ensAssemblyexceptionfeatureSetAdaptor(
    EnsPAssemblyexceptionfeature aef,
    EnsPAssemblyexceptionfeatureadaptor aefa);

AjBool ensAssemblyexceptionfeatureSetExceptionSlice(
    EnsPAssemblyexceptionfeature aef,
    EnsPSlice slice);

AjBool ensAssemblyexceptionfeatureSetFeature(EnsPAssemblyexceptionfeature aef,
                                             EnsPFeature feature);

AjBool ensAssemblyexceptionfeatureSetIdentifier(
    EnsPAssemblyexceptionfeature aef,
    ajuint identifier);

AjBool ensAssemblyexceptionfeatureSetType(EnsPAssemblyexceptionfeature aef,
                                          EnsEAssemblyexceptionType type);

size_t ensAssemblyexceptionfeatureCalculateMemsize(
    const EnsPAssemblyexceptionfeature aef);

AjBool ensAssemblyexceptionfeatureFetchDisplayidentifier(
    const EnsPAssemblyexceptionfeature aef,
    AjPStr *Pidentifier);

AjBool ensAssemblyexceptionfeatureTrace(const EnsPAssemblyexceptionfeature aef,
                                        ajuint level);

/* Ensembl Assembly Exception Feature Adaptor */

EnsPAssemblyexceptionfeatureadaptor ensRegistryGetAssemblyexceptionfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPAssemblyexceptionfeatureadaptor ensAssemblyexceptionfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensAssemblyexceptionfeatureadaptorDel(
    EnsPAssemblyexceptionfeatureadaptor *Paefa);

EnsPDatabaseadaptor ensAssemblyexceptionfeatureadaptorGetDatabaseadaptor(
    EnsPAssemblyexceptionfeatureadaptor aefa);

AjBool ensAssemblyexceptionfeatureadaptorFetchAll(
    EnsPAssemblyexceptionfeatureadaptor aefa,
    AjPList aefs);

AjBool ensAssemblyexceptionfeatureadaptorFetchAllbySlice(
    EnsPAssemblyexceptionfeatureadaptor aefa,
    EnsPSlice slice,
    AjPList aefs);

AjBool ensAssemblyexceptionfeatureadaptorFetchByIdentifier(
    EnsPAssemblyexceptionfeatureadaptor aefa,
    ajuint identifier,
    EnsPAssemblyexceptionfeature *Paef);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSFEATURE_H */
ensgene.h/      1414437294  1010  513   100644  9839      `
/* @include ensgene ***********************************************************
**
** Ensembl Gene functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.32 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:06:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGENE_H
#define ENSGENE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Gene */

EnsPGene ensGeneNewCpy(const EnsPGene gene);

EnsPGene ensGeneNewIni(EnsPGeneadaptor ga,
                       ajuint identifier,
                       EnsPFeature feature,
                       EnsPDatabaseentry displaydbe,
                       AjPStr description,
                       AjPStr source,
                       AjPStr biotype,
                       EnsEGeneStatus status,
                       AjBool current,
                       ajuint cantrcid,
                       AjPStr canann,
                       AjPStr stableid,
                       ajuint version,
                       AjPStr cdate,
                       AjPStr mdate,
                       AjPList transcripts);

EnsPGene ensGeneNewRef(EnsPGene gene);

void ensGeneDel(EnsPGene *Pgene);

EnsPGeneadaptor ensGeneGetAdaptor(const EnsPGene gene);

AjPStr ensGeneGetBiotype(const EnsPGene gene);

AjPStr ensGeneGetCanonicalannotation(const EnsPGene gene);

ajuint ensGeneGetCanonicaltranscriptidentifier(const EnsPGene gene);

AjBool ensGeneGetCurrent(const EnsPGene gene);

AjPStr ensGeneGetDateCreation(const EnsPGene gene);

AjPStr ensGeneGetDateModification(const EnsPGene gene);

AjPStr ensGeneGetDescription(const EnsPGene gene);

EnsPDatabaseentry ensGeneGetDisplayreference(const EnsPGene gene);

EnsPFeature ensGeneGetFeature(const EnsPGene gene);

ajuint ensGeneGetIdentifier(const EnsPGene gene);

AjPStr ensGeneGetSource(const EnsPGene gene);

AjPStr ensGeneGetStableidentifier(const EnsPGene gene);

EnsEGeneStatus ensGeneGetStatus(const EnsPGene gene);

ajuint ensGeneGetVersion(const EnsPGene gene);

const AjPList ensGeneLoadAttributes(EnsPGene gene);

const AjPList ensGeneLoadDatabaseentries(EnsPGene gene);

const AjPList ensGeneLoadTranscripts(EnsPGene gene);

AjBool ensGeneSetAdaptor(EnsPGene gene, EnsPGeneadaptor ga);

AjBool ensGeneSetBiotype(EnsPGene gene, AjPStr biotype);

AjBool ensGeneSetCanonicalannotation(EnsPGene gene, AjPStr canann);

AjBool ensGeneSetCanonicaltranscriptidentifier(EnsPGene gene, ajuint cantrcid);

AjBool ensGeneSetCurrent(EnsPGene gene, AjBool current);

AjBool ensGeneSetDateCreation(EnsPGene gene, AjPStr cdate);

AjBool ensGeneSetDateModification(EnsPGene gene, AjPStr mdate);

AjBool ensGeneSetDescription(EnsPGene gene, AjPStr description);

AjBool ensGeneSetDisplayreference(EnsPGene gene, EnsPDatabaseentry dbe);

AjBool ensGeneSetFeature(EnsPGene gene, EnsPFeature feature);

AjBool ensGeneSetIdentifier(EnsPGene gene, ajuint identifier);

AjBool ensGeneSetSource(EnsPGene gene, AjPStr source);

AjBool ensGeneSetStableidentifier(EnsPGene gene, AjPStr stableid);

AjBool ensGeneSetStatus(EnsPGene gene, EnsEGeneStatus status);

AjBool ensGeneSetVersion(EnsPGene gene, ajuint version);

AjBool ensGeneAddAttribute(EnsPGene gene, EnsPAttribute attribute);

AjBool ensGeneAddDatabaseentry(EnsPGene gene, EnsPDatabaseentry dbe);

AjBool ensGeneAddTranscript(EnsPGene gene, EnsPTranscript transcript);

AjBool ensGeneTrace(const EnsPGene gene, ajuint level);

size_t ensGeneCalculateMemsize(const EnsPGene gene);

AjBool ensGeneCalculateCoordinates(EnsPGene gene);

AjBool ensGeneFetchAllAttributes(EnsPGene gene,
                                 const AjPStr code,
                                 AjPList attributes);

AjBool ensGeneFetchAllDatabaseentries(EnsPGene gene,
                                      const AjPStr name,
                                      EnsEExternaldatabaseType type,
                                      AjPList dbes);

AjBool ensGeneFetchAllExons(EnsPGene gene, AjPList exons);

AjBool ensGeneFetchCanonicaltranscript(EnsPGene gene,
                                       EnsPTranscript *Ptranscript);

AjBool ensGeneFetchDisplayidentifier(const EnsPGene gene,
                                     AjPStr *Pidentifier);

AjBool ensGeneSimilarity(EnsPGene gene1, EnsPGene gene2);

EnsPGene ensGeneTransfer(EnsPGene gene, EnsPSlice slice);

EnsPGene ensGeneTransform(EnsPGene gene,
                          const AjPStr csname,
                          const AjPStr csversion);

AjBool ensGeneCheckReference(const EnsPGene gene, AjBool *Presult);

EnsEGeneStatus ensGeneStatusFromStr(const AjPStr status);

const char *ensGeneStatusToChar(EnsEGeneStatus status);

/* AJAX List of Ensembl Gene objects */

AjBool ensListGeneSortEndAscending(AjPList genes);

AjBool ensListGeneSortEndDescending(AjPList genes);

AjBool ensListGeneSortIdentifierAscending(AjPList genes);

AjBool ensListGeneSortStartAscending(AjPList genes);

AjBool ensListGeneSortStartDescending(AjPList genes);

AjBool ensSequenceAddFeatureGene(AjPSeq seq,
                                 EnsPGene gene,
                                 AjPFeature *Pfeature);

/* Ensembl Gene Adaptor */

EnsPGeneadaptor ensRegistryGetGeneadaptor(
    EnsPDatabaseadaptor dba);

EnsPGeneadaptor ensGeneadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGeneadaptorDel(EnsPGeneadaptor *Pga);

EnsPBaseadaptor ensGeneadaptorGetBaseadaptor(
    EnsPGeneadaptor ga);

EnsPDatabaseadaptor ensGeneadaptorGetDatabaseadaptor(
    EnsPGeneadaptor ga);

EnsPFeatureadaptor ensGeneadaptorGetFeatureadaptor(
    EnsPGeneadaptor ga);

AjBool ensGeneadaptorFetchAll(
    EnsPGeneadaptor ga,
    AjPList genes);

AjBool ensGeneadaptorFetchAllbyBiotype(
    EnsPGeneadaptor ga,
    const AjPStr biotype,
    AjPList genes);

AjBool ensGeneadaptorFetchAllbyDisplaylabel(
    EnsPGeneadaptor ga,
    const AjPStr label,
    AjPList genes);

AjBool ensGeneadaptorFetchAllbyExternaldatabasename(
    EnsPGeneadaptor ga,
    const AjPStr dbname,
    AjPList genes);

AjBool ensGeneadaptorFetchAllbyExternalname(
    EnsPGeneadaptor ga,
    const AjPStr name,
    const AjPStr dbname,
    AjBool override,
    AjPList genes);

AjBool ensGeneadaptorFetchAllbyIdentifiers(
    EnsPGeneadaptor ga,
    AjPTable genes);

AjBool ensGeneadaptorFetchAllbySlice(
    EnsPGeneadaptor ga,
    EnsPSlice slice,
    const AjPStr anname,
    const AjPStr source,
    const AjPStr biotype,
    AjBool loadtranscripts,
    AjPList genes);

AjBool ensGeneadaptorFetchAllbyStableidentifier(
    EnsPGeneadaptor ga,
    const AjPStr stableid,
    AjPList genes);

AjBool ensGeneadaptorFetchByDisplaylabel(
    EnsPGeneadaptor ga,
    const AjPStr label,
    EnsPGene *Pgene);

AjBool ensGeneadaptorFetchByExonidentifier(
    EnsPGeneadaptor ga,
    ajuint identifier,
    EnsPGene *Pgene);

AjBool ensGeneadaptorFetchByExonstableidentifier(
    EnsPGeneadaptor ga,
    const AjPStr stableid,
    EnsPGene *Pgene);

AjBool ensGeneadaptorFetchByIdentifier(
    EnsPGeneadaptor ga,
    ajuint identifier,
    EnsPGene *Pgene);

AjBool ensGeneadaptorFetchByStableidentifier(
    EnsPGeneadaptor ga,
    const AjPStr stableid,
    ajuint version,
    EnsPGene *Pgene);

AjBool ensGeneadaptorFetchByTranscriptidentifier(
    EnsPGeneadaptor ga,
    ajuint identifier,
    EnsPGene *Pgene);

AjBool ensGeneadaptorFetchByTranscriptstableidentifier(
    EnsPGeneadaptor ga,
    const AjPStr stableid,
    EnsPGene *Pgene);

AjBool ensGeneadaptorFetchByTranslationstableidentifier(
    EnsPGeneadaptor ga,
    const AjPStr stableid,
    EnsPGene *Pgene);

AjBool ensGeneadaptorRetrieveAllIdentifiers(
    EnsPGeneadaptor ga,
    AjPList identifiers);

AjBool ensGeneadaptorRetrieveAllStableidentifiers(
    EnsPGeneadaptor ga,
    AjPList stableids);

AjBool ensGeneadaptorCheckReference(
    EnsPGeneadaptor ga,
    const EnsPGene gene,
    AjBool *Presult);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGENE_H */

ensgvallele.h/  1414437294  1010  513   100644  5455      `
/* @include ensgvallele *******************************************************
**
** Ensembl Genetic Variation Allele functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.11 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/20 22:09:19 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVALLELE_H
#define ENSGVALLELE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Allele */

EnsPGvallele ensGvalleleNewCpy(const EnsPGvallele gva);

EnsPGvallele ensGvalleleNewIni(EnsPGvalleleadaptor gvaa,
                               ajuint identifier,
                               EnsPGvpopulation gvp,
                               AjPStr allele,
                               float frequency,
                               ajuint subidentifier,
                               ajuint counter,
                               ajuint gvvid);

EnsPGvallele ensGvalleleNewRef(EnsPGvallele gva);

void ensGvalleleDel(EnsPGvallele *Pgva);

EnsPGvalleleadaptor ensGvalleleGetAdaptor(const EnsPGvallele gva);

AjPStr ensGvalleleGetAllele(const EnsPGvallele gva);

ajuint ensGvalleleGetCounter(const EnsPGvallele gva);

EnsPGvpopulation ensGvalleleGetGvpopulation(const EnsPGvallele gva);

ajuint ensGvalleleGetGvvariationidentifier(const EnsPGvallele gva);

ajuint ensGvalleleGetIdentifier(const EnsPGvallele gva);

float ensGvalleleGetFrequency(const EnsPGvallele gva);

ajuint ensGvalleleGetSubidentifier(const EnsPGvallele gva);

const AjPList ensGvalleleLoadAllFaileddescriptions(EnsPGvallele gva);

AjPStr ensGvalleleLoadSubhandle(EnsPGvallele gva);

AjBool ensGvalleleSetAdaptor(EnsPGvallele gva, EnsPGvalleleadaptor gvaa);

AjBool ensGvalleleSetCounter(EnsPGvallele gva, ajuint counter);

AjBool ensGvalleleSetIdentifier(EnsPGvallele gva, ajuint identifier);

AjBool ensGvalleleSetGvpopulation(EnsPGvallele gva, EnsPGvpopulation gvp);

AjBool ensGvalleleSetGvvariationidentifier(EnsPGvallele gva, ajuint gvvid);

AjBool ensGvalleleSetAllele(EnsPGvallele gva, AjPStr allelestr);

AjBool ensGvalleleSetFrequency(EnsPGvallele gva, float frequency);

AjBool ensGvalleleSetSubhandle(EnsPGvallele gva, AjPStr subhandle);

AjBool ensGvalleleSetSubidentifier(EnsPGvallele gva, ajuint subidentifier);

AjBool ensGvalleleTrace(const EnsPGvallele gva, ajuint level);

size_t ensGvalleleCalculateMemsize(const EnsPGvallele gva);

AjBool ensGvalleleIsFailed(EnsPGvallele gva, AjBool *Presult);

/* Ensembl Genetic Variation Allele Adaptor */

EnsPGvalleleadaptor ensRegistryGetGvalleleadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvalleleadaptor ensGvalleleadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvalleleadaptorDel(EnsPGvalleleadaptor *Pgvaa);

EnsPDatabaseadaptor ensGvalleleadaptorGetDatabaseadaptor(
    const EnsPGvalleleadaptor gvaa);

EnsPGvdatabaseadaptor ensGvalleleadaptorGetGvdatabaseadaptor(
    const EnsPGvalleleadaptor gvaa);

AjBool ensGvalleleadaptorFetchAllbyGvvariation(
    EnsPGvalleleadaptor gvaa,
    const EnsPGvvariation gvv,
    const EnsPGvpopulation gvp,
    AjPList gvas);

AjBool ensGvalleleadaptorFetchAllbySubidentifier(
    EnsPGvalleleadaptor gvaa,
    ajuint subidentifier,
    AjPList gvas);

AjBool ensGvalleleadaptorRetrieveAllFaileddescriptions(
    EnsPGvalleleadaptor gvaa,
    const EnsPGvallele gva,
    AjPList descriptions);

AjBool ensGvalleleadaptorRetrieveSubhandle(
    EnsPGvalleleadaptor gvaa,
    const EnsPGvallele gva,
    AjPStr *Psubhandle);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVALLELE_H */

/226            1414437294  1010  513   100644  5877      `
/* @include ensgvattribute ****************************************************
**
** Ensembl Genetic Variation Attribute functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.6 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:51:33 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVATTRIBUTE_H
#define ENSGVATTRIBUTE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsEGvattributetypeCode **********************************************
**
** Ensembl Genetic Variation Attribute Type Code enumeration
**
** @value ensEGvattributetypeCodeNULL Null
** @value ensEGvattributetypeCodeSoaccession Sequence Ontology Accession
** @value ensEGvattributetypeCodeSoterm Sequence Ontology Term
** @value ensEGvattributetypeCodeDisplayterm Display Term
** @@
******************************************************************************/

typedef enum EnsOGvattributetypeCode
{
    ensEGvattributetypeCodeNULL,
    ensEGvattributetypeCodeSoaccession,
    ensEGvattributetypeCodeSoterm,
    ensEGvattributetypeCodeDisplayterm
} EnsEGvattributetypeCode;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Attribute */

EnsPGvattribute ensGvattributeNewCpy(const EnsPGvattribute gva);

EnsPGvattribute ensGvattributeNewIni(EnsPGvattributeadaptor gvaa,
                                     ajuint identifier,
                                     EnsPAttributetype at,
                                     AjPStr value);

EnsPGvattribute ensGvattributeNewRef(EnsPGvattribute gva);

void ensGvattributeDel(EnsPGvattribute *Pgva);

EnsPGvattributeadaptor ensGvattributeGetAdaptor(const EnsPGvattribute gva);

EnsPAttributetype ensGvattributeGetAttributetype(const EnsPGvattribute gva);

ajuint ensGvattributeGetIdentifier(const EnsPGvattribute gva);

AjPStr ensGvattributeGetValue(const EnsPGvattribute gva);

AjBool ensGvattributeTrace(const EnsPGvattribute gva, ajuint level);

size_t ensGvattributeCalculateMemsize(const EnsPGvattribute gva);

AjPStr ensGvattributeGetCode(const EnsPGvattribute gva);

AjPStr ensGvattributeGetDescription(const EnsPGvattribute gva);

AjPStr ensGvattributeGetName(const EnsPGvattribute gva);

/* Ensembl Genetic Variation Attribute Adaptor */

EnsPGvattributeadaptor ensRegistryGetGvattributeadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvattributeadaptor ensGvattributeadaptorNew(
    EnsPDatabaseadaptor dba);

AjBool ensGvattributeadaptorCacheClear(EnsPGvattributeadaptor gvaa);

void ensGvattributeadaptorDel(EnsPGvattributeadaptor *Pgvaa);

EnsPBaseadaptor ensGvattributeadaptorGetBaseadaptor(
    EnsPGvattributeadaptor gvaa);

EnsPDatabaseadaptor ensGvattributeadaptorGetDatabaseadaptor(
    EnsPGvattributeadaptor gvaa);

AjBool ensGvattributeadaptorFetchAllbyCode(EnsPGvattributeadaptor gvaa,
                                           const AjPStr code,
                                           const AjPStr value,
                                           AjPList gvas);

AjBool ensGvattributeadaptorFetchByIdentifier(EnsPGvattributeadaptor gvaa,
                                              ajuint identifier,
                                              EnsPGvattribute *Pgva);

const EnsPGvattribute ensGvattributeadaptorGetDisplaytermFromsoaccession(
    EnsPGvattributeadaptor gvaa,
    const AjPStr soaccession);

const EnsPGvattribute ensGvattributeadaptorGetDisplaytermFromsoterm(
    EnsPGvattributeadaptor gvaa,
    const AjPStr soterm);

const EnsPGvattribute ensGvattributeadaptorGetSoaccessionFromsoterm(
    EnsPGvattributeadaptor gvaa,
    const AjPStr soterm);

const EnsPGvattribute ensGvattributeadaptorGetSotermFromsoaccession(
    EnsPGvattributeadaptor gvaa,
    const AjPStr soaccession);

/* Ensembl Genetic Variation Attribute Code */

EnsEGvattributetypeCode ensGvattributetypeCodeFromStr(const AjPStr code);

const char *ensGvattributetypeCodeToChar(EnsEGvattributetypeCode gvatc);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVATTRIBUTE_H */

/244            1414437294  1010  513   100644  3406      `
/* @include ensgvbaseadaptor **************************************************
**
** Ensembl Genetic Variation Base Adaptor functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.12 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:16:34 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVBASEADAPTOR_H
#define ENSGVBASEADAPTOR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Base Adaptor */

EnsPGvbaseadaptor ensGvbaseadaptorNew(
    EnsPGvdatabaseadaptor gvdba,
    const char *const *Ptablenames,
    const char *const *Pcolumnnames,
    const EnsPBaseadaptorLeftjoin leftjoins,
    const char *defaultcondition,
    const char *finalcondition,
    AjBool (*Fstatement) (EnsPBaseadaptor ba,
                          const AjPStr statement,
                          EnsPAssemblymapper am,
                          EnsPSlice slice,
                          AjPList objects));

void ensGvbaseadaptorDel(EnsPGvbaseadaptor *Pgvba);

EnsPBaseadaptor ensGvbaseadaptorGetBaseadaptor(
    EnsPGvbaseadaptor gvba);

EnsPDatabaseadaptor ensGvbaseadaptorGetDatabaseadaptor(
    EnsPGvbaseadaptor gvba);

AjBool ensGvbaseadaptorGetFailedvariations(
    EnsPGvbaseadaptor gvba);

EnsPGvdatabaseadaptor ensGvbaseadaptorGetGvdatabaseadaptor(
    EnsPGvbaseadaptor gvba);

ajuint ensGvbaseadaptorLoadPloidy(
    EnsPGvbaseadaptor gvba);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVBASEADAPTOR_H */
ensgvdata.h/    1414437294  1010  513   100644  33151     `
/* @include ensgvdata *********************************************************
**
** Ensembl Genetic Variation Data functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.22 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:06:34 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVDATA_H
#define ENSGVDATA_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPGvgenotypeadaptor ***********************************************
**
** Ensembl Genetic Variation Genotype Adaptor.
** Defined as an alias in EnsPDatabaseadaptor
**
** #alias EnsPDatabaseadaptor
** ##
******************************************************************************/

#define EnsPGvgenotypeadaptor EnsPDatabaseadaptor




/* @const EnsPGvgenotypecodeadaptor *******************************************
**
** Ensembl Genetic Variation Genotype Code Adaptor.
** Defined as an alias in EnsPGvbaseadaptor
**
** #alias EnsPGvbaseadaptor
** ##
******************************************************************************/

#define EnsPGvgenotypecodeadaptor EnsPGvbaseadaptor




/* @const EnsPGvindividualadaptor *********************************************
**
** Ensembl Genetic Variation Individual Adaptor.
** Defined as an alias in EnsPBaseadaptor
**
** #alias EnsPBaseadaptor
** ##
******************************************************************************/

#define EnsPGvindividualadaptor EnsPBaseadaptor




/* @const EnsPGvpopulationadaptor *********************************************
**
** Ensembl Genetic Variation Population Adaptor.
** Defined as an alias in EnsPBaseadaptor
**
** #alias EnsPBaseadaptor
** ##
******************************************************************************/

#define EnsPGvpopulationadaptor EnsPBaseadaptor




/* @const EnsPGvpopulationgenotypeadaptor *************************************
**
** Ensembl Genetic Variation Population Genotype Adaptor.
** Defined as an alias in EnsPGvbaseadaptor
**
** #alias EnsPGvbaseadaptor
** ##
******************************************************************************/

#define EnsPGvpopulationgenotypeadaptor EnsPGvbaseadaptor




/* @const EnsPGvsampleadaptor *************************************************
**
** Ensembl Genetic Variation Sample Adaptor.
** Defined as an alias in EnsPBaseadaptor
**
** #alias EnsPBaseadaptor
** ##
******************************************************************************/

#define EnsPGvsampleadaptor EnsPBaseadaptor




/* @const EnsPGvsynonymadaptor ************************************************
**
** Ensembl Genetic Variation Synonym Adaptor.
** Defined as an alias in EnsPDatabaseadaptor
**
** #alias EnsPDatabaseadaptor
** ##
******************************************************************************/

#define EnsPGvsynonymadaptor EnsPDatabaseadaptor




/* @const EnsPGvvariationsetadaptor *******************************************
**
** Ensembl Genetic Variation Variation Set Adaptor.
** Defined as an alias in EnsPBaseadaptor
**
** #alias EnsPBaseadaptor
** ##
******************************************************************************/

#define EnsPGvvariationsetadaptor EnsPBaseadaptor




/* @enum EnsEGvindividualGender ***********************************************
**
** Ensembl Genetic Variation Individual Gender enumeration
**
** @value ensEGvindividualGenderNULL Null
** @value ensEGvindividualGenderMale Male
** @value ensEGvindividualGenderFemale Female
** @value ensEGvindividualGenderUnknown Unknown
** @@
******************************************************************************/

typedef enum EnsOGvindividualGender
{
    ensEGvindividualGenderNULL,
    ensEGvindividualGenderMale,
    ensEGvindividualGenderFemale,
    ensEGvindividualGenderUnknown
} EnsEGvindividualGender;




/* @enum EnsEGvindividualType *************************************************
**
** Ensembl Genetic Variation Individual Type enumeration
**
** @value ensEGvindividualTypeNULL Null
** @value ensEGvindividualTypeFullyInbred Fully inbred
** @value ensEGvindividualTypePartlyInbred Partly inbred
** @value ensEGvindividualTypeOutbred Outbred
** @value ensEGvindividualTypeMutant Mutant
** @value ensEGvindividualTypeUnknown Unknown
** @@
******************************************************************************/

typedef enum EnsOGvindividualType
{
    ensEGvindividualTypeNULL,
    ensEGvindividualTypeFullyInbred,
    ensEGvindividualTypePartlyInbred,
    ensEGvindividualTypeOutbred,
    ensEGvindividualTypeMutant,
    ensEGvindividualTypeUnknown
} EnsEGvindividualType;




/* @enum EnsEGvsampleDisplay **************************************************
**
** Ensembl Genetic Variation Sample Display enumeration
**
** @value ensEGvsampleDisplayNULL Null
** @value ensEGvsampleDisplayReference Reference
** @value ensEGvsampleDisplayDefault Default
** @value ensEGvsampleDisplayDisplayable Displayable
** @value ensEGvsampleDisplayUndisplayable Undisplayable
** @value ensEGvsampleDisplayLD Linkage Disequilibrium
** @value ensEGvsampleMartdisplayable Displayable in BioMart
** @@
******************************************************************************/

typedef enum EnsOGvsampleDisplay
{
    ensEGvsampleDisplayNULL,
    ensEGvsampleDisplayReference,
    ensEGvsampleDisplayDefault,
    ensEGvsampleDisplayDisplayable,
    ensEGvsampleDisplayUndisplayable,
    ensEGvsampleDisplayLD,
    ensEGvsampleMartdisplayable
} EnsEGvsampleDisplay;




/* @enum EnsEGvsourceSomatic **************************************************
**
** Ensembl Genetic Variation Source Somatic enumeration
**
** @value ensEGvsourceSomaticNULL Null
** @value ensEGvsourceSomaticGermline Germline
** @value ensEGvsourceSomaticSomatic Somatic
** @value ensEGvsourceSomaticMixed Mixed
** @@
******************************************************************************/

typedef enum EnsOGvsourceSomatic
{
    ensEGvsourceSomaticNULL,
    ensEGvsourceSomaticGermline,
    ensEGvsourceSomaticSomatic,
    ensEGvsourceSomaticMixed
} EnsEGvsourceSomatic;




/* @enum EnsEGvsourceType *****************************************************
**
** Ensembl Genetic Variation Source Type enumeration
**
** @value ensEGvsourceTypeNULL Null
** @value ensEGvsourceTypeChip Chip
** @@
******************************************************************************/

typedef enum EnsOGvsourceType
{
    ensEGvsourceTypeNULL,
    ensEGvsourceTypeChip
} EnsEGvsourceType;




/* @enum EnsEGvvariationClass *************************************************
**
** Ensembl Genetic Variation Variation Class enumeration
**
** @value ensEGvvariationClassNULL      Null
** @value ensEGvvariationClassSO0001483 SNV
** @value ensEGvvariationClassSO1000002 substitution
** @value ensEGvvariationClassSO0000667 insertion
** @value ensEGvvariationClassSO0000159 deletion
** @value ensEGvvariationClassSO0000705 tandem_repeat
** @value ensEGvvariationClassSO1000032 indel
** @value ensEGvvariationClassSO0001059 sequence_alteration
** @value ensEGvvariationClassSO0001019 copy_number_variation
** @@
******************************************************************************/

typedef enum EnsOGvvariationClass
{
    ensEGvvariationClassNULL,
    ensEGvvariationClassSO0001483,
    ensEGvvariationClassSO1000002,
    ensEGvvariationClassSO0000667,
    ensEGvvariationClassSO0000159,
    ensEGvvariationClassSO0000705,
    ensEGvvariationClassSO1000032,
    ensEGvvariationClassSO0001059,
    ensEGvvariationClassSO0001019
} EnsEGvvariationClass;




/* @enum EnsEGvvariationValidation ********************************************
**
** Ensembl Genetic Variation Variation Validation enumeration
**
** @value ensEGvvariationValidationNULL Null
** @value ensEGvvariationValidationCluster Cluster
** @value ensEGvvariationValidationFrequency Frequency
** @value ensEGvvariationValidationSubmitter Submitter
** @value ensEGvvariationValidationDoublehit Double-hit
** @value ensEGvvariationValidationHapMap HAP Map Project
** @value ensEGvvariationValidation1000Genomes 1000 Genomes Project
** @value ensEGvvariationValidationFailed Failed
** @value ensEGvvariationValidationPrecious Precious
** @@
******************************************************************************/

typedef enum EnsOGvvariationValidation
{
    ensEGvvariationValidationNULL,
    ensEGvvariationValidationCluster,
    ensEGvvariationValidationFrequency,
    ensEGvvariationValidationSubmitter,
    ensEGvvariationValidationDoublehit,
    ensEGvvariationValidationHapMap,
    ensEGvvariationValidation1000Genomes,
    ensEGvvariationValidationFailed,
    ensEGvvariationValidationPrecious
} EnsEGvvariationValidation;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

struct EnsSGvsource;




/* @data EnsPGvdatabaseadaptor ************************************************
**
** Ensembl Genetic Variation Database Adaptor.
**
** @alias EnsSGvdatabaseadaptor
** @alias EnsOGvdatabaseadaptor
**
** @alias EnsPGvvariationadaptor
**
** @cc Bio::EnsEMBL::Variation::DBSQL::DBAdaptor
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor
** @attr Failedvariations [AjBool] Failed variation
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSGvdatabaseadaptor
{
    EnsPDatabaseadaptor Adaptor;
    AjBool Failedvariations;
    ajuint Padding;
} EnsOGvdatabaseadaptor;

#define EnsPGvdatabaseadaptor EnsOGvdatabaseadaptor*




/* @data EnsPGvbaseadaptorLeftjoin ********************************************
**
** Ensembl Genetic Variation Base Adaptor SQL LEFT JOIN condition
**
** @alias EnsSGvbaseadaptorLeftjoin
** @alias EnsOGvbaseadaptorLeftjoin
**
** @attr Tablename [char*] SQL table name
** @attr Condition [char*] SQL LEFT JOIN condition
** @@
** FIXME: Could this just become an alias of EnsPBaseadaptorLeftjoin
******************************************************************************/

typedef struct EnsSGvbaseadaptorLeftjoin
{
    char *Tablename;
    char *Condition;
} EnsOGvbaseadaptorLeftjoin;

#define EnsPGvbaseadaptorLeftjoin EnsOGvbaseadaptorLeftjoin*




/* @data EnsPGvbaseadaptor ****************************************************
**
** Ensembl Genetic Variation Base Adaptor.
**
** @alias EnsSGvbaseadaptor
** @alias EnsOGvbaseadaptor
**
** @alias EnsPGvgenotypecodeadaptor
** @alias EnsPGvpopulationgenotypeadaptor
** @alias EnsPGvtranscriptvariationadaptor
**
** @cc Bio::EnsEMBL::Variation::DBSQL::BaseAdaptor
** @attr Adaptor [EnsPGvdatabaseadaptor]
** Ensembl Genetic Variation Database Adaptor
** @attr Baseadaptor [EnsPBaseadaptor]
** Ensembl Base Adaptor
** @attr Ploidy [ajuint] Ploidy
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSGvbaseadaptor
{
    EnsPGvdatabaseadaptor Adaptor;
    EnsPBaseadaptor Baseadaptor;
    ajuint Ploidy;
    ajuint Padding;
} EnsOGvbaseadaptor;

#define EnsPGvbaseadaptor EnsOGvbaseadaptor*




/* @data EnsPGvattributeadaptor ***********************************************
**
** Ensembl Genetic Variation Attribute Adaptor
**
** @alias EnsSGvattributeadaptor
** @alias EnsOGvattributeadaptor
**
** @cc Bio::EnsEMBL::Variation::DBSQL::AttributeAdaptor
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheBySet [AjPVoid] Cache by attribute sets
** @@
******************************************************************************/

typedef struct EnsSGvattributeadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPVoid CacheBySet;
} EnsOGvattributeadaptor;

#define EnsPGvattributeadaptor EnsOGvattributeadaptor*




/* @data EnsPGvattribute ******************************************************
**
** Ensembl Genetic Variation Attribute
**
** @alias EnsSGvattribute
** @alias EnsOGvattribute
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvattributeadaptor]
** Ensembl Genetic Variation Attribute Adaptor
** @attr Attributetype [EnsPAttributetype] Ensembl Attribute Type
** @attr Value [AjPStr] Value
** @@
******************************************************************************/

typedef struct EnsSGvattribute
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvattributeadaptor Adaptor;
    EnsPAttributetype Attributetype;
    AjPStr Value;
} EnsOGvattribute;

#define EnsPGvattribute EnsOGvattribute*




/* @data EnsPGvsample *********************************************************
**
** Ensembl Genetic Variation Sample.
**
** @alias EnsSGvsample
** @alias EnsOGvsample
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvsampleadaptor]
** Ensembl Genetic Variation Sample Adaptor
** @cc Bio::EnsEMBL::Variation::Sample
** @attr Name [AjPStr] Name
** @attr Description [AjPStr] Description
** @attr Display [EnsEGvsampleDisplay] Display
** @attr Size [ajuint] Size
** @@
******************************************************************************/

typedef struct EnsSGvsample
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvsampleadaptor Adaptor;
    AjPStr Name;
    AjPStr Description;
    EnsEGvsampleDisplay Display;
    ajuint Size;
} EnsOGvsample;

#define EnsPGvsample EnsOGvsample*




/* @data EnsPGvindividual *****************************************************
**
** Ensembl Genetic Variation Individual.
**
** @alias EnsSGvindividual
** @alias EnsOGvindividual
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvindividualadaptor]
** Ensembl Genetic Variation Individual Adaptor
** @cc Bio::EnsEMBL::Variation::Sample
** @attr Gvsample [EnsPGvsample] Sample
** @cc Bio::EnsEMBL::Variation::Individual
** @attr Father [struct EnsSGvindividual*] Father Individual
** @attr Mother [struct EnsSGvindividual*] Mother Individual
** @attr Gender [EnsEGvindividualGender] Gender
** @attr Type [EnsEGvindividualType] Type
** @attr Description [AjPStr] Description
** @@
******************************************************************************/

typedef struct EnsSGvindividual
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvindividualadaptor Adaptor;
    EnsPGvsample Gvsample;
    struct EnsSGvindividual *Father;
    struct EnsSGvindividual *Mother;
    EnsEGvindividualGender Gender;
    EnsEGvindividualType Type;
    AjPStr Description;
} EnsOGvindividual;

#define EnsPGvindividual EnsOGvindividual*




/* @data EnsPGvpopulation *****************************************************
**
** Ensembl Genetic Variation Population.
**
** @alias EnsSGvpopulation
** @alias EnsOGvpopulation
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvpopulationadaptor]
** Ensembl Genetic Variation Population Adaptor
** @cc Bio::EnsEMBL::Variation::Sample
** @attr Gvsample [EnsPGvsample] Sample
** @cc Bio::EnsEMBL::Variation::Population
** @attr Subgvpopulations [AjPList]
** AJAX List of (Sub-) Ensembl Genetic Variation Population objects
** @@
******************************************************************************/

typedef struct EnsSGvpopulation
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvpopulationadaptor Adaptor;
    EnsPGvsample Gvsample;
    AjPList Subgvpopulations;
} EnsOGvpopulation;

#define EnsPGvpopulation EnsOGvpopulation*




/* @data EnsPGvalleleadaptor **************************************************
**
** Ensembl Genetic Variation Allele Adaptor.
**
** @alias EnsSGvalleleadaptor
** @alias EnsOGvalleleadaptor
**
** @cc Bio::EnsEMBL::Variation::DBSQL::AlleleAdaptor
** @attr Excludeadaptor [EnsPGvbaseadaptor]
** Ensembl Genetic Variation Base Adaptor excluding the failed_variation table
** @attr Includeadaptor [EnsPGvbaseadaptor]
** Ensembl Genetic Variation Base Adaptor including the failed_variation table
** @@
******************************************************************************/

typedef struct EnsSGvalleleadaptor
{
    EnsPGvbaseadaptor Excludeadaptor;
    EnsPGvbaseadaptor Includeadaptor;
} EnsOGvalleleadaptor;

#define EnsPGvalleleadaptor EnsOGvalleleadaptor*




/* @data EnsPGvallele *********************************************************
**
** Ensembl Genetic Variation Allele.
**
** @alias EnsSGvallele
** @alias EnsOGvallele
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvalleleadaptor] Ensembl Genetic Variation
**                                     Allele Adaptor
** @cc Bio::EnsEMBL::Variation::Allele
** @attr Gvpopulation [EnsPGvpopulation] Ensembl Genetic Variation Population
** @attr Allele [AjPStr] Allele
** @attr Subhandle [AjPStr] Subhandle
** @attr Faileddescriptions [AjPList]
** AJAX List of AJAX String (failed description) objects
** @attr Counter [ajuint] Counter
** @attr Gvvariationidentifier [ajuint]
** Ensembl Genetic Variation Variation identifier
** @attr Subidentifier [ajuint] Subidentifier
** @attr Frequency [float] Frequency
** @@
******************************************************************************/

typedef struct EnsSGvallele
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvalleleadaptor Adaptor;
    EnsPGvpopulation Gvpopulation;
    AjPStr Allele;
    AjPStr Subhandle;
    AjPList Faileddescriptions;
    ajuint Counter;
    ajuint Gvvariationidentifier;
    ajuint Subidentifier;
    float Frequency;
} EnsOGvallele;

#define EnsPGvallele EnsOGvallele*




/* @data EnsPGvsourceadaptor **************************************************
**
** Ensembl Genetic Variation Source Adaptor.
**
** @alias EnsSGvsourceadaptor
** @alias EnsOGvsourceadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByName [AjPTable] Name cache
** @attr DefaultGvsource [struct EnsSGvsource*]
** Default Ensembl Genetic Variation Source
** @@
******************************************************************************/

typedef struct EnsSGvsourceadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByName;
    struct EnsSGvsource *DefaultGvsource;
} EnsOGvsourceadaptor;

#define EnsPGvsourceadaptor EnsOGvsourceadaptor*




/* @data EnsPGvsource *********************************************************
**
** Ensembl Genetic Variation Source.
**
** @alias EnsSGvsource
** @alias EnsOGvsource
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvsourceadaptor] Ensembl Genetic Variation
**                                     Source Adaptor
** @cc Bio::EnsEMBL::Variation::???
** @attr Name [AjPStr] Name
** @attr Version [AjPStr] Version
** @attr Description [AjPStr] Description
** @attr URL [AjPStr] Uniform Resource Locator
** @attr Somatic [EnsEGvsourceSomatic]
** Ensembl Genetic Variation Source Somatic enumeration
** @attr Type [EnsEGvsourceType]
** Ensembl Genetic Variation Source Type enumeration
** @@
******************************************************************************/

typedef struct EnsSGvsource
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvsourceadaptor Adaptor;
    AjPStr Name;
    AjPStr Version;
    AjPStr Description;
    AjPStr URL;
    EnsEGvsourceSomatic Somatic;
    EnsEGvsourceType Type;
} EnsOGvsource;

#define EnsPGvsource EnsOGvsource*




/* @data EnsPGvsynonym ********************************************************
**
** Ensembl Genetic Variation Synonym.
**
** @alias EnsSGvsynonym
** @alias EnsOGvsynonym
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvsynonymadaptor] Ensembl Genetic Variation
**                                      Synonym Adaptor
** @cc Bio::EnsEMBL::Variation::??
** @attr Gvsource [EnsPGvsource] Ensembl Genetic Variation Source
** @attr Name [AjPStr] Name
** @attr Moleculetype [AjPStr] Molecule type
** @attr Gvvariationidentifier [ajuint] Ensembl Genetic Variation identifier
** @attr Subidentifier [ajuint] Subidentifier
** @@
******************************************************************************/

typedef struct EnsSGvsynonym
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvsynonymadaptor Adaptor;
    EnsPGvsource Gvsource;
    AjPStr Name;
    AjPStr Moleculetype;
    ajuint Gvvariationidentifier;
    ajuint Subidentifier;
} EnsOGvsynonym;

#define EnsPGvsynonym EnsOGvsynonym*




/* @data EnsPGvvariationadaptor ***********************************************
**
** Ensembl Genetic Variation Variation Adaptor.
**
** @alias EnsOGvvariationadaptor
** @alias EnsSGvvariationadaptor
**
** @attr Adaptor [EnsPGvbaseadaptor] Ensembl Genetic Variation Base Adaptor
** @attr Tablenames [char**] SQL table name array
** @attr Columnnames [char**] SQL column name array
** @attr Condition [char*] SQL SELECT default condition,
**                         which is dynamically assigned.
** @attr Leftjoins [EnsPGvbaseadaptorLeftjoin] SQL LEFT JOIN conditions
** @attr Defaultcondition [char*] SQL SELECT default condition
** @@
******************************************************************************/

typedef struct EnsSGvvariationadaptor
{
    EnsPGvbaseadaptor Adaptor;
    char **Tablenames;
    char **Columnnames;
    char *Condition;
    EnsPGvbaseadaptorLeftjoin Leftjoins;
    char *Defaultcondition;
} EnsOGvvariationadaptor;

#define EnsPGvvariationadaptor EnsOGvvariationadaptor*




/* @data EnsPGvvariation ******************************************************
**
** Ensembl Genetic Variation Variation.
**
** @alias EnsSGvvariation
** @alias EnsOGvvariation
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvvariationadaptor] Ensembl Genetic Variation
**                                        Variation Adaptor
** @cc Bio::EnsEMBL::Variation::Variation
** @attr Class [EnsPGvattribute]
** Class Ensembl Genetic Variation Attribute
** @attr Clinical [EnsPGvattribute]
** Clinical Significance Ensembl Genetic Variation Attribute
** @attr Gvsource [EnsPGvsource] Ensembl Genetic Variation Source
** @attr Name [AjPStr] Name
** @attr Handles [AjPTable] Handles
** @attr Ancestralallele [AjPStr] Ancestral allele
** @attr MinoralleleAllele [AjPStr] Minor allele allele
** @attr Gvalleles [AjPList] AJAX List of
** Ensembl Genetic Variation Allele objects
** @attr Gvsynonyms [AjPList] AJAX List of
** Ensembl Genetic Variation Synonym objects
** @attr Faileddescriptions [AjPList] AJAX List of
** AJAX String (failed description) objects
** @attr Moleculetype [AjPStr] Molecule type
** @attr FlankFive [AjPStr] Five-prime flanking sequence
** @attr FlankThree [AjPStr] Three-prime flanking sequence
** @attr FlankExists [AjBool] A five-prime or three-prime flank exists
** @attr Flipped [AjBool] Flipped
** @attr Somatic [AjBool] Somatic or germline flag
** @attr Validations [ajuint] Bit field of validation states
** @attr MinoralleleCount [ajuint] Minor allele count
** @attr MinoralleleFrequency [float] Minor allele frequency
** @@
******************************************************************************/

typedef struct EnsSGvvariation
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvvariationadaptor Adaptor;
    EnsPGvattribute Class;
    EnsPGvattribute Clinical;
    EnsPGvsource Gvsource;
    AjPStr Name;
    AjPTable Handles;
    AjPStr Ancestralallele;
    AjPStr MinoralleleAllele;
    AjPList Gvalleles;
    AjPList Gvsynonyms;
    AjPList Faileddescriptions;
    AjPStr Moleculetype;
    AjPStr FlankFive;
    AjPStr FlankThree;
    AjBool FlankExists;
    AjBool Flipped;
    AjBool Somatic;
    ajuint Validations;
    ajuint MinoralleleCount;
    float MinoralleleFrequency;
} EnsOGvvariation;

#define EnsPGvvariation EnsOGvvariation*




/* @data EnsPGvvariationfeatureadaptor ****************************************
**
** Ensembl Genetic Variation Variation Feature Adaptor.
**
** @alias EnsSGvvariationfeatureadaptor
** @alias EnsOGvvariationfeatureadaptor
**
** @attr Adaptor [EnsPGvdatabaseadaptor]
** Ensembl Genetic Variation Database Adaptor
** @attr Featureadaptor [EnsPFeatureadaptor] Ensembl Feature Adaptor
** @@
******************************************************************************/

typedef struct EnsSGvvariationfeatureadaptor
{
    EnsPGvdatabaseadaptor Adaptor;
    EnsPFeatureadaptor Featureadaptor;
} EnsOGvvariationfeatureadaptor;

#define EnsPGvvariationfeatureadaptor EnsOGvvariationfeatureadaptor*




/* @data EnsPGvvariationfeature ***********************************************
**
** Ensembl Genetic Variation Variation Feature.
**
** @alias EnsSGvvariationfeature
** @alias EnsOGvvariationfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvvariationfeatureadaptor] Ensembl Genetic Variation
**                                               Genotype Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Variation::VariationFeature
** @attr Gvsource [EnsPGvsource] Ensembl Genetic Variation Source
** @attr Gvvariation [EnsPGvvariation] Ensembl Genetic Variation Variation
** @attr Allele [AjPStr] Allele, denormalisation from allele.allele
** @attr Name [AjPStr] Name, denormalisation from variation.name
** @attr Validationcode [AjPStr] Validation code
** @attr Consequencetype [AjPStr] Consequence type
** @attr Mapweight [ajuint] Map weight or the number of times that the
**                          Variation associated with this Feature has hit
**                          the genome. If this was the only Feature associated
**                          with this Variation Feature the map weight would be
**                          1.
** @attr Gvvariationidentifier [ajuint] Ensembl Genetic Variation Variation
**                                      identifier
** @attr GvvariationClass [EnsEGvvariationClass]
** Ensembl Genetic Variation Variation Class enumeration
** @attr Padding [ajuint] Padding to alignment boundary
** @cc The somatic member is part of the EnsSGvsource data structure
** @@
******************************************************************************/

typedef struct EnsSGvvariationfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvvariationfeatureadaptor Adaptor;
    EnsPFeature Feature;
    EnsPGvsource Gvsource;
    EnsPGvvariation Gvvariation;
    AjPStr Allele;
    AjPStr Name;
    AjPStr Validationcode;
    AjPStr Consequencetype;
    ajuint Mapweight;
    ajuint Gvvariationidentifier;
    EnsEGvvariationClass GvvariationClass;
    ajuint Padding;
} EnsOGvvariationfeature;

#define EnsPGvvariationfeature EnsOGvvariationfeature*




/* @data EnsPGvvariationset ***************************************************
**
** Ensembl Genetic Variation Variation Set.
**
** @alias EnsSGvvariationset
** @alias EnsOGvvariationset
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvvariationsetadaptor] Ensembl Genetic Variation
**                                           Set Adaptor
** @cc Bio::EnsEMBL::Variation::VariationSet
** @attr Name [AjPStr] Name
** @attr Description [AjPStr] Description
** @attr Shortname [AjPStr] Short name
** @@
******************************************************************************/

typedef struct EnsSGvvariationset
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvvariationsetadaptor Adaptor;
    AjPStr Name;
    AjPStr Description;
    AjPStr Shortname;
} EnsOGvvariationset;

#define EnsPGvvariationset EnsOGvvariationset*




/* @data EnsPGvgenotype *******************************************************
**
** Ensembl Genetic Variation Genotype.
**
** @alias EnsSGvgenotype
** @alias EnsOGvgenotype
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvgenotypeadaptor] Ensembl Genetic Variation
**                                       Genotype Adaptor
** @cc Bio::EnsEMBL::Variation::Genotype
** @attr Gvvariation [EnsPGvvariation] Ensembl Genetic Variation Variation
** @attr Alleles [AjPList] AJAX List of AJAX String objects
** @attr Subhandle [AjPStr] Subhandle
** @attr Subidentifier [ajuint] Subidentifier
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSGvgenotype
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvgenotypeadaptor Adaptor;
    EnsPGvvariation Gvvariation;
    AjPList Alleles;
    AjPStr Subhandle;
    ajuint Subidentifier;
    ajuint Padding;
} EnsOGvgenotype;

#define EnsPGvgenotype EnsOGvgenotype*




/* @data EnsPGvgenotypecode ***************************************************
**
** Ensembl Genetic Variation Genotype Code.
**
** @alias EnsSGvgenotypecode
** @alias EnsOGvgenotypecode
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvgenotypecodeadaptor]
** Ensembl Genetic Variation Genotype Code Adaptor
** @cc Bio::EnsEMBL::Variation::GenotypeCode
** @attr Alleles [AjPList] AJAX List of AJAX String (allele) objects
** @@
******************************************************************************/

typedef struct EnsSGvgenotypecode
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvgenotypecodeadaptor Adaptor;
    AjPList Alleles;
} EnsOGvgenotypecode;

#define EnsPGvgenotypecode EnsOGvgenotypecode*




/* @data EnsPGvpopulationgenotype *********************************************
**
** Ensembl Genetic Variation Population Genotype.
**
** @alias EnsSGvpopulationgenotype
** @alias EnsOGvpopulationgenotype
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvpopulationgenotypeadaptor] Ensembl Genetic
**                                       Variation Population Genotype Adaptor
** @cc Bio::EnsEMBL::Variation::PopulationGenotype
** @attr Gvpopulation [EnsPGvpopulation] Ensembl Genetic Variation Population
** @attr Gvgenotype [EnsPGvgenotype] Ensembl Genetic Variation Genotype
** @attr Counter [ajuint] Counter
** @attr Frequency [float] Frequency
** @@
******************************************************************************/

typedef struct EnsSGvpopulationgenotype
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvpopulationgenotypeadaptor Adaptor;
    EnsPGvpopulation Gvpopulation;
    EnsPGvgenotype Gvgenotype;
    ajuint Counter;
    float Frequency;
} EnsOGvpopulationgenotype;

#define EnsPGvpopulationgenotype EnsOGvpopulationgenotype*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVDATA_H */

/264            1414437294  1010  513   100644  3731      `
/* @include ensgvdatabaseadaptor **********************************************
**
** Ensembl Genetic Variation Database Adaptor functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.7 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/03/28 21:08:38 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVDATABASEADAPTOR_H
#define ENSGVDATABASEADAPTOR_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Database Adaptor */

EnsPGvdatabaseadaptor ensRegistryGetGvdatabaseadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvdatabaseadaptor ensGvdatabaseadaptorNewIni(EnsPDatabaseadaptor dba);

void ensGvdatabaseadaptorDel(EnsPGvdatabaseadaptor *Pgvdba);

EnsPDatabaseadaptor ensGvdatabaseadaptorGetDatabaseadaptor(
    const EnsPGvdatabaseadaptor gvdba);

AjBool ensGvdatabaseadaptorGetFailedvariations(
    const EnsPGvdatabaseadaptor gvdba);

AjBool ensGvdatabaseadaptorSetDatabaseadaptor(EnsPGvdatabaseadaptor gvdba,
                                              EnsPDatabaseadaptor dba);

AjBool ensGvdatabaseadaptorSetFailedvariations(EnsPGvdatabaseadaptor gvdba,
                                               AjBool fv);

AjBool ensGvdatabaseadaptorTrace(const EnsPGvdatabaseadaptor gvdba,
                                 ajuint level);

AjBool ensGvdatabaseadaptorFailedallelesconstraint(
    EnsPGvdatabaseadaptor gvdba,
    const AjPStr tablename,
    AjPStr *Pconstraint);

AjBool ensGvdatabaseadaptorFailedstructuralsconstraint(
    EnsPGvdatabaseadaptor gvdba,
    const AjPStr tablename,
    AjPStr *Pconstraint);

AjBool ensGvdatabaseadaptorFailedvariationsconstraint(
    EnsPGvdatabaseadaptor gvdba,
    const AjPStr tablename,
    AjPStr *Pconstraint);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVDATABASEADAPTOR_H */

ensgvgenotype.h/1414437294  1010  513   100644  7061      `
/* @include ensgvgenotype *****************************************************
**
** Ensembl Genetic Variation Genotype functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.9 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:07:17 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVGENOTYPE_H
#define ENSGVGENOTYPE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

AjBool ensUtilityCharSort(char *string);

char ensUtilityBaseAmbiguityFromString(const char *basestr);

const char* ensUtilityBaseAmbiguityToString(char ambiguitychar);

/* Ensembl Genetic Variation Genotype */

EnsPGvgenotype ensGvgenotypeNewCpy(const EnsPGvgenotype gvg);

EnsPGvgenotype ensGvgenotypeNewIni(EnsPGvgenotypeadaptor gvga,
                                   ajuint identifier,
                                   EnsPGvvariation gvv,
                                   AjPList alleles,
                                   AjPStr subhandle,
                                   ajuint subidentifier);

EnsPGvgenotype ensGvgenotypeNewRef(EnsPGvgenotype gvg);

void ensGvgenotypeDel(EnsPGvgenotype *Pgvg);

EnsPGvgenotypeadaptor ensGvgenotypeGetAdaptor(const EnsPGvgenotype gvg);

const AjPList ensGvgenotypeGetAlleles(const EnsPGvgenotype gvg);

EnsPGvvariation ensGvgenotypeGetGvvariation(const EnsPGvgenotype gvg);

ajuint ensGvgenotypeGetIdentifier(const EnsPGvgenotype gvg);

AjPStr ensGvgenotypeGetSubhandle(const EnsPGvgenotype gvg);

ajuint ensGvgenotypeGetSubidentifier(const EnsPGvgenotype gvg);

AjBool ensGvgenotypeSetAdaptor(EnsPGvgenotype gvg,
                               EnsPGvgenotypeadaptor gvga);

AjBool ensGvgenotypeSetGvvariation(EnsPGvgenotype gvg,
                                   EnsPGvvariation gvv);

AjBool ensGvgenotypeSetIdentifier(EnsPGvgenotype gvg,
                                  ajuint identifier);

AjBool ensGvgenotypeSetSubhandle(EnsPGvgenotype gvg,
                                 AjPStr subhandle);

AjBool ensGvgenotypeSetSubidentifier(EnsPGvgenotype gvg,
                                     ajuint subidentifier);

AjBool ensGvgenotypeAddAllele(EnsPGvgenotype gvg,
                              AjPStr allele);

AjBool ensGvgenotypeAddAllelenumber(EnsPGvgenotype gvg,
                                    ajuint number,
                                    AjPStr allele);

AjBool ensGvgenotypeAddGvgenotypecode(EnsPGvgenotype gvg,
                                      EnsPGvgenotypecode gvgc);

AjBool ensGvgenotypeTrace(const EnsPGvgenotype gvg, ajuint level);

const AjPStr ensGvgenotypeCalculateAllelenumber(const EnsPGvgenotype gvg,
                                                ajuint number);

size_t ensGvgenotypeCalculateMemsize(const EnsPGvgenotype gvg);

AjBool ensGvgenotypeFetchAlleleNumber(const EnsPGvgenotype gvg,
                                      ajuint number,
                                      AjPStr *Pallele);

AjBool ensGvgenotypeFetchAlleleString(const EnsPGvgenotype gvg,
                                      AjPStr *Pstring);

/* Ensembl Genetic Variation Genotype Adaptor */

EnsPGvgenotypeadaptor ensRegistryGetGvgenotypeadaptor(
    EnsPDatabaseadaptor dba);

/* Ensembl Genetic Variation Genotype Code */

EnsPGvgenotypecode ensGvgenotypecodeNewCpy(const EnsPGvgenotypecode gvgc);

EnsPGvgenotypecode ensGvgenotypecodeNewIni(EnsPGvgenotypecodeadaptor gvgca,
                                           ajuint identifier,
                                           AjPList alleles);

EnsPGvgenotypecode ensGvgenotypecodeNewRef(EnsPGvgenotypecode gvgc);

void ensGvgenotypecodeDel(EnsPGvgenotypecode *Pgvgc);

EnsPGvgenotypecodeadaptor ensGvgenotypecodeGetAdaptor(
    const EnsPGvgenotypecode gvgc);

const AjPList ensGvgenotypecodeGetAlleles(
    const EnsPGvgenotypecode gvgc);

ajuint ensGvgenotypecodeGetIdentifier(
    const EnsPGvgenotypecode gvgc);

AjBool ensGvgenotypecodeSetAdaptor(EnsPGvgenotypecode gvgc,
                                   EnsPGvgenotypecodeadaptor gvgca);

AjBool ensGvgenotypecodeSetIdentifier(EnsPGvgenotypecode gvgc,
                                      ajuint identifier);

AjBool ensGvgenotypecodeAddAllele(EnsPGvgenotypecode gvgc, AjPStr allele);

AjBool ensGvgenotypecodeTrace(const EnsPGvgenotypecode gvgc, ajuint level);

size_t ensGvgenotypecodeCalculateMemsize(const EnsPGvgenotypecode gvgc);

/* Ensembl Genetic Variation Genotype Code Adaptor */

EnsPGvgenotypecodeadaptor ensRegistryGetGvgenotypecodeadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvgenotypecodeadaptor ensGvgenotypecodeadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvgenotypecodeadaptorDel(
    EnsPGvgenotypecodeadaptor *Pgvgca);

EnsPBaseadaptor ensGvgenotypecodeadaptorGetBaseadaptor(
    EnsPGvgenotypecodeadaptor gvgca);

EnsPDatabaseadaptor ensGvgenotypecodeadaptorGetDatabaseadaptor(
    EnsPGvgenotypecodeadaptor gvgca);

EnsPGvbaseadaptor ensGvgenotypecodeadaptorGetGvbaseadaptor(
    EnsPGvgenotypecodeadaptor gvgca);

AjBool ensGvgenotypecodeadaptorFetchAllbyIdentifiers(
    EnsPGvgenotypecodeadaptor gvgca,
    AjPTable gvgcs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVGENOTYPE_H */

/288            1414437294  1010  513   100644  7146      `
/* @include ensgvindividual ***************************************************
**
** Ensembl Genetic Variation Individual functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.16 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:56:34 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVINDIVIDUAL_H
#define ENSGVINDIVIDUAL_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvsample.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Individual */

EnsPGvindividual ensGvindividualNewCpy(const EnsPGvindividual gvi);

EnsPGvindividual ensGvindividualNewIni(EnsPGvindividualadaptor gvia,
                                       ajuint identifier,
                                       EnsPGvsample gvs,
                                       EnsPGvindividual father,
                                       EnsPGvindividual mother,
                                       EnsEGvindividualGender gender,
                                       EnsEGvindividualType type,
                                       AjPStr description);

EnsPGvindividual ensGvindividualNewRef(EnsPGvindividual gvi);

void ensGvindividualDel(EnsPGvindividual *Pgvi);

EnsPGvindividualadaptor ensGvindividualGetAdaptor(const EnsPGvindividual gvi);

AjPStr ensGvindividualGetDescription(const EnsPGvindividual gvi);

EnsPGvindividual ensGvindividualGetFather(const EnsPGvindividual gvi);

EnsEGvindividualGender ensGvindividualGetGender(const EnsPGvindividual gvi);

EnsPGvsample ensGvindividualGetGvsample(const EnsPGvindividual gvi);

ajuint ensGvindividualGetIdentifier(const EnsPGvindividual gvi);

EnsPGvindividual ensGvindividualGetMother(const EnsPGvindividual gvi);

EnsEGvindividualType ensGvindividualGetType(const EnsPGvindividual gvi);

AjBool ensGvindividualSetAdaptor(EnsPGvindividual gvi,
                                 EnsPGvindividualadaptor gvia);

AjBool ensGvindividualSetDescription(EnsPGvindividual gvi,
                                     AjPStr description);

AjBool ensGvindividualSetFather(EnsPGvindividual gvi,
                                EnsPGvindividual father);

AjBool ensGvindividualSetGender(EnsPGvindividual gvi,
                                EnsEGvindividualGender gender);

AjBool ensGvindividualSetGvsample(EnsPGvindividual gvi,
                                  EnsPGvsample gvs);

AjBool ensGvindividualSetIdentifier(EnsPGvindividual gvi,
                                    ajuint identifier);

AjBool ensGvindividualSetMother(EnsPGvindividual gvi,
                                EnsPGvindividual mother);

AjBool ensGvindividualSetType(EnsPGvindividual gvi,
                              EnsEGvindividualType type);

AjBool ensGvindividualTrace(const EnsPGvindividual gvi, ajuint level);

size_t ensGvindividualCalculateMemsize(const EnsPGvindividual gvi);

AjBool ensGvindividualFetchAllChildren(EnsPGvindividual gvi,
                                       AjPList gvis);

AjBool ensGvindividualFetchAllGvpopulations(EnsPGvindividual gvi,
                                            AjPList gvps);

EnsEGvindividualGender ensGvindividualGenderFromStr(const AjPStr gender);

const char *ensGvindividualGenderToChar(EnsEGvindividualGender gvig);

EnsEGvindividualType ensGvindividualTypeFromStr(const AjPStr type);

const char *ensGvindividualTypeToChar(EnsEGvindividualType gvit);

/* Ensembl Genetic Variation Individual Adaptor */

EnsPGvindividualadaptor ensRegistryGetGvindividualadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvindividualadaptor ensGvindividualadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvindividualadaptorDel(EnsPGvindividualadaptor *Pgvia);

EnsPGvsampleadaptor ensGvindividualadaptorGetBaseadaptor(
    EnsPGvindividualadaptor gvia);

EnsPDatabaseadaptor ensGvindividualadaptorGetDatabaseadaptor(
    EnsPGvindividualadaptor gvia);

AjBool ensGvindividualadaptorFetchAllCoverage(
    EnsPGvindividualadaptor gvia,
    AjPList idlist);

AjBool ensGvindividualadaptorFetchAllDefault(
    EnsPGvindividualadaptor gvia,
    AjPList gvis);

AjBool ensGvindividualadaptorFetchAllDisplayable(
    EnsPGvindividualadaptor gvia,
    AjPList gvis);

AjBool ensGvindividualadaptorFetchAllStrains(
    EnsPGvindividualadaptor gvia,
    AjPList gvis);

AjBool ensGvindividualadaptorFetchAllbyDisplay(
    EnsPGvindividualadaptor gvia,
    EnsEGvsampleDisplay display,
    AjPList gvis);

AjBool ensGvindividualadaptorFetchAllbyGvpopulation(
    EnsPGvindividualadaptor gvia,
    const EnsPGvpopulation gvp,
    AjPList gvis);

AjBool ensGvindividualadaptorFetchAllbyName(
    EnsPGvindividualadaptor gvia,
    const AjPStr name,
    AjPList gvis);

AjBool ensGvindividualadaptorFetchAllbyParent(
    EnsPGvindividualadaptor gvia,
    const EnsPGvindividual parent,
    AjPList gvis);

AjBool ensGvindividualadaptorFetchAllbySynonym(
    EnsPGvindividualadaptor adaptor,
    const AjPStr synonym,
    const AjPStr source,
    AjPList individuals);

AjBool ensGvindividualadaptorFetchByIdentifier(
    EnsPGvindividualadaptor gvia,
    ajuint identifier,
    EnsPGvindividual *Pgvi);

AjBool ensGvindividualadaptorFetchReference(
    EnsPGvindividualadaptor gvia,
    EnsPGvindividual *Pgvi);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVINDIVIDUAL_H */
/307            1414437294  1010  513   100644  9657      `
/* @include ensgvpopulation ***************************************************
**
** Ensembl Genetic Variation Population functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.22 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:58:32 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVPOPULATION_H
#define ENSGVPOPULATION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Population */

EnsPGvpopulation ensGvpopulationNewCpy(const EnsPGvpopulation gvp);

EnsPGvpopulation ensGvpopulationNewIni(EnsPGvpopulationadaptor gvpa,
                                       ajuint identifier,
                                       EnsPGvsample gvs,
                                       AjPList subpopulations);

EnsPGvpopulation ensGvpopulationNewRef(EnsPGvpopulation gvp);

void ensGvpopulationDel(EnsPGvpopulation *Pgvp);

EnsPGvpopulationadaptor ensGvpopulationGetAdaptor(const EnsPGvpopulation gvp);

EnsPGvsample ensGvpopulationGetGvsample(const EnsPGvpopulation gvp);

ajuint ensGvpopulationGetIdentifier(const EnsPGvpopulation gvp);

const AjPList ensGvpopulationGetSubgvpopulations(const EnsPGvpopulation gvp);

AjBool ensGvpopulationSetAdaptor(EnsPGvpopulation gvp,
                                 EnsPGvpopulationadaptor gvpa);

AjBool ensGvpopulationSetGvsample(EnsPGvpopulation gvp, EnsPGvsample gvs);

AjBool ensGvpopulationSetIdentifier(EnsPGvpopulation gvp, ajuint identifier);

AjBool ensGvpopulationAddSubgvpopulation(EnsPGvpopulation gvp,
                                         EnsPGvpopulation subgvp);

AjBool ensGvpopulationTrace(const EnsPGvpopulation gvp, ajuint level);

size_t ensGvpopulationCalculateMemsize(const EnsPGvpopulation gvp);

AjBool ensGvpopulationFetchAllGvindividuals(EnsPGvpopulation gvp,
                                            AjPList gvis);

AjBool ensGvpopulationFetchAllSynonyms(EnsPGvpopulation gvp,
                                       const AjPStr source,
                                       AjPList synonyms);

/* Ensembl Genetic Variation Population Adaptor */

EnsPGvpopulationadaptor ensRegistryGetGvpopulationadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvpopulationadaptor ensGvpopulationadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvpopulationadaptorDel(EnsPGvpopulationadaptor *Pgvpa);

EnsPGvsampleadaptor ensGvpopulationadaptorGetBaseadaptor(
    EnsPGvpopulationadaptor gvpa);

EnsPDatabaseadaptor ensGvpopulationadaptorGetDatabaseadaptor(
    EnsPGvpopulationadaptor gvpa);

AjBool ensGvpopulationadaptorFetchAllHapmap(
    EnsPGvpopulationadaptor gvpa,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllLd(
    EnsPGvpopulationadaptor gvpa,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllTagged(
    EnsPGvpopulationadaptor gvpa,
    const EnsPGvvariationfeature gvvf,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllTags(
    EnsPGvpopulationadaptor gvpa,
    const EnsPGvvariationfeature gvvf,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllThousandgenomes(
    EnsPGvpopulationadaptor gvpa,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllbyGvindividual(
    EnsPGvpopulationadaptor gvpa,
    const EnsPGvindividual gvi,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllbyGvindividuals(
    EnsPGvpopulationadaptor gvpa,
    AjPList gvis,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllbyGvpopulationSub(
    EnsPGvpopulationadaptor gvpa,
    const EnsPGvpopulation gvp,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllbyGvpopulationSuper(
    EnsPGvpopulationadaptor gvpa,
    const EnsPGvpopulation gvp,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllbyIdentifiers(
    EnsPGvpopulationadaptor gvpa,
    AjPTable gvps);

AjBool ensGvpopulationadaptorFetchAllbyNamesearch(
    EnsPGvpopulationadaptor gvpa,
    const AjPStr name,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchAllbySynonym(
    EnsPGvpopulationadaptor gvpa,
    const AjPStr synonym,
    const AjPStr source,
    AjPList gvps);

AjBool ensGvpopulationadaptorFetchByIdentifier(
    EnsPGvpopulationadaptor gvpa,
    ajuint identifier,
    EnsPGvpopulation *Pgvp);

AjBool ensGvpopulationadaptorFetchByName(
    EnsPGvpopulationadaptor gvpa,
    const AjPStr name,
    EnsPGvpopulation *Pgvp);

AjBool ensGvpopulationadaptorFetchDefaultld(
    EnsPGvpopulationadaptor gvpa,
    EnsPGvpopulation *Pgvp);

/* Ensembl Genetic Variation Population Genotype */

EnsPGvpopulationgenotype ensGvpopulationgenotypeNewCpy(
    const EnsPGvpopulationgenotype gvpg);

EnsPGvpopulationgenotype ensGvpopulationgenotypeNewIni(
    EnsPGvpopulationgenotypeadaptor gvpga,
    ajuint identifier,
    EnsPGvpopulation gvp,
    EnsPGvgenotype gvg,
    ajuint counter,
    float frequency);

EnsPGvpopulationgenotype ensGvpopulationgenotypeNewRef(
    EnsPGvpopulationgenotype gvpg);

void ensGvpopulationgenotypeDel(EnsPGvpopulationgenotype *Pgvpg);

EnsPGvpopulationgenotypeadaptor ensGvpopulationgenotypeGetAdaptor(
    const EnsPGvpopulationgenotype gvpg);

ajuint ensGvpopulationgenotypeGetCounter(
    const EnsPGvpopulationgenotype gvpg);

float ensGvpopulationgenotypeGetFrequency(
    const EnsPGvpopulationgenotype gvpg);

EnsPGvgenotype ensGvpopulationgenotypeGetGvgenotype(
    const EnsPGvpopulationgenotype gvpg);

EnsPGvpopulation ensGvpopulationgenotypeGetGvpopulation(
    const EnsPGvpopulationgenotype gvpg);

ajuint ensGvpopulationgenotypeGetIdentifier(
    const EnsPGvpopulationgenotype gvpg);

AjBool ensGvpopulationgenotypeSetAdaptor(
    EnsPGvpopulationgenotype gvpg,
    EnsPGvpopulationgenotypeadaptor gvpga);

AjBool ensGvpopulationgenotypeSetCounter(
    EnsPGvpopulationgenotype gvpg,
    ajuint counter);

AjBool ensGvpopulationgenotypeSetFrequency(
    EnsPGvpopulationgenotype gvpg,
    float frequency);

AjBool ensGvpopulationgenotypeSetGvgenotype(
    EnsPGvpopulationgenotype gvpg,
    EnsPGvgenotype gvg);

AjBool ensGvpopulationgenotypeSetGvpopulation(
    EnsPGvpopulationgenotype gvpg,
    EnsPGvpopulation gvp);

AjBool ensGvpopulationgenotypeSetIdentifier(
    EnsPGvpopulationgenotype gvpg,
    ajuint identifier);

AjBool ensGvpopulationgenotypeTrace(const EnsPGvpopulationgenotype gvpg,
                                    ajuint level);

AjPStr ensGvpopulationgenotypeGetSubhandle(
    const EnsPGvpopulationgenotype gvpg);

ajuint ensGvpopulationgenotypeGetSubidentifier(
    const EnsPGvpopulationgenotype gvpg);

size_t ensGvpopulationgenotypeCalculateMemsize(
    const EnsPGvpopulationgenotype gvpg);

/* Ensembl Genetic Variation Population Genotype Adaptor */

EnsPGvpopulationgenotypeadaptor ensRegistryGetGvpopulationgenotypeadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvpopulationgenotypeadaptor ensGvpopulationgenotypeadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvpopulationgenotypeadaptorDel(
    EnsPGvpopulationgenotypeadaptor *Pgvpga);

EnsPBaseadaptor ensGvpopulationgenotypeadaptorGetBaseadaptor(
    EnsPGvpopulationgenotypeadaptor gvpga);

EnsPDatabaseadaptor ensGvpopulationgenotypeadaptorGetDatabaseadaptor(
    EnsPGvpopulationgenotypeadaptor gvpga);

EnsPGvbaseadaptor ensGvpopulationgenotypeadaptorGetGvbaseadaptor(
    EnsPGvpopulationgenotypeadaptor gvpga);

EnsPGvdatabaseadaptor ensGvpopulationgenotypeadaptorGetGvdatabaseadaptor(
    EnsPGvpopulationgenotypeadaptor gvpga);

AjBool ensGvpopulationgenotypeadaptorFetchAllbyGvpopulation(
    EnsPGvpopulationgenotypeadaptor gvpga,
    const EnsPGvpopulation gvp,
    AjPList gvpgs);

AjBool ensGvpopulationgenotypeadaptorFetchAllbyGvvariation(
    EnsPGvpopulationgenotypeadaptor gvpga,
    const EnsPGvvariation gvv,
    AjPList gvpgs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVPOPULATION_H */

ensgvsample.h/  1414437294  1010  513   100644  5041      `
/* @include ensgvsample *******************************************************
**
** Ensembl Genetic Variation Sample functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.18 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 10:59:46 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVSAMPLE_H
#define ENSGVSAMPLE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Sample */

EnsPGvsample ensGvsampleNewCpy(const EnsPGvsample gvs);

EnsPGvsample ensGvsampleNewIni(EnsPGvsampleadaptor gvsa,
                               ajuint identifier,
                               AjPStr name,
                               AjPStr description,
                               EnsEGvsampleDisplay display,
                               ajuint size);

EnsPGvsample ensGvsampleNewRef(EnsPGvsample gvs);

void ensGvsampleDel(EnsPGvsample *Pgvs);

EnsPGvsampleadaptor ensGvsampleGetAdaptor(const EnsPGvsample gvs);

AjPStr ensGvsampleGetDescription(const EnsPGvsample gvs);

EnsEGvsampleDisplay ensGvsampleGetDisplay(const EnsPGvsample gvs);

ajuint ensGvsampleGetIdentifier(const EnsPGvsample gvs);

AjPStr ensGvsampleGetName(const EnsPGvsample gvs);

ajuint ensGvsampleGetSize(const EnsPGvsample gvs);

AjBool ensGvsampleSetAdaptor(EnsPGvsample gvs, EnsPGvsampleadaptor adaptor);

AjBool ensGvsampleSetDescription(EnsPGvsample gvs, AjPStr description);

AjBool ensGvsampleSetDisplay(EnsPGvsample gvs, EnsEGvsampleDisplay display);

AjBool ensGvsampleSetIdentifier(EnsPGvsample gvs, ajuint identifier);

AjBool ensGvsampleSetName(EnsPGvsample gvs, AjPStr name);

AjBool ensGvsampleSetSize(EnsPGvsample gvs, ajuint size);

size_t ensGvsampleCalculateMemsize(const EnsPGvsample gvs);

AjBool ensGvsampleTrace(const EnsPGvsample gvs, ajuint level);

EnsEGvsampleDisplay ensGvsampleDisplayFromStr(const AjPStr display);

const char *ensGvsampleDisplayToChar(EnsEGvsampleDisplay gvsd);

/* Ensembl Genetic Variation Sample Adaptor */

EnsPGvsampleadaptor ensRegistryGetGvsampleadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvsampleadaptor ensGvsampleadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvsampleadaptorDel(EnsPGvsampleadaptor *Pgvsa);

EnsPBaseadaptor ensGvsampleadaptorGetBaseadaptor(
    EnsPGvsampleadaptor gvsa);

EnsPDatabaseadaptor ensGvsampleadaptorGetDatabaseadaptor(
    EnsPGvsampleadaptor gvsa);

AjBool ensGvsampleadaptorFetchAllbyDisplay(
    EnsPGvsampleadaptor gvsa,
    EnsEGvsampleDisplay gvsd,
    AjPList gvss);

AjBool ensGvsampleadaptorFetchAllbyIdentifiers(
    EnsPGvsampleadaptor gvsa,
    AjPTable gvss);

AjBool ensGvsampleadaptorFetchByIdentifier(
    EnsPGvsampleadaptor gvsa,
    ajuint identifier,
    EnsPGvsample *Pgvs);

AjBool ensGvsampleadaptorRetrieveAllIdentifiersBySynonym(
    EnsPGvsampleadaptor gvsa,
    const AjPStr synonym,
    const AjPStr source,
    AjPList identifiers);

AjBool ensGvsampleadaptorRetrieveAllSynonymsByIdentifier(
    EnsPGvsampleadaptor gvsa,
    ajuint identifier,
    const AjPStr source,
    AjPList synonyms);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVSAMPLE_H */

ensgvsource.h/  1414437294  1010  513   100644  5464      `
/* @include ensgvsource *******************************************************
**
** Ensembl Genetic Variation Source functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.8 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:01:21 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVSOURCE_H
#define ENSGVSOURCE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Source */

EnsPGvsource ensGvsourceNewCpy(const EnsPGvsource gvs);

EnsPGvsource ensGvsourceNewIni(EnsPGvsourceadaptor gvsa,
                               ajuint identifier,
                               AjPStr name,
                               AjPStr version,
                               AjPStr description,
                               AjPStr url,
                               EnsEGvsourceSomatic gvss,
                               EnsEGvsourceType gvst);

EnsPGvsource ensGvsourceNewRef(EnsPGvsource gvs);

void ensGvsourceDel(EnsPGvsource *Pgvs);

EnsPGvsourceadaptor ensGvsourceGetAdaptor(const EnsPGvsource gvs);

AjPStr ensGvsourceGetDescription(const EnsPGvsource gvs);

ajuint ensGvsourceGetIdentifier(const EnsPGvsource gvs);

AjPStr ensGvsourceGetName(const EnsPGvsource gvs);

EnsEGvsourceSomatic ensGvsourceGetSomatic(const EnsPGvsource gvs);

EnsEGvsourceType ensGvsourceGetType(const EnsPGvsource gvs);

AjPStr ensGvsourceGetUrl(const EnsPGvsource gvs);

AjPStr ensGvsourceGetVersion(const EnsPGvsource gvs);

AjBool ensGvsourceSetAdaptor(EnsPGvsource gvs, EnsPGvsourceadaptor gvsa);

AjBool ensGvsourceSetDescription(EnsPGvsource gvs, AjPStr description);

AjBool ensGvsourceSetIdentifier(EnsPGvsource gvs, ajuint identifier);

AjBool ensGvsourceSetName(EnsPGvsource gvs, AjPStr name);

AjBool ensGvsourceSetSomatic(EnsPGvsource gvs, EnsEGvsourceSomatic gvss);

AjBool ensGvsourceSetType(EnsPGvsource gvs, EnsEGvsourceType gvst);

AjBool ensGvsourceSetUrl(EnsPGvsource gvs, AjPStr url);

AjBool ensGvsourceSetVersion(EnsPGvsource gvs, AjPStr version);

AjBool ensGvsourceTrace(const EnsPGvsource gvs, ajuint level);

size_t ensGvsourceCalculateMemsize(const EnsPGvsource gvs);

AjBool ensGvsourceMatch(const EnsPGvsource gvs1, const EnsPGvsource gvs2);

EnsEGvsourceSomatic ensGvsourceSomaticFromStr(
    const AjPStr somatic);

const char *ensGvsourceSomaticToChar(
    EnsEGvsourceSomatic gvss);

EnsEGvsourceType ensGvsourceTypeFromStr(
    const AjPStr type);

const char *ensGvsourceTypeToChar(
    EnsEGvsourceType gvst);

/* Ensembl Genetic Variation Source Adaptor */

EnsPGvsourceadaptor ensRegistryGetGvsourceadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvsourceadaptor ensGvsourceadaptorNew(EnsPDatabaseadaptor dba);

void ensGvsourceadaptorDel(EnsPGvsourceadaptor *Pgvsa);

EnsPBaseadaptor ensGvsourceadaptorGetBaseadaptor(
    EnsPGvsourceadaptor gvsa);

EnsPDatabaseadaptor ensGvsourceadaptorGetDatabaseadaptor(
    EnsPGvsourceadaptor gvsa);

AjBool ensGvsourceadaptorFetchAll(
    EnsPGvsourceadaptor gvsa,
    AjPList gvss);

AjBool ensGvsourceadaptorFetchAllbyGvsourceType(
    EnsPGvsourceadaptor gvsa,
    EnsEGvsourceType gvst,
    AjPList gvss);

AjBool ensGvsourceadaptorFetchByIdentifier(
    EnsPGvsourceadaptor gvsa,
    ajuint identifier,
    EnsPGvsource *Pgvs);

AjBool ensGvsourceadaptorFetchByName(
    EnsPGvsourceadaptor gvsa,
    const AjPStr name,
    EnsPGvsource *Pgvs);

AjBool ensGvsourceadaptorFetchDefault(
    EnsPGvsourceadaptor gvsa,
    EnsPGvsource *Pgvs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVSOURCE_H */
ensgvsynonym.h/ 1414437294  1010  513   100644  4458      `
/* @include ensgvsynonym ******************************************************
**
** Ensembl Genetic Variation Synonym functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.8 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:23 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVSYNONYM_H
#define ENSGVSYNONYM_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Synonym */

EnsPGvsynonym ensGvsynonymNewCpy(const EnsPGvsynonym gvs);

EnsPGvsynonym ensGvsynonymNewIni(EnsPGvsynonymadaptor gvsa,
                                 ajuint identifier,
                                 EnsPGvsource gvsource,
                                 AjPStr name,
                                 AjPStr moleculetype,
                                 ajuint gvvidentifier,
                                 ajuint subidentifier);

EnsPGvsynonym ensGvsynonymNewRef(EnsPGvsynonym gvs);

void ensGvsynonymDel(EnsPGvsynonym *Pgvs);

EnsPGvsynonymadaptor ensGvsynonymGetAdaptor(const EnsPGvsynonym gvs);

EnsPGvsource ensGvsynonymGetGvsource(const EnsPGvsynonym gvs);

ajuint ensGvsynonymGetGvvariationidentifier(const EnsPGvsynonym gvs);

ajuint ensGvsynonymGetIdentifier(const EnsPGvsynonym gvs);

AjPStr ensGvsynonymGetMoleculetype(const EnsPGvsynonym gvs);

AjPStr ensGvsynonymGetName(const EnsPGvsynonym gvs);

ajuint ensGvsynonymGetSubidentifier(const EnsPGvsynonym gvs);

AjBool ensGvsynonymSetAdaptor(EnsPGvsynonym gvs,
                              EnsPGvsynonymadaptor gvsa);

AjBool ensGvsynonymSetIdentifier(EnsPGvsynonym gvs,
                                 ajuint identifier);

AjBool ensGvsynonymSetGvsource(EnsPGvsynonym gvs,
                               EnsPGvsource gvsource);

AjBool ensGvsynonymSetName(EnsPGvsynonym gvs,
                           AjPStr name);

AjBool ensGvsynonymSetMoleculetype(EnsPGvsynonym gvs,
                                   AjPStr moleculetype);

AjBool ensGvsynonymSetGvvariationidentifier(EnsPGvsynonym gvs,
                                            ajuint gvvidentifier);

AjBool ensGvsynonymSetSubidentifier(EnsPGvsynonym gvs,
                                    ajuint subidentifier);

size_t ensGvsynonymCalculateMemsize(const EnsPGvsynonym gvs);

AjBool ensGvsynonymTrace(const EnsPGvsynonym gvs, ajuint level);

/* Ensembl Genetic Variation Synonym Adaptor */

EnsPGvsynonymadaptor ensRegistryGetGvsynonymadaptor(
    EnsPDatabaseadaptor dba);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVSYNONYM_H */
/326            1414437294  1010  513   100644  21753     `
/* @include ensgvvariation ****************************************************
**
** Ensembl Genetic Variation Variation functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.15 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:03:26 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSGVVARIATION_H
#define ENSGVVARIATION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Variation */

EnsPGvvariation ensGvvariationNewCpy(const EnsPGvvariation gvv);

EnsPGvvariation ensGvvariationNewIni(EnsPGvvariationadaptor gvva,
                                     ajuint identifier,
                                     EnsPGvattribute gvaclass,
                                     EnsPGvattribute gvaclinical,
                                     EnsPGvsource gvsource,
                                     AjPStr name,
                                     AjPStr ancestralallele,
                                     AjPList gvalleles,
                                     AjPList gvsynonyms,
                                     AjPStr validationstates,
                                     AjPStr moltype,
                                     AjPStr flankfive,
                                     AjPStr flankthree,
                                     AjBool flankexists,
                                     AjBool flipped,
                                     AjBool somatic,
                                     AjPStr maallele,
                                     ajuint macount,
                                     float mafrequency);

EnsPGvvariation ensGvvariationNewRef(EnsPGvvariation gvv);

void ensGvvariationDel(EnsPGvvariation *Pgvv);

EnsPGvvariationadaptor ensGvvariationGetAdaptor(const EnsPGvvariation gvv);

AjPStr ensGvvariationGetAncestralallele(const EnsPGvvariation gvv);

EnsPGvattribute ensGvvariationGetClass(const EnsPGvvariation gvv);

EnsPGvattribute ensGvvariationGetClinical(const EnsPGvvariation gvv);

AjBool ensGvvariationGetFlankExists(const EnsPGvvariation gvv);

AjBool ensGvvariationGetFlipped(const EnsPGvvariation gvv);

const AjPList ensGvvariationGetGvalleles(const EnsPGvvariation gvv);

EnsPGvsource ensGvvariationGetGvsource(const EnsPGvvariation gvv);

const AjPList ensGvvariationGetGvsynonyms(const EnsPGvvariation gvv);

ajuint ensGvvariationGetIdentifier(const EnsPGvvariation gvv);

AjPStr ensGvvariationGetMinoralleleAllele(const EnsPGvvariation gvv);

ajuint ensGvvariationGetMinoralleleCount(const EnsPGvvariation gvv);

float ensGvvariationGetMinoralleleFrequency(const EnsPGvvariation gvv);

AjPStr ensGvvariationGetMoleculetype(const EnsPGvvariation gvv);

AjPStr ensGvvariationGetName(const EnsPGvvariation gvv);

AjBool ensGvvariationGetSomatic(const EnsPGvvariation gvv);

ajuint ensGvvariationGetValidations(const EnsPGvvariation gvv);

const AjPList ensGvvariationLoadAllFaileddescriptions(EnsPGvvariation gvv);

const AjPList ensGvvariationLoadAllGvalleles(EnsPGvvariation gvv);

AjPStr ensGvvariationLoadFlankFive(EnsPGvvariation gvv);

AjPStr ensGvvariationLoadFlankThree(EnsPGvvariation gvv);

AjBool ensGvvariationSetAdaptor(EnsPGvvariation gvv,
                                EnsPGvvariationadaptor gvva);

AjBool ensGvvariationSetAncestralallele(EnsPGvvariation gvv,
                                        AjPStr ancestralallele);

AjBool ensGvvariationSetClass(EnsPGvvariation gvv,
                              EnsPGvattribute gvaclass);

AjBool ensGvvariationSetClinical(EnsPGvvariation gvv,
                                 EnsPGvattribute gvaclinical);

AjBool ensGvvariationSetFlankExists(EnsPGvvariation gvv,
                                    AjBool flankexists);

AjBool ensGvvariationSetFlankFive(EnsPGvvariation gvv,
                                  AjPStr flankfive);

AjBool ensGvvariationSetFlankThree(EnsPGvvariation gvv,
                                   AjPStr flankthree);

AjBool ensGvvariationSetFlipped(EnsPGvvariation gvv,
                                AjBool flipped);

AjBool ensGvvariationSetGvsource(EnsPGvvariation gvv,
                                 EnsPGvsource gvs);

AjBool ensGvvariationSetIdentifier(EnsPGvvariation gvv,
                                   ajuint identifier);

AjBool ensGvvariationSetMinoralleleAllele(EnsPGvvariation gvv,
                                          AjPStr maallele);

AjBool ensGvvariationSetMinoralleleCount(EnsPGvvariation gvv,
                                         ajuint macount);

AjBool ensGvvariationSetMinoralleleFrequency(EnsPGvvariation gvv,
                                             float mafrequency);

AjBool ensGvvariationSetMoleculetype(EnsPGvvariation gvv,
                                     AjPStr moltype);

AjBool ensGvvariationSetName(EnsPGvvariation gvv,
                             AjPStr name);

AjBool ensGvvariationSetSomatic(EnsPGvvariation gvv,
                                AjBool somatic);

AjBool ensGvvariationTrace(const EnsPGvvariation gvv, ajuint level);

size_t ensGvvariationCalculateMemsize(const EnsPGvvariation gvv);

AjBool ensGvvariationAddFaileddescription(EnsPGvvariation gvv,
                                          AjPStr description);

AjBool ensGvvariationAddGvallele(EnsPGvvariation gvv,
                                 EnsPGvallele gva);

AjBool ensGvvariationAddGvsynonym(EnsPGvvariation gvv,
                                  EnsPGvsynonym gvs);

AjBool ensGvvariationAddValidation(EnsPGvvariation gvv,
                                   EnsEGvvariationValidation gvvv);

AjBool ensGvvariationFetchAllGenes(EnsPGvvariation gvv,
                                   ajint flank,
                                   AjPList genes);

AjBool ensGvvariationFetchAllGvsources(const EnsPGvvariation gvv,
                                       AjPList gvss);

AjBool ensGvvariationFetchAllGvsynonyms(const EnsPGvvariation gvv,
                                        const AjPStr gvsourcename,
                                        AjPList gvss);

AjBool ensGvvariationFetchAllGvvariationfeatures(EnsPGvvariation gvv,
                                                 AjPList gvvfs);

AjBool ensGvvariationHasFailedgvalleles(EnsPGvvariation gvv, AjBool *Presult);

AjBool ensGvvariationIsFailed(EnsPGvvariation gvv, AjBool *Presult);

EnsEGvvariationClass ensGvvariationClassFromStr(
    const AjPStr class);

const char *ensGvvariationClassToChar(
    EnsEGvvariationClass gvvc);

EnsEGvvariationValidation ensGvvariationValidationFromStr(
    const AjPStr validation);

const char *ensGvvariationValidationToChar(
    EnsEGvvariationValidation gvvv);

ajuint ensGvvariationValidationsFromSet(const AjPStr gvvvset);

AjBool ensGvvariationValidationsToSet(ajuint gvvvbf, AjPStr *Pgvvvset);

/* Ensembl Genetic Variation Variation Adaptor */

EnsPGvvariationadaptor ensRegistryGetGvvariationadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvvariationadaptor ensGvvariationadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvvariationadaptorDel(EnsPGvvariationadaptor *Pgvva);

EnsPBaseadaptor ensGvvariationadaptorGetBaseadaptor(
    EnsPGvvariationadaptor gvva);

EnsPDatabaseadaptor ensGvvariationadaptorGetDatabaseadaptor(
    EnsPGvvariationadaptor gvva);

EnsPGvbaseadaptor ensGvvariationadaptorGetGvbaseadaptor(
    EnsPGvvariationadaptor gvva);

EnsPGvdatabaseadaptor ensGvvariationadaptorGetGvdatabaseadaptor(
    EnsPGvvariationadaptor gvva);

AjBool ensGvvariationadaptorFetchAll(EnsPGvvariationadaptor gvva,
                                     AjPList gvvs);

AjBool ensGvvariationadaptorFetchAllbyGvpopulation(
    EnsPGvvariationadaptor gvva,
    const EnsPGvpopulation gvp,
    AjPList gvvs);

AjBool ensGvvariationadaptorFetchAllbyGvpopulationfrequency(
    EnsPGvvariationadaptor gvva,
    const EnsPGvpopulation gvp,
    float frequency,
    AjPList gvvs);

AjBool ensGvvariationadaptorFetchAllbyGvsourceType(
    EnsPGvvariationadaptor gvva,
    EnsEGvsourceType gvst,
    AjBool primary,
    AjPList gvvs);

AjBool ensGvvariationadaptorFetchAllbyGvvariationset(
    EnsPGvvariationadaptor gvva,
    EnsPGvvariationset gvvset,
    AjPList gvvs);

AjBool ensGvvariationadaptorFetchAllbyIdentifiers(
    EnsPGvvariationadaptor gvva,
    AjPTable gvvs);

AjBool ensGvvariationadaptorFetchAllbyNames(
    EnsPGvvariationadaptor gvva,
    AjPTable gvvs);

AjBool ensGvvariationadaptorFetchAllbySource(
    EnsPGvvariationadaptor gvva,
    const AjPStr source,
    AjBool primary,
    AjPList gvvs);

AjBool ensGvvariationadaptorFetchAllsomatic(EnsPGvvariationadaptor gvva,
                                            AjPList gvvs);

AjBool ensGvvariationadaptorFetchByIdentifier(
    EnsPGvvariationadaptor gvva,
    ajuint identifier,
    EnsPGvvariation *Pgvv);

AjBool ensGvvariationadaptorFetchByName(
    EnsPGvvariationadaptor gvva,
    const AjPStr name,
    const AjPStr source,
    EnsPGvvariation *Pgvv);

AjBool ensGvvariationadaptorFetchBySubidentifier(
    EnsPGvvariationadaptor gvva,
    const AjPStr name,
    EnsPGvvariation *Pgvv);

AjBool ensGvvariationadaptorFetchBySynonym(
    EnsPGvvariationadaptor gvva,
    const AjPStr synonym,
    const AjPStr source,
    EnsPGvvariation *Pgvv);

AjBool ensGvvariationadaptorRetrieveAllFaileddescriptions(
    EnsPGvvariationadaptor gvva,
    ajuint identifier,
    AjPList fvs);

AjBool ensGvvariationadaptorRetrieveFlank(
    EnsPGvvariationadaptor gvva,
    ajuint identifier,
    AjPStr *Pfiveseq,
    AjPStr *Pthreeseq);

/* Ensembl Genetic Variation Variation Feature */

EnsPGvvariationfeature ensGvvariationfeatureNewCpy(
    const EnsPGvvariationfeature gvvf);

EnsPGvvariationfeature ensGvvariationfeatureNewIdentifier(
    EnsPGvvariationfeatureadaptor gvvfa,
    ajuint identifier,
    EnsPFeature feature,
    EnsPGvsource gvsource,
    EnsEGvvariationClass gvvc,
    ajuint gvvidentifier,
    AjPStr allele,
    AjPStr name,
    AjPStr validation,
    AjPStr consequence,
    ajuint mapweight);

EnsPGvvariationfeature ensGvvariationfeatureNewIni(
    EnsPGvvariationfeatureadaptor gvvfa,
    ajuint identifier,
    EnsPFeature feature,
    EnsPGvsource gvsource,
    EnsEGvvariationClass gvvc,
    EnsPGvvariation gvv,
    AjPStr allele,
    AjPStr name,
    AjPStr validation,
    AjPStr consequence,
    ajuint mapweight);

EnsPGvvariationfeature ensGvvariationfeatureNewRef(
    EnsPGvvariationfeature gvvf);

void ensGvvariationfeatureDel(EnsPGvvariationfeature *Pgvvf);

EnsPGvvariationfeatureadaptor ensGvvariationfeatureGetAdaptor(
    const EnsPGvvariationfeature gvvf);

AjPStr ensGvvariationfeatureGetAllele(
    const EnsPGvvariationfeature gvvf);

AjPStr ensGvvariationfeatureGetConsequencetype(
    const EnsPGvvariationfeature gvvf);

EnsPFeature ensGvvariationfeatureGetFeature(
    const EnsPGvvariationfeature gvvf);

EnsPGvsource ensGvvariationfeatureGetGvsource(
    const EnsPGvvariationfeature gvvf);

EnsEGvvariationClass ensGvvariationfeatureGetGvvariationclass(
    const EnsPGvvariationfeature gvvf);

ajuint ensGvvariationfeatureGetIdentifier(
    const EnsPGvvariationfeature gvvf);

ajuint ensGvvariationfeatureGetMapweight(
    const EnsPGvvariationfeature gvvf);

AjPStr ensGvvariationfeatureGetName(
    const EnsPGvvariationfeature gvvf);

AjPStr ensGvvariationfeatureGetValidationcode(
    const EnsPGvvariationfeature gvvf);

EnsPGvvariation ensGvvariationfeatureLoadGvvariation(
    EnsPGvvariationfeature gvvf);

AjBool ensGvvariationfeatureSetAdaptor(EnsPGvvariationfeature gvvf,
                                       EnsPGvvariationfeatureadaptor gvvfa);

AjBool ensGvvariationfeatureSetAllele(EnsPGvvariationfeature gvvf,
                                      AjPStr allele);

AjBool ensGvvariationfeatureSetConsequencetype(EnsPGvvariationfeature gvvf,
                                               AjPStr consequencetype);

AjBool ensGvvariationfeatureSetFeature(EnsPGvvariationfeature gvvf,
                                       EnsPFeature feature);

AjBool ensGvvariationfeatureSetGvsource(EnsPGvvariationfeature gvvf,
                                        EnsPGvsource gvsource);

AjBool ensGvvariationfeatureSetGvvariation(EnsPGvvariationfeature gvvf,
                                           EnsPGvvariation gvv);

AjBool ensGvvariationfeatureSetGvvariationclass(EnsPGvvariationfeature gvvf,
                                                EnsEGvvariationClass gvvc);

AjBool ensGvvariationfeatureSetIdentifier(EnsPGvvariationfeature gvvf,
                                          ajuint identifier);

AjBool ensGvvariationfeatureSetMapweight(EnsPGvvariationfeature gvvf,
                                         ajuint mapweight);

AjBool ensGvvariationfeatureSetName(EnsPGvvariationfeature gvvf,
                                    AjPStr name);

AjBool ensGvvariationfeatureSetValidationcode(EnsPGvvariationfeature gvvf,
                                              AjPStr validationcode);

AjBool ensGvvariationfeatureTrace(const EnsPGvvariationfeature gvvf,
                                  ajuint level);

ajuint ensGvvariationfeatureCalculateLength(
    const EnsPGvvariationfeature gvvf);

size_t ensGvvariationfeatureCalculateMemsize(
    const EnsPGvvariationfeature gvvf);

AjBool ensGvvariationfeatureGetSomatic(
    const EnsPGvvariationfeature gvvf);

AjPStr ensGvvariationfeatureGetSourcename(
    const EnsPGvvariationfeature gvvf);

AjBool ensGvvariationfeatureIsReference(EnsPGvvariationfeature gvvf,
                                        AjBool *Presult);

/* AJAX List of Ensembl Genetic Variation Variation Feature objects */

AjBool ensListGvvariationfeatureSortEndAscending(AjPList gvvfs);

AjBool ensListGvvariationfeatureSortEndDescending(AjPList gvvfs);

AjBool ensListGvvariationfeatureSortIdentifierAscending(AjPList gvvfs);

AjBool ensListGvvariationfeatureSortStartAscending(AjPList gvvfs);

AjBool ensListGvvariationfeatureSortStartDescending(AjPList gvvfs);

/* Ensembl Genetic Variation Feature Adaptor */

EnsPGvvariationfeatureadaptor ensRegistryGetGvvariationfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvvariationfeatureadaptor ensGvvariationfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvvariationfeatureadaptorDel(EnsPGvvariationfeatureadaptor *Pgvvfa);

EnsPBaseadaptor ensGvvariationfeatureadaptorGetBaseadaptor(
    const EnsPGvvariationfeatureadaptor gvvfa);

EnsPDatabaseadaptor ensGvvariationfeatureadaptorGetDatabaseadaptor(
    const EnsPGvvariationfeatureadaptor gvvfa);

EnsPFeatureadaptor ensGvvariationfeatureadaptorGetFeatureadaptor(
    const EnsPGvvariationfeatureadaptor gvvfa);

EnsPGvdatabaseadaptor ensGvvariationfeatureadaptorGetGvdatabaseadaptor(
    const EnsPGvvariationfeatureadaptor gvvfa);

AjBool ensGvvariationfeatureadaptorFetchAllbyFrequency(
    EnsPGvvariationfeatureadaptor gvvfa,
    const EnsPGvpopulation gvp,
    float frequency,
    EnsPSlice slice,
    AjPList gvvfs);

AjBool ensGvvariationfeatureadaptorFetchAllbyGvpopulation(
    EnsPGvvariationfeatureadaptor gvvfa,
    const EnsPGvpopulation gvp,
    EnsPSlice slice,
    AjPList gvvfs);

AjBool ensGvvariationfeatureadaptorFetchAllbyGvvariation(
    EnsPGvvariationfeatureadaptor gvvfa,
    const EnsPGvvariation gvv,
    AjPList gvvfs);

AjBool ensGvvariationfeatureadaptorFetchAllbySliceAnnotated(
    EnsPGvvariationfeatureadaptor gvvfa,
    const AjPStr vsource,
    const AjPStr psource,
    const AjPStr annotation,
    AjBool somatic,
    EnsPSlice slice,
    AjPList gvvfs);

AjBool ensGvvariationfeatureadaptorFetchAllbySliceConstraint(
    EnsPGvvariationfeatureadaptor gvvfa,
    EnsPSlice slice,
    const AjPStr constraint,
    AjBool somatic,
    AjPList gvvfs);

AjBool ensGvvariationfeatureadaptorFetchAllbySliceGenotyped(
    EnsPGvvariationfeatureadaptor gvvfa,
    EnsPSlice slice,
    AjPList gvvfs);

AjBool ensGvvariationfeatureadaptorFetchByIdentifier(
    EnsPGvvariationfeatureadaptor gvvfa,
    ajuint identifier,
    EnsPGvvariationfeature *Pgvvf);

AjBool ensGvvariationfeatureadaptorRetrieveAllIdentifiers(
    EnsPGvvariationfeatureadaptor gvvfa,
    AjPList identifiers);

/* Ensembl Genetic Variation Variation Set */

EnsPGvvariationset ensGvvariationsetNewCpy(const EnsPGvvariationset gvvs);

EnsPGvvariationset ensGvvariationsetNewIni(EnsPGvvariationsetadaptor gvvsa,
                                           ajuint identifier,
                                           AjPStr name,
                                           AjPStr description,
                                           AjPStr shortname);

EnsPGvvariationset ensGvvariationsetNewRef(EnsPGvvariationset gvvs);

void ensGvvariationsetDel(EnsPGvvariationset *Pgvvs);

EnsPGvvariationsetadaptor ensGvvariationsetGetAdaptor(
    const EnsPGvvariationset gvvs);

AjPStr ensGvvariationsetGetDescription(
    const EnsPGvvariationset gvvs);

ajuint ensGvvariationsetGetIdentifier(
    const EnsPGvvariationset gvvs);

AjPStr ensGvvariationsetGetName(
    const EnsPGvvariationset gvvs);

AjPStr ensGvvariationsetGetShortname(
    const EnsPGvvariationset gvvs);

AjBool ensGvvariationsetSetAdaptor(EnsPGvvariationset gvvs,
                                   EnsPGvvariationsetadaptor gvvsa);

AjBool ensGvvariationsetSetDescription(EnsPGvvariationset gvvs,
                                       AjPStr description);

AjBool ensGvvariationsetSetIdentifier(EnsPGvvariationset gvvs,
                                      ajuint identifier);

AjBool ensGvvariationsetSetName(EnsPGvvariationset gvvs,
                                AjPStr name);

AjBool ensGvvariationsetSetShortname(EnsPGvvariationset gvvs,
                                     AjPStr shortname);

AjBool ensGvvariationsetTrace(const EnsPGvvariationset gvvs,
                              ajuint level);

size_t ensGvvariationsetCalculateMemsize(const EnsPGvvariationset gvvs);

AjBool ensGvvariationsetFetchAllGvvariations(
    EnsPGvvariationset gvvs,
    AjPList gvvss);

AjBool ensGvvariationsetFetchAllSub(EnsPGvvariationset gvvs,
                                    AjBool immediate,
                                    AjPList gvvss);

AjBool ensGvvariationsetFetchAllSuper(EnsPGvvariationset gvvs,
                                      AjBool immediate,
                                      AjPList gvvss);

/* Ensembl Genetic Variation Variation Set Adaptor */

EnsPGvvariationsetadaptor ensRegistryGetGvvariationsetadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvvariationsetadaptor ensGvvariationsetadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvvariationsetadaptorDel(EnsPGvvariationsetadaptor *Pgvvsa);

EnsPBaseadaptor ensGvvariationsetadaptorGetBaseadaptor(
    EnsPGvvariationsetadaptor gvvsa);

EnsPDatabaseadaptor ensGvvariationsetadaptorGetDatabaseadaptor(
    EnsPGvvariationsetadaptor gvvsa);

AjBool ensGvvariationsetadaptorFetchAllToplevel(
    EnsPGvvariationsetadaptor gvvsa,
    AjPList gvvss);

AjBool ensGvvariationsetadaptorFetchAllbyGvvariation(
    EnsPGvvariationsetadaptor gvvsa,
    const EnsPGvvariation gvv,
    AjPList gvvss);

AjBool ensGvvariationsetadaptorFetchAllbySub(
    EnsPGvvariationsetadaptor gvvsa,
    const EnsPGvvariationset gvvs,
    AjBool immediate,
    AjPList gvvss);

AjBool ensGvvariationsetadaptorFetchAllbySuper(
    EnsPGvvariationsetadaptor gvvsa,
    const EnsPGvvariationset gvvs,
    AjBool immediate,
    AjPList gvvss);

AjBool ensGvvariationsetadaptorFetchByIdentifier(
    EnsPGvvariationsetadaptor gvvsa,
    ajuint identifier,
    EnsPGvvariationset *Pgvvs);

AjBool ensGvvariationsetadaptorFetchByName(
    EnsPGvvariationsetadaptor gvvsa,
    const AjPStr name,
    EnsPGvvariationset *Pgvvs);

AjBool ensGvvariationsetadaptorFetchByShortname(
    EnsPGvvariationsetadaptor gvvsa,
    const AjPStr shortname,
    EnsPGvvariationset *Pgvvs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSGVVARIATION_H */

ensintron.h/    1414437294  1010  513   100644  8037      `
/* @include ensintron *********************************************************
**
** Ensembl Intron functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.13 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:07:53 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSINTRON_H
#define ENSINTRON_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Intron */

EnsPIntron ensIntronNewCpy(const EnsPIntron intron);

EnsPIntron ensIntronNewIni(EnsPExon exon1,
                           EnsPExon exon2,
                           EnsPAnalysis analysis);

EnsPIntron ensIntronNewRef(EnsPIntron intron);

void ensIntronDel(EnsPIntron *Pintron);

EnsPFeature ensIntronGetFeature(const EnsPIntron intron);

EnsPExon ensIntronGetNextexon(const EnsPIntron intron);

EnsPExon ensIntronGetPreviousexon(const EnsPIntron intron);

AjBool ensIntronSetFeature(EnsPIntron intron,
                           EnsPFeature feature);

AjBool ensIntronSetNextexon(EnsPIntron intron,
                            EnsPExon exon);

AjBool ensIntronSetPreviousexon(EnsPIntron intron,
                                EnsPExon exon);

AjBool ensIntronTrace(const EnsPIntron intron, ajuint level);

ajuint ensIntronCalculateLength(const EnsPIntron intron);

size_t ensIntronCalculateMemsize(const EnsPIntron intron);

AjBool ensIntronFetchSplicesequences(const EnsPIntron intron,
                                     AjPStr *Pdonor,
                                     AjPStr *Pacceptor);

AjBool ensIntronIsCanonical(const EnsPIntron intron, AjBool *Presult);

AjBool ensIntronMatch(const EnsPIntron intron1,
                      const EnsPIntron intron2);

EnsPIntron ensIntronTransfer(EnsPIntron intron,
                             EnsPSlice slice);

EnsPIntron ensIntronTransform(EnsPIntron intron,
                              const AjPStr csname,
                              const AjPStr csversion);

/* Ensembl Intron Supporting Evidence */

EnsPIntronsupportingevidence ensIntronsupportingevidenceNewCpy(
    const EnsPIntronsupportingevidence ise);

EnsPIntronsupportingevidence ensIntronsupportingevidenceNewIni(
    EnsPIntronsupportingevidenceadaptor isea,
    ajuint identifier,
    EnsPFeature feature,
    EnsPIntron intron,
    AjPStr hitname,
    AjBool canonical,
    double score,
    EnsEIntronsupportingevidenceType type);

EnsPIntronsupportingevidence ensIntronsupportingevidenceNewRef(
    EnsPIntronsupportingevidence ise);

void ensIntronsupportingevidenceDel(EnsPIntronsupportingevidence *Pise);

EnsPIntronsupportingevidenceadaptor ensIntronsupportingevidenceGetAdaptor(
    const EnsPIntronsupportingevidence ise);

AjBool ensIntronsupportingevidenceGetCanonical(
    const EnsPIntronsupportingevidence ise);

EnsPFeature ensIntronsupportingevidenceGetFeature(
    const EnsPIntronsupportingevidence ise);

AjPStr ensIntronsupportingevidenceGetHitname(
    const EnsPIntronsupportingevidence ise);

ajuint ensIntronsupportingevidenceGetIdentifier(
    const EnsPIntronsupportingevidence ise);

EnsPIntron ensIntronsupportingevidenceGetIntron(
    const EnsPIntronsupportingevidence ise);

double ensIntronsupportingevidenceGetScore(
    const EnsPIntronsupportingevidence ise);

EnsEIntronsupportingevidenceType ensIntronsupportingevidenceGetType(
    const EnsPIntronsupportingevidence ise);

AjBool ensIntronsupportingevidenceSetFeature(
    EnsPIntronsupportingevidence ise,
    EnsPFeature feature);

AjBool ensIntronsupportingevidenceTrace(
    const EnsPIntronsupportingevidence ise,
    ajuint level);

size_t ensIntronsupportingevidenceCalculateMemsize(
    const EnsPIntronsupportingevidence ise);

AjBool ensIntronsupportingevidenceFetchExons(
    const EnsPIntronsupportingevidence ise,
    EnsPTranscript transcript,
    EnsPExon *Previous,
    EnsPExon *Pnext);

AjBool ensIntronsupportingevidenceMatch(
    const EnsPIntronsupportingevidence ise1,
    const EnsPIntronsupportingevidence ise2);

EnsPIntronsupportingevidence ensIntronsupportingevidenceTransfer(
    EnsPIntronsupportingevidence ise,
    EnsPSlice slice);

EnsPIntronsupportingevidence ensIntronsupportingevidenceTransform(
    EnsPIntronsupportingevidence ise,
    const AjPStr csname,
    const AjPStr csversion);

AjBool ensIntronsupportingevidenceHasTranscripts(
    const EnsPIntronsupportingevidence ise,
    AjBool *Presult);

EnsEIntronsupportingevidenceType ensIntronsupportingevidenceTypeFromStr(
    const AjPStr type);

const char* ensIntronsupportingevidenceTypeToChar(
    EnsEIntronsupportingevidenceType iset);

/* Ensembl Intron Supporting Evidence Adaptor */

EnsPIntronsupportingevidenceadaptor ensRegistryGetIntronsupportingevidenceadaptor(
    EnsPDatabaseadaptor dba);

EnsPIntronsupportingevidenceadaptor ensIntronsupportingevidenceadaptorNew(
    EnsPDatabaseadaptor dba);

void ensIntronsupportingevidenceadaptorDel(
    EnsPIntronsupportingevidenceadaptor *Pisea);

EnsPBaseadaptor ensIntronsupportingevidenceadaptorGetBaseadaptor(
    EnsPIntronsupportingevidenceadaptor isea);

EnsPDatabaseadaptor ensIntronsupportingevidenceadaptorGetDatabaseadaptor(
    EnsPIntronsupportingevidenceadaptor isea);

EnsPFeatureadaptor ensIntronsupportingevidenceadaptorGetFeatureadaptor(
    EnsPIntronsupportingevidenceadaptor isea);

AjBool ensIntronsupportingevidenceadaptorFetchAllbyTranscript(
    EnsPIntronsupportingevidenceadaptor isea,
    const EnsPTranscript transcript,
    AjPList ises);

AjBool ensIntronsupportingevidenceadaptorFetchByIdentifier(
    EnsPIntronsupportingevidenceadaptor isea,
    ajuint identifier,
    EnsPIntronsupportingevidence *Pise);

AjBool ensIntronsupportingevidenceadaptorRetrieveExonidentifiers(
    EnsPIntronsupportingevidenceadaptor isea,
    const EnsPIntronsupportingevidence ise,
    const EnsPTranscript transcript,
    ajuint *Previous,
    ajuint *Pnext);

AjBool ensIntronsupportingevidenceadaptorRetrieveAllTranscriptidentifiers(
    EnsPIntronsupportingevidenceadaptor isea,
    const EnsPIntronsupportingevidence ise,
    AjPList transcriptids);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSINTRON_H */

enskaryotype.h/ 1414437294  1010  513   100644  6480      `
/* @include enskaryotype ******************************************************
**
** Ensembl Karyotype Band functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.21 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:06:37 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSKARYOTYPE_H
#define ENSKARYOTYPE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPKaryotypebandadaptor ********************************************
**
** Ensembl Karyotype Band Adaptor
** Defined as an alias in EnsPFeatureadaptor
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::KaryotypeBandAdaptor
** ##
******************************************************************************/

#define EnsPKaryotypebandadaptor EnsPFeatureadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPKaryotypeband ****************************************************
**
** Ensembl Karyotype Band
**
** @alias EnsSKaryotypeband
** @alias EnsOKaryotypeband
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPKaryotypebandadaptor] Ensembl Karyotype Band Adaptor
** @cc Bio::EnsEMBL::Karyotypeband
** @attr Feature [EnsPFeature] Ensembl Feature
** @attr Name [AjPStr] Name
** @attr Stain [AjPStr] Stain
** @@
******************************************************************************/

typedef struct EnsSKaryotypeband
{
    ajuint Use;
    ajuint Identifier;
    EnsPKaryotypebandadaptor Adaptor;
    EnsPFeature Feature;
    AjPStr Name;
    AjPStr Stain;
} EnsOKaryotypeband;

#define EnsPKaryotypeband EnsOKaryotypeband*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Karyotype Band */

EnsPKaryotypeband ensKaryotypebandNewCpy(const EnsPKaryotypeband kb);

EnsPKaryotypeband ensKaryotypebandNewIni(EnsPKaryotypebandadaptor kba,
                                         ajuint identifier,
                                         EnsPFeature feature,
                                         AjPStr name,
                                         AjPStr stain);

EnsPKaryotypeband ensKaryotypebandNewRef(EnsPKaryotypeband kb);

void ensKaryotypebandDel(EnsPKaryotypeband *Pkb);

EnsPKaryotypebandadaptor ensKaryotypebandGetAdaptor(
    const EnsPKaryotypeband kb);

EnsPFeature ensKaryotypebandGetFeature(
    const EnsPKaryotypeband kb);

ajuint ensKaryotypebandGetIdentifier(
    const EnsPKaryotypeband kb);

AjPStr ensKaryotypebandGetName(
    const EnsPKaryotypeband kb);

AjPStr ensKaryotypebandGetStain(
    const EnsPKaryotypeband kb);

AjBool ensKaryotypebandSetAdaptor(EnsPKaryotypeband kb,
                                  EnsPKaryotypebandadaptor kba);

AjBool ensKaryotypebandSetFeature(EnsPKaryotypeband kb,
                                  EnsPFeature feature);

AjBool ensKaryotypebandSetIdentifier(EnsPKaryotypeband kb,
                                     ajuint identifier);

AjBool ensKaryotypebandSetName(EnsPKaryotypeband kb,
                               AjPStr name);

AjBool ensKaryotypebandSetStain(EnsPKaryotypeband kb,
                                AjPStr stain);

AjBool ensKaryotypebandTrace(const EnsPKaryotypeband kb,
                             ajuint level);

size_t ensKaryotypebandCalculateMemsize(const EnsPKaryotypeband kb);

/* AJAX List of Ensembl Karyotype Band objects */

AjBool ensListKaryotypebandSortEndAscending(AjPList kbs);

AjBool ensListKaryotypebandSortEndDescending(AjPList kbs);

AjBool ensListKaryotypebandSortIdentifierAscending(AjPList kbs);

AjBool ensListKaryotypebandSortStartAscending(AjPList kbs);

AjBool ensListKaryotypebandSortStartDescending(AjPList kbs);

/* Ensembl Karyoptype Band Adaptor */

EnsPKaryotypebandadaptor ensRegistryGetKaryotypebandadaptor(
    EnsPDatabaseadaptor dba);

EnsPKaryotypebandadaptor ensKaryotypebandadaptorNew(
    EnsPDatabaseadaptor dba);

void ensKaryotypebandadaptorDel(EnsPKaryotypebandadaptor *Padaptor);

EnsPBaseadaptor ensKaryotypebandadaptorGetBaseadaptor(
    EnsPKaryotypebandadaptor kba);

EnsPDatabaseadaptor ensKaryotypebandadaptorGetDatabaseadaptor(
    EnsPKaryotypebandadaptor kba);

EnsPFeatureadaptor ensKaryotypebandadaptorGetFeatureadaptor(
    EnsPKaryotypebandadaptor kba);

AjBool ensKaryotypebandadaptorFetchAllbyChromosomeband(
    EnsPKaryotypebandadaptor adaptor,
    const AjPStr name,
    const AjPStr band,
    AjPList kblist);

AjBool ensKaryotypebandadaptorFetchAllbyChromosomename(
    EnsPKaryotypebandadaptor adaptor,
    const AjPStr name,
    AjPList kblist);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSKARYOTYPE_H */
ensmapper.h/    1414437294  1010  513   100644  20526     `
/* @include ensmapper *********************************************************
**
** Ensembl Mapper functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.27 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:04:02 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSMAPPER_H
#define ENSMAPPER_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "enscoordsystem.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsEMapperunitType ***************************************************
**
** Ensembl Mapper Unit Type enumeration
**
** @value ensEMapperunitTypeNULL Null
** @value ensEMapperunitTypeSource Source
** @value ensEMapperunitTypeTarget Target
** @@
******************************************************************************/

typedef enum EnsOMapperunitType
{
    ensEMapperunitTypeNULL,
    ensEMapperunitTypeSource,
    ensEMapperunitTypeTarget
} EnsEMapperunitType;




/* @enum EnsEMapperresultType *************************************************
**
** Ensembl Mapper Result Type enumeration
**
** @value ensEMapperresultTypeNULL Null
** @value ensEMapperresultTypeCoordinate Coordinate
** @value ensEMapperresultTypeGap Gap
** @value ensEMapperresultTypeInDel Insertion or Deletion
** @@
******************************************************************************/

typedef enum EnsOMapperresultType
{
    ensEMapperresultTypeNULL,
    ensEMapperresultTypeCoordinate,
    ensEMapperresultTypeGap,
    ensEMapperresultTypeInDel
} EnsEMapperresultType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPMapperunit *******************************************************
**
** Ensembl Mapper Unit.
**
** One unit of an Ensembl Mapper Pair.
**
** @alias EnsSMapperunit
** @alias EnsOMapperunit
**
** @cc Bio::EnsEMBL::Mapper::Unit
** @attr Objectidentifier [ajuint] Ensembl Object identifier
** @attr Start [ajint] Start coordinate
** @attr End [ajint] End coordinate
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct EnsSMapperunit
{
    ajuint Objectidentifier;
    ajint Start;
    ajint End;
    ajuint Use;
} EnsOMapperunit;

#define EnsPMapperunit EnsOMapperunit*




/* @data EnsPMapperpair *******************************************************
**
** Ensembl Mapper Pair.
**
** An Ensembl Mapper Pair consists of two Ensembl Mapper Unit objects.
**
** @alias EnsSMapperpair
** @alias EnsOMapperpair
**
** @cc Bio::EnsEMBL::Mapper::Pair
** @attr Source [EnsPMapperunit] Source Ensembl Mapper Unit
** @attr Target [EnsPMapperunit] Target Ensembl Mapper Unit
** @attr Orientation [ajint]
** Relative orientation of the Ensembl Mapper Unit objects
** @cc Bio::EnsEMBL::Mapper::IndelPair
** @attr Indel [AjBool] Insertion or deletion attribute
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSMapperpair
{
    EnsPMapperunit Source;
    EnsPMapperunit Target;
    ajint Orientation;
    AjBool Indel;
    ajuint Use;
    ajuint Padding;
} EnsOMapperpair;

#define EnsPMapperpair EnsOMapperpair*




/* @data EnsPMapperresult *****************************************************
**
** Ensembl Mapper Result.
**
** Representation of a mapped Ensembl Object returned by an Ensembl Mapper when
** the source region maps to valid sequence.
** Depending on the Ensembl Mapper Result type member,
** this can also represent a gap.
**
** @alias EnsSMapperresult
** @alias EnsOMapperresult
**
** @attr Coordsystem [EnsPCoordsystem] Ensembl Coordinate System
** @attr Type [EnsEMapperresultType] Result type
** @cc Bio::EnsEMBL::Mapper::Coordinate
** @cc Bio::EnsEMBL::Mapper::IndelCoordinate
** @attr Objectidentifier [ajuint] Ensembl Object identifier
** @attr CoordinateStart [ajint] Coordinate start
** @attr CoordinateEnd [ajint] Coordinate end
** @attr CoordinateStrand [ajint] Coordinate strand
** @cc Bio::EnsEMBL::Mapper::Gap
** @cc Bio::EnsEMBL::Mapper::IndelCoordinate
** @attr GapStart [ajint] Start coordinate of a gap
** @attr GapEnd [ajint] End coordinate of a gap
** @attr Rank [ajuint] Rank
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
**
** NOTE: This object subsumes the following Perl objects returned by the
** Bio::EnsEMBL::Mapper class.
**
** Bio::EnsEMBL::Mapper::Coordinate
** Bio::EnsEMBL::Mapper::Gap
** Bio::EnsEMBL::Mapper::IndelCoordinate
**
** The objects can be distinguished by their Ensembl Mapper Result type member.
******************************************************************************/

typedef struct EnsSMapperresult
{
    EnsPCoordsystem Coordsystem;
    EnsEMapperresultType Type;
    ajuint Objectidentifier;
    ajint CoordinateStart;
    ajint CoordinateEnd;
    ajint CoordinateStrand;
    ajint GapStart;
    ajint GapEnd;
    ajuint Rank;
    ajuint Use;
    ajuint Padding;
} EnsOMapperresult;

#define EnsPMapperresult EnsOMapperresult*




/* @data EnsPMapperrange ******************************************************
**
** Ensembl Mapper Range.
**
** An Ensembl Mapper Range defines start and end ccordinates of genome ranges.
**
** @alias EnsSMapperrange
** @alias EnsOMapperrange
**
** @attr Start [ajint] Start coordinate
** @attr End [ajint] End coordinate
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSMapperrange
{
    ajint Start;
    ajint End;
    ajuint Use;
    ajuint Padding;
} EnsOMapperrange;

#define EnsPMapperrange EnsOMapperrange*




/* @data EnsPMapperrangeregistry **********************************************
**
** Ensembl Mapper Range Registry.
**
** An Ensembl Mapper Range Registry maintains a table of registered regions.
**
** @alias EnsSMapperrangeregistry
** @alias EnsOMapperrangeregistry
**
** @attr Registry [AjPTable]
** First-level AJAX Table of AJAX unsigned integer
** (Ensembl Object identifier) key data and
** second-level AJAX List value data of Ensembl Mapper Range objects.
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
** The Ensembl Mapper Range Registry maintains an internal list of registered
** regions and is used to quickly ascertain if and what regions of a provided
** range need registration.
******************************************************************************/

typedef struct EnsSMapperrangeregistry
{
    AjPTable Registry;
    ajuint Use;
    ajuint Padding;
} EnsOMapperrangeregistry;

#define EnsPMapperrangeregistry EnsOMapperrangeregistry*




/* @data EnsPMapper ***********************************************************
**
** Ensembl Mapper.
**
** Generic mapper to provide coordinate transforms between two
** disjoint Ensembl Coordinate System objects.
**
** @alias EnsSMapper
** @alias EnsOMapper
**
** @cc Bio::EnsEMBL::Mapper
** @attr TypeSource [AjPStr] Source type
** @attr TypeTarget [AjPStr] Target type
** @attr CoordsystemSource [EnsPCoordsystem] Source Ensembl Coordinate System
** @attr CoordsystemTarget [EnsPCoordsystem] Target Ensembl Coordinate System
** @attr Mapperpairs [AjPTable] AJAX Table of AJAX Table objects with
** Ensembl Mapper Pair objects
** @attr Sorted [AjBool] Ensembl Mapper Pair objects are sorted
** @attr Count [ajuint] Number of Ensembl Mapper Pair objects
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
** The AJAX Table Mapperpairs forms the top hierarchy of an Ensembl Mapper Pair
** cache. The AJAX Table uses the contents of the TypeSource and TypeTarget
** strings as index and holds a second hierarchy of AJAX Table objects, which
** use AJAX unsigned inetger (Ensembl Object identifier) objects as index.
** Those second-level AJAX Table objects then hold a
** third-level of AJAX List objects of Ensembl Mapper Pair objects.
******************************************************************************/

typedef struct EnsSMapper
{
    AjPStr TypeSource;
    AjPStr TypeTarget;
    EnsPCoordsystem CoordsystemSource;
    EnsPCoordsystem CoordsystemTarget;
    AjPTable Mapperpairs;
    AjBool Sorted;
    ajuint Count;
    ajuint Use;
    ajuint Padding;
} EnsOMapper;

#define EnsPMapper EnsOMapper*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Mapper Unit */

EnsPMapperunit ensMapperunitNewCpy(const EnsPMapperunit mu);

EnsPMapperunit ensMapperunitNewIni(ajuint oid, ajint start, ajint end);

EnsPMapperunit ensMapperunitNewRef(EnsPMapperunit mu);

void ensMapperunitDel(EnsPMapperunit *Pmu);

ajint ensMapperunitGetEnd(const EnsPMapperunit mu);

ajuint ensMapperunitGetObjectidentifier(const EnsPMapperunit mu);

ajint ensMapperunitGetStart(const EnsPMapperunit mu);

AjBool ensMapperunitSetEnd(EnsPMapperunit mu, ajint end);

AjBool ensMapperunitSetObjectidentifier(EnsPMapperunit mu, ajuint oid);

AjBool ensMapperunitSetStart(EnsPMapperunit mu, ajint start);

AjBool ensMapperunitTrace(const EnsPMapperunit mu, ajuint level);

size_t ensMapperunitCalculateMemsize(const EnsPMapperunit mu);

/* Ensembl Mapper Pair */

EnsPMapperpair ensMapperpairNewCpy(const EnsPMapperpair mp);

EnsPMapperpair ensMapperpairNewIni(ajuint srcoid,
                                   ajint srcstart,
                                   ajint srcend,
                                   ajuint trgoid,
                                   ajint trgstart,
                                   ajint trgend,
                                   ajint ori,
                                   AjBool indel);

EnsPMapperpair ensMapperpairNewRef(EnsPMapperpair mp);

EnsPMapperpair ensMapperpairNewUnit(EnsPMapperunit source,
                                    EnsPMapperunit target,
                                    ajint ori,
                                    AjBool indel);

void ensMapperpairDel(EnsPMapperpair *Pmp);

AjBool ensMapperpairGetIndel(const EnsPMapperpair mp);

ajint ensMapperpairGetOrientation(const EnsPMapperpair mp);

EnsPMapperunit ensMapperpairGetSource(const EnsPMapperpair mp);

EnsPMapperunit ensMapperpairGetTarget(const EnsPMapperpair mp);

AjBool ensMapperpairTrace(const EnsPMapperpair mp, ajuint level);

EnsPMapperunit ensMapperpairCalculateMapperunit(const EnsPMapperpair mp,
                                                EnsEMapperunitType type);

size_t ensMapperpairCalculateMemsize(const EnsPMapperpair mp);

AjBool ensListMapperpairSortSourceStartAscending(AjPList mps);

AjBool ensListMapperpairSortTargetStartAscending(AjPList mps);

/* Ensembl Mapper Result */

EnsPMapperresult ensMapperresultNewCoordinate(ajuint oid,
                                              ajint crdstart,
                                              ajint crdend,
                                              ajint crdstrand,
                                              EnsPCoordsystem cs,
                                              ajuint rank);

EnsPMapperresult ensMapperresultNewCpy(const EnsPMapperresult mr);

EnsPMapperresult ensMapperresultNewGap(ajint gapstart,
                                       ajint gapend,
                                       ajuint rank);

EnsPMapperresult ensMapperresultNewIndel(ajuint oid,
                                         ajint crdstart,
                                         ajint crdend,
                                         ajint crdstrand,
                                         EnsPCoordsystem cs,
                                         ajint gapstart,
                                         ajint gapend,
                                         ajuint rank);

EnsPMapperresult ensMapperresultNewIni(EnsEMapperresultType type,
                                       ajuint oid,
                                       ajint crdstart,
                                       ajint crdend,
                                       ajint crdstrand,
                                       EnsPCoordsystem cs,
                                       ajint gapstart,
                                       ajint gapend,
                                       ajuint rank);

EnsPMapperresult ensMapperresultNewRef(EnsPMapperresult mr);

void ensMapperresultDel(EnsPMapperresult *Pmr);

EnsPCoordsystem ensMapperresultGetCoordsystem(const EnsPMapperresult mr);

ajint ensMapperresultGetCoordinateEnd(const EnsPMapperresult mr);

ajint ensMapperresultGetCoordinateStart(const EnsPMapperresult mr);

ajint ensMapperresultGetGapEnd(const EnsPMapperresult mr);

ajint ensMapperresultGetGapStart(const EnsPMapperresult mr);

ajuint ensMapperresultGetObjectidentifier(const EnsPMapperresult mr);

ajuint ensMapperresultGetRank(const EnsPMapperresult mr);

ajint ensMapperresultGetCoordinateStrand(const EnsPMapperresult mr);

EnsEMapperresultType ensMapperresultGetType(const EnsPMapperresult mr);

AjBool ensMapperresultSetCoordinateEnd(EnsPMapperresult mr,
                                       ajint crdend);

AjBool ensMapperresultSetCoordinateStart(EnsPMapperresult mr,
                                         ajint crdstart);

AjBool ensMapperresultSetCoordinateStrand(EnsPMapperresult mr,
                                          ajint crdstrand);

AjBool ensMapperresultSetCoordsystem(EnsPMapperresult mr,
                                     EnsPCoordsystem cs);

AjBool ensMapperresultSetGapEnd(EnsPMapperresult mr,
                                ajint gapend);

AjBool ensMapperresultSetGapStart(EnsPMapperresult mr,
                                  ajint gapstart);

AjBool ensMapperresultSetObjectidentifier(EnsPMapperresult mr,
                                          ajuint oid);

AjBool ensMapperresultSetRank(EnsPMapperresult mr,
                              ajuint rank);

AjBool ensMapperresultSetType(EnsPMapperresult mr,
                              EnsEMapperresultType mrt);

AjBool ensMapperresultTrace(const EnsPMapperresult mr, ajuint level);

ajuint ensMapperresultCalculateLengthCoordinate(const EnsPMapperresult mr);

ajuint ensMapperresultCalculateLengthGap(const EnsPMapperresult mr);

ajuint ensMapperresultCalculateLengthResult(const EnsPMapperresult mr);

size_t ensMapperresultCalculateMemsize(const EnsPMapperresult mr);

/* Ensembl Mapper Range */

EnsPMapperrange ensMapperrangeNewCpy(const EnsPMapperrange mr);

EnsPMapperrange ensMapperrangeNewIni(ajint start, ajint end);

EnsPMapperrange ensMapperrangeNewRef(EnsPMapperrange mr);

void ensMapperrangeDel(EnsPMapperrange *Pmr);

ajint ensMapperrangeGetEnd(const EnsPMapperrange mr);

ajint ensMapperrangeGetStart(const EnsPMapperrange mr);

AjBool ensMapperrangeTrace(const EnsPMapperrange mr, ajuint level);

size_t ensMapperrangeCalculateMemsize(const EnsPMapperrange mr);

/* Ensembl Mapper Range Registry */

EnsPMapperrangeregistry ensMapperrangeregistryNew(void);

EnsPMapperrangeregistry ensMapperrangeregistryNewRef(
    EnsPMapperrangeregistry mrr);

AjBool ensMapperrangeregistryClear(EnsPMapperrangeregistry mrr);

void ensMapperrangeregistryDel(EnsPMapperrangeregistry *Pmrr);

AjBool ensMapperrangeregistryCheck(EnsPMapperrangeregistry mrr,
                                   ajuint oid,
                                   ajint chkstart,
                                   ajint chkend,
                                   ajint regstart,
                                   ajint regend,
                                   AjPList ranges);

const AjPList ensMapperrangeregistryCalculateMapperranges(
    const EnsPMapperrangeregistry mrr,
    ajuint oid);

ajuint ensMapperrangeregistryCalculateOverlap(
    const EnsPMapperrangeregistry mrr,
    ajuint oid,
    ajint start,
    ajint end);

/* Ensembl Mapper */

EnsPMapper ensMapperNewIni(AjPStr srctype,
                           AjPStr trgtype,
                           EnsPCoordsystem srccs,
                           EnsPCoordsystem trgcs);

EnsPMapper ensMapperNewRef(EnsPMapper mapper);

AjBool ensMapperClear(EnsPMapper mapper);

void ensMapperDel(EnsPMapper *Pmapper);

EnsPCoordsystem ensMapperGetCoordsystemSource(const EnsPMapper mapper);

EnsPCoordsystem ensMapperGetCoordsystemTarget(const EnsPMapper mapper);

ajuint ensMapperGetCount(const EnsPMapper mapper);

AjBool ensMapperGetSorted(const EnsPMapper mapper);

AjPStr ensMapperGetTypeSource(const EnsPMapper mapper);

AjPStr ensMapperGetTypeTarget(const EnsPMapper mapper);

AjBool ensMapperAddCoordinates(EnsPMapper mapper,
                               ajuint srcoid,
                               ajint srcstart,
                               ajint srcend,
                               ajint ori,
                               ajuint trgoid,
                               ajint trgstart,
                               ajint trgend);

AjBool ensMapperAddIndel(EnsPMapper mapper,
                         ajuint srcoid,
                         ajint srcstart,
                         ajint srcend,
                         ajint ori,
                         ajuint trgoid,
                         ajint trgstart,
                         ajint trgend);

AjBool ensMapperAddMapperpair(EnsPMapper mapper, EnsPMapperpair mp);

AjBool ensMapperAddMappers(EnsPMapper mapper1, EnsPMapper mapper2);

AjBool ensMapperAddMapperunits(EnsPMapper mapper,
                               EnsPMapperunit srcmu,
                               EnsPMapperunit trgmu,
                               ajint ori,
                               AjBool indel);

AjBool ensMapperList(EnsPMapper mapper,
                     ajuint oid,
                     ajint start,
                     ajint end,
                     const AjPStr type,
                     AjPList mps);

AjBool ensMapperTrace(const EnsPMapper mapper, ajuint level);

size_t ensMapperCalculateMemsize(const EnsPMapper mapper);

AjBool ensMapperFastmap(EnsPMapper mapper,
                        ajuint oid,
                        ajint start,
                        ajint end,
                        ajint strand,
                        const AjPStr type,
                        AjPList mrs);

AjBool ensMapperMap(EnsPMapper mapper,
                    ajuint oid,
                    ajint start,
                    ajint end,
                    ajint strand,
                    const AjPStr type,
                    AjPList mrs);

AjBool ensMapperMapindel(EnsPMapper mapper,
                         ajuint oid,
                         ajint start,
                         ajint end,
                         ajint strand,
                         const AjPStr type,
                         AjPList mrs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSMAPPER_H */
ensmarker.h/    1414437294  1010  513   100644  18543     `
/* @include ensmarker *********************************************************
**
** Ensembl Marker functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.25 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:10:42 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSMARKER_H
#define ENSMARKER_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPMarkeradaptor ***************************************************
**
** Ensembl Marker Adaptor.
** Defined as an alias in EnsPBaseadaptor.
**
** #alias EnsPBaseadaptor
**
** #cc Bio::EnsEMBL::Map::DBSQL::MarkerAdaptor
** ##
******************************************************************************/

#define EnsPMarkeradaptor EnsPBaseadaptor




/* @const EnsPMarkerfeatureadaptor ********************************************
**
** Ensembl Marker Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::Map::DBSQL::MarkerFeatureAdaptor
** ##
******************************************************************************/

#define EnsPMarkerfeatureadaptor EnsPFeatureadaptor




/* @const EnsPMarkermaplocationadaptor ****************************************
**
** Ensembl Marker Map Location Adaptor.
** Defined as an alias in EnsPDatabaseadaptor.
**
** #alias EnsPDatabaseadaptor
**
** #cc Bio::EnsEMBL::Map::DBSQL::MarkerMapLocationAdaptor
** ##
******************************************************************************/

#define EnsPMarkermaplocationadaptor EnsPDatabaseadaptor




/* @const EnsPMarkersynonymadaptor ********************************************
**
** Ensembl Marker Synonym Adaptor.
** Defined as an alias in EnsPDatabaseadaptor.
**
** #alias EnsPDatabaseadaptor
**
** #cc Bio::EnsEMBL::Map::DBSQL::MarkerSynonymAdaptor
** ##
******************************************************************************/

#define EnsPMarkersynonymadaptor EnsPDatabaseadaptor




/* @enum EnsEMarkerType *******************************************************
**
** Ensembl Marker Type enumeration
**
** @value ensEMarkerTypeNULL Null
** @value ensEMarkerTypeEST Expressed Sequence Tag
** @value ensEMarkerTypeMicroSatellite Micro-Satellite
** @@
******************************************************************************/

typedef enum EnsOMarkerType
{
    ensEMarkerTypeNULL,
    ensEMarkerTypeEST,
    ensEMarkerTypeMicroSatellite
} EnsEMarkerType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPMarkersynonym ****************************************************
**
** Ensembl Marker Synonym
**
** @alias EnsSMarkersynonym
** @alias EnsOMarkersynonym
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Map::MarkerSynonym
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Source [AjPStr] Source
** @attr Name [AjPStr] Name
** @@
******************************************************************************/

typedef struct EnsSMarkersynonym
{
    ajuint Use;
    ajuint Identifier;
    AjPStr Source;
    AjPStr Name;
} EnsOMarkersynonym;

#define EnsPMarkersynonym EnsOMarkersynonym*




/* @data EnsPMarkermaplocation ************************************************
**
** Ensembl Marker Map Location
**
** @alias EnsSMarkermaplocation
** @alias EnsOMarkermaplocation
**
** @cc Bio::EnsEMBL::Map::MapLocation
** @attr Markersynonym [EnsPMarkersynonym] Ensembl Marker Synonym
** @attr Mapname [AjPStr] Map name
** @attr Chromosomename [AjPStr] Chromosome name
** @attr Position [AjPStr] Position
** @attr Lodscore [float] LOD score
** @attr Use [ajuint] Use counter
** @@
******************************************************************************/

typedef struct EnsSMarkermaplocation
{
    EnsPMarkersynonym Markersynonym;
    AjPStr Mapname;
    AjPStr Chromosomename;
    AjPStr Position;
    float Lodscore;
    ajuint Use;
} EnsOMarkermaplocation;

#define EnsPMarkermaplocation EnsOMarkermaplocation*




/* @data EnsPMarker ***********************************************************
**
** Ensembl Marker
**
** @alias EnsSMarker
** @alias EnsOMarker
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPMarkeradaptor] Ensembl Marker Adaptor
** @cc Bio::EnsEMBL::Map::Marker
** @attr Displaysynonym [EnsPMarkersynonym] Display Ensembl Marker Synonym
** @attr PrimerLeft [AjPStr] Left primer
** @attr PrimerRight [AjPStr] Right primer
** @attr Markersynonyms [AjPList] AJAX List of Ensembl Marker Synonyms
** @attr Markermaplocations [AjPList] AJAX List of Ensembl Marker Map Locations
** @attr DistanceMinimum [ajuint] Minimum primer distance
** @attr DistanceMaximum [ajuint] Maximum primer distance
** @attr Type [EnsEMarkerType] Type
** @attr Priority [ajint] Priority
** @@
******************************************************************************/

typedef struct EnsSMarker
{
    ajuint Use;
    ajuint Identifier;
    EnsPMarkeradaptor Adaptor;
    EnsPMarkersynonym Displaysynonym;
    AjPStr PrimerLeft;
    AjPStr PrimerRight;
    AjPList Markersynonyms;
    AjPList Markermaplocations;
    ajuint DistanceMinimum;
    ajuint DistanceMaximum;
    EnsEMarkerType Type;
    ajint Priority;
} EnsOMarker;

#define EnsPMarker EnsOMarker*




/* @data EnsPMarkerfeature ****************************************************
**
** Ensembl Marker Feature
**
** @alias EnsSMarkerfeature
** @alias EnsOMarkerfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPMarkerfeatureadaptor] Ensembl Marker Feature Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Map::MarkerFeature
** @attr Marker [EnsPMarker] Ensembl Marker
** @attr Mapweight [ajint] Map weight
** @attr Padding [ajint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSMarkerfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPMarkerfeatureadaptor Adaptor;
    EnsPFeature Feature;
    EnsPMarker Marker;
    ajint Mapweight;
    ajint Padding;
} EnsOMarkerfeature;

#define EnsPMarkerfeature EnsOMarkerfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Marker Synonym */

EnsPMarkersynonym ensMarkersynonymNewCpy(const EnsPMarkersynonym ms);

EnsPMarkersynonym ensMarkersynonymNewIni(ajuint identifier,
                                         AjPStr source,
                                         AjPStr name);

EnsPMarkersynonym ensMarkersynonymNewRef(EnsPMarkersynonym ms);

void ensMarkersynonymDel(EnsPMarkersynonym *Pms);

ajuint ensMarkersynonymGetIdentifier(const EnsPMarkersynonym ms);

AjPStr ensMarkersynonymGetName(const EnsPMarkersynonym ms);

AjPStr ensMarkersynonymGetSource(const EnsPMarkersynonym ms);

AjBool ensMarkersynonymSetIdentifier(EnsPMarkersynonym ms, ajuint identifier);

AjBool ensMarkersynonymSetName(EnsPMarkersynonym ms, AjPStr name);

AjBool ensMarkersynonymSetSource(EnsPMarkersynonym ms, AjPStr source);

AjBool ensMarkersynonymTrace(const EnsPMarkersynonym ms, ajuint level);

size_t ensMarkersynonymCalculateMemsize(const EnsPMarkersynonym ms);

/* Ensembl Marker Synonym Adaptor */

EnsPMarkersynonymadaptor ensRegistryGetMarkersynonymadaptor(
    EnsPDatabaseadaptor dba);

EnsPDatabaseadaptor ensMarkersynonymadaptorGetDatabaseadaptor(
    EnsPMarkersynonymadaptor msa);

AjBool ensMarkersynonymadaptorFetchAllbyMarkeridentifier(
    EnsPMarkersynonymadaptor msa,
    ajuint markerid,
    AjPList mss);

AjBool ensMarkersynonymadaptorFetchByIdentifier(
    EnsPMarkersynonymadaptor msa,
    ajuint identifier,
    EnsPMarkersynonym *Pms);

/* Ensembl Marker Map Location */

EnsPMarkermaplocation ensMarkermaplocationNewCpy(
    const EnsPMarkermaplocation mml);

EnsPMarkermaplocation ensMarkermaplocationNewIni(EnsPMarkersynonym ms,
                                                 AjPStr mapname,
                                                 AjPStr chrname,
                                                 AjPStr position,
                                                 float lodscore);

EnsPMarkermaplocation ensMarkermaplocationNewRef(EnsPMarkermaplocation mml);

void ensMarkermaplocationDel(EnsPMarkermaplocation *Pmml);

AjPStr ensMarkermaplocationGetChromosomename(const EnsPMarkermaplocation mml);

float ensMarkermaplocationGetLodscore(const EnsPMarkermaplocation mml);

AjPStr ensMarkermaplocationGetMapname(const EnsPMarkermaplocation mml);

EnsPMarkersynonym ensMarkermaplocationGetMarkersynonym(
    const EnsPMarkermaplocation mml);

AjPStr ensMarkermaplocationGetPosition(const EnsPMarkermaplocation mml);

AjBool ensMarkermaplocationSetChromosomename(EnsPMarkermaplocation mml,
                                             AjPStr chrname);

AjBool ensMarkermaplocationSetLodscore(EnsPMarkermaplocation mml,
                                       float lodscore);

AjBool ensMarkermaplocationSetMapname(EnsPMarkermaplocation mml,
                                      AjPStr mapname);

AjBool ensMarkermaplocationSetMarkersynonym(EnsPMarkermaplocation mml,
                                            EnsPMarkersynonym ms);

AjBool ensMarkermaplocationSetPosition(EnsPMarkermaplocation mml,
                                       AjPStr position);

AjBool ensMarkermaplocationTrace(const EnsPMarkermaplocation mml,
                                 ajuint level);

size_t ensMarkermaplocationCalculateMemsize(const EnsPMarkermaplocation mml);

/* Ensembl Marker Map Location Adaptor */

EnsPMarkermaplocationadaptor ensRegistryGetMarkermaplocationadaptor(
    EnsPDatabaseadaptor dba);

EnsPDatabaseadaptor ensMarkermaplocationadaptorGetDatabaseadaptor(
    EnsPMarkermaplocationadaptor mmla);

AjBool ensMarkermaplocationadaptorFetchAllbyMarkeridentifier(
    EnsPMarkermaplocationadaptor mmla,
    ajuint markerid,
    AjPList mmls);

/* Ensembl Marker */

EnsPMarker ensMarkerNewCpy(const EnsPMarker marker);

EnsPMarker ensMarkerNewIni(EnsPMarkeradaptor adaptor,
                           ajuint identifier,
                           EnsPMarkersynonym display,
                           AjPStr lprimer,
                           AjPStr rprimer,
                           AjPList mss,
                           AjPList mmls,
                           ajuint mindistance,
                           ajuint maxdistance,
                           EnsEMarkerType type,
                           ajint priority);

EnsPMarker ensMarkerNewRef(EnsPMarker marker);

void ensMarkerDel(EnsPMarker *Pmarker);

EnsPMarkeradaptor ensMarkerGetAdaptor(const EnsPMarker marker);

EnsPMarkersynonym ensMarkerGetDisplaysynonym(const EnsPMarker marker);

ajuint ensMarkerGetDistanceMaximum(const EnsPMarker marker);

ajuint ensMarkerGetDistanceMinimum(const EnsPMarker marker);

ajuint ensMarkerGetIdentifier(const EnsPMarker marker);

AjPStr ensMarkerGetPrimerLeft(const EnsPMarker marker);

AjPStr ensMarkerGetPrimerRight(const EnsPMarker marker);

ajint ensMarkerGetPriority(const EnsPMarker marker);

EnsEMarkerType ensMarkerGetType(const EnsPMarker marker);

const AjPList ensMarkerLoadMarkermaplocations(EnsPMarker marker);

const AjPList ensMarkerLoadMarkersynonyms(EnsPMarker marker);

AjBool ensMarkerSetAdaptor(EnsPMarker marker,
                           EnsPMarkeradaptor ma);

AjBool ensMarkerSetDisplaysynonym(EnsPMarker marker,
                                  EnsPMarkersynonym display);

AjBool ensMarkerSetDistanceMaximum(EnsPMarker marker,
                                   ajuint maxdistance);

AjBool ensMarkerSetDistanceMinimum(EnsPMarker marker,
                                   ajuint mindistance);

AjBool ensMarkerSetIdentifier(EnsPMarker marker,
                              ajuint identifier);

AjBool ensMarkerSetPrimerLeft(EnsPMarker marker,
                              AjPStr lprimer);

AjBool ensMarkerSetPrimerRight(EnsPMarker marker,
                               AjPStr rprimer);

AjBool ensMarkerSetPriority(EnsPMarker marker,
                            ajint priority);

AjBool ensMarkerSetType(EnsPMarker marker,
                        EnsEMarkerType type);

AjBool ensMarkerTrace(const EnsPMarker marker, ajuint level);

size_t ensMarkerCalculateMemsize(const EnsPMarker marker);

AjBool ensMarkerAddMarkermaplocation(EnsPMarker marker,
                                     EnsPMarkermaplocation mml);

AjBool ensMarkerAddMarkersynonym(EnsPMarker marker,
                                 EnsPMarkersynonym ms);

AjBool ensMarkerClearMarkermaplocations(EnsPMarker marker);

AjBool ensMarkerClearMarkersynonyms(EnsPMarker marker);

EnsEMarkerType ensMarkerTypeFromStr(const AjPStr type);

const char *ensMarkerTypeToChar(EnsEMarkerType type);

/* Ensembl Marker Adaptor */

EnsPMarkeradaptor ensRegistryGetMarkeradaptor(
    EnsPDatabaseadaptor dba);

EnsPMarkeradaptor ensMarkeradaptorNew(
    EnsPDatabaseadaptor dba);

void ensMarkeradaptorDel(EnsPMarkeradaptor *Pma);

EnsPBaseadaptor ensMarkeradaptorGetBaseadaptor(EnsPMarkeradaptor ma);

EnsPDatabaseadaptor ensMarkeradaptorGetDatabaseadaptor(EnsPMarkeradaptor ma);

AjBool ensMarkeradaptorFetchAll(EnsPMarkeradaptor ma,
                                AjPList markers);

AjBool ensMarkeradaptorFetchAllbySynonym(EnsPMarkeradaptor ma,
                                         const AjPStr name,
                                         const AjPStr source,
                                         AjPList markers);

AjBool ensMarkeradaptorFetchByIdentifier(EnsPMarkeradaptor ma,
                                         ajuint identifier,
                                         EnsPMarker *Pmarker);

/* Ensembl Marker Feature */

EnsPMarkerfeature ensMarkerfeatureNewCpy(const EnsPMarkerfeature mf);

EnsPMarkerfeature ensMarkerfeatureNewIni(EnsPMarkerfeatureadaptor mfa,
                                         ajuint identifier,
                                         EnsPFeature feature,
                                         EnsPMarker marker,
                                         ajint mapweight);

EnsPMarkerfeature ensMarkerfeatureNewRef(EnsPMarkerfeature mf);

void ensMarkerfeatureDel(EnsPMarkerfeature *Pmf);

EnsPMarkerfeatureadaptor ensMarkerfeatureGetAdaptor(
    const EnsPMarkerfeature mf);

EnsPFeature ensMarkerfeatureGetFeature(const EnsPMarkerfeature mf);

ajuint ensMarkerfeatureGetIdentifier(const EnsPMarkerfeature mf);

ajint ensMarkerfeatureGetMapweight(const EnsPMarkerfeature mf);

EnsPMarker ensMarkerfeatureGetMarker(const EnsPMarkerfeature mf);

AjBool ensMarkerfeatureSetAdaptor(EnsPMarkerfeature mf,
                                  EnsPMarkerfeatureadaptor mfa);

AjBool ensMarkerfeatureSetIdentifier(EnsPMarkerfeature mf, ajuint identifier);

AjBool ensMarkerfeatureSetFeature(EnsPMarkerfeature mf, EnsPFeature feature);

AjBool ensMarkerfeatureSetMarker(EnsPMarkerfeature mf, EnsPMarker marker);

AjBool ensMarkerfeatureSetMapweight(EnsPMarkerfeature mf, ajint mapweight);

AjBool ensMarkerfeatureTrace(const EnsPMarkerfeature mf, ajuint level);

size_t ensMarkerfeatureCalculateMemsize(const EnsPMarkerfeature mf);

/* AJAX List of Ensembl Marker Feature objects */

AjBool ensListMarkerfeatureSortEndAscending(AjPList mfs);

AjBool ensListMarkerfeatureSortEndDescending(AjPList mfs);

AjBool ensListMarkerfeatureSortIdentifierAscending(AjPList mfs);

AjBool ensListMarkerfeatureSortStartAscending(AjPList mfs);

AjBool ensListMarkerfeatureSortStartDescending(AjPList mfs);

/* Ensembl Marker Feature Adaptor */

EnsPMarkerfeatureadaptor ensRegistryGetMarkerfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPMarkerfeatureadaptor ensMarkerfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensMarkerfeatureadaptorDel(EnsPMarkerfeatureadaptor *Pmfa);

EnsPBaseadaptor ensMarkerfeatureadaptorGetBaseadaptor(
    EnsPMarkerfeatureadaptor mfa);

EnsPDatabaseadaptor ensMarkerfeatureadaptorGetDatabaseadaptor(
    EnsPMarkerfeatureadaptor mfa);

EnsPFeatureadaptor ensMarkerfeatureadaptorGetFeatureadaptor(
    EnsPMarkerfeatureadaptor mfa);

AjBool ensMarkerfeatureadaptorFetchAllbyMarker(
    EnsPMarkerfeatureadaptor mfa,
    const EnsPMarker marker,
    AjPList mfs);

AjBool ensMarkerfeatureadaptorFetchAllbySlice(
    EnsPMarkerfeatureadaptor mfa,
    EnsPSlice slice,
    ajint priority,
    ajuint mapweight,
    const AjPStr anname,
    AjPList mfs);

AjBool ensMarkerfeatureadaptorFetchAllbySlicemarkername(
    EnsPMarkerfeatureadaptor mfa,
    EnsPSlice slice,
    const AjPStr name,
    AjPList mfs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSMARKER_H */

/344            1414437294  1010  513   100644  3810      `
/* @include ensmetacoordinate *************************************************
**
** Ensembl Meta-Coordinate functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.15 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:12:31 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSMETACOORDINATE_H
#define ENSMETACOORDINATE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "enscoordsystem.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPMetacoordinateadaptor ********************************************
**
** Ensembl Meta-Coordinate Adaptor.
**
** @alias EnsSMetacoordinateadaptor
** @alias EnsOMetacoordinateadaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor.
** @attr CacheByName [AjPTable] Ensembl Feature name (i.e. table name) cache.
** @attr CacheByLength [AjPTable] Maximum length cache.
** @@
******************************************************************************/

typedef struct EnsSMetacoordinateadaptor
{
    EnsPDatabaseadaptor Adaptor;
    AjPTable CacheByName;
    AjPTable CacheByLength;
} EnsOMetacoordinateadaptor;

#define EnsPMetacoordinateadaptor EnsOMetacoordinateadaptor*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Meta-Coordinate Adaptor */

EnsPMetacoordinateadaptor ensRegistryGetMetacoordinateadaptor(
    EnsPDatabaseadaptor dba);

EnsPMetacoordinateadaptor ensMetacoordinateadaptorNew(
    EnsPDatabaseadaptor dba);

void ensMetacoordinateadaptorDel(EnsPMetacoordinateadaptor *Pmca);

EnsPDatabaseadaptor ensMetacoordinateadaptorGetDatabaseadaptor(
    EnsPMetacoordinateadaptor mca);

AjBool ensMetacoordinateadaptorRetrieveAllCoordsystems(
    EnsPMetacoordinateadaptor mca,
    const AjPStr name,
    AjPList css);

AjBool ensMetacoordinateadaptorRetrieveMaximumlength(
    EnsPMetacoordinateadaptor mca,
    const EnsPCoordsystem cs,
    const AjPStr name,
    ajint *Pmaxlength);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSMETACOORDINATE_H */
/365            1414437294  1010  513   100644  7742      `
/* @include ensmetainformation ************************************************
**
** Ensembl Meta-Information functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.21 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:14:00 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSMETAINFORMATION_H
#define ENSMETAINFORMATION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdatabaseadaptor.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPMetainformationadaptor *******************************************
**
** Ensembl Meta-Information Adaptor
**
** @alias EnsSMetainformationadaptor
** @alias EnsOMetainformationadaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor.
** @attr CacheByIdentifier [AjPTable] Cache by Meta-Information SQL identifier.
** @attr CacheByKey [AjPTable] Cache by Meta-Information key data.
** @@
******************************************************************************/

typedef struct EnsSMetainformationadaptor
{
    EnsPDatabaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByKey;
} EnsOMetainformationadaptor;

#define EnsPMetainformationadaptor EnsOMetainformationadaptor*




/* @data EnsPMetainformation **************************************************
**
** Ensembl Meta-Information
**
** @alias EnsSMetainformation
** @alias EnsOMetainformation
**
** @attr Use [ajuint] Use counter.
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL Database-internal identifier.
** @attr Adaptor [EnsPMetainformationadaptor] Ensembl Meta-Information Adaptor.
** @cc Bio::EnsEMBL::MetaContainer
** @attr Key [AjPStr] Key.
** @attr Value [AjPStr] Value.
** @attr Species [ajuint] Species identifier.
** @attr Padding [ajuint] Padding to alignment boundary.
** @@
******************************************************************************/

typedef struct EnsSMetainformation
{
    ajuint Use;
    ajuint Identifier;
    EnsPMetainformationadaptor Adaptor;
    AjPStr Key;
    AjPStr Value;
    ajuint Species;
    ajuint Padding;
} EnsOMetainformation;

#define EnsPMetainformation EnsOMetainformation*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Meta-Information */

EnsPMetainformation ensMetainformationNewCpy(const EnsPMetainformation mi);

EnsPMetainformation ensMetainformationNewIni(EnsPMetainformationadaptor mia,
                                             ajuint identifier,
                                             ajuint species,
                                             AjPStr key,
                                             AjPStr value);

EnsPMetainformation ensMetainformationNewRef(EnsPMetainformation mi);

void ensMetainformationDel(EnsPMetainformation *Pmi);

EnsPMetainformationadaptor ensMetainformationGetAdaptor(
    const EnsPMetainformation mi);

ajuint ensMetainformationGetIdentifier(const EnsPMetainformation mi);

AjPStr ensMetainformationGetKey(const EnsPMetainformation mi);

ajuint ensMetainformationGetSpecies(const EnsPMetainformation mi);

AjPStr ensMetainformationGetValue(const EnsPMetainformation mi);

AjBool ensMetainformationSetAdaptor(EnsPMetainformation mi,
                                    EnsPMetainformationadaptor mia);

AjBool ensMetainformationSetIdentifier(EnsPMetainformation mi,
                                       ajuint identifier);

AjBool ensMetainformationSetKey(EnsPMetainformation mi, AjPStr key);

AjBool ensMetainformationSetSpecies(EnsPMetainformation mi, ajuint species);

AjBool ensMetainformationSetValue(EnsPMetainformation mi, AjPStr value);

AjBool ensMetainformationTrace(const EnsPMetainformation mi, ajuint level);

size_t ensMetainformationCalculateMemsize(const EnsPMetainformation mi);

AjBool ensListMetainformationSortIdentifierAscending(AjPList mis);

AjBool ensListMetainformationSortIdentifierDescending(AjPList mis);

/* Ensembl Meta-Information Adaptor */

EnsPMetainformationadaptor ensRegistryGetMetainformationadaptor(
    EnsPDatabaseadaptor dba);

EnsPMetainformationadaptor ensMetainformationadaptorNew(
    EnsPDatabaseadaptor dba);

void ensMetainformationadaptorDel(EnsPMetainformationadaptor *Pmia);

EnsPDatabaseadaptor ensMetainformationadaptorGetDatabaseadaptor(
    EnsPMetainformationadaptor mia);

AjBool ensMetainformationadaptorFetchAllbyKey(
    EnsPMetainformationadaptor mia,
    const AjPStr key,
    AjPList mis);

AjBool ensMetainformationadaptorRetrieveAllSpeciesclassifications(
    EnsPMetainformationadaptor mia,
    AjPList values);

AjBool ensMetainformationadaptorRetrieveAllSpeciesnames(
    EnsPMetainformationadaptor mia,
    AjPList values);

AjBool ensMetainformationadaptorRetrieveGenebuildversion(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveSchemaversion(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveSpeciesCommonname(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveSpeciesDivision(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveSpeciesProductionname(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveSpeciesScientificname(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveSpeciesShortname(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveTaxonomyidentifier(
    EnsPMetainformationadaptor mia,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorRetrieveValue(
    EnsPMetainformationadaptor mia,
    const AjPStr key,
    AjPStr *Pvalue);

AjBool ensMetainformationadaptorCheckExists(
    EnsPMetainformationadaptor mia,
    const AjPStr key,
    const AjPStr value,
    AjBool *Presult);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSMETAINFORMATION_H */
/387            1414437294  1010  513   100644  12078     `
/* @include ensmiscellaneous **************************************************
**
** Ensembl Miscellaneous functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.24 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:15:18 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSMISCELLANEOUS_H
#define ENSMISCELLANEOUS_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensattribute.h"
#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPMiscellaneousfeatureadaptor *************************************
**
** Ensembl Miscellaneous Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor.
**
** #alias EnsPFeatureadaptor
**
** #cc Bio::EnsEMBL::DBSQL::MiscFeatureAdaptor
** ##
******************************************************************************/

#define EnsPMiscellaneousfeatureadaptor EnsPFeatureadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPMiscellaneoussetadaptor ******************************************
**
** Ensembl Miscellaneous Set Adaptor.
**
** @alias EnsSMiscellaneoussetadaptor
** @alias EnsOMiscellaneoussetadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByCode [AjPTable] Code cache
** @@
******************************************************************************/

typedef struct EnsSMiscellaneoussetadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByCode;
} EnsOMiscellaneoussetadaptor;

#define EnsPMiscellaneoussetadaptor EnsOMiscellaneoussetadaptor*




/* @data EnsPMiscellaneousset *************************************************
**
** Ensembl Miscellaneous Set.
**
** @alias EnsSMiscellaneousset
** @alias EnsOMiscellaneousset
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPMiscellaneoussetadaptor] Ensembl Miscellaneous
**                                             Set Adaptor
** @cc Bio::EnsEMBL::MiscSet
** @cc 'misc_set' SQL table
** @attr Code [AjPStr] Code
** @attr Name [AjPStr] Name
** @attr Description [AjPStr] Description
** @attr MaximumLength [ajuint] Maximum Feature length
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSMiscellaneousset
{
    ajuint Use;
    ajuint Identifier;
    EnsPMiscellaneoussetadaptor Adaptor;
    AjPStr Code;
    AjPStr Name;
    AjPStr Description;
    ajuint MaximumLength;
    ajuint Padding;
} EnsOMiscellaneousset;

#define EnsPMiscellaneousset EnsOMiscellaneousset*




/* @data EnsPMiscellaneousfeature *********************************************
**
** Ensembl Miscellaneous Feature.
**
** @alias EnsSMiscellaneousfeature
** @alias EnsOMiscellaneousfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPMiscellaneousfeatureadaptor] Ensembl Miscellaneous
**                                                 Feature Adaptor
** @cc Bio::EnsEMBL::Feature
** @cc 'misc_feature' SQL table
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::MiscFeature
** @attr Attributes [AjPList] AJAX List of Ensembl Attribute objects
** @attr Miscellaneoussets [AjPList] AJAX List of
** Ensembl Miscellaneous Set objects
** @@
******************************************************************************/

typedef struct EnsSMiscellaneousfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPMiscellaneousfeatureadaptor Adaptor;
    EnsPFeature Feature;
    AjPList Attributes;
    AjPList Miscellaneoussets;
} EnsOMiscellaneousfeature;

#define EnsPMiscellaneousfeature EnsOMiscellaneousfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Miscellaneous Set */

EnsPMiscellaneousset ensMiscellaneoussetNewCpy(
    const EnsPMiscellaneousset ms);

EnsPMiscellaneousset ensMiscellaneoussetNewIni(
    EnsPMiscellaneoussetadaptor msa,
    ajuint identifier,
    AjPStr code,
    AjPStr name,
    AjPStr description,
    ajuint maxlen);

EnsPMiscellaneousset ensMiscellaneoussetNewRef(EnsPMiscellaneousset ms);

void ensMiscellaneoussetDel(EnsPMiscellaneousset *Pms);

EnsPMiscellaneoussetadaptor ensMiscellaneoussetGetAdaptor(
    const EnsPMiscellaneousset ms);

AjPStr ensMiscellaneoussetGetCode(const EnsPMiscellaneousset ms);

AjPStr ensMiscellaneoussetGetDescription(const EnsPMiscellaneousset ms);

ajuint ensMiscellaneoussetGetIdentifier(const EnsPMiscellaneousset ms);

ajuint ensMiscellaneoussetGetMaximumlength(const EnsPMiscellaneousset ms);

AjPStr ensMiscellaneoussetGetName(const EnsPMiscellaneousset ms);

AjBool ensMiscellaneoussetSetAdaptor(EnsPMiscellaneousset ms,
                                     EnsPMiscellaneoussetadaptor msa);

AjBool ensMiscellaneoussetSetIdentifier(EnsPMiscellaneousset ms,
                                        ajuint identifier);

AjBool ensMiscellaneoussetSetCode(EnsPMiscellaneousset ms, AjPStr code);

AjBool ensMiscellaneoussetSetName(EnsPMiscellaneousset ms, AjPStr name);

AjBool ensMiscellaneoussetSetDescription(EnsPMiscellaneousset ms,
                                         AjPStr description);

AjBool ensMiscellaneoussetSetMaximumlength(EnsPMiscellaneousset ms,
                                           ajuint maxlen);

size_t ensMiscellaneoussetCalculateMemsize(const EnsPMiscellaneousset ms);

AjBool ensMiscellaneoussetTrace(const EnsPMiscellaneousset ms, ajuint level);

/* AJAX List of Ensembl Miscellaneous Set objects */

AjBool ensListMiscellaneoussetSortIdentifierAscending(AjPList mss);

AjBool ensListMiscellaneoussetSortIdentifierDescending(AjPList mss);

/* Ensembl Miscellaneous Set Adaptor */

EnsPMiscellaneoussetadaptor ensRegistryGetMiscellaneoussetadaptor(
    EnsPDatabaseadaptor dba);

EnsPMiscellaneoussetadaptor ensMiscellaneoussetadaptorNew(
    EnsPDatabaseadaptor dba);

void ensMiscellaneoussetadaptorDel(EnsPMiscellaneoussetadaptor *Pmsa);

AjBool ensMiscellaneoussetadaptorCacheClear(
    EnsPMiscellaneoussetadaptor msa);

EnsPBaseadaptor ensMiscellaneoussetadaptorGetBaseadaptor(
    EnsPMiscellaneoussetadaptor msa);

EnsPDatabaseadaptor ensMiscellaneoussetadaptorGetDatabaseadaptor(
    EnsPMiscellaneoussetadaptor msa);

AjBool ensMiscellaneoussetadaptorFetchAll(
    EnsPMiscellaneoussetadaptor msa,
    AjPList mslist);

AjBool ensMiscellaneoussetadaptorFetchByCode(
    EnsPMiscellaneoussetadaptor msa,
    const AjPStr code,
    EnsPMiscellaneousset *Pms);

AjBool ensMiscellaneoussetadaptorFetchByIdentifier(
    EnsPMiscellaneoussetadaptor msa,
    ajuint identifier,
    EnsPMiscellaneousset *Pms);

/* Ensembl Miscellaneous Feature */

EnsPMiscellaneousfeature ensMiscellaneousfeatureNewCpy(
    const EnsPMiscellaneousfeature mf);

EnsPMiscellaneousfeature ensMiscellaneousfeatureNewIni(
    EnsPMiscellaneousfeatureadaptor mfa,
    ajuint identifier,
    EnsPFeature feature);

EnsPMiscellaneousfeature ensMiscellaneousfeatureNewRef(
    EnsPMiscellaneousfeature mf);

void ensMiscellaneousfeatureDel(EnsPMiscellaneousfeature *Pmf);

EnsPMiscellaneousfeatureadaptor ensMiscellaneousfeatureGetAdaptor(
    const EnsPMiscellaneousfeature mf);

const AjPList ensMiscellaneousfeatureGetAttributes(
    const EnsPMiscellaneousfeature mf);

EnsPFeature ensMiscellaneousfeatureGetFeature(
    const EnsPMiscellaneousfeature mf);

ajuint ensMiscellaneousfeatureGetIdentifier(
    const EnsPMiscellaneousfeature mf);

const AjPList ensMiscellaneousfeatureGetMiscellaneoussets(
    const EnsPMiscellaneousfeature mf);

AjBool ensMiscellaneousfeatureSetAdaptor(
    EnsPMiscellaneousfeature mf,
    EnsPMiscellaneousfeatureadaptor mfa);

AjBool ensMiscellaneousfeatureSetFeature(
    EnsPMiscellaneousfeature mf,
    EnsPFeature feature);

AjBool ensMiscellaneousfeatureSetIdentifier(
    EnsPMiscellaneousfeature mf,
    ajuint identifier);

AjBool ensMiscellaneousfeatureAddAttribute(
    EnsPMiscellaneousfeature mf,
    EnsPAttribute attribute);

AjBool ensMiscellaneousfeatureAddMiscellaneousset(
    EnsPMiscellaneousfeature mf,
    EnsPMiscellaneousset ms);

AjBool ensMiscellaneousfeatureTrace(const EnsPMiscellaneousfeature mf,
                                    ajuint level);

size_t ensMiscellaneousfeatureCalculateMemsize(
    const EnsPMiscellaneousfeature mf);

AjBool ensMiscellaneousfeatureFetchAllAttributes(
    EnsPMiscellaneousfeature mf,
    const AjPStr code,
    AjPList attributes);

AjBool ensMiscellaneousfeatureFetchAllMiscellaneoussets(
    EnsPMiscellaneousfeature mf,
    const AjPStr code,
    AjPList mslist);

/* AJAX List of Ensembl Miscellaneous Feature objects */

AjBool ensListMiscellaneousfeatureSortEndAscending(AjPList mfs);

AjBool ensListMiscellaneousfeatureSortEndDescending(AjPList mfs);

AjBool ensListMiscellaneousfeatureSortIdentifierAscending(AjPList mfs);

AjBool ensListMiscellaneousfeatureSortStartAscending(AjPList mfs);

AjBool ensListMiscellaneousfeatureSortStartDescending(AjPList mfs);

/* Ensembl Miscellaneous Feature Adaptor */

EnsPMiscellaneousfeatureadaptor ensRegistryGetMiscellaneousfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPMiscellaneousfeatureadaptor ensMiscellaneousfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensMiscellaneousfeatureadaptorDel(EnsPMiscellaneousfeatureadaptor *Pmfa);

EnsPBaseadaptor ensMiscellaneousfeatureadaptorGetBaseadaptor(
    EnsPMiscellaneousfeatureadaptor mfa);

EnsPDatabaseadaptor ensMiscellaneousfeatureadaptorGetDatabaseadaptor(
    EnsPMiscellaneousfeatureadaptor mfa);

EnsPFeatureadaptor ensMiscellaneousfeatureadaptorGetFeatureadaptor(
    EnsPMiscellaneousfeatureadaptor mfa);

AjBool ensMiscellaneousfeatureadaptorFetchAllbySlicecodes(
    EnsPMiscellaneousfeatureadaptor mfa,
    EnsPSlice slice,
    const AjPList codes,
    AjPList mfs);

AjBool ensMiscellaneousfeatureadaptorFetchAllbyAttributecodevalue(
    EnsPMiscellaneousfeatureadaptor mfa,
    const AjPStr code,
    const AjPStr value,
    AjPList mfs);

AjBool ensMiscellaneousfeatureadaptorRetrieveAllIdentifiers(
    EnsPMiscellaneousfeatureadaptor mfa,
    AjPList identifiers);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSMISCELLANEOUS_H */
ensontology.h/  1414437294  1010  513   100644  13331     `
/* @include ensontology *******************************************************
**
** Ensembl Ontology functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.6 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:16:39 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSONTOLOGY_H
#define ENSONTOLOGY_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensbaseadaptor.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPOntologytermadaptor *********************************************
**
** Ensembl Ontology Term Adaptor.
** Defined as an alias in EnsPBaseadaptor
**
** #alias EnsPBaseadaptor
** ##
******************************************************************************/

#define EnsPOntologytermadaptor EnsPBaseadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPOntologyadaptor **************************************************
**
** Ensembl Ontology Adaptor
**
** @alias EnsSOntologyadaptor
** @alias EnsOOntologyadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByNamespace [AjPTable] Name space cache
** @@
******************************************************************************/

typedef struct EnsSOntologyadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByNamespace;
} EnsOOntologyadaptor;

#define EnsPOntologyadaptor EnsOOntologyadaptor*




/* @data EnsPOntology *********************************************************
**
** Ensembl Ontology
**
** @alias EnsSOntology
** @alias EnsOOntology
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPOntologyadaptor] Ensembl Ontology Adaptor
** @cc Bio::EnsEMBL::OntologyTerm
** @attr Name [AjPStr] Name
** @attr Space [AjPStr] Name space
** @@
******************************************************************************/

typedef struct EnsSOntology
{
    ajuint Use;
    ajuint Identifier;
    EnsPOntologyadaptor Adaptor;
    AjPStr Name;
    AjPStr Space;
} EnsOOntology;

#define EnsPOntology EnsOOntology*




/* @data EnsPOntologysynonym **************************************************
**
** Ensembl Ontology Synonym
**
** @alias EnsSOntologysynonym
** @alias EnsOOntologysynonym
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPOntologytermadaptor] Ensembl Ontology Term Adaptor
** @cc Bio::EnsEMBL::OntologyTerm
** @attr Name [AjPStr] Name
** @@
******************************************************************************/

typedef struct EnsSOntologysynonym
{
    ajuint Use;
    ajuint Identifier;
    EnsPOntologytermadaptor Adaptor;
    AjPStr Name;
} EnsOOntologysynonym;

#define EnsPOntologysynonym EnsOOntologysynonym*




/* @data EnsPOntologyterm *****************************************************
**
** Ensembl Ontology Term
**
** @alias EnsSOntologyterm
** @alias EnsOOntologyterm
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPOntologytermadaptor] Ensembl Ontology Term Adaptor
** @cc Bio::EnsEMBL::OntologyTerm
** @attr Ontology [EnsPOntology] Ensembl Ontology
** @attr Accession [AjPStr] Accession
** @attr Definition [AjPStr] Definition
** @attr Name [AjPStr] Name
** @attr Subsets [AjPStr] Subsets
** @attr Children [AjPTable] AJAX Table of child Ensembl Ontology Term objects
** @attr Parents [AjPTable] AJAX Table of parent Ensembl Ontology Term objects
** @attr Ontologysynonyms [AjPList]
** AJAX List of Ensembl Ontology Synonym objects
** @@
******************************************************************************/

typedef struct EnsSOntologyterm
{
    ajuint Use;
    ajuint Identifier;
    EnsPOntologytermadaptor Adaptor;
    EnsPOntology Ontology;
    AjPStr Accession;
    AjPStr Definition;
    AjPStr Name;
    AjPStr Subsets;
    AjPTable Children;
    AjPTable Parents;
    AjPList Ontologysynonyms;
} EnsOOntologyterm;

#define EnsPOntologyterm EnsOOntologyterm*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Ontology */

EnsPOntology ensOntologyNewCpy(const EnsPOntology ontology);

EnsPOntology ensOntologyNewIni(EnsPOntologyadaptor oa,
                               ajuint identifier,
                               AjPStr name,
                               AjPStr space);

EnsPOntology ensOntologyNewRef(EnsPOntology ontology);

void ensOntologyDel(EnsPOntology *Pontology);

EnsPOntologyadaptor ensOntologyGetAdaptor(const EnsPOntology ontology);

ajuint ensOntologyGetIdentifier(const EnsPOntology ontology);

AjPStr ensOntologyGetName(const EnsPOntology ontology);

AjPStr ensOntologyGetSpace(const EnsPOntology ontology);

AjBool ensOntologySetAdaptor(EnsPOntology ontology,
                             EnsPOntologyadaptor oa);

AjBool ensOntologySetIdentifier(EnsPOntology ontology,
                                ajuint identifier);

AjBool ensOntologySetName(EnsPOntology ontology,
                          AjPStr name);

AjBool ensOntologySetSpace(EnsPOntology ontology,
                           AjPStr space);

AjBool ensOntologyTrace(const EnsPOntology ontology, ajuint level);

size_t ensOntologyCalculateMemsize(const EnsPOntology ontology);

/* Ensembl Ontology Adaptor */

EnsPOntologyadaptor ensRegistryGetOntologyadaptor(
    EnsPDatabaseadaptor dba);

EnsPOntologyadaptor ensOntologyadaptorNew(
    EnsPDatabaseadaptor dba);

void ensOntologyadaptorDel(EnsPOntologyadaptor *Poa);

EnsPBaseadaptor ensOntologyadaptorGetBaseadaptor(
    EnsPOntologyadaptor oa);

EnsPDatabaseadaptor ensOntologyadaptorGetDatabaseadaptor(
    EnsPOntologyadaptor oa);

AjBool ensOntologyadaptorFetchAll(EnsPOntologyadaptor oa,
                                  AjPList ontologies);

AjBool ensOntologyadaptorFetchAllbyName(EnsPOntologyadaptor oa,
                                        const AjPStr name,
                                        AjPList ontologies);

AjBool ensOntologyadaptorFetchByIdentifier(EnsPOntologyadaptor oa,
                                           ajuint identifier,
                                           EnsPOntology *Pontology);

AjBool ensOntologyadaptorFetchByName(EnsPOntologyadaptor oa,
                                     const AjPStr name,
                                     const AjPStr space,
                                     EnsPOntology *Pontology);

/* Ensembl Ontology Synonym */

EnsPOntologysynonym ensOntologysynonymNewCpy(const EnsPOntologysynonym os);

EnsPOntologysynonym ensOntologysynonymNewIni(EnsPOntologytermadaptor ota,
                                             ajuint identifier,
                                             AjPStr name);

EnsPOntologysynonym ensOntologysynonymNewRef(EnsPOntologysynonym os);

void ensOntologysynonymDel(EnsPOntologysynonym *Pos);

EnsPOntologytermadaptor ensOntologysynonymGetAdaptor(
    const EnsPOntologysynonym os);

ajuint ensOntologysynonymGetIdentifier(
    const EnsPOntologysynonym os);

AjPStr ensOntologysynonymGetName(
    const EnsPOntologysynonym os);

AjBool ensOntologysynonymSetAdaptor(EnsPOntologysynonym os,
                                    EnsPOntologytermadaptor ota);

AjBool ensOntologysynonymSetIdentifier(EnsPOntologysynonym os,
                                       ajuint identifier);

AjBool ensOntologysynonymSetName(EnsPOntologysynonym os,
                                 AjPStr name);

AjBool ensOntologysynonymTrace(const EnsPOntologysynonym os, ajuint level);

size_t ensOntologysynonymCalculateMemsize(const EnsPOntologysynonym os);

/* Ensembl Ontology Term */

EnsPOntologyterm ensOntologytermNewCpy(const EnsPOntologyterm ot);

EnsPOntologyterm ensOntologytermNewIni(EnsPOntologytermadaptor ota,
                                       ajuint identifier,
                                       EnsPOntology ontology,
                                       AjPStr accession,
                                       AjPStr description,
                                       AjPStr name,
                                       AjPStr subsets);

EnsPOntologyterm ensOntologytermNewRef(EnsPOntologyterm ot);

void ensOntologytermDel(EnsPOntologyterm *Pot);

AjPStr ensOntologytermGetAccession(const EnsPOntologyterm ot);

EnsPOntologytermadaptor ensOntologytermGetAdaptor(const EnsPOntologyterm ot);

AjPStr ensOntologytermGetDefinition(const EnsPOntologyterm ot);

ajuint ensOntologytermGetIdentifier(const EnsPOntologyterm ot);

AjPStr ensOntologytermGetName(const EnsPOntologyterm ot);

EnsPOntology ensOntologytermGetOntology(const EnsPOntologyterm ot);

AjPStr ensOntologytermGetSubsets(const EnsPOntologyterm ot);

const AjPList ensOntologytermLoadOntologysynonyms(EnsPOntologyterm ot);

AjBool ensOntologytermSetAccession(EnsPOntologyterm ot,
                                   AjPStr accession);

AjBool ensOntologytermSetAdaptor(EnsPOntologyterm ot,
                                 EnsPOntologytermadaptor ota);

AjBool ensOntologytermSetDefinition(EnsPOntologyterm ot,
                                    AjPStr description);

AjBool ensOntologytermSetIdentifier(EnsPOntologyterm ot,
                                    ajuint identifier);

AjBool ensOntologytermSetName(EnsPOntologyterm ot,
                              AjPStr name);

AjBool ensOntologytermSetOntology(EnsPOntologyterm ot,
                                  EnsPOntology ontology);

AjBool ensOntologytermSetSubsets(EnsPOntologyterm ot,
                                 AjPStr subsets);

AjBool ensOntologytermTrace(const EnsPOntologyterm ot, ajuint level);

size_t ensOntologytermCalculateMemsize(const EnsPOntologyterm ot);

/* Ensembl Ontology Term Adaptor */

EnsPOntologytermadaptor ensRegistryGetOntologytermadaptor(
    EnsPDatabaseadaptor dba);

EnsPOntologytermadaptor ensOntologytermadaptorNew(
    EnsPDatabaseadaptor dba);

void ensOntologytermadaptorDel(EnsPOntologytermadaptor *Pota);

EnsPBaseadaptor ensOntologytermadaptorGetBaseadaptor(
    EnsPOntologytermadaptor ota);

EnsPDatabaseadaptor ensOntologytermadaptorGetDatabaseadaptor(
    EnsPOntologytermadaptor ota);

AjBool ensOntologytermadaptorFetchAll(
    EnsPOntologytermadaptor ota,
    AjPList ots);

AjBool ensOntologytermadaptorFetchAllbyAncestor(
    EnsPOntologytermadaptor ota,
    EnsPOntologyterm ot,
    AjPList ots);

AjBool ensOntologytermadaptorFetchAllbyChild(
    EnsPOntologytermadaptor ota,
    EnsPOntologyterm ot,
    AjPList ots);

AjBool ensOntologytermadaptorFetchAllbyDescendant(
    EnsPOntologytermadaptor ota,
    EnsPOntologyterm ot,
    const AjPStr subset,
    AjBool closest,
    AjBool zerodistance,
    AjPList ots);

AjBool ensOntologytermadaptorFetchAllbyName(
    EnsPOntologytermadaptor ota,
    const AjPStr termname,
    const AjPStr ontologyname,
    AjPList ots);

AjBool ensOntologytermadaptorFetchAllbyParent(
    EnsPOntologytermadaptor ota,
    EnsPOntologyterm ot,
    AjPList ots);

AjBool ensOntologytermadaptorFetchByAccession(
    EnsPOntologytermadaptor ota,
    const AjPStr accession,
    EnsPOntologyterm *Pot);

AjBool ensOntologytermadaptorFetchByIdentifier(
    EnsPOntologytermadaptor ota,
    ajuint identifier,
    EnsPOntologyterm *Pot);

AjBool ensOntologytermadaptorRetrieveAllOntologysynonyms(
    EnsPOntologytermadaptor ota,
    const EnsPOntologyterm ot,
    AjPList oss);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSONTOLOGY_H */

ensoperon.h/    1414437294  1010  513   100644  11508     `
/* @include ensoperon *********************************************************
**
** Ensembl Operon functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.1 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:18:13 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSOPERON_H
#define ENSOPERON_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */




/*
** Prototype definitions
*/

/* Ensembl Operon */

EnsPOperon ensOperonNewCpy(const EnsPOperon operon);

EnsPOperon ensOperonNewIni(EnsPOperonadaptor opa,
                           ajuint identifier,
                           EnsPFeature feature,
                           AjPStr displaylabel,
                           AjPStr stableid,
                           ajuint version,
                           AjPStr cdate,
                           AjPStr mdate);

EnsPOperon ensOperonNewRef(EnsPOperon operon);

void ensOperonDel(EnsPOperon *Poperon);

EnsPOperonadaptor ensOperonGetAdaptor(
    const EnsPOperon operon);

AjPStr ensOperonGetDateCreation(
    const EnsPOperon operon);

AjPStr ensOperonGetDateModification(
    const EnsPOperon operon);

AjPStr ensOperonGetDisplaylabel(
    const EnsPOperon operon);

EnsPFeature ensOperonGetFeature(
    const EnsPOperon operon);

ajuint ensOperonGetIdentifier(
    const EnsPOperon operon);

AjPStr ensOperonGetStableidentifier(
    const EnsPOperon operon);

ajuint ensOperonGetVersion(
    const EnsPOperon operon);

const AjPList ensOperonLoadAttributes(EnsPOperon operon);

const AjPList ensOperonLoadDatabaseentries(EnsPOperon operon);

const AjPList ensOperonLoadOperontranscripts(EnsPOperon operon);

AjBool ensOperonSetAdaptor(EnsPOperon operon, EnsPOperonadaptor opa);

AjBool ensOperonSetDateCreation(EnsPOperon operon, AjPStr cdate);

AjBool ensOperonSetDateModification(EnsPOperon operon, AjPStr mdate);

AjBool ensOperonSetDisplaylabel(EnsPOperon operon, AjPStr displaylabel);

AjBool ensOperonSetFeature(EnsPOperon operon, EnsPFeature feature);

AjBool ensOperonSetIdentifier(EnsPOperon operon, ajuint identifier);

AjBool ensOperonSetStableidentifier(EnsPOperon operon, AjPStr stableid);

AjBool ensOperonSetVersion(EnsPOperon operon, ajuint version);

AjBool ensOperonTrace(const EnsPOperon operon, ajuint level);

size_t ensOperonCalculateMemsize(const EnsPOperon operon);

AjBool ensOperonAddAttribute(EnsPOperon operon,
                             EnsPAttribute attribute);

AjBool ensOperonAddDatabaseentry(EnsPOperon operon,
                                 EnsPDatabaseentry dbe);

AjBool ensOperonAddOperontranscript(EnsPOperon operon,
                                    EnsPOperontranscript ot);

AjBool ensOperonFetchAllAttributes(EnsPOperon operon,
                                   const AjPStr code,
                                   AjPList attributes);

AjBool ensOperonFetchAllDatabaseentries(EnsPOperon operon,
                                        const AjPStr name,
                                        EnsEExternaldatabaseType type,
                                        AjPList dbes);

/* Ensembl Operon Adaptor */

EnsPOperonadaptor ensRegistryGetOperonadaptor(
    EnsPDatabaseadaptor dba);

EnsPOperonadaptor ensOperonadaptorNew(
    EnsPDatabaseadaptor dba);

void ensOperonadaptorDel(EnsPOperonadaptor *Popa);

EnsPBaseadaptor ensOperonadaptorGetBaseadaptor(
    EnsPOperonadaptor opa);

EnsPDatabaseadaptor ensOperonadaptorGetDatabaseadaptor(
    EnsPOperonadaptor opa);

EnsPFeatureadaptor ensOperonadaptorGetFeatureadaptor(
    EnsPOperonadaptor opa);

AjBool ensOperonadaptorFetchAll(
    EnsPOperonadaptor opa,
    AjPList operons);

AjBool ensOperonadaptorFetchByDisplaylabel(
    EnsPOperonadaptor opa,
    const AjPStr displaylabel,
    EnsPOperon *Poperon);

AjBool ensOperonadaptorFetchByStableidentifier(
    EnsPOperonadaptor opa,
    const AjPStr stableid,
    ajuint version,
    EnsPOperon *Poperon);

AjBool ensOperonadaptorRetrieveAllIdentifiers(
    EnsPOperonadaptor opa,
    AjPList identifiers);

AjBool ensOperonadaptorRetrieveAllStableidentifiers(
    EnsPOperonadaptor opa,
    AjPList stableids);

/* Ensembl Operon Transcript */

EnsPOperontranscript ensOperontranscriptNewCpy(const EnsPOperontranscript ot);

EnsPOperontranscript ensOperontranscriptNewIni(
    EnsPOperontranscriptadaptor ota,
    ajuint identifier,
    EnsPFeature feature,
    AjPStr displaylabel,
    AjPStr stableid,
    ajuint version,
    AjPStr cdate,
    AjPStr mdate);

EnsPOperontranscript ensOperontranscriptNewRef(EnsPOperontranscript ot);

void ensOperontranscriptDel(EnsPOperontranscript *Pot);

EnsPOperontranscriptadaptor ensOperontranscriptGetAdaptor(
    const EnsPOperontranscript ot);

AjPStr ensOperontranscriptGetDateCreation(
    const EnsPOperontranscript ot);

AjPStr ensOperontranscriptGetDateModification(
    const EnsPOperontranscript ot);

AjPStr ensOperontranscriptGetDisplaylabel(
    const EnsPOperontranscript ot);

EnsPFeature ensOperontranscriptGetFeature(
    const EnsPOperontranscript ot);

ajuint ensOperontranscriptGetIdentifier(
    const EnsPOperontranscript ot);

AjPStr ensOperontranscriptGetStableidentifier(
    const EnsPOperontranscript ot);

ajuint ensOperontranscriptGetVersion(
    const EnsPOperontranscript ot);

const AjPList ensOperontranscriptLoadAttributes(EnsPOperontranscript ot);

const AjPList ensOperontranscriptLoadDatabaseentries(EnsPOperontranscript ot);

const AjPList ensOperontranscriptLoadGenes(EnsPOperontranscript ot);

AjBool ensOperontranscriptSetAdaptor(EnsPOperontranscript ot,
                                     EnsPOperontranscriptadaptor ota);

AjBool ensOperontranscriptSetDateCreation(EnsPOperontranscript ot,
                                          AjPStr cdate);

AjBool ensOperontranscriptSetDateModification(EnsPOperontranscript ot,
                                              AjPStr mdate);

AjBool ensOperontranscriptSetDisplaylabel(EnsPOperontranscript ot,
                                          AjPStr displaylabel);

AjBool ensOperontranscriptSetFeature(EnsPOperontranscript ot,
                                     EnsPFeature feature);

AjBool ensOperontranscriptSetIdentifier(EnsPOperontranscript ot,
                                        ajuint identifier);

AjBool ensOperontranscriptSetStableidentifier(EnsPOperontranscript ot,
                                              AjPStr stableid);

AjBool ensOperontranscriptSetVersion(EnsPOperontranscript ot,
                                     ajuint version);

AjBool ensOperontranscriptTrace(const EnsPOperontranscript ot, ajuint level);

size_t ensOperontranscriptCalculateMemsize(const EnsPOperontranscript ot);

AjBool ensOperontranscriptAddAttribute(EnsPOperontranscript ot,
                                       EnsPAttribute attribute);

AjBool ensOperontranscriptAddDatabaseentry(EnsPOperontranscript ot,
                                           EnsPDatabaseentry dbe);

AjBool ensOperontranscriptAddGene(EnsPOperontranscript ot,
                                  EnsPGene gene);

AjBool ensOperontranscriptFetchAllAttributes(
    EnsPOperontranscript ot,
    const AjPStr code,
    AjPList attributes);

AjBool ensOperontranscriptFetchAllDatabaseentries(
    EnsPOperontranscript ot,
    const AjPStr name,
    EnsEExternaldatabaseType type,
    AjPList dbes);

AjBool ensOperontranscriptFetchOperon(
    EnsPOperontranscript ot,
    EnsPOperon *Poperon);

/* Ensembl Operon Transcript Adaptor */

EnsPOperontranscriptadaptor ensRegistryGetOperontranscriptadaptor(
    EnsPDatabaseadaptor dba);

EnsPOperontranscriptadaptor ensOperontranscriptadaptorNew(
    EnsPDatabaseadaptor dba);

void ensOperontranscriptadaptorDel(EnsPOperontranscriptadaptor *Pota);

EnsPBaseadaptor ensOperontranscriptadaptorGetBaseadaptor(
    EnsPOperontranscriptadaptor ota);

EnsPDatabaseadaptor ensOperontranscriptadaptorGetDatabaseadaptor(
    EnsPOperontranscriptadaptor ota);

EnsPFeatureadaptor ensOperontranscriptadaptorGetFeatureadaptor(
    EnsPOperontranscriptadaptor ota);

AjBool ensOperontranscriptadaptorFetchAll(
    EnsPOperontranscriptadaptor ota,
    AjPList ots);

AjBool ensOperontranscriptadaptorFetchAllbyGene(
    EnsPOperontranscriptadaptor ota,
    const EnsPGene gene,
    AjPList ots);

AjBool ensOperontranscriptadaptorFetchAllbyOperon(
    EnsPOperontranscriptadaptor ota,
    const EnsPOperon operon,
    AjPList ots);

AjBool ensOperontranscriptadaptorFetchByDisplaylabel(
    EnsPOperontranscriptadaptor ota,
    const AjPStr label,
    EnsPOperontranscript *Pot);

AjBool ensOperontranscriptadaptorFetchByIdentifier(
    EnsPOperontranscriptadaptor ota,
    ajuint identifier,
    EnsPOperontranscript *Pot);

AjBool ensOperonadaptorFetchByOperontranscriptidentifier(
    EnsPOperonadaptor opa,
    ajuint otidentifier,
    EnsPOperon *Poperon);

AjBool ensOperonadaptorFetchByOperontranscriptstableidentifier(
    EnsPOperonadaptor opa,
    const AjPStr stableid,
    EnsPOperon *Poperon);

AjBool ensOperontranscriptadaptorFetchByStableidentifier(
    EnsPOperontranscriptadaptor ota,
    const AjPStr stableid,
    ajuint version,
    EnsPOperontranscript *Pot);

AjBool ensOperontranscriptadaptorRetrieveAllGenesByOperontranscriptidentifier(
    EnsPOperontranscriptadaptor ota,
    ajuint identifier,
    AjPList genes);

AjBool ensOperontranscriptadaptorRetrieveAllIdentifiers(
    EnsPOperontranscriptadaptor ota,
    AjPList identifiers);

AjBool ensOperontranscriptadaptorRetrieveAllStableidentifiers(
    EnsPOperontranscriptadaptor ota,
    AjPList stableids);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSOPERON_H */
ensprediction.h/1414437294  1010  513   100644  13060     `
/* @include ensprediction *****************************************************
**
** Ensembl Prediction functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.25 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:19:28 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSPREDICTION_H
#define ENSPREDICTION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPPredictionexonadaptor *******************************************
**
** Ensembl Prediction Exon Adaptor
**
** Bio::EnsEMBL::DBSQL::PredictionExonAdaptor
**
******************************************************************************/

#define EnsPPredictionexonadaptor EnsPFeatureadaptor




/* @const EnsPPredictiontranscriptadaptor *************************************
**
** Ensembl Prediction Transcript Adaptor
**
** Bio::EnsEMBL::DBSQL::PredictionTranscriptAdaptor
**
******************************************************************************/

#define EnsPPredictiontranscriptadaptor EnsPFeatureadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPPredictionexon ***************************************************
**
** Ensembl Prediction Exon.
**
** @alias EnsSPredictionexon
** @alias EnsOPredictionexon
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [EnsPPredictionexonadaptor] Ensembl Prediction Exon Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::PredictionExon
** @cc 'prediction_exon' SQL table
** @attr Score [double] Score
** @attr Pvalue [double] P-value
** @attr PhaseStart [ajint] Start phase
** @attr Padding [char[4]] Padding to alignment boundary
** @attr SequenceCache [AjPStr] Sequence cache
** @@
******************************************************************************/

typedef struct EnsSPredictionexon
{
    ajuint Use;
    ajuint Identifier;
    EnsPPredictionexonadaptor Adaptor;
    EnsPFeature Feature;
    double Score;
    double Pvalue;
    ajint PhaseStart;
    char Padding[4];
    AjPStr SequenceCache;
} EnsOPredictionexon;

#define EnsPPredictionexon EnsOPredictionexon*




/* @data EnsPPredictiontranscript *********************************************
**
** Ensembl Prediction Transcript.
**
** @alias EnsSPredictiontranscript
** @alias EnsOPredictiontranscript
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPPredictiontranscriptadaptor] Ensembl Prediction
**                                                 Transcript Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::PredictionTranscript
** @attr Displaylabel [AjPStr] Display label
** @attr Predictionexons [AjPList] AJAX List of Ensembl Prediction Exon objects
** @@
******************************************************************************/

typedef struct EnsSPredictiontranscript
{
    ajuint Use;
    ajuint Identifier;
    EnsPPredictiontranscriptadaptor Adaptor;
    EnsPFeature Feature;
    AjPStr Displaylabel;
    AjPList Predictionexons;
} EnsOPredictiontranscript;

#define EnsPPredictiontranscript EnsOPredictiontranscript*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Prediction Exon */

EnsPPredictionexon ensPredictionexonNewCpy(const EnsPPredictionexon pe);

EnsPPredictionexon ensPredictionexonNewIni(EnsPPredictionexonadaptor pea,
                                           ajuint identifier,
                                           EnsPFeature feature,
                                           ajint sphase,
                                           double score,
                                           double pvalue);

EnsPPredictionexon ensPredictionexonNewRef(EnsPPredictionexon pe);

void ensPredictionexonDel(EnsPPredictionexon *Ppe);

EnsPPredictionexonadaptor ensPredictionexonGetAdaptor(
    const EnsPPredictionexon pe);

EnsPFeature ensPredictionexonGetFeature(const EnsPPredictionexon pe);

ajuint ensPredictionexonGetIdentifier(const EnsPPredictionexon pe);

ajint ensPredictionexonGetPhaseStart(const EnsPPredictionexon pe);

double ensPredictionexonGetPvalue(const EnsPPredictionexon pe);

double ensPredictionexonGetScore(const EnsPPredictionexon pe);

AjBool ensPredictionexonSetAdaptor(EnsPPredictionexon pe,
                                   EnsPPredictionexonadaptor pea);

AjBool ensPredictionexonSetFeature(EnsPPredictionexon pe,
                                   EnsPFeature feature);

AjBool ensPredictionexonSetIdentifier(EnsPPredictionexon pe,
                                      ajuint identifier);

AjBool ensPredictionexonSetPhaseStart(EnsPPredictionexon pe,
                                      ajint sphase);

AjBool ensPredictionexonSetPvalue(EnsPPredictionexon pe,
                                  double pvalue);

AjBool ensPredictionexonSetScore(EnsPPredictionexon pe,
                                 double score);

AjBool ensPredictionexonTrace(const EnsPPredictionexon pe, ajuint level);

ajint ensPredictionexonGetPhaseEnd(const EnsPPredictionexon pe);

size_t ensPredictionexonCalculateMemsize(const EnsPPredictionexon pe);

EnsPPredictionexon ensPredictionexonTransfer(EnsPPredictionexon pe,
                                             EnsPSlice slice);

EnsPPredictionexon ensPredictionexonTransform(EnsPPredictionexon pe,
                                              const AjPStr csname,
                                              const AjPStr csversion);

AjBool ensPredictionexonFetchSequenceSeq(EnsPPredictionexon pe,
                                         AjPSeq *Psequence);

AjBool ensPredictionexonFetchSequenceStr(EnsPPredictionexon pe,
                                         AjPStr *Psequence);

/* AJAX List of Ensembl Prediction Exon objects */

AjBool ensListPredictionexonSortEndAscending(AjPList pes);

AjBool ensListPredictionexonSortEndDescending(AjPList pes);

AjBool ensListPredictionexonSortIdentifierAscending(AjPList pes);

AjBool ensListPredictionexonSortStartAscending(AjPList pes);

AjBool ensListPredictionexonSortStartDescending(AjPList pes);

/* Ensembl Prediction Exon Adaptor */

EnsPPredictionexonadaptor ensRegistryGetPredictionexonadaptor(
    EnsPDatabaseadaptor dba);

EnsPPredictionexonadaptor ensPredictionexonadaptorNew(
    EnsPDatabaseadaptor dba);

void ensPredictionexonadaptorDel(EnsPPredictionexonadaptor *Ppea);

EnsPBaseadaptor ensPredictionexonadaptorGetBaseadaptor(
    EnsPPredictionexonadaptor pea);

EnsPDatabaseadaptor ensPredictionexonadaptorGetDatabaseadaptor(
    EnsPPredictionexonadaptor pea);

EnsPFeatureadaptor ensPredictionexonadaptorGetFeatureadaptor(
    EnsPPredictionexonadaptor pea);

AjBool ensPredictionexonadaptorFetchAllbyPredictiontranscript(
    EnsPPredictionexonadaptor pea,
    const EnsPPredictiontranscript pt,
    AjPList pes);

AjBool ensPredictionexonadaptorFetchByIdentifier(
    EnsPPredictionexonadaptor pea,
    ajuint identifier,
    EnsPPredictionexon *Ppe);

/* Ensembl Prediction Transcript */

EnsPPredictiontranscript ensPredictiontranscriptNewCpy(
    const EnsPPredictiontranscript pt);

EnsPPredictiontranscript ensPredictiontranscriptNewIni(
    EnsPPredictiontranscriptadaptor pta,
    ajuint identifier,
    EnsPFeature feature,
    AjPStr label);

EnsPPredictiontranscript ensPredictiontranscriptNewRef(
    EnsPPredictiontranscript pt);

void ensPredictiontranscriptDel(
    EnsPPredictiontranscript *Ppt);

EnsPPredictiontranscriptadaptor ensPredictiontranscriptGetAdaptor(
    const EnsPPredictiontranscript pt);

AjPStr ensPredictiontranscriptGetDisplaylabel(
    const EnsPPredictiontranscript pt);

EnsPFeature ensPredictiontranscriptGetFeature(
    const EnsPPredictiontranscript pt);

ajuint ensPredictiontranscriptGetIdentifier(
    const EnsPPredictiontranscript pt);

const AjPList ensPredictiontranscriptLoadPredictionexons(
    EnsPPredictiontranscript pt);

AjBool ensPredictiontranscriptSetAdaptor(
    EnsPPredictiontranscript pt,
    EnsPPredictiontranscriptadaptor pta);

AjBool ensPredictiontranscriptSetDisplaylabel(
    EnsPPredictiontranscript pt,
    AjPStr label);

AjBool ensPredictiontranscriptSetFeature(
    EnsPPredictiontranscript pt,
    EnsPFeature feature);

AjBool ensPredictiontranscriptSetIdentifier(
    EnsPPredictiontranscript pt,
    ajuint identifier);

AjBool ensPredictiontranscriptTrace(
    const EnsPPredictiontranscript pt,
    ajuint level);

size_t ensPredictiontranscriptCalculateMemsize(
    const EnsPPredictiontranscript pt);

ajint ensPredictiontranscriptCalculateSliceCodingEnd(
    const EnsPPredictiontranscript pt);

ajint ensPredictiontranscriptCalculateSliceCodingStart(
    const EnsPPredictiontranscript pt);

ajuint ensPredictiontranscriptCalculateTranscriptCodingEnd(
    EnsPPredictiontranscript pt);

ajuint ensPredictiontranscriptCalculateTranscriptCodingStart(
    const EnsPPredictiontranscript pt);

AjBool ensPredictiontranscriptFetchSequenceTranscriptSeq(
    EnsPPredictiontranscript pt,
    AjPSeq *Psequence);

AjBool ensPredictiontranscriptFetchSequenceTranscriptStr(
    EnsPPredictiontranscript pt,
    AjPStr *Psequence);

AjBool ensPredictiontranscriptFetchSequenceTranslationSeq(
    EnsPPredictiontranscript pt,
    AjPSeq *Psequence);

AjBool ensPredictiontranscriptFetchSequenceTranslationStr(
    EnsPPredictiontranscript pt,
    AjPStr *Psequence);

EnsPPredictiontranscript ensPredictiontranscriptTransfer(
    EnsPPredictiontranscript pt,
    EnsPSlice slice);

EnsPPredictiontranscript ensPredictiontranscriptTransform(
    EnsPPredictiontranscript pt,
    const AjPStr csname,
    const AjPStr csversion);

/* AJAX List of Ensembl Prediction Transcript objects */

AjBool ensListPredictiontranscriptSortEndAscending(AjPList pts);

AjBool ensListPredictiontranscriptSortEndDescending(AjPList pts);

AjBool ensListPredictiontranscriptSortIdentifierAscending(AjPList pts);

AjBool ensListPredictiontranscriptSortStartAscending(AjPList pts);

AjBool ensListPredictiontranscriptSortStartDescending(AjPList pts);

/* Ensembl Prediction Transcript Adaptor */

EnsPPredictiontranscriptadaptor ensRegistryGetPredictiontranscriptadaptor(
    EnsPDatabaseadaptor dba);

EnsPPredictiontranscriptadaptor ensPredictiontranscriptadaptorNew(
    EnsPDatabaseadaptor dba);

void ensPredictiontranscriptadaptorDel(
    EnsPPredictiontranscriptadaptor *Ppta);

EnsPBaseadaptor ensPredictiontranscriptadaptorGetBaseadaptor(
    EnsPPredictiontranscriptadaptor pta);

EnsPDatabaseadaptor ensPredictiontranscriptadaptorGetDatabaseadaptor(
    EnsPPredictiontranscriptadaptor pta);

EnsPFeatureadaptor ensPredictiontranscriptadaptorGetFeatureadaptor(
    EnsPPredictiontranscriptadaptor pta);

AjBool ensPredictiontranscriptadaptorFetchByIdentifier(
    EnsPPredictiontranscriptadaptor pta,
    ajuint identifier,
    EnsPPredictiontranscript *Ppt);

AjBool ensPredictiontranscriptadaptorFetchByStableidentifier(
    EnsPPredictiontranscriptadaptor pta,
    const AjPStr stableid,
    EnsPPredictiontranscript *Ppt);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSPREDICTION_H */
/407            1414437294  1010  513   100644  3981      `
/* @include ensprojectionsegment **********************************************
**
** Ensembl Projection Segment functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.9 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSPROJECTIONSEGMENT_H
#define ENSPROJECTIONSEGMENT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensslice.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPProjectionsegment ************************************************
**
** Ensembl Projection Segment
**
** @alias EnsSProjectionsegment
** @alias EnsOProjectionsegment
**
** @attr SourceStart [ajuint] Source start coordinate
** @attr SourceEnd [ajuint] Source end coordinate
** @attr TargetSlice [EnsPSlice] Target Ensembl Slice
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSProjectionsegment
{
    ajuint SourceStart;
    ajuint SourceEnd;
    EnsPSlice TargetSlice;
    ajuint Use;
    ajuint Padding;
} EnsOProjectionsegment;

#define EnsPProjectionsegment EnsOProjectionsegment*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

EnsPProjectionsegment ensProjectionsegmentNewCpy(
    const EnsPProjectionsegment ps);

EnsPProjectionsegment ensProjectionsegmentNewIni(ajuint srcstart,
                                                 ajuint srcend,
                                                 EnsPSlice trgslice);

EnsPProjectionsegment ensProjectionsegmentNewRef(EnsPProjectionsegment ps);

void ensProjectionsegmentDel(EnsPProjectionsegment *Pps);

ajuint ensProjectionsegmentGetSourceStart(const EnsPProjectionsegment ps);

ajuint ensProjectionsegmentGetSourceEnd(const EnsPProjectionsegment ps);

EnsPSlice ensProjectionsegmentGetTargetSlice(const EnsPProjectionsegment ps);

AjBool ensProjectionsegmentTrace(const EnsPProjectionsegment ps, ajuint level);

size_t ensProjectionsegmentCalculateMemsize(const EnsPProjectionsegment ps);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSPROJECTIONSEGMENT_H */

ensprotein.h/   1414437294  1010  513   100644  6044      `
/* @include ensprotein ********************************************************
**
** Ensembl Protein Feature functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.7 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:22:27 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSPROTEIN_H
#define ENSPROTEIN_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPProteinfeatureadaptor *******************************************
**
** Ensembl Protein Feature Adaptor.
** Defined as an alias in EnsPBaseadaptor.
**
** #alias EnsPBaseadaptor
**
** #cc Bio::EnsEMBL::DBSQL::ProteinFeatureAdaptor
** ##
******************************************************************************/

#define EnsPProteinfeatureadaptor EnsPBaseadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPProteinfeature ***************************************************
**
** Ensembl Protein Feature.
**
** @alias EnsSProteinfeature
** @alias EnsOProteinfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPProteinfeatureadaptor] Ensembl Protein Feature Adaptor
** @cc Bio::EnsEMBL::Featurepair
** @attr Featurepair [EnsPFeaturepair] Ensembl Feature Pair
** @cc Bio::EnsEMBL::Proteinfeature
** @attr Accession [AjPStr] (InterPro) Accession
** @attr Description [AjPStr] (InterPro) Description
** @@
******************************************************************************/

typedef struct EnsSProteinfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPProteinfeatureadaptor Adaptor;
    EnsPFeaturepair Featurepair;
    AjPStr Accession;
    AjPStr Description;
} EnsOProteinfeature;

#define EnsPProteinfeature EnsOProteinfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Protein Feature */

EnsPProteinfeature ensProteinfeatureNewCpy(const EnsPProteinfeature object);

EnsPProteinfeature ensProteinfeatureNewIni(
    EnsPProteinfeatureadaptor pfa,
    ajuint identifier,
    EnsPFeaturepair fp,
    AjPStr accession,
    AjPStr description);

EnsPProteinfeature ensProteinfeatureNewRef(EnsPProteinfeature pf);

void ensProteinfeatureDel(EnsPProteinfeature *Ppf);

AjPStr ensProteinfeatureGetAccession(
    const EnsPProteinfeature pf);

EnsPProteinfeatureadaptor ensProteinfeatureGetAdaptor(
    const EnsPProteinfeature pf);

AjPStr ensProteinfeatureGetDescription(
    const EnsPProteinfeature pf);

EnsPFeaturepair ensProteinfeatureGetFeaturepair(
    const EnsPProteinfeature pf);

ajuint ensProteinfeatureGetIdentifier(
    const EnsPProteinfeature pf);

AjBool ensProteinfeatureSetAccession(EnsPProteinfeature pf,
                                     AjPStr accession);

AjBool ensProteinfeatureSetAdaptor(EnsPProteinfeature pf,
                                   EnsPProteinfeatureadaptor pfa);

AjBool ensProteinfeatureSetDescription(EnsPProteinfeature pf,
                                       AjPStr description);

AjBool ensProteinfeatureSetFeaturepair(EnsPProteinfeature pf,
                                       EnsPFeaturepair fp);

AjBool ensProteinfeatureSetIdentifier(EnsPProteinfeature pf,
                                      ajuint identifier);

AjBool ensProteinfeatureTrace(const EnsPProteinfeature pf, ajuint level);

size_t ensProteinfeatureCalculateMemsize(const EnsPProteinfeature pf);

/* Ensembl Protein Feature Adaptor */

EnsPProteinfeatureadaptor ensRegistryGetProteinfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPProteinfeatureadaptor ensProteinfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensProteinfeatureadaptorDel(EnsPProteinfeatureadaptor *Ppfa);

EnsPBaseadaptor ensProteinfeatureadaptorGetBaseadaptor(
    EnsPProteinfeatureadaptor pfa);

EnsPDatabaseadaptor ensProteinfeatureadaptorGetDatabaseadaptor(
    EnsPProteinfeatureadaptor pfa);

AjBool ensProteinfeatureadaptorFetchAllbyTranslationidentifier(
    EnsPProteinfeatureadaptor pfa,
    ajuint tlid,
    AjPList pfs);

AjBool ensProteinfeatureadaptorFetchByIdentifier(
    EnsPProteinfeatureadaptor pfa,
    ajuint identifier,
    EnsPProteinfeature *Ppf);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSPROTEIN_H */
ensqc.h/        1414437294  1010  513   100644  2403      `
/* @include ensqc *************************************************************
**
** Ensembl Quality Check functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.20 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/03/09 20:33:25 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSQC_H
#define ENSQC_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

extern const ajuint ensKQcDummy;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSQC_H */

/431            1414437294  1010  513   100644  11879     `
/* @include ensqcalignment ****************************************************
**
** Ensembl Quality Check Alignment functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.19 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSQCALIGNMENT_H
#define ENSQCALIGNMENT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensanalysis.h"
#include "ensqcsequence.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPQcalignmentadaptor **********************************************
**
** Ensembl Quality Check Alignment Adaptor
**
******************************************************************************/

#define EnsPQcalignmentadaptor EnsPBaseadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPQcalignment ******************************************************
**
** Ensembl Quality Check Alignment
**
** @alias EnsSQcalignment
** @alias EnsOQcalignment
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPQcalignmentadaptor] Ensembl Alignment Adaptor
** @cc Bio::EnsEMBL::QC::Alignment
** @cc 'alignment' SQL table
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @attr QuerySequence [EnsPQcsequence] Query Ensembl Quality Check Sequence
** @attr TargetSequence [EnsPQcsequence] Target Ensembl Quality Check Sequence
** @attr Vulgar [AjPStr] Vulgar line
** @attr QueryStart [ajuint] Query start
** @attr QueryEnd [ajuint] Query end
** @attr QueryStrand [ajint] Query strand
** @attr TargetStart [ajuint] Target start
** @attr TargetEnd [ajuint] Target end
** @attr TargetStrand [ajint] Target strand
** @attr Splicestrand [ajint] Splice strand
** @attr Coverage [ajuint] Coverage score
** @attr Score [double] Score
** @attr Identity [float] Identity
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSQcalignment
{
    ajuint Use;
    ajuint Identifier;
    EnsPQcalignmentadaptor Adaptor;
    EnsPAnalysis Analysis;
    EnsPQcsequence QuerySequence;
    EnsPQcsequence TargetSequence;
    AjPStr Vulgar;
    ajuint QueryStart;
    ajuint QueryEnd;
    ajint QueryStrand;
    ajuint TargetStart;
    ajuint TargetEnd;
    ajint TargetStrand;
    ajint Splicestrand;
    ajuint Coverage;
    double Score;
    float Identity;
    char Padding[4];
} EnsOQcalignment;

#define EnsPQcalignment EnsOQcalignment*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Quality Check Alignment */

EnsPQcalignment ensQcalignmentNewCpy(const EnsPQcalignment qca);

EnsPQcalignment ensQcalignmentNewIni(EnsPQcalignmentadaptor qcaa,
                                     ajuint identifier,
                                     EnsPAnalysis analysis,
                                     EnsPQcsequence qsequence,
                                     ajuint qstart,
                                     ajuint qend,
                                     ajint qstrand,
                                     EnsPQcsequence tsequence,
                                     ajuint tstart,
                                     ajuint tend,
                                     ajint tstrand,
                                     ajint sstrand,
                                     ajuint coverage,
                                     double score,
                                     float identity,
                                     AjPStr vulgar);

EnsPQcalignment ensQcalignmentNewRef(EnsPQcalignment qca);

void ensQcalignmentDel(EnsPQcalignment *Pqca);

EnsPQcalignmentadaptor ensQcalignmentGetAdaptor(const EnsPQcalignment qca);

EnsPAnalysis ensQcalignmentGetAnalysis(const EnsPQcalignment qca);

ajuint ensQcalignmentGetCoverage(const EnsPQcalignment qca);

ajuint ensQcalignmentGetIdentifier(const EnsPQcalignment qca);

float ensQcalignmentGetIdentity(const EnsPQcalignment qca);

ajuint ensQcalignmentGetQueryEnd(const EnsPQcalignment qca);

EnsPQcsequence ensQcalignmentGetQuerySequence(const EnsPQcalignment qca);

ajuint ensQcalignmentGetQueryStart(const EnsPQcalignment qca);

ajint ensQcalignmentGetQueryStrand(const EnsPQcalignment qca);

double ensQcalignmentGetScore(const EnsPQcalignment qca);

ajint ensQcalignmentGetSplicestrand(const EnsPQcalignment qca);

ajuint ensQcalignmentGetTargetEnd(const EnsPQcalignment qca);

EnsPQcsequence ensQcalignmentGetTargetSequence(const EnsPQcalignment qca);

ajuint ensQcalignmentGetTargetStart(const EnsPQcalignment qca);

ajint ensQcalignmentGetTargetStrand(const EnsPQcalignment qca);

AjPStr ensQcalignmentGetVulgar(const EnsPQcalignment qca);

AjBool ensQcalignmentSetAdaptor(EnsPQcalignment qca,
                                EnsPQcalignmentadaptor qcaa);

AjBool ensQcalignmentSetAnalysis(EnsPQcalignment qca,
                                 EnsPAnalysis analysis);

AjBool ensQcalignmentSetCoverage(EnsPQcalignment qca,
                                 ajuint coverage);

AjBool ensQcalignmentSetIdentifier(EnsPQcalignment qca,
                                   ajuint identifier);

AjBool ensQcalignmentSetIdentity(EnsPQcalignment qca,
                                 float identity);

AjBool ensQcalignmentSetQueryEnd(EnsPQcalignment qca,
                                 ajuint qend);

AjBool ensQcalignmentSetQuerySequence(EnsPQcalignment qca,
                                      EnsPQcsequence qsequence);

AjBool ensQcalignmentSetQueryStart(EnsPQcalignment qca,
                                   ajuint qstart);

AjBool ensQcalignmentSetQueryStrand(EnsPQcalignment qca,
                                    ajint qstrand);

AjBool ensQcalignmentSetScore(EnsPQcalignment qca,
                              double score);

AjBool ensQcalignmentSetSplicestrand(EnsPQcalignment qca,
                                     ajint sstrand);

AjBool ensQcalignmentSetTargetEnd(EnsPQcalignment qca,
                                  ajuint tend);

AjBool ensQcalignmentSetTargetSequence(EnsPQcalignment qca,
                                       EnsPQcsequence qcs);

AjBool ensQcalignmentSetTargetStart(EnsPQcalignment qca,
                                    ajuint tstart);

AjBool ensQcalignmentSetTargetStrand(EnsPQcalignment qca,
                                     ajint tstrand);

AjBool ensQcalignmentSetVulgar(EnsPQcalignment qca,
                               AjPStr vulgar);

AjBool ensQcalignmentTrace(const EnsPQcalignment qca, ajuint level);

size_t ensQcalignmentCalculateMemsize(const EnsPQcalignment qca);

AjBool ensQcalignmentCalculateQueryCoordinates(
    const EnsPQcalignment qca,
    ajint *Pstart,
    ajint *Pend,
    ajint *Pstrand,
    ajuint *Plength);

AjBool ensQcalignmentCalculateQueryCoverageDnaDna(
    EnsPQcalignment qca,
    float identity,
    ajuint edge);

AjBool ensQcalignmentCalculateQueryCoverageDnaGenome(
    EnsPQcalignment qca,
    float identity,
    ajuint edge);

AjBool ensQcalignmentCalculateQueryCoverageProteinGenome(
    EnsPQcalignment qca,
    float identity,
    ajuint edge);

AjBool ensQcalignmentCalculateQueryCoverageProteinProtein(
    EnsPQcalignment qca,
    float identity);

AjBool ensQcalignmentCalculateQueryCoverageQueryQuery(
    const EnsPQcalignment qca1,
    const EnsPQcalignment qca2,
    ajuint *Pscore);

AjBool ensQcalignmentCalculateQueryCoverageQueryTarget(
    EnsPQcalignment qca,
    float identity,
    ajuint edge);

AjBool ensQcalignmentCalculateTargetCoordinates(const EnsPQcalignment qca,
                                                ajint *Pstart,
                                                ajint *Pend,
                                                ajint *Pstrand,
                                                ajuint *Plength);

AjBool ensQcalignmentCheckTargetOverlap(const EnsPQcalignment qca1,
                                        const EnsPQcalignment qca2);

AjBool ensQcalignmentReport(const EnsPQcalignment qca,
                            AjPStr *Pstr,
                            AjBool internalquery,
                            AjBool internaltarget);

/* Ensembl Quality Check Alignment Adaptor */

EnsPQcalignmentadaptor ensRegistryGetQcalignmentadaptor(
    EnsPDatabaseadaptor dba);

EnsPQcalignmentadaptor ensQcalignmentadaptorNew(
    EnsPDatabaseadaptor dba);

void ensQcalignmentadaptorDel(EnsPQcalignmentadaptor *Pqcaa);

EnsPBaseadaptor ensQcalignmentadaptorGetBaseadaptor(
    EnsPQcalignmentadaptor qcaa);

EnsPDatabaseadaptor ensQcalignmentadaptorGetDatabaseadaptor(
    EnsPQcalignmentadaptor qcaa);

AjBool ensQcalignmentadaptorFetchAllbyLocationTarget(
    EnsPQcalignmentadaptor qcaa,
    const EnsPAnalysis analysis,
    const EnsPQcsequence tsequence,
    ajuint tstart,
    ajuint tend,
    AjPList qcas);

AjBool ensQcalignmentadaptorFetchAllbyQcdatabasePair(
    EnsPQcalignmentadaptor qcaa,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase qdb,
    const EnsPQcdatabase tdb,
    AjPList qcas);


AjBool ensQcalignmentadaptorFetchAllbyQcdatabaseQuery(
    EnsPQcalignmentadaptor qcaa,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase qdb,
    AjPList qcas);

AjBool ensQcalignmentadaptorFetchAllbyQcdatabaseTarget(
    EnsPQcalignmentadaptor qcaa,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase tdb,
    AjPList qcas);

AjBool ensQcalignmentadaptorFetchByIdentifier(
    EnsPQcalignmentadaptor qcaa,
    ajuint identifier,
    EnsPQcalignment *Pqca);

AjBool ensQcalignmentadaptorFetchAllbyCoverage(
    EnsPQcalignmentadaptor qcaa,
    ajuint lower,
    ajuint upper,
    AjPList qcas);

AjBool ensQcalignmentadaptorStore(EnsPQcalignmentadaptor qcaa,
                                  EnsPQcalignment qca);

AjBool ensQcalignmentadaptorUpdate(EnsPQcalignmentadaptor qcaa,
                                   const EnsPQcalignment qca);

AjBool ensQcalignmentadaptorDelete(EnsPQcalignmentadaptor qcaa,
                                   EnsPQcalignment qca);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSQCALIGNMENT_H */

/449            1414437294  1010  513   100644  12953     `
/* @include ensqcdasfeature ***************************************************
**
** Ensembl Quality Check DAS Feature functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.7 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSQCDASFEATURE_H
#define ENSQCDASFEATURE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensqcalignment.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPQcdasfeatureadaptor *********************************************
**
** Ensembl Quality Check DAS Feature Adaptor
**
******************************************************************************/

#define EnsPQcdasfeatureadaptor EnsPBaseadaptor




/* @enum EnsEQcdasfeatureCategory *********************************************
**
** Ensembl Quality Check DAS Feature Category enumeration
**
** @value ensEQcdasfeatureCategoryNULL
** @value ensEQcdasfeatureCategoryUnknown
** @value ensEQcdasfeatureCategoryTranscriptPerfect
** @value ensEQcdasfeatureCategoryTranscriptTolerance
** @value ensEQcdasfeatureCategoryTranscriptPartial
** @value ensEQcdasfeatureCategoryTranscriptMissing
** @value ensEQcdasfeatureCategoryTranscript
** @value ensEQcdasfeatureCategoryTranslationPerfect
** @value ensEQcdasfeatureCategoryTranslationTolerance
** @value ensEQcdasfeatureCategoryTranslationPartial
** @value ensEQcdasfeatureCategoryTranslationMissing
** @value ensEQcdasfeatureCategoryTranslation
** @@
******************************************************************************/

typedef enum EnsOQcdasfeatureCategory
{
    ensEQcdasfeatureCategoryNULL,
    ensEQcdasfeatureCategoryUnknown,
    ensEQcdasfeatureCategoryTranscriptPerfect,
    ensEQcdasfeatureCategoryTranscriptTolerance,
    ensEQcdasfeatureCategoryTranscriptPartial,
    ensEQcdasfeatureCategoryTranscriptMissing,
    ensEQcdasfeatureCategoryTranscript,
    ensEQcdasfeatureCategoryTranslationPerfect,
    ensEQcdasfeatureCategoryTranslationTolerance,
    ensEQcdasfeatureCategoryTranslationPartial,
    ensEQcdasfeatureCategoryTranslationMissing,
    ensEQcdasfeatureCategoryTranslation
} EnsEQcdasfeatureCategory;




/* @enum EnsEQcdasfeatureType *************************************************
**
** Ensembl Quality Check DAS Feature Type enumeration
**
** @value ensEQcdasfeatureTypeNULL
** @value ensEQcdasfeatureTypeUnknown
** @value ensEQcdasfeatureTypeExonPerfect
** @value ensEQcdasfeatureTypeExonPartial
** @value ensEQcdasfeatureTypeExonMissing
** @value ensEQcdasfeatureTypeExonFrameshift
** @value ensEQcdasfeatureTypeExonGap
** @value ensEQcdasfeatureTypeExon
** @@
******************************************************************************/

typedef enum EnsOQcdasfeatureType
{
    ensEQcdasfeatureTypeNULL,
    ensEQcdasfeatureTypeUnknown,
    ensEQcdasfeatureTypeExonPerfect,
    ensEQcdasfeatureTypeExonPartial,
    ensEQcdasfeatureTypeExonMissing,
    ensEQcdasfeatureTypeExonFrameshift,
    ensEQcdasfeatureTypeExonGap,
    ensEQcdasfeatureTypeExon
} EnsEQcdasfeatureType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPQcdasfeature *****************************************************
**
** Ensembl Quality Check DAS Feature
**
** @alias EnsSQcdasfeature
** @alias EnsOQcdasfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPQcdasfeatureadaptor]
** Ensembl Quality Check DAS Feature Adaptor
** @cc Bio::EnsEMBL::QC::DASFeature
** @cc 'das_feature' SQL table
** @attr Qcalignment [EnsPQcalignment] Ensembl Quality Check Alignment
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @attr SegmentSequence [EnsPQcsequence]
** Segment Ensembl Quality Check Sequence
** @attr FeatureSequence [EnsPQcsequence]
** Feature Ensembl Quality Check Sequence
** @attr SegmentStart [ajuint] Segment start
** @attr SegmentEnd [ajuint] Segment end
** @attr SegmentStrand [ajint] Segment strand
** @attr FeatureStart [ajuint] Feature start
** @attr FeatureEnd [ajuint] Feature end
** @attr Phase [ajint] Phase
** @attr Category [EnsEQcdasfeatureCategory] Category
** @attr Type [EnsEQcdasfeatureType] Type
** @@
******************************************************************************/

typedef struct EnsSQcdasfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPQcdasfeatureadaptor Adaptor;
    EnsPQcalignment Qcalignment;
    EnsPAnalysis Analysis;
    EnsPQcsequence SegmentSequence;
    EnsPQcsequence FeatureSequence;
    ajuint SegmentStart;
    ajuint SegmentEnd;
    ajint SegmentStrand;
    ajuint FeatureStart;
    ajuint FeatureEnd;
    ajint Phase;
    EnsEQcdasfeatureCategory Category;
    EnsEQcdasfeatureType Type;
} EnsOQcdasfeature;

#define EnsPQcdasfeature EnsOQcdasfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Quality Check DAS Feature */

EnsPQcdasfeature ensQcdasfeatureNewCpy(const EnsPQcdasfeature qcdasf);

EnsPQcdasfeature ensQcdasfeatureNewIni(EnsPQcdasfeatureadaptor qcdasfa,
                                       ajuint identifier,
                                       EnsPQcalignment qca,
                                       EnsPAnalysis analysis,
                                       EnsPQcsequence segment,
                                       ajuint segstart,
                                       ajuint segend,
                                       ajint segstrand,
                                       EnsPQcsequence feature,
                                       ajuint fstart,
                                       ajuint fend,
                                       ajint phase,
                                       EnsEQcdasfeatureCategory category,
                                       EnsEQcdasfeatureType type);

EnsPQcdasfeature ensQcdasfeatureNewRef(EnsPQcdasfeature qcdasf);

void ensQcdasfeatureDel(EnsPQcdasfeature *Pqcdasf);

EnsPQcdasfeatureadaptor ensQcdasfeatureGetAdaptor(
    const EnsPQcdasfeature qcdasf);

EnsPAnalysis ensQcdasfeatureGetAnalysis(
    const EnsPQcdasfeature qcdasf);

EnsEQcdasfeatureCategory ensQcdasfeatureGetCategory(
    const EnsPQcdasfeature qcdasf);

ajuint ensQcdasfeatureGetFeatureEnd(
    const EnsPQcdasfeature qcdasf);

EnsPQcsequence ensQcdasfeatureGetFeatureSequence(
    const EnsPQcdasfeature qcdasf);

ajuint ensQcdasfeatureGetFeatureStart(
    const EnsPQcdasfeature qcdasf);

ajuint ensQcdasfeatureGetIdentifier(
    const EnsPQcdasfeature qcdasf);

ajint ensQcdasfeatureGetPhase(
    const EnsPQcdasfeature qcdasf);

EnsPQcalignment ensQcdasfeatureGetQcalignment(
    const EnsPQcdasfeature qcdasf);

EnsPQcsequence ensQcdasfeatureGetSegmentSequence(
    const EnsPQcdasfeature qcdasf);

ajuint ensQcdasfeatureGetSegmentStart(
    const EnsPQcdasfeature qcdasf);

ajuint ensQcdasfeatureGetSegmentEnd(
    const EnsPQcdasfeature qcdasf);

ajint ensQcdasfeatureGetSegmentStrand(
    const EnsPQcdasfeature qcdasf);

EnsEQcdasfeatureType ensQcdasfeatureGetType(
    const EnsPQcdasfeature qcdasf);

AjBool ensQcdasfeatureSetAdaptor(EnsPQcdasfeature qcdasf,
                                 EnsPQcdasfeatureadaptor qcdasfa);

AjBool ensQcdasfeatureSetAnalysis(EnsPQcdasfeature qcdasf,
                                  EnsPAnalysis analysis);

AjBool ensQcdasfeatureSetCategory(EnsPQcdasfeature qcdasf,
                                  EnsEQcdasfeatureCategory category);

AjBool ensQcdasfeatureSetFeatureEnd(EnsPQcdasfeature qcdasf,
                                    ajuint end);

AjBool ensQcdasfeatureSetFeatureSequence(EnsPQcdasfeature qcdasf,
                                         EnsPQcsequence qcs);

AjBool ensQcdasfeatureSetFeatureStart(EnsPQcdasfeature qcdasf,
                                      ajuint start);

AjBool ensQcdasfeatureSetIdentifier(EnsPQcdasfeature qcdasf,
                                    ajuint identifier);

AjBool ensQcdasfeatureSetPhase(EnsPQcdasfeature qcdasf,
                               ajint phase);

AjBool ensQcdasfeatureSetQcalignment(EnsPQcdasfeature qcdasf,
                                     EnsPQcalignment qca);

AjBool ensQcdasfeatureSetSegmentEnd(EnsPQcdasfeature qcdasf,
                                    ajuint end);

AjBool ensQcdasfeatureSetSegmentSequence(EnsPQcdasfeature qcdasf,
                                         EnsPQcsequence qcs);

AjBool ensQcdasfeatureSetSegmentStart(EnsPQcdasfeature qcdasf,
                                      ajuint start);

AjBool ensQcdasfeatureSetSegmentStrand(EnsPQcdasfeature qcdasf,
                                       ajint strand);

AjBool ensQcdasfeatureSetType(EnsPQcdasfeature qcdasf,
                              EnsEQcdasfeatureType type);

AjBool ensQcdasfeatureTrace(const EnsPQcdasfeature qcdasf, ajuint level);

size_t ensQcdasfeatureCalculateMemsize(const EnsPQcdasfeature qcdasf);

EnsEQcdasfeatureCategory ensQcdasfeatureCategoryFromStr(const AjPStr category);

const char *ensQcdasfeatureCategoryToChar(EnsEQcdasfeatureCategory qcdasfc);

EnsEQcdasfeatureType ensQcdasfeatureTypeFromStr(const AjPStr type);

const char *ensQcdasfeatureTypeToChar(EnsEQcdasfeatureType qcdasft);

/* Ensembl Quality Check DAS Feature Adaptor */

EnsPQcdasfeatureadaptor ensRegistryGetQcdasfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPQcdasfeatureadaptor ensQcdasfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensQcdasfeatureadaptorDel(EnsPQcdasfeatureadaptor *Pqcdasfa);

EnsPBaseadaptor ensQcdasfeatureadaptorGetBaseadaptor(
    EnsPQcdasfeatureadaptor qcdasfa);

EnsPDatabaseadaptor ensQcdasfeatureadaptorGetDatabaseadaptor(
    EnsPQcdasfeatureadaptor qcdasfa);

AjBool ensQcdasfeatureadaptorFetchAllbyQcalignment(
    EnsPQcdasfeatureadaptor qcdasfa,
    const EnsPQcalignment qca,
    AjPList qcdasfs);

AjBool ensQcdasfeatureadaptorFetchAllbyQcsequenceFeature(
    EnsPQcdasfeatureadaptor qcdasfa,
    const EnsPAnalysis analysis,
    const EnsPQcsequence feature,
    AjPList qcdasfs);

AjBool ensQcdasfeatureadaptorFetchAllbyQcsequencePair(
    EnsPQcdasfeatureadaptor qcdasfa,
    const EnsPAnalysis analysis,
    const EnsPQcsequence feature,
    const EnsPQcsequence segment,
    AjPList qcdasfs);

AjBool ensQcdasfeatureadaptorFetchAllbyQcsequenceSegment(
    EnsPQcdasfeatureadaptor qcdasfa,
    const EnsPAnalysis analysis,
    const EnsPQcsequence segment,
    AjPList qcdasfs);

AjBool ensQcdasfeatureadaptorFetchAllbyRegion(
    EnsPQcdasfeatureadaptor qcdasfa,
    const EnsPAnalysis analysis,
    const EnsPQcsequence segment,
    ajuint start,
    ajuint end,
    AjPList qcdasfs);

AjBool ensQcdasfeatureadaptorFetchByIdentifier(
    EnsPQcdasfeatureadaptor qcdasfa,
    ajuint identifier,
    EnsPQcdasfeature *Pqcdasf);

AjBool ensQcdasfeatureadaptorDelete(EnsPQcdasfeatureadaptor qcdasfa,
                                    EnsPQcdasfeature qcdasf);

AjBool ensQcdasfeatureadaptorStore(EnsPQcdasfeatureadaptor qcdasfa,
                                   EnsPQcdasfeature qcdasf);

AjBool ensQcdasfeatureadaptorUpdate(EnsPQcdasfeatureadaptor qcdasfa,
                                    const EnsPQcdasfeature qcdasf);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSQCDASFEATURE_H */

ensqcdatabase.h/1414437294  1010  513   100644  12103     `
/* @include ensqcdatabase *****************************************************
**
** Ensembl Quality Check Database functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.19 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSQCDATABASE_H
#define ENSQCDATABASE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensanalysis.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsEQcdatabaseClass **************************************************
**
** Ensembl Quality Check Database Class enumeration
**
** @value ensEQcdatabaseClassNULL Null
** @value ensEQcdatabaseClassUnknown Unknown
** @value ensEQcdatabaseClassReference Reference database
** @value ensEQcdatabaseClassTest Test database
** @value ensEQcdatabaseClassBoth Reference and test database
** @value ensEQcdatabaseClassGenome Genome database
** @@
******************************************************************************/

typedef enum EnsOQcdatabaseClass
{
    ensEQcdatabaseClassNULL,
    ensEQcdatabaseClassUnknown,
    ensEQcdatabaseClassReference,
    ensEQcdatabaseClassTest,
    ensEQcdatabaseClassBoth,
    ensEQcdatabaseClassGenome
} EnsEQcdatabaseClass;




/* @enum EnsEQcdatabaseType ***************************************************
**
** Ensembl Quality Check Database Type enumeration
**
** @value ensEQcdatabaseTypeNULL Null
** @value ensEQcdatabaseTypeUnknown Unknown sequence database
** @value ensEQcdatabaseTypeDNA DNA sequence database
** @value ensEQcdatabaseTypeProtein Protein sequence database
** @@
******************************************************************************/

typedef enum EnsOQcdatabaseType
{
    ensEQcdatabaseTypeNULL,
    ensEQcdatabaseTypeUnknown,
    ensEQcdatabaseTypeDNA,
    ensEQcdatabaseTypeProtein
} EnsEQcdatabaseType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPQcdatabaseadaptor ************************************************
**
** Ensembl Quality Check Database Adaptor
**
** @alias EnsSQcdatabaseadaptor
** @alias EnsOQcdatabaseadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByName [AjPTable] Name cache
** @@
******************************************************************************/

typedef struct EnsSQcdatabaseadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByName;
} EnsOQcdatabaseadaptor;

#define EnsPQcdatabaseadaptor EnsOQcdatabaseadaptor*




/* @data EnsPQcdatabase *******************************************************
**
** Ensembl Quality Check Database
**
** @alias EnsSQcdatabase
** @alias EnsOQcdatabase
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPQcdatabaseadaptor] Ensembl Database Adaptor
** @cc Bio::EnsEMBL::QC::SequenceDB
** @cc 'sequence_db' SQL table
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @attr Name [AjPStr] Name
** @attr Release [AjPStr] Release
** @attr Date [AjPStr] Date
** @attr Format [AjPStr] Format
** @attr Class [EnsEQcdatabaseClass] Class
** @attr Type [EnsEQcdatabaseType] Type
** @attr DatabaseadaptorSpecies [AjPStr] Ensembl Database Adaptor species
** @attr DatabaseadaptorGroup [EnsEDatabaseadaptorGroup] Ensembl Database
** Adaptor Group enumeration
** @attr Padding [ajuint] Padding to alignment boundary
** @attr Host [AjPStr] Host
** @attr Directory [AjPStr] Directory
** @attr File [AjPStr] File
** @attr UrlExternal [AjPStr] External URL
** @attr UrlInternal [AjPStr] Internal URL
** @@
******************************************************************************/

typedef struct EnsSQcdatabase
{
    ajuint Use;
    ajuint Identifier;
    EnsPQcdatabaseadaptor Adaptor;
    EnsPAnalysis Analysis;
    AjPStr Name;
    AjPStr Release;
    AjPStr Date;
    AjPStr Format;
    EnsEQcdatabaseClass Class;
    EnsEQcdatabaseType Type;
    AjPStr DatabaseadaptorSpecies;
    EnsEDatabaseadaptorGroup DatabaseadaptorGroup;
    ajuint Padding;
    AjPStr Host;
    AjPStr Directory;
    AjPStr File;
    AjPStr UrlExternal;
    AjPStr UrlInternal;
} EnsOQcdatabase;

#define EnsPQcdatabase EnsOQcdatabase*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Quality Check Database */

EnsPQcdatabase ensQcdatabaseNewCpy(const EnsPQcdatabase qcdb);

EnsPQcdatabase ensQcdatabaseNewIni(EnsPQcdatabaseadaptor qcdba,
                                   ajuint identifier,
                                   EnsPAnalysis analysis,
                                   AjPStr name,
                                   AjPStr release,
                                   AjPStr date,
                                   AjPStr format,
                                   EnsEQcdatabaseClass qcdbc,
                                   EnsEQcdatabaseType qcdbt,
                                   AjPStr dbaspecies,
                                   EnsEDatabaseadaptorGroup dbag,
                                   AjPStr host,
                                   AjPStr directory,
                                   AjPStr file,
                                   AjPStr externalurl);

EnsPQcdatabase ensQcdatabaseNewRef(EnsPQcdatabase qcdb);

void ensQcdatabaseDel(EnsPQcdatabase *Pqcdb);

EnsPQcdatabaseadaptor ensQcdatabaseGetAdaptor(
    const EnsPQcdatabase qcdb);

EnsPAnalysis ensQcdatabaseGetAnalysis(
    const EnsPQcdatabase qcdb);

EnsEQcdatabaseClass ensQcdatabaseGetClass(
    const EnsPQcdatabase qcdb);

EnsEDatabaseadaptorGroup ensQcdatabaseGetDatabaseadaptorGroup(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetDatabaseadaptorSpecies(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetDate(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetDirectory(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetFile(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetFormat(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetHost(
    const EnsPQcdatabase qcdb);

ajuint ensQcdatabaseGetIdentifier(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetName(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetRelease(
    const EnsPQcdatabase qcdb);

EnsEQcdatabaseType ensQcdatabaseGetType(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetUrlExternal(
    const EnsPQcdatabase qcdb);

AjPStr ensQcdatabaseGetUrlInternal(
    const EnsPQcdatabase qcdb);

AjBool ensQcdatabaseSetAdaptor(EnsPQcdatabase qcdb,
                               EnsPQcdatabaseadaptor qcdba);

AjBool ensQcdatabaseSetAnalysis(EnsPQcdatabase qcdb,
                                EnsPAnalysis analysis);

AjBool ensQcdatabaseSetClass(EnsPQcdatabase qcdb,
                             EnsEQcdatabaseClass qcdbc);

AjBool ensQcdatabaseSetDatabaseadaptorGroup(EnsPQcdatabase qcdb,
                                            EnsEDatabaseadaptorGroup dbag);

AjBool ensQcdatabaseSetDatabaseadaptorSpecies(EnsPQcdatabase qcdb,
                                              AjPStr species);

AjBool ensQcdatabaseSetDate(EnsPQcdatabase qcdb,
                            AjPStr date);

AjBool ensQcdatabaseSetDirectory(EnsPQcdatabase qcdb,
                                 AjPStr directory);

AjBool ensQcdatabaseSetFile(EnsPQcdatabase qcdb,
                            AjPStr file);

AjBool ensQcdatabaseSetFormat(EnsPQcdatabase qcdb,
                              AjPStr format);

AjBool ensQcdatabaseSetHost(EnsPQcdatabase qcdb,
                            AjPStr host);

AjBool ensQcdatabaseSetIdentifier(EnsPQcdatabase qcdb,
                                  ajuint identifier);

AjBool ensQcdatabaseSetName(EnsPQcdatabase qcdb,
                            AjPStr name);

AjBool ensQcdatabaseSetRelease(EnsPQcdatabase qcdb,
                               AjPStr release);

AjBool ensQcdatabaseSetType(EnsPQcdatabase qcdb,
                            EnsEQcdatabaseType qcdbt);

AjBool ensQcdatabaseSetUrlExternal(EnsPQcdatabase qcdb,
                                   AjPStr url);

AjBool ensQcdatabaseSetUrlInternal(EnsPQcdatabase qcdb,
                                   AjPStr url);

AjBool ensQcdatabaseTrace(const EnsPQcdatabase qcdb, ajuint level);

size_t ensQcdatabaseCalculateMemsize(const EnsPQcdatabase qcdb);

AjBool ensQcdatabaseMatch(const EnsPQcdatabase qcdb1,
                          const EnsPQcdatabase qcdb2);

EnsEQcdatabaseClass ensQcdatabaseClassFromStr(const AjPStr classstr);

const char *ensQcdatabaseClassToChar(EnsEQcdatabaseClass qcdbc);

EnsEQcdatabaseType ensQcdatabaseTypeFromStr(const AjPStr typestr);

const char *ensQcdatabaseTypeToChar(EnsEQcdatabaseType qcdbt);

/* Ensembl Quality Check Database Adaptor */

EnsPQcdatabaseadaptor ensRegistryGetQcdatabaseadaptor(
    EnsPDatabaseadaptor dba);

EnsPQcdatabaseadaptor ensQcdatabaseadaptorNew(
    EnsPDatabaseadaptor dba);

void ensQcdatabaseadaptorDel(EnsPQcdatabaseadaptor *Pqcdba);

EnsPBaseadaptor ensQcdatabaseadaptorGetBaseadaptor(
    EnsPQcdatabaseadaptor qcdba);

EnsPDatabaseadaptor ensQcdatabaseadaptorGetDatabaseadaptor(
    EnsPQcdatabaseadaptor qcdba);

AjBool ensQcdatabaseadaptorFetchAllbyClasstype(EnsPQcdatabaseadaptor qcdba,
                                               EnsEQcdatabaseClass qcdbc,
                                               EnsEQcdatabaseType qcdbt,
                                               AjPList qcdbs);

AjBool ensQcdatabaseadaptorFetchByIdentifier(EnsPQcdatabaseadaptor qcdba,
                                             ajuint identifier,
                                             EnsPQcdatabase *Pqcdb);

AjBool ensQcdatabaseadaptorFetchByName(EnsPQcdatabaseadaptor qcdba,
                                       const AjPStr name,
                                       const AjPStr release,
                                       EnsPQcdatabase *Pqcdb);

AjBool ensQcdatabaseadaptorDelete(EnsPQcdatabaseadaptor qcdba,
                                  EnsPQcdatabase qcdb);

AjBool ensQcdatabaseadaptorStore(EnsPQcdatabaseadaptor qcdba,
                                 EnsPQcdatabase qcdb);

AjBool ensQcdatabaseadaptorUpdate(EnsPQcdatabaseadaptor qcdba,
                                  const EnsPQcdatabase qcdb);


/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSQCDATABASE_H */

ensqcsequence.h/1414437294  1010  513   100644  9668      `
/* @include ensqcsequence *****************************************************
**
** Ensembl Quality Check Sequence functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.17 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSQCSEQUENCE_H
#define ENSQCSEQUENCE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensqcdatabase.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPQcsequenceadaptor ************************************************
**
** Ensembl Quality Check Sequence Adaptor
**
** @alias EnsSQcsequenceadaptor
** @alias EnsOQcsequenceadaptor
**
** @attr Adaptor [EnsPBaseadaptor] Ensembl Base Adaptor
** @attr CacheByIdentifier [AjPTable] Identifier cache
** @attr CacheByName [AjPTable] Name cache
** @@
** TODO: Should this also have a CacheByAccessionVersion???
******************************************************************************/

typedef struct EnsSQcsequenceadaptor
{
    EnsPBaseadaptor Adaptor;
    AjPTable CacheByIdentifier;
    AjPTable CacheByName;
} EnsOQcsequenceadaptor;

#define EnsPQcsequenceadaptor EnsOQcsequenceadaptor*




/* @data EnsPQcsequence *******************************************************
**
** Ensembl Quality Check Sequence
**
** @alias EnsSQcsequence
** @alias EnsOQcsequence
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPQcsequenceadaptor] Ensembl Sequence Adaptor
** @cc Bio::EnsEMBL::QC::Sequence
** @cc 'sequence' SQL table
** @attr Qcdatabase [EnsPQcdatabase] Ensembl Quality Check Database
** @attr Name [AjPStr] Name
** @attr Accession [AjPStr] Accession
** @attr Description [AjPStr] Description
** @attr Type [AjPStr] Type
** @attr Version [ajuint] Version
** @attr Length [ajuint] Length
** @attr CdsStart [ajuint] Coding sequence start
** @attr CdsEnd [ajuint] Coding sequence end
** @attr CdsStrand [ajint] Coding sequence strand
** @attr Polya [ajuint] Poly A+ tail length
** @@
******************************************************************************/

typedef struct EnsSQcsequence
{
    ajuint Use;
    ajuint Identifier;
    EnsPQcsequenceadaptor Adaptor;
    EnsPQcdatabase Qcdatabase;
    AjPStr Name;
    AjPStr Accession;
    AjPStr Description;
    AjPStr Type;
    ajuint Version;
    ajuint Length;
    ajuint CdsStart;
    ajuint CdsEnd;
    ajint CdsStrand;
    ajuint Polya;
} EnsOQcsequence;

#define EnsPQcsequence EnsOQcsequence*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Quality Check Sequence */

EnsPQcsequence ensQcsequenceNewCpy(const EnsPQcsequence qcs);

EnsPQcsequence ensQcsequenceNewIni(EnsPQcsequenceadaptor adaptor,
                                   ajuint identifier,
                                   EnsPQcdatabase qcdb,
                                   AjPStr name,
                                   AjPStr accession,
                                   ajuint version,
                                   AjPStr type,
                                   ajuint length,
                                   ajuint cdsstart,
                                   ajuint cdsend,
                                   ajint cdsstrand,
                                   ajuint polya,
                                   AjPStr description);

EnsPQcsequence ensQcsequenceNewRef(EnsPQcsequence qcs);

void ensQcsequenceDel(EnsPQcsequence *Pqcs);

AjPStr ensQcsequenceGetAccession(const EnsPQcsequence qcs);

EnsPQcsequenceadaptor ensQcsequenceGetAdaptor(const EnsPQcsequence qcs);

ajuint ensQcsequenceGetCdsEnd(const EnsPQcsequence qcs);

ajuint ensQcsequenceGetCdsStart(const EnsPQcsequence qcs);

ajint ensQcsequenceGetCdsStrand(const EnsPQcsequence qcs);

AjPStr ensQcsequenceGetDescription(const EnsPQcsequence qcs);

ajuint ensQcsequenceGetIdentifier(const EnsPQcsequence qcs);

ajuint ensQcsequenceGetLength(const EnsPQcsequence qcs);

AjPStr ensQcsequenceGetName(const EnsPQcsequence qcs);

ajuint ensQcsequenceGetPolya(const EnsPQcsequence qcs);

EnsPQcdatabase ensQcsequenceGetQcdatabase(const EnsPQcsequence qcs);

AjPStr ensQcsequenceGetType(const EnsPQcsequence qcs);

ajuint ensQcsequenceGetVersion(const EnsPQcsequence qcs);

AjBool ensQcsequenceSetAdaptor(EnsPQcsequence qcs, EnsPQcsequenceadaptor qcsa);

AjBool ensQcsequenceSetIdentifier(EnsPQcsequence qcs, ajuint identifier);

AjBool ensQcsequenceSetQcdatabase(EnsPQcsequence qcs, EnsPQcdatabase qcdb);

AjBool ensQcsequenceSetName(EnsPQcsequence qcs, AjPStr name);

AjBool ensQcsequenceSetAccession(EnsPQcsequence qcs, AjPStr accession);

AjBool ensQcsequenceSetVersion(EnsPQcsequence qcs, ajuint version);

AjBool ensQcsequenceSetType(EnsPQcsequence qcs, AjPStr type);

AjBool ensQcsequenceSetLength(EnsPQcsequence qcs, ajuint length);

AjBool ensQcsequenceSetCdsStart(EnsPQcsequence qcs, ajuint cdsstart);

AjBool ensQcsequenceSetCdsEnd(EnsPQcsequence qcs, ajuint cdsend);

AjBool ensQcsequenceSetCdsStrand(EnsPQcsequence qcs, ajint cdsstrand);

AjBool ensQcsequenceSetPolya(EnsPQcsequence qcs, ajuint polya);

AjBool ensQcsequenceSetDescription(EnsPQcsequence qcs, AjPStr description);

AjBool ensQcsequenceTrace(const EnsPQcsequence qcs, ajuint level);

size_t ensQcsequenceCalculateMemsize(const EnsPQcsequence qcs);

ajuint ensQcsequenceGetQcdatabaseIdentifier(const EnsPQcsequence qcs);

AjBool ensQcsequenceMatch(const EnsPQcsequence qcs1,
                          const EnsPQcsequence qcs2);

AjBool ensQcsequenceFetchAnchorExternal(const EnsPQcsequence qcs,
                                        AjBool htmlid,
                                        AjPStr *Pstr);

AjBool ensQcsequenceFetchAnchorInternal(const EnsPQcsequence qcs,
                                        AjPStr *Pstr);

AjBool ensQcsequenceFetchUrlExternal(const EnsPQcsequence qcs, AjPStr *Pstr);

AjBool ensHtmlEncodeEntities(AjPStr *Pstr);

AjBool ensHtmlEncodeSgmlid(AjPStr *Pstr);

/* Ensembl Quality Check Sequence Adaptor */

EnsPQcsequenceadaptor ensRegistryGetQcsequenceadaptor(
    EnsPDatabaseadaptor dba);

EnsPQcsequenceadaptor ensQcsequenceadaptorNew(
    EnsPDatabaseadaptor dba);

void ensQcsequenceadaptorDel(EnsPQcsequenceadaptor *Pqcsa);

EnsPBaseadaptor ensQcsequenceadaptorGetBaseadaptor(
    EnsPQcsequenceadaptor qcsa);

EnsPDatabaseadaptor ensQcsequenceadaptorGetDatabaseadaptor(
    EnsPQcsequenceadaptor qcsa);

AjBool ensQcsequenceadaptorFetchByAccession(EnsPQcsequenceadaptor qcsa,
                                            ajuint qcdbid,
                                            const AjPStr accession,
                                            ajuint version,
                                            EnsPQcsequence *Pqcs);

AjBool ensQcsequenceadaptorFetchByIdentifier(EnsPQcsequenceadaptor adaptor,
                                             ajuint identifier,
                                             EnsPQcsequence *Pqcs);

AjBool ensQcsequenceadaptorFetchByName(EnsPQcsequenceadaptor qcsa,
                                       ajuint qcdbid,
                                       const AjPStr name,
                                       EnsPQcsequence *Pqcs);

AjBool ensQcsequenceadaptorFetchAllbyQcdatabase(EnsPQcsequenceadaptor qcsa,
                                                const EnsPQcdatabase qcdb,
                                                AjPList qcss);

AjBool ensQcsequenceadaptorStore(EnsPQcsequenceadaptor qcsa,
                                 EnsPQcsequence qcs);

AjBool ensQcsequenceadaptorDelete(EnsPQcsequenceadaptor qcsa,
                                  EnsPQcsequence qcs);

AjBool ensQcsequenceadaptorUpdate(EnsPQcsequenceadaptor qcsa,
                                  const EnsPQcsequence qcs);


/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSQCSEQUENCE_H */
/468            1414437295  1010  513   100644  9331      `
/* @include ensqcsubmission ***************************************************
**
** Ensembl Quality Check Submission functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.6 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSQCSUBMISSION_H
#define ENSQCSUBMISSION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensanalysis.h"
#include "ensqcsequence.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPQcsubmissionadaptor *********************************************
**
** Ensembl Quality Check Submission Adaptor
**
******************************************************************************/

#define EnsPQcsubmissionadaptor EnsPBaseadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPQcsubmission *****************************************************
**
** Ensembl Quality Check Submission
**
** @alias EnsSQcsubmission
** @alias EnsOQcsubmission
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPQcsubmissionadaptor]
** Ensembl Quality Check Submission Adaptor
** @cc Bio::EnsEMBL::QC::Submission
** @cc 'submission' SQL table
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @attr QuerySequence [EnsPQcsequence] Query Ensembl Quality Check Sequence
** @attr TargetSequence [EnsPQcsequence] Target Ensembl Quality Check Sequence
** @attr QueryStart [ajuint] Query start
** @attr QueryEnd [ajuint] Query end
** @attr QueryStrand [ajint] Query strand
** @attr TargetStart [ajuint] Target start
** @attr TargetEnd [ajuint] Target end
** @attr TargetStrand [ajint] Target strand
** @attr Analysisjobidentifier [ajuint] Ensembl Hive Analysis Job identifier
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSQcsubmission
{
    ajuint Use;
    ajuint Identifier;
    EnsPQcsubmissionadaptor Adaptor;
    EnsPAnalysis Analysis;
    EnsPQcsequence QuerySequence;
    EnsPQcsequence TargetSequence;
    ajuint QueryStart;
    ajuint QueryEnd;
    ajint QueryStrand;
    ajuint TargetStart;
    ajuint TargetEnd;
    ajint TargetStrand;
    ajuint Analysisjobidentifier;
    ajuint Padding;
} EnsOQcsubmission;

#define EnsPQcsubmission EnsOQcsubmission*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Quality Check Submission */

EnsPQcsubmission ensQcsubmissionNewCpy(const EnsPQcsubmission qcsb);

EnsPQcsubmission ensQcsubmissionNewIni(EnsPQcsubmissionadaptor adaptor,
                                       ajuint identifier,
                                       EnsPAnalysis analysis,
                                       EnsPQcsequence qsequence,
                                       EnsPQcsequence tsequence,
                                       ajuint tstart,
                                       ajuint tend,
                                       ajint tstrand,
                                       ajuint analysisjobid);

EnsPQcsubmission ensQcsubmissionNewRef(EnsPQcsubmission qcsb);

void ensQcsubmissionDel(EnsPQcsubmission *Pqcsb);

EnsPQcsubmissionadaptor ensQcsubmissionGetAdaptor(const EnsPQcsubmission qcsb);

EnsPAnalysis ensQcsubmissionGetAnalysis(const EnsPQcsubmission qcsb);

ajuint ensQcsubmissionGetAnalysisjobidentifier(const EnsPQcsubmission qcsb);

ajuint ensQcsubmissionGetIdentifier(const EnsPQcsubmission qcsb);

ajuint ensQcsubmissionGetQueryEnd(const EnsPQcsubmission qcsb);

EnsPQcsequence ensQcsubmissionGetQuerySequence(const EnsPQcsubmission qcsb);

ajuint ensQcsubmissionGetQueryStart(const EnsPQcsubmission qcsb);

ajint ensQcsubmissionGetQueryStrand(const EnsPQcsubmission qcsb);

ajuint ensQcsubmissionGetTargetEnd(const EnsPQcsubmission qcsb);

EnsPQcsequence ensQcsubmissionGetTargetSequence(const EnsPQcsubmission qcsb);

ajuint ensQcsubmissionGetTargetStart(const EnsPQcsubmission qcsb);

ajint ensQcsubmissionGetTargetStrand(const EnsPQcsubmission qcsb);

AjBool ensQcsubmissionSetAdaptor(EnsPQcsubmission qcsb,
                                 EnsPQcsubmissionadaptor qcsba);

AjBool ensQcsubmissionSetAnalysis(EnsPQcsubmission qcsb,
                                  EnsPAnalysis analysis);

AjBool ensQcsubmissionSetAnalysisjobidentifier(EnsPQcsubmission qcsb,
                                               ajuint jobid);

AjBool ensQcsubmissionSetIdentifier(EnsPQcsubmission qcsb,
                                    ajuint identifier);

AjBool ensQcsubmissionSetQueryEnd(EnsPQcsubmission qcsb,
                                  ajuint qend);

AjBool ensQcsubmissionSetQuerySequence(EnsPQcsubmission qcsb,
                                       EnsPQcsequence qsequence);

AjBool ensQcsubmissionSetQueryStart(EnsPQcsubmission qcsb,
                                    ajuint qstart);

AjBool ensQcsubmissionSetQueryStrand(EnsPQcsubmission qcsb,
                                     ajint qstrand);

AjBool ensQcsubmissionSetTargetEnd(EnsPQcsubmission qcsb,
                                   ajuint tend);

AjBool ensQcsubmissionSetTargetSequence(EnsPQcsubmission qcsb,
                                        EnsPQcsequence tsequence);

AjBool ensQcsubmissionSetTargetStart(EnsPQcsubmission qcsb,
                                     ajuint tstart);

AjBool ensQcsubmissionSetTargetStrand(EnsPQcsubmission qcsb,
                                      ajint tstrand);

AjBool ensQcsubmissionTrace(const EnsPQcsubmission qcsb, ajuint level);

size_t ensQcsubmissionCalculateMemsize(const EnsPQcsubmission qcsb);

/* Ensembl Quality Check Submission Adaptor */

EnsPQcsubmissionadaptor ensRegistryGetQcsubmissionadaptor(
    EnsPDatabaseadaptor dba);

EnsPQcsubmissionadaptor ensQcsubmissionadaptorNew(
    EnsPDatabaseadaptor dba);

void ensQcsubmissionadaptorDel(EnsPQcsubmissionadaptor *Pqcsba);

EnsPBaseadaptor ensQcsubmissionadaptorGetBaseadaptor(
    EnsPQcsubmissionadaptor qcsba);

EnsPDatabaseadaptor ensQcsubmissionadaptorGetDatabaseadaptor(
    EnsPQcsubmissionadaptor qcsba);

AjBool ensQcsubmissionadaptorFetchAllbyQcdatabasePair(
    EnsPQcsubmissionadaptor qcsba,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase qdb,
    const EnsPQcdatabase tdb,
    AjPList qcsbs);

AjBool ensQcsubmissionadaptorFetchAllbyQcdatabaseQuery(
    EnsPQcsubmissionadaptor qcsba,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase qdb,
    AjPList qcsbs);

AjBool ensQcsubmissionadaptorFetchAllbyQcdatabaseTarget(
    EnsPQcsubmissionadaptor qcsba,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase tdb,
    AjPList qcsbs);

AjBool ensQcsubmissionadaptorFetchAllbyRegion(
    EnsPQcsubmissionadaptor qcsba,
    const EnsPAnalysis analysis,
    const EnsPQcsequence qsequence,
    const EnsPQcdatabase tdb,
    const EnsPQcsequence tsequence,
    ajuint tstart,
    ajuint tend,
    ajint tstrand,
    AjPList qcsbs);

AjBool ensQcsubmissionadaptorFetchByIdentifier(
    EnsPQcsubmissionadaptor adaptor,
    ajuint identifier,
    EnsPQcsubmission *Pqcsb);

AjBool ensQcsubmissionadaptorDelete(EnsPQcsubmissionadaptor qcsba,
                                    EnsPQcsubmission qcsb);

AjBool ensQcsubmissionadaptorStore(EnsPQcsubmissionadaptor qcsba,
                                   EnsPQcsubmission qcsb);

AjBool ensQcsubmissionadaptorUpdate(EnsPQcsubmissionadaptor qcsba,
                                    const EnsPQcsubmission qcsb);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSQCSUBMISSION_H */

/487            1414437295  1010  513   100644  12638     `
/* @include ensqcvariation ****************************************************
**
** Ensembl Quality Check Variation functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.7 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSQCVARIATION_H
#define ENSQCVARIATION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensanalysis.h"
#include "ensqcalignment.h"
#include "ensqcsequence.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPQcvariationadaptor **********************************************
**
** Ensembl Quality Check Variation Adaptor
**
******************************************************************************/

#define EnsPQcvariationadaptor EnsPBaseadaptor




/* @enum EnsEQcvariationClass ************************************************
**
** Ensembl Quality Check Variation Class enumeration
**
** @value ensEQcvariationClassNULL Null
** @value ensEQcvariationClassNone None
** @value ensEQcvariationClassSimple Simple
** @value ensEQcvariationClassSplice Splice
** @value ensEQcvariationClassExon Exon
** @@
******************************************************************************/

typedef enum EnsOQcvariationClass
{
    ensEQcvariationClassNULL,
    ensEQcvariationClassNone,
    ensEQcvariationClassSimple,
    ensEQcvariationClassSplice,
    ensEQcvariationClassExon
} EnsEQcvariationClass;




/* @enum EnsEQcvariationState *************************************************
**
** Ensembl Quality Check Variation State enumeration
**
** @value ensEQcvariationStateNULL Null
** @value ensEQcvariationStateNone None
** @value ensEQcvariationStateMatch Match
** @value ensEQcvariationStateGap Gap
** @value ensEQcvariationStateFrameshift Frameshift
** @value ensEQcvariationState5ss 5-prime Splice Site
** @value ensEQcvariationState3ss 3-prime Splice Site
** @value EnsEQcvariationStateSplit Split
** @@
******************************************************************************/

typedef enum EnsOQcvariationState
{
    ensEQcvariationStateNULL,
    ensEQcvariationStateNone,
    ensEQcvariationStateMatch,
    ensEQcvariationStateGap,
    ensEQcvariationStateFrameshift,
    ensEQcvariationState5ss,
    ensEQcvariationState3ss,
    EnsEQcvariationStateSplit
} EnsEQcvariationState;




/* @enum EnsEQcvariationType **************************************************
**
** Ensembl Quality Check Variation Type enumeration
**
** @value ensEQcvariationTypeNULL Null
** @value ensEQcvariationTypeNone None
** @value ensEQcvariationTypeSingle Single
** @value ensEQcvariationTypeMulti Multi
** @@
******************************************************************************/

typedef enum EnsOQcvariationType
{
    ensEQcvariationTypeNULL,
    ensEQcvariationTypeNone,
    ensEQcvariationTypeSingle,
    ensEQcvariationTypeMulti
} EnsEQcvariationType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPQcvariation ******************************************************
**
** Ensembl Quality Check Variation
**
** @alias EnsSQcvariation
** @alias EnsOQcvariation
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPQcvariationadaptor]
** Ensembl Quality Check Variation Adaptor
** @cc Bio::EnsEMBL::QC::Variation
** @cc 'variation' SQL table
** @attr Analysis [EnsPAnalysis] Ensembl Analysis
** @attr Qcalignment [EnsPQcalignment] Ensembl Quality Check Alignment
** @attr QuerySequence [EnsPQcsequence] Query Ensembl Quality Check Sequence
** @attr QueryStart [ajuint] Query start
** @attr QueryEnd [ajuint] Query end
** @attr QueryString [AjPStr] Query string
** @attr TargetSequence [EnsPQcsequence] Target Ensembl Quality Check Sequence
** @attr TargetStart [ajuint] Target start
** @attr TargetEnd [ajuint] Target end
** @attr TargetString [AjPStr] Target string
** @attr Class [EnsEQcvariationClass] Class
** @attr Type [EnsEQcvariationType] Type
** @attr State [EnsEQcvariationState] State
** @attr Padding [char[4]] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSQcvariation
{
    ajuint Use;
    ajuint Identifier;
    EnsPQcvariationadaptor Adaptor;
    EnsPAnalysis Analysis;
    EnsPQcalignment Qcalignment;
    EnsPQcsequence QuerySequence;
    ajuint QueryStart;
    ajuint QueryEnd;
    AjPStr QueryString;
    EnsPQcsequence TargetSequence;
    ajuint TargetStart;
    ajuint TargetEnd;
    AjPStr TargetString;
    EnsEQcvariationClass Class;
    EnsEQcvariationType Type;
    EnsEQcvariationState State;
    char Padding[4];
} EnsOQcvariation;

#define EnsPQcvariation EnsOQcvariation*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Quality Check Variation */

EnsPQcvariation ensQcvariationNewCpy(const EnsPQcvariation qcv);

EnsPQcvariation ensQcvariationNewIni(EnsPQcvariationadaptor adaptor,
                                     ajuint identifier,
                                     EnsPQcalignment qca,
                                     EnsPAnalysis analysis,
                                     EnsPQcsequence qsequence,
                                     ajuint qstart,
                                     ajuint qend,
                                     AjPStr qstring,
                                     EnsPQcsequence tsequence,
                                     ajuint tstart,
                                     ajuint tend,
                                     AjPStr tstring,
                                     EnsEQcvariationClass class,
                                     EnsEQcvariationType type,
                                     EnsEQcvariationState state);

EnsPQcvariation ensQcvariationNewRef(EnsPQcvariation qcv);

void ensQcvariationDel(EnsPQcvariation *Pqcv);

EnsPQcvariationadaptor ensQcvariationGetAdaptor(const EnsPQcvariation qcv);

EnsPAnalysis ensQcvariationGetAnalysis(const EnsPQcvariation qcv);

EnsEQcvariationClass ensQcvariationGetClass(const EnsPQcvariation qcv);

ajuint ensQcvariationGetIdentifier(const EnsPQcvariation qcv);

EnsPQcalignment ensQcvariationGetQcalignment(const EnsPQcvariation qcv);

ajuint ensQcvariationGetQueryEnd(const EnsPQcvariation qcv);

EnsPQcsequence ensQcvariationGetQuerySequence(const EnsPQcvariation qcv);

ajuint ensQcvariationGetQueryStart(const EnsPQcvariation qcv);

AjPStr ensQcvariationGetQueryString(const EnsPQcvariation qcv);

EnsEQcvariationState ensQcvariationGetState(const EnsPQcvariation qcv);

ajuint ensQcvariationGetTargetEnd(const EnsPQcvariation qcv);

EnsPQcsequence ensQcvariationGetTargetSequence(const EnsPQcvariation qcv);

ajuint ensQcvariationGetTargetStart(const EnsPQcvariation qcv);

AjPStr ensQcvariationGetTargetString(const EnsPQcvariation qcv);

EnsEQcvariationType ensQcvariationGetType(const EnsPQcvariation qcv);

AjBool ensQcvariationSetAdaptor(EnsPQcvariation qcv,
                                EnsPQcvariationadaptor qcva);

AjBool ensQcvariationSetAnalysis(EnsPQcvariation qcv,
                                 EnsPAnalysis analysis);

AjBool ensQcvariationSetClass(EnsPQcvariation qcv,
                              EnsEQcvariationClass class);

AjBool ensQcvariationSetIdentifier(EnsPQcvariation qcv,
                                   ajuint identifier);

AjBool ensQcvariationSetQcalignment(EnsPQcvariation qcv,
                                    EnsPQcalignment qca);

AjBool ensQcvariationSetQueryEnd(EnsPQcvariation qcv,
                                 ajuint qend);

AjBool ensQcvariationSetQuerySequence(EnsPQcvariation qcv,
                                      EnsPQcsequence qsequence);

AjBool ensQcvariationSetQueryStart(EnsPQcvariation qcv,
                                   ajuint qstart);

AjBool ensQcvariationSetQueryString(EnsPQcvariation qcv,
                                    AjPStr qstring);

AjBool ensQcvariationSetState(EnsPQcvariation qcv,
                              EnsEQcvariationState state);

AjBool ensQcvariationSetTargetEnd(EnsPQcvariation qcv,
                                  ajuint tend);

AjBool ensQcvariationSetTargetSequence(EnsPQcvariation qcv,
                                       EnsPQcsequence tsequence);

AjBool ensQcvariationSetTargetStart(EnsPQcvariation qcv,
                                    ajuint tstart);

AjBool ensQcvariationSetTargetString(EnsPQcvariation qcv,
                                     AjPStr tstring);

AjBool ensQcvariationSetType(EnsPQcvariation qcv,
                             EnsEQcvariationType type);

AjBool ensQcvariationTrace(const EnsPQcvariation qcv, ajuint level);

size_t ensQcvariationCalculateMemsize(const EnsPQcvariation qcv);

EnsEQcvariationClass ensQcvariationClassFromStr(const AjPStr vclass);

const char *ensQcvariationClassToChar(EnsEQcvariationClass qcvc);

EnsEQcvariationState ensQcvariationStateFromStr(const AjPStr state);

const char *ensQcvariationStateToChar(EnsEQcvariationState qcvs);

EnsEQcvariationType ensQcvariationTypeFromStr(const AjPStr type);

const char *ensQcvariationTypeToChar(EnsEQcvariationType qcvt);

/* Ensembl Quality Check Variation Adaptor */

EnsPQcvariationadaptor ensRegistryGetQcvariationadaptor(
    EnsPDatabaseadaptor dba);

EnsPQcvariationadaptor ensQcvariationadaptorNew(
    EnsPDatabaseadaptor dba);

void ensQcvariationadaptorDel(EnsPQcvariationadaptor *Pqcva);

EnsPBaseadaptor ensQcvariationadaptorGetBaseadaptor(
    EnsPQcvariationadaptor qcva);

EnsPDatabaseadaptor ensQcvariationadaptorGetDatabaseadaptor(
    EnsPQcvariationadaptor qcva);

AjBool ensQcvariationadaptorFetchAllbyQcalignment(
    EnsPQcvariationadaptor qcva,
    const EnsPQcalignment qca,
    AjPList qcvs);

AjBool ensQcvariationadaptorFetchAllbyQcdatabasePair(
    EnsPQcvariationadaptor qcva,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase qdb,
    const EnsPQcdatabase tdb,
    AjPList qcvs);

AjBool ensQcvariationadaptorFetchAllbyQcdatabaseQuery(
    EnsPQcvariationadaptor qcva,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase qdb,
    AjPList qcvs);

AjBool ensQcvariationadaptorFetchAllbyQcdatabaseTarget(
    EnsPQcvariationadaptor qcva,
    const EnsPAnalysis analysis,
    const EnsPQcdatabase tdb,
    AjPList qcvs);

AjBool ensQcvariationadaptorFetchByIdentifier(
    EnsPQcvariationadaptor adaptor,
    ajuint identifier,
    EnsPQcvariation *Pqcvf);

AjBool ensQcvariationadaptorDelete(EnsPQcvariationadaptor qcva,
                                   EnsPQcvariation qcv);

AjBool ensQcvariationadaptorStore(EnsPQcvariationadaptor qcva,
                                  EnsPQcvariation qcv);

AjBool ensQcvariationadaptorUpdate(EnsPQcvariationadaptor qcva,
                                   const EnsPQcvariation qcv);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSQCVARIATION_H */
ensregistry.h/  1414437295  1010  513   100644  4801      `
/* @include ensregistry *******************************************************
**
** Ensembl Registry functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.25 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/20 22:14:03 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSREGISTRY_H
#define ENSREGISTRY_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensembl.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Registry */

void ensRegistryClear(void);

void ensRegistryExit(void);

void ensRegistryInit(void);

ajuint ensRegistryLoadDatabaseconnection(EnsPDatabaseconnection dbc);

ajuint ensRegistryLoadServername(AjPStr servername);

AjBool ensRegistryRetrieveAllSpecies(AjPList species);

/* Ensembl Registry Alias */

AjBool ensRegistryAliasAdd(const AjPStr species, const AjPStr alias);

AjBool ensRegistryAliasClear(void);

AjBool ensRegistryAliasFetchAllbySpecies(const AjPStr species,
                                         AjPList aliases);

AjBool ensRegistryAliasLoadFile(const AjPStr filename);

AjBool ensRegistryAliasRemove(const AjPStr alias);

AjBool ensRegistryAliasResolve(const AjPStr alias, AjPStr *Pspecies);

AjBool ensRegistryAliasTrace(ajuint level);

/* Ensembl Registry Entry */

AjBool ensRegistryEntryClear(void);

AjBool ensRegistryEntryTrace(ajuint level);

/* Ensembl Registry Identifier */

AjBool ensRegistryIdentifierClear(void);

AjBool ensRegistryIdentifierLoadFile(const AjPStr filename);

AjBool ensRegistryIdentifierResolve(const AjPStr identifier,
                                    AjPStr *Pspecies,
                                    EnsEDatabaseadaptorGroup *Pdbag);

/* Ensembl Registry Source */

AjBool ensRegistrySourceTrace(ajuint level);

/* Ensembl Registry Database Adaptor */

AjBool ensRegistryAddDatabaseadaptor(EnsPDatabaseadaptor dba);

AjBool ensRegistryAddReferenceadaptor(EnsPDatabaseadaptor dba,
                                      EnsPDatabaseadaptor rsa);

AjBool ensRegistryAddStableidentifierprefix(EnsPDatabaseadaptor dba,
                                            const AjPStr prefix);

EnsPDatabaseadaptor ensRegistryNewDatabaseadaptor(
    EnsPDatabaseconnection dbc,
    AjPStr database,
    AjPStr alias,
    EnsEDatabaseadaptorGroup dbag,
    AjBool multi,
    ajuint identifier);

EnsPDatabaseadaptor ensRegistryNewReferenceadaptor(
    EnsPDatabaseadaptor dba,
    EnsPDatabaseconnection dbc,
    AjPStr database,
    AjPStr alias,
    EnsEDatabaseadaptorGroup dbag,
    AjBool multi,
    ajuint identifier);

AjBool ensRegistryRemoveDatabaseadaptor(EnsPDatabaseadaptor *Pdba);

AjBool ensRegistryGetAllDatabaseadaptors(EnsEDatabaseadaptorGroup dbag,
                                         AjPStr alias,
                                         AjPList dbas);

AjPStr ensRegistryGetStableidentifierprefix(EnsPDatabaseadaptor dba);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSREGISTRY_H */

ensrepeat.h/    1414437295  1010  513   100644  11870     `
/* @include ensrepeat *********************************************************
**
** Ensembl Repeat functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.25 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:25:55 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSREPEAT_H
#define ENSREPEAT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPRepeatconsensusadaptor ******************************************
**
** Ensembl Repeat Consensus Adaptor.
** Defined as an alias in EnsPBaseadaptor
** #alias EnsPBaseadaptor
** ##
******************************************************************************/

#define EnsPRepeatconsensusadaptor EnsPBaseadaptor




/* @const EnsPRepeatfeatureadaptor ********************************************
**
** Ensembl Repeat Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor
** #alias EnsPFeatureadaptor
** ##
******************************************************************************/

#define EnsPRepeatfeatureadaptor EnsPFeatureadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPRepeatconsensus **************************************************
**
** Ensembl Repeat Consensus.
**
** @alias EnsSRepeatconsensus
** @alias EnsORepeatconsensus
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] The SQL database-internal identifier
** @attr Adaptor [EnsPRepeatconsensusadaptor] Ensembl Repeat Consensus Adaptor
** @cc Bio::EnsEMBL::Repeatconsensus
** @attr Name [AjPStr] Repeat Consensus name
** @attr Class [AjPStr] Repeat Consensus class
** @attr Type [AjPStr] Repeat Consensus type
** @attr Consensus [AjPStr] Repeat Consensus sequence
** @attr Length [ajuint] Repeat Consensus sequence length
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSRepeatconsensus
{
    ajuint Use;
    ajuint Identifier;
    EnsPRepeatconsensusadaptor Adaptor;
    AjPStr Name;
    AjPStr Class;
    AjPStr Type;
    AjPStr Consensus;
    ajuint Length;
    ajuint Padding;
} EnsORepeatconsensus;

#define EnsPRepeatconsensus EnsORepeatconsensus*




/* @data EnsPRepeatfeature ****************************************************
**
** Ensembl Repeat Feature.
**
** @alias EnsSRepeatfeature
** @alias EnsORepeatfeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] The SQL database-internal identifier
** @attr Adaptor [EnsPRepeatfeatureadaptor] Ensembl Repeat Feature Adaptor
** @cc Bio::EnsEMBL::Repeatfeature
** @attr Feature [EnsPFeature] Ensembl Feature
** @attr Repeatconsensus [EnsPRepeatconsensus] Ensembl Repeat Consensus
** @attr HitStart [ajint] The hit start on he consensus sequence
** @attr HitEnd [ajint] The hit end on the consensus sequence
** @attr Score [double] Score
** @@
******************************************************************************/

typedef struct EnsSRepeatfeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPRepeatfeatureadaptor Adaptor;
    EnsPFeature Feature;
    EnsPRepeatconsensus Repeatconsensus;
    ajint HitStart;
    ajint HitEnd;
    double Score;
} EnsORepeatfeature;

#define EnsPRepeatfeature EnsORepeatfeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Repeat Consensus */

EnsPRepeatconsensus ensRepeatconsensusNewCpy(const EnsPRepeatconsensus rc);

EnsPRepeatconsensus ensRepeatconsensusNewIni(EnsPRepeatconsensusadaptor rca,
                                             ajuint identifier,
                                             AjPStr name,
                                             AjPStr class,
                                             AjPStr type,
                                             AjPStr consensus,
                                             ajuint length);

EnsPRepeatconsensus ensRepeatconsensusNewRef(EnsPRepeatconsensus rc);

void ensRepeatconsensusDel(EnsPRepeatconsensus *Prc);

EnsPRepeatconsensusadaptor ensRepeatconsensusGetAdaptor(
    const EnsPRepeatconsensus rc);

AjPStr ensRepeatconsensusGetClass(const EnsPRepeatconsensus rc);

AjPStr ensRepeatconsensusGetConsensus(const EnsPRepeatconsensus rc);

ajuint ensRepeatconsensusGetIdentifier(const EnsPRepeatconsensus rc);

ajuint ensRepeatconsensusGetLength(const EnsPRepeatconsensus rc);

AjPStr ensRepeatconsensusGetName(const EnsPRepeatconsensus rc);

AjPStr ensRepeatconsensusGetType(const EnsPRepeatconsensus rc);

AjBool ensRepeatconsensusSetAdaptor(EnsPRepeatconsensus rc,
                                    EnsPRepeatconsensusadaptor rca);

AjBool ensRepeatconsensusSetClass(EnsPRepeatconsensus rc,
                                  AjPStr class);

AjBool ensRepeatconsensusSetConsensus(EnsPRepeatconsensus rc,
                                      AjPStr consensus);

AjBool ensRepeatconsensusSetIdentifier(EnsPRepeatconsensus rc,
                                       ajuint identifier);

AjBool ensRepeatconsensusSetLength(EnsPRepeatconsensus rc,
                                   ajuint length);

AjBool ensRepeatconsensusSetName(EnsPRepeatconsensus rc,
                                 AjPStr name);

AjBool ensRepeatconsensusSetType(EnsPRepeatconsensus rc,
                                 AjPStr type);

size_t ensRepeatconsensusCalculateMemsize(const EnsPRepeatconsensus rc);

AjBool ensRepeatconsensusTrace(const EnsPRepeatconsensus rc, ajuint level);

/* Ensembl Repeat Consensus Adaptor */

EnsPRepeatconsensusadaptor ensRegistryGetRepeatconsensusadaptor(
    EnsPDatabaseadaptor dba);

EnsPRepeatconsensusadaptor ensRepeatconsensusadaptorNew(
    EnsPDatabaseadaptor dba);

void ensRepeatconsensusadaptorDel(EnsPRepeatconsensusadaptor *Prca);

EnsPBaseadaptor ensRepeatconsensusadaptorGetBaseadaptor(
    EnsPRepeatconsensusadaptor rca);

EnsPDatabaseadaptor ensRepeatconsensusadaptorGetDatabaseadaptor(
    EnsPRepeatconsensusadaptor rca);

AjBool ensRepeatconsensusadaptorFetchByIdentifier(
    EnsPRepeatconsensusadaptor rca,
    ajuint identifier,
    EnsPRepeatconsensus *Prc);

AjBool ensRepeatconsensusadaptorFetchByName(
    EnsPRepeatconsensusadaptor rca,
    const AjPStr name,
    const AjPStr class,
    EnsPRepeatconsensus *Prc);

AjBool ensRepeatconsensusadaptorFetchAllbyClassconsensus(
    EnsPRepeatconsensusadaptor rca,
    const AjPStr class,
    const AjPStr consensus,
    AjPList rci);

AjBool ensRepeatconsensusadaptorFetchAllbyIdentifiers(
    EnsPRepeatconsensusadaptor rca,
    AjPTable rcit);

AjBool ensRepeatconsensusadaptorRetrieveAllTypes(
    EnsPRepeatconsensusadaptor rca,
    AjPList types);

/* Ensembl Repeat Feature */

EnsPRepeatfeature ensRepeatfeatureNewCpy(const EnsPRepeatfeature rf);

EnsPRepeatfeature ensRepeatfeatureNewIni(EnsPRepeatfeatureadaptor rfa,
                                         ajuint identifier,
                                         EnsPFeature feature,
                                         EnsPRepeatconsensus rc,
                                         ajint hstart,
                                         ajint hend,
                                         double score);

EnsPRepeatfeature ensRepeatfeatureNewRef(EnsPRepeatfeature rf);

void ensRepeatfeatureDel(EnsPRepeatfeature *Prf);

EnsPRepeatfeatureadaptor ensRepeatfeatureGetAdaptor(
    const EnsPRepeatfeature rf);

EnsPFeature ensRepeatfeatureGetFeature(
    const EnsPRepeatfeature rf);

ajint ensRepeatfeatureGetHitEnd(
    const EnsPRepeatfeature rf);

ajint ensRepeatfeatureGetHitStart(
    const EnsPRepeatfeature rf);

ajint ensRepeatfeatureGetHitStrand(
    const EnsPRepeatfeature rf);

ajuint ensRepeatfeatureGetIdentifier(
    const EnsPRepeatfeature rf);

EnsPRepeatconsensus ensRepeatfeatureGetRepeatconsensus(
    const EnsPRepeatfeature rf);

double ensRepeatfeatureGetScore(
    const EnsPRepeatfeature rf);

AjBool ensRepeatfeatureSetAdaptor(EnsPRepeatfeature rf,
                                  EnsPRepeatfeatureadaptor rfa);

AjBool ensRepeatfeatureSetFeature(EnsPRepeatfeature rf,
                                  EnsPFeature feature);

AjBool ensRepeatfeatureSetHitEnd(EnsPRepeatfeature rf,
                                 ajuint hend);

AjBool ensRepeatfeatureSetHitStart(EnsPRepeatfeature rf,
                                   ajuint hstart);

AjBool ensRepeatfeatureSetIdentifier(EnsPRepeatfeature rf,
                                     ajuint identifier);

AjBool ensRepeatfeatureSetRepeatconsensus(EnsPRepeatfeature rf,
                                          EnsPRepeatconsensus rc);

AjBool ensRepeatfeatureSetScore(EnsPRepeatfeature rf,
                                double score);

AjBool ensRepeatfeatureTrace(const EnsPRepeatfeature rf, ajuint level);

size_t ensRepeatfeatureCalculateMemsize(const EnsPRepeatfeature rf);

/* AJAX List of Ensembl Repeat Feature objects */

AjBool ensListRepeatfeatureSortEndAscending(AjPList rfs);

AjBool ensListRepeatfeatureSortEndDescending(AjPList rfs);

AjBool ensListRepeatfeatureSortIdentifierAscending(AjPList rfs);

AjBool ensListRepeatfeatureSortStartAscending(AjPList rfs);

AjBool ensListRepeatfeatureSortStartDescending(AjPList rfs);

/* Ensembl Repeat Feature Adaptor */

EnsPRepeatfeatureadaptor ensRegistryGetRepeatfeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPRepeatfeatureadaptor ensRepeatfeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensRepeatfeatureadaptorDel(EnsPRepeatfeatureadaptor *Prfa);

EnsPBaseadaptor ensRepeatfeatureadaptorGetBaseadaptor(
    EnsPRepeatfeatureadaptor rfa);

EnsPDatabaseadaptor ensRepeatfeatureadaptorGetDatabaseadaptor(
    EnsPRepeatfeatureadaptor rfa);

EnsPFeatureadaptor ensRepeatfeatureadaptorGetFeatureadaptor(
    EnsPRepeatfeatureadaptor rfa);

AjBool ensRepeatfeatureadaptorFetchAllbySlice(
    EnsPRepeatfeatureadaptor rfa,
    EnsPSlice slice,
    const AjPStr anname,
    const AjPStr rctype,
    const AjPStr rcclass,
    const AjPStr rcname,
    AjPList rfs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSREPEAT_H */
ensseqregion.h/ 1414437295  1010  513   100644  9745      `
/* @include ensseqregion ******************************************************
**
** Ensembl Sequence Region functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.23 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:27:31 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSSEQREGION_H
#define ENSSEQREGION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "enscoordsystem.h"
#include "ensdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Sequence Region */

EnsPSeqregion ensSeqregionNewCpy(EnsPSeqregion sr);

EnsPSeqregion ensSeqregionNewIni(EnsPSeqregionadaptor sra,
                                 ajuint identifier,
                                 EnsPCoordsystem cs,
                                 AjPStr name,
                                 ajint length);

EnsPSeqregion ensSeqregionNewRef(EnsPSeqregion sr);

void ensSeqregionDel(EnsPSeqregion *Psr);

EnsPSeqregionadaptor ensSeqregionGetAdaptor(const EnsPSeqregion sr);

EnsPCoordsystem ensSeqregionGetCoordsystem(const EnsPSeqregion sr);

ajuint ensSeqregionGetIdentifier(const EnsPSeqregion sr);

ajint ensSeqregionGetLength(const EnsPSeqregion sr);

AjPStr ensSeqregionGetName(const EnsPSeqregion sr);

const AjPList ensSeqregionLoadAttributes(EnsPSeqregion sr);

const AjPList ensSeqregionLoadSeqregionsynonyms(EnsPSeqregion sr);

AjBool ensSeqregionSetAdaptor(EnsPSeqregion sr, EnsPSeqregionadaptor sra);

AjBool ensSeqregionSetCoordsystem(EnsPSeqregion sr, EnsPCoordsystem cs);

AjBool ensSeqregionSetIdentifier(EnsPSeqregion sr, ajuint identifier);

AjBool ensSeqregionSetLength(EnsPSeqregion sr, ajint length);

AjBool ensSeqregionSetName(EnsPSeqregion sr, AjPStr name);

AjBool ensSeqregionAddAttribute(EnsPSeqregion sr, EnsPAttribute attribute);

AjBool ensSeqregionAddSeqregionsynonym(EnsPSeqregion sr,
                                       EnsPSeqregionsynonym srs);

AjBool ensSeqregionTrace(const EnsPSeqregion sr, ajuint level);

size_t ensSeqregionCalculateMemsize(const EnsPSeqregion sr);

AjBool ensSeqregionMatch(const EnsPSeqregion sr1, const EnsPSeqregion sr2);

AjBool ensSeqregionFetchAllAttributes(EnsPSeqregion sr,
                                      const AjPStr code,
                                      AjPList attributes);

AjBool ensSeqregionIsLocusreferencegenomic(EnsPSeqregion sr, AjBool *Presult);

AjBool ensSeqregionIsNonreference(EnsPSeqregion sr, AjBool *Presult);

AjBool ensSeqregionIsToplevel(EnsPSeqregion sr, AjBool *Presult);

AjBool ensListSeqregionSortIdentifierAscending(AjPList srs);

AjBool ensListSeqregionSortIdentifierDescending(AjPList srs);

AjBool ensListSeqregionSortNameAscending(AjPList srs);

AjBool ensListSeqregionSortNameDescending(AjPList srs);

/* Ensembl Sequence Region Adaptor */

EnsPSeqregionadaptor ensRegistryGetSeqregionadaptor(
    EnsPDatabaseadaptor dba);

EnsPSeqregionadaptor ensSeqregionadaptorNew(
    EnsPDatabaseadaptor dba);

void ensSeqregionadaptorDel(EnsPSeqregionadaptor *Psra);

EnsPDatabaseadaptor ensSeqregionadaptorGetDatabaseadaptor(
    EnsPSeqregionadaptor sra);

const AjPList ensSeqregionadaptorLoadLocusreferencegenomic(
    EnsPSeqregionadaptor sra);

const AjPList ensSeqregionadaptorLoadNonreferences(
    EnsPSeqregionadaptor sra);

AjBool ensSeqregionadaptorCacheInsert(EnsPSeqregionadaptor sra,
                                      EnsPSeqregion *Psr);

AjBool ensSeqregionadaptorCacheRemove(EnsPSeqregionadaptor sra,
                                      const EnsPSeqregion sr);

AjBool ensSeqregionadaptorFetchAllbyAttributecodevalue(
    EnsPSeqregionadaptor sra,
    const AjPStr code,
    const AjPStr value,
    AjPList srs);

AjBool ensSeqregionadaptorFetchAllbyCoordsystem(EnsPSeqregionadaptor sra,
                                                const EnsPCoordsystem cs,
                                                AjPList srs);

AjBool ensSeqregionadaptorFetchByIdentifier(EnsPSeqregionadaptor sra,
                                            ajuint identifier,
                                            EnsPSeqregion *Psr);

AjBool ensSeqregionadaptorFetchByName(EnsPSeqregionadaptor sra,
                                      const EnsPCoordsystem cs,
                                      const AjPStr name,
                                      EnsPSeqregion *Psr);

AjBool ensSeqregionadaptorFetchByNamefuzzy(EnsPSeqregionadaptor sra,
                                           const EnsPCoordsystem cs,
                                           const AjPStr name,
                                           EnsPSeqregion *Psr);

AjBool ensSeqregionadaptorFetchBySynonym(EnsPSeqregionadaptor sra,
                                         const AjPStr synonym,
                                         EnsPSeqregion *Psr);

AjBool ensSeqregionadaptorIsLocusreferencegenomic(EnsPSeqregionadaptor sra,
                                                  const EnsPSeqregion sr,
                                                  AjBool *Presult);

AjBool ensSeqregionadaptorIsNonreference(EnsPSeqregionadaptor sra,
                                         const EnsPSeqregion sr,
                                         AjBool *Presult);

/* Ensembl Sequence Region Synonym */

EnsPSeqregionsynonym ensSeqregionsynonymNewCpy(EnsPSeqregionsynonym srs);

EnsPSeqregionsynonym ensSeqregionsynonymNewIni(
    EnsPSeqregionsynonymadaptor srsa,
    ajuint identifier,
    EnsPExternaldatabase edb,
    AjPStr name,
    ajuint srid);

EnsPSeqregionsynonym ensSeqregionsynonymNewRef(EnsPSeqregionsynonym srs);

void ensSeqregionsynonymDel(EnsPSeqregionsynonym *Psrs);

EnsPSeqregionsynonymadaptor ensSeqregionsynonymGetAdaptor(
    const EnsPSeqregionsynonym srs);

EnsPExternaldatabase ensSeqregionsynonymGetExternaldatabase(
    const EnsPSeqregionsynonym srs);

ajuint ensSeqregionsynonymGetIdentifier(
    const EnsPSeqregionsynonym srs);

AjPStr ensSeqregionsynonymGetName(
    const EnsPSeqregionsynonym srs);

ajuint ensSeqregionsynonymGetSeqregionidentifier(
    const EnsPSeqregionsynonym srs);

AjBool ensSeqregionsynonymSetAdaptor(EnsPSeqregionsynonym srs,
                                     EnsPSeqregionsynonymadaptor srsa);

AjBool ensSeqregionsynonymSetExternaldatabase(EnsPSeqregionsynonym srs,
                                              EnsPExternaldatabase edb);

AjBool ensSeqregionsynonymSetIdentifier(EnsPSeqregionsynonym srs,
                                        ajuint identifier);

AjBool ensSeqregionsynonymSetName(EnsPSeqregionsynonym srs,
                                  AjPStr name);

AjBool ensSeqregionsynonymSetSeqregionidentifier(EnsPSeqregionsynonym srs,
                                                 ajuint srid);

AjBool ensSeqregionsynonymTrace(const EnsPSeqregionsynonym srs, ajuint level);

size_t ensSeqregionsynonymCalculateMemsize(const EnsPSeqregionsynonym srs);

/* Ensembl Sequence Region Synonym Adaptor */

EnsPSeqregionsynonymadaptor ensRegistryGetSeqregionsynonymadaptor(
    EnsPDatabaseadaptor dba);

EnsPSeqregionsynonymadaptor ensSeqregionsynonymadaptorNew(
    EnsPDatabaseadaptor dba);

void ensSeqregionsynonymadaptorDel(EnsPSeqregionsynonymadaptor *Psrsa);

EnsPBaseadaptor ensSeqregionsynonymadaptorGetBaseadaptor(
    EnsPSeqregionsynonymadaptor srsa);

EnsPDatabaseadaptor ensSeqregionsynonymadaptorGetDatabaseadaptor(
    EnsPSeqregionsynonymadaptor srsa);

AjBool ensSeqregionsynonymadaptorFetchAllbySeqregion(
    EnsPSeqregionsynonymadaptor srsa,
    const EnsPSeqregion sr,
    AjPList srss);

AjBool ensSeqregionsynonymadaptorFetchByIdentifier(
    EnsPSeqregionsynonymadaptor srsa,
    ajuint identifier,
    EnsPSeqregionsynonym *Psrs);

AjBool ensSeqregionsynonymadaptorFetchBySynonym(
    EnsPSeqregionsynonymadaptor srsa,
    const AjPStr synonym,
    EnsPSeqregionsynonym *Psrs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSSEQREGION_H */

enssequence.h/  1414437295  1010  513   100644  5481      `
/* @include enssequence *******************************************************
**
** Ensembl Sequence functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.15 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:28:48 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSSEQUENCE_H
#define ENSSEQUENCE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensslice.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPSequenceadaptor **************************************************
**
** Ensembl Sequence Adaptor.
**
** @alias EnsSSequenceadaptor
** @alias EnsOSequenceadaptor
**
** @attr Adaptor [EnsPDatabaseadaptor] Ensembl Database Adaptor.
** @attr Cache [EnsPCache] Ensembl LRU Cache.
** @@
******************************************************************************/

typedef struct EnsSSequenceadaptor
{
    EnsPDatabaseadaptor Adaptor;
    EnsPCache Cache;
} EnsOSequenceadaptor;

#define EnsPSequenceadaptor EnsOSequenceadaptor*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Sequence Adaptor */

EnsPSequenceadaptor ensRegistryGetSequenceadaptor(
    EnsPDatabaseadaptor dba);

EnsPSequenceadaptor ensSequenceadaptorNew(
    EnsPDatabaseadaptor dba);

void ensSequenceadaptorDel(EnsPSequenceadaptor *Psqa);

AjBool ensSequenceadaptorCacheClear(EnsPSequenceadaptor sqa);

EnsPDatabaseadaptor ensSequenceadaptorGetDatabaseadaptor(
    EnsPSequenceadaptor sqa);

AjBool ensSequenceadaptorFetchSeqregionAllSeq(EnsPSequenceadaptor sqa,
                                              const EnsPSeqregion sr,
                                              AjPSeq *Psequence);

AjBool ensSequenceadaptorFetchSeqregionAllStr(EnsPSequenceadaptor sqa,
                                              const EnsPSeqregion sr,
                                              AjPStr *Psequence);

AjBool ensSequenceadaptorFetchSeqregionSubSeq(EnsPSequenceadaptor sqa,
                                              const EnsPSeqregion sr,
                                              ajuint start,
                                              ajuint length,
                                              AjPSeq *Psequence);

AjBool ensSequenceadaptorFetchSeqregionSubStr(EnsPSequenceadaptor sqa,
                                              const EnsPSeqregion sr,
                                              ajuint start,
                                              ajuint length,
                                              AjPStr *Psequence);

AjBool ensSequenceadaptorFetchSliceAllSeq(EnsPSequenceadaptor sqa,
                                          EnsPSlice slice,
                                          AjPSeq *Psequence);

AjBool ensSequenceadaptorFetchSliceAllStr(EnsPSequenceadaptor sqa,
                                          EnsPSlice slice,
                                          AjPStr *Psequence);

AjBool ensSequenceadaptorFetchSliceSubSeq(EnsPSequenceadaptor sqa,
                                          EnsPSlice slice,
                                          ajint start,
                                          ajint end,
                                          ajint strand,
                                          AjPSeq *Psequence);

AjBool ensSequenceadaptorFetchSliceSubStr(EnsPSequenceadaptor sqa,
                                          EnsPSlice slice,
                                          ajint start,
                                          ajint end,
                                          ajint strand,
                                          AjPStr *Psequence);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSSEQUENCE_H */

/505            1414437295  1010  513   100644  4431      `
/* @include enssequenceedit ***************************************************
**
** Ensembl Sequence Edit functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.12 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/04 10:30:24 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSSEQUENCEEDIT_H
#define ENSSEQUENCEEDIT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensattribute.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPSequenceedit *****************************************************
**
** Ensembl Sequence Edit.
**
** @alias EnsSSequenceedit
** @alias EnsOSequenceedit
**
** @cc Bio::EnsEMBL::Attribute
** @attr Attribute [EnsPAttribute] Ensembl Attribute
** @attr Sequence [AjPStr] Alternative sequence
** @attr Start [ajuint] Start coordinate
** @attr End [ajuint] End coordinate
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSSequenceedit
{
    EnsPAttribute Attribute;
    AjPStr Sequence;
    ajuint Start;
    ajuint End;
    ajuint Use;
    ajuint Padding;
} EnsOSequenceedit;

#define EnsPSequenceedit EnsOSequenceedit*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Sequence Edit */

EnsPSequenceedit ensSequenceeditNewAttribute(EnsPAttribute attribute);

EnsPSequenceedit ensSequenceeditNewCpy(const EnsPSequenceedit se);

EnsPSequenceedit ensSequenceeditNewIni(EnsPAttributetype at,
                                       AjPStr sequence,
                                       ajuint start,
                                       ajuint end);

EnsPSequenceedit ensSequenceeditNewRef(EnsPSequenceedit se);

void ensSequenceeditDel(EnsPSequenceedit *Pse);

EnsPAttribute ensSequenceeditGetAttribute(const EnsPSequenceedit se);

ajuint ensSequenceeditGetEnd(const EnsPSequenceedit se);

AjPStr ensSequenceeditGetSequence(const EnsPSequenceedit se);

ajuint ensSequenceeditGetStart(const EnsPSequenceedit se);

AjBool ensSequenceeditTrace(const EnsPSequenceedit se, ajuint level);

ajint ensSequenceeditCalculateDifference(const EnsPSequenceedit se);

size_t ensSequenceeditCalculateMemsize(const EnsPSequenceedit se);

AjBool ensSequenceeditApplyString(const EnsPSequenceedit se,
                                  ajint offset,
                                  AjPStr *Psequence);

AjBool ensListSequenceeditSortStartAscending(AjPList ses);

AjBool ensListSequenceeditSortStartDescending(AjPList ses);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSSEQUENCEEDIT_H */

enssimple.h/    1414437295  1010  513   100644  6605      `
/* @include enssimple *********************************************************
**
** Ensembl Simple Feature functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.8 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:31:15 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSSIMPLE_H
#define ENSSIMPLE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensfeature.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPSimplefeatureadaptor ********************************************
**
** Ensembl Simple Feature Adaptor.
** Defined as an alias in EnsPFeatureadaptor.
**
**
** #cc Bio::EnsEMBL::DBSQL::SimpleFeatureAdaptor
** ##
******************************************************************************/

#define EnsPSimplefeatureadaptor EnsPFeatureadaptor




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPSimplefeature ****************************************************
**
** Ensembl Simple Feature.
**
** @alias EnsSSimplefeature
** @alias EnsOSimplefeature
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPSimplefeatureadaptor] Ensembl Simple Feature Adaptor
** @cc Bio::EnsEMBL::Feature
** @attr Feature [EnsPFeature] Ensembl Feature
** @cc Bio::EnsEMBL::Simplefeature
** @attr Displaylabel [AjPStr] Display label
** @attr Score [double] Score
** @@
******************************************************************************/

typedef struct EnsSSimplefeature
{
    ajuint Use;
    ajuint Identifier;
    EnsPSimplefeatureadaptor Adaptor;
    EnsPFeature Feature;
    AjPStr Displaylabel;
    double Score;
} EnsOSimplefeature;

#define EnsPSimplefeature EnsOSimplefeature*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Simple Feature */

EnsPSimplefeature ensSimplefeatureNewCpy(const EnsPSimplefeature object);

EnsPSimplefeature ensSimplefeatureNewIni(EnsPSimplefeatureadaptor pfa,
                                         ajuint identifier,
                                         EnsPFeature feature,
                                         AjPStr label,
                                         double score);

EnsPSimplefeature ensSimplefeatureNewRef(EnsPSimplefeature sf);

void ensSimplefeatureDel(EnsPSimplefeature *Psf);

EnsPSimplefeatureadaptor ensSimplefeatureGetAdaptor(
    const EnsPSimplefeature sf);

AjPStr ensSimplefeatureGetDisplaylabel(
    const EnsPSimplefeature sf);

EnsPFeature ensSimplefeatureGetFeature(
    const EnsPSimplefeature sf);

ajuint ensSimplefeatureGetIdentifier(
    const EnsPSimplefeature sf);

double ensSimplefeatureGetScore(
    const EnsPSimplefeature sf);

AjBool ensSimplefeatureSetAdaptor(EnsPSimplefeature sf,
                                  EnsPSimplefeatureadaptor sfa);

AjBool ensSimplefeatureSetDisplaylabel(EnsPSimplefeature sf, AjPStr label);

AjBool ensSimplefeatureSetFeature(EnsPSimplefeature sf, EnsPFeature feature);

AjBool ensSimplefeatureSetIdentifier(EnsPSimplefeature sf, ajuint identifier);

AjBool ensSimplefeatureSetScore(EnsPSimplefeature sf, double score);

AjBool ensSimplefeatureTrace(const EnsPSimplefeature sf, ajuint level);

size_t ensSimplefeatureCalculateMemsize(const EnsPSimplefeature sf);

/* AJAX List of Ensembl Simple Feature objects */

AjBool ensListSimplefeatureSortEndAscending(AjPList sfs);

AjBool ensListSimplefeatureSortEndDescending(AjPList sfs);

AjBool ensListSimplefeatureSortIdentifierAscending(AjPList sfs);

AjBool ensListSimplefeatureSortStartAscending(AjPList sfs);

AjBool ensListSimplefeatureSortStartDescending(AjPList sfs);

/* Ensembl Simple Feature Adaptor */

EnsPSimplefeatureadaptor ensRegistryGetSimplefeatureadaptor(
    EnsPDatabaseadaptor dba);

EnsPSimplefeatureadaptor ensSimplefeatureadaptorNew(
    EnsPDatabaseadaptor dba);

void ensSimplefeatureadaptorDel(EnsPSimplefeatureadaptor *Psfa);

EnsPBaseadaptor ensSimplefeatureadaptorGetBaseadaptor(
    EnsPSimplefeatureadaptor sfa);

EnsPDatabaseadaptor ensSimplefeatureadaptorGetDatabaseadaptor(
    EnsPSimplefeatureadaptor sfa);

EnsPFeatureadaptor ensSimplefeatureadaptorGetFeatureadaptor(
    EnsPSimplefeatureadaptor sfa);

AjBool ensSimplefeatureadaptorFetchAllbyAnalysisname(
    EnsPSimplefeatureadaptor sfa,
    const AjPStr anname,
    AjPList sfs);

AjBool ensSimplefeatureadaptorFetchAllbySlice(EnsPSimplefeatureadaptor sfa,
                                              EnsPSlice slice,
                                              const AjPStr anname,
                                              AjPList sfs);

AjBool ensSimplefeatureadaptorFetchAllbySlicescore(
    EnsPSimplefeatureadaptor sfa,
    EnsPSlice slice,
    double score,
    const AjPStr anname,
    AjPList sfs);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSSIMPLE_H */

ensslice.h/     1414437295  1010  513   100644  13741     `
/* @include ensslice **********************************************************
**
** Ensembl Slice functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.28 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/02/20 22:15:10 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSSLICE_H
#define ENSSLICE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensseqregion.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsERepeatMaskType ***************************************************
**
** Ensembl Repeat Mask Type enumeration
**
** @value ensERepeatMaskTypeNULL Null
** @value ensERepeatMaskTypeNone None
** @value ensERepeatMaskTypeSoft Soft-masking
** @value ensERepeatMaskTypeHard Hard-masking
** @@
******************************************************************************/

typedef enum EnsORepeatMaskType
{
    ensERepeatMaskTypeNULL,
    ensERepeatMaskTypeNone,
    ensERepeatMaskTypeSoft,
    ensERepeatMaskTypeHard
} EnsERepeatMaskType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPRepeatmaskedslice ************************************************
**
** Ensembl Repeat-Masked Slice.
**
** Holds information about a masked genome sequence slice.
**
** @alias EnsSRepeatmaskedslice
** @alias EnsORepeatmaskedslice
**
** @attr Slice [EnsPSlice] Ensembl Slice.
** @attr Analysisnames [AjPList] AJAX List of AJAX String objects
**                               (Ensembl Analysis names)
** @attr Masking [AjPTable] AJAX Table of Repeat Consensus types, classes or
**                          names and sequence masking types
** @attr Use [ajuint] Use counter
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSRepeatmaskedslice
{
    EnsPSlice Slice;
    AjPList Analysisnames;
    AjPTable Masking;
    ajuint Use;
    ajuint Padding;
} EnsORepeatmaskedslice;

#define EnsPRepeatmaskedslice EnsORepeatmaskedslice*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Slice */

EnsPSlice ensSliceNewCpy(const EnsPSlice slice);

EnsPSlice ensSliceNewIni(EnsPSliceadaptor sla,
                         EnsPSeqregion sr,
                         ajint start,
                         ajint end,
                         ajint strand);

EnsPSlice ensSliceNewRef(EnsPSlice slice);

EnsPSlice ensSliceNewSeq(EnsPSliceadaptor sla,
                         EnsPSeqregion sr,
                         ajint start,
                         ajint end,
                         ajint strand,
                         AjPStr sequence);

void ensSliceDel(EnsPSlice *Pslice);

EnsPSliceadaptor ensSliceGetAdaptor(const EnsPSlice slice);

ajint ensSliceGetEnd(const EnsPSlice slice);

EnsPSeqregion ensSliceGetSeqregion(const EnsPSlice slice);

const AjPStr ensSliceGetSequence(const EnsPSlice slice);

ajint ensSliceGetStart(const EnsPSlice slice);

ajint ensSliceGetStrand(const EnsPSlice slice);

EnsESliceTopology ensSliceLoadTopology(EnsPSlice slice);

AjBool ensSliceSetAdaptor(EnsPSlice slice, EnsPSliceadaptor sla);

AjBool ensSliceSetSequence(EnsPSlice slice, AjPStr sequence);

AjBool ensSliceSetTopology(EnsPSlice slice, EnsESliceTopology sltp);

AjBool ensSliceTrace(const EnsPSlice slice, ajuint level);

const AjPStr ensSliceGetCoordsystemName(const EnsPSlice slice);

EnsPCoordsystem ensSliceGetCoordsystemObject(const EnsPSlice slice);

const AjPStr ensSliceGetCoordsystemVersion(const EnsPSlice slice);

ajuint ensSliceGetSeqregionIdentifier(const EnsPSlice slice);

ajint ensSliceGetSeqregionLength(const EnsPSlice slice);

const AjPStr ensSliceGetSeqregionName(const EnsPSlice slice);

const AjPTrn ensSliceGetTranslation(EnsPSlice slice);

ajint ensSliceCalculateCentrepoint(EnsPSlice slice);

ajuint ensSliceCalculateLength(EnsPSlice slice);

size_t ensSliceCalculateMemsize(const EnsPSlice slice);

ajuint ensSliceCalculateRegion(EnsPSlice slice, ajint start, ajint end);

AjBool ensSliceFetchAllAttributes(EnsPSlice slice,
                                  const AjPStr code,
                                  AjPList attributes);

AjBool ensSliceFetchAllRepeatfeatures(EnsPSlice slice,
                                      const AjPStr anname,
                                      const AjPStr rctype,
                                      const AjPStr rcclass,
                                      const AjPStr rcname,
                                      AjPList rfs);

AjBool ensSliceFetchAllSequenceedits(EnsPSlice slice,
                                     AjPList ses);

AjBool ensSliceFetchName(const EnsPSlice slice, AjPStr *Pname);

AjBool ensSliceFetchSequenceAllSeq(EnsPSlice slice, AjPSeq *Psequence);

AjBool ensSliceFetchSequenceAllStr(EnsPSlice slice, AjPStr *Psequence);

AjBool ensSliceFetchSequenceSubSeq(EnsPSlice slice,
                                   ajint start,
                                   ajint end,
                                   ajint strand,
                                   AjPSeq *Psequence);

AjBool ensSliceFetchSequenceSubStr(EnsPSlice slice,
                                   ajint start,
                                   ajint end,
                                   ajint strand,
                                   AjPStr *Psequence);

AjBool ensSliceFetchSliceinverted(EnsPSlice slice,
                                  EnsPSlice *Pslice);

AjBool ensSliceFetchSlicesub(EnsPSlice slice,
                             ajint start,
                             ajint end,
                             ajint strand,
                             EnsPSlice *Pslice);

AjBool ensSliceFetchSliceexpanded(EnsPSlice slice,
                                  ajint five,
                                  ajint three,
                                  AjBool force,
                                  ajint *Pfshift,
                                  ajint *Ptshift,
                                  EnsPSlice *Pslice);

int ensSliceCompareIdentifierAscending(const EnsPSlice slice1,
                                       const EnsPSlice slice2);

AjBool ensSliceMatch(const EnsPSlice slice1, const EnsPSlice slice2);

AjBool ensSliceSimilarity(const EnsPSlice slice1, const EnsPSlice slice2);

AjBool ensSliceIsCircular(EnsPSlice slice, AjBool *Presult);

AjBool ensSliceIsNonreference(EnsPSlice slice, AjBool *Presult);

AjBool ensSliceIsToplevel(EnsPSlice slice, AjBool *Presult);

AjBool ensSliceProject(EnsPSlice slice,
                       const AjPStr csname,
                       const AjPStr csversion,
                       AjPList pss);

AjBool ensSliceProjectslice(EnsPSlice srcslice,
                            EnsPSlice trgslice,
                            AjPList pss);

EnsESliceType ensSliceTypeFromSeqregion(EnsPSeqregion sr);

EnsESliceType ensSliceTypeFromStr(const AjPStr type);

const char *ensSliceTypeToChar(EnsESliceType ste);

AjBool ensListSliceRemoveDuplications(AjPList slices);

AjBool ensListSliceSortIdentifierAscending(AjPList slices);

AjBool ensListSliceSortIdentifierDescending(AjPList slices);

AjBool ensListSliceSortNameAscending(AjPList slices);

AjBool ensListSliceSortNameDescending(AjPList slices);

/* Ensembl Slice Adaptor */

EnsPSliceadaptor ensRegistryGetSliceadaptor(
    EnsPDatabaseadaptor dba);

EnsPSliceadaptor ensSliceadaptorNew(
    EnsPDatabaseadaptor dba);

void ensSliceadaptorDel(EnsPSliceadaptor *Psla);

EnsPDatabaseadaptor ensSliceadaptorGetDatabaseadaptor(
    EnsPSliceadaptor sla);

AjBool ensSliceadaptorCacheInsert(EnsPSliceadaptor sla, EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchAll(EnsPSliceadaptor sla,
                               const AjPStr csname,
                               const AjPStr csversion,
                               AjBool nonreference,
                               AjBool duplicates,
                               AjBool lrg,
                               AjPList slices);

AjBool ensSliceadaptorFetchAllbyRegionunique(EnsPSliceadaptor sla,
                                             const AjPStr csname,
                                             const AjPStr csversion,
                                             const AjPStr srname,
                                             ajint srstart,
                                             ajint srend,
                                             ajint srstrand,
                                             AjPList slices);

AjBool ensSliceadaptorFetchByFeature(EnsPSliceadaptor sla,
                                     const EnsPFeature feature,
                                     ajint flank,
                                     EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchByLocation(EnsPSliceadaptor sla,
                                      const AjPStr location,
                                      EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchByMapperresult(EnsPSliceadaptor sla,
                                          const EnsPMapperresult mr,
                                          EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchByName(EnsPSliceadaptor sla,
                                  const AjPStr name,
                                  EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchByRegion(EnsPSliceadaptor sla,
                                    const AjPStr csname,
                                    const AjPStr csversion,
                                    const AjPStr srname,
                                    ajint srstart,
                                    ajint srend,
                                    ajint srstrand,
                                    EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchBySeqregionIdentifier(EnsPSliceadaptor sla,
                                                 ajuint srid,
                                                 ajint srstart,
                                                 ajint srend,
                                                 ajint srstrand,
                                                 EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchBySeqregionName(EnsPSliceadaptor sla,
                                           const AjPStr csname,
                                           const AjPStr csversion,
                                           const AjPStr srname,
                                           EnsPSlice *Pslice);

AjBool ensSliceadaptorFetchBySlice(EnsPSliceadaptor sla,
                                   EnsPSlice slice,
                                   ajint start,
                                   ajint end,
                                   ajint strand,
                                   EnsPSlice *Pslice);

AjBool ensSliceadaptorRetrieveNormalisedprojection(EnsPSliceadaptor sla,
                                                   EnsPSlice slice,
                                                   AjPList pss);

/* Ensembl Repeat-Masked Slice */

EnsPRepeatmaskedslice ensRepeatmaskedsliceNewCpy(
    const EnsPRepeatmaskedslice rmslice);

EnsPRepeatmaskedslice ensRepeatmaskedsliceNewIni(EnsPSlice slice,
                                                 AjPList annames,
                                                 AjPTable masking);

EnsPRepeatmaskedslice ensRepeatmaskedsliceNewRef(
    EnsPRepeatmaskedslice rmslice);

void ensRepeatmaskedsliceDel(EnsPRepeatmaskedslice *Prmslice);

AjBool ensRepeatmaskedsliceTrace(const EnsPRepeatmaskedslice rmslice,
                                 ajuint level);

AjBool ensRepeatmaskedsliceFetchSequenceSeq(EnsPRepeatmaskedslice rmslice,
                                            EnsERepeatMaskType mtype,
                                            AjPSeq *Psequence);

AjBool ensRepeatmaskedsliceFetchSequenceStr(EnsPRepeatmaskedslice rmslice,
                                            EnsERepeatMaskType mtype,
                                            AjPStr *Psequence);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSSLICE_H */

enssoftware.h/  1414437295  1010  513   100644  2488      `
/* @include enssoftware *******************************************************
**
** Ensembl Software functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.9 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/03/09 20:33:25 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSSOFTWARE_H
#define ENSSOFTWARE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

extern const char *ensKSoftwareVersion;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Software */

const char *ensSoftwareGetVersion(void);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSSOFTWARE_H */
ensstorable.h/  1414437295  1010  513   100644  4523      `
/* @include ensstorable *******************************************************
**
** Ensembl Storable functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.16 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:08:40 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSSTORABLE_H
#define ENSSTORABLE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdatabaseconnection.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @enum EnsEStorableType *****************************************************
**
** Ensembl Storable Type enumeration
**
** @value ensEStorableTypeNULL Null
** @value ensEStorableTypeAnalysis Analysis
** @value ensEStorableTypeRepeatconsensus Repeat consensus
** @@
******************************************************************************/

typedef enum EnsOStorableType
{
    ensEStorableTypeNULL,
    ensEStorableTypeAnalysis,
    ensEStorableTypeRepeatconsensus
} EnsEStorableType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPStorable *********************************************************
**
** Ensembl Storable.
**
** @alias EnsSStorable
** @alias EnsOStorable
**
** @attr Use [ajuint] Use counter
** @attr Identifier [ajuint] Internal SQL database identifier (primary key)
** @attr Adaptor [void*] Ensembl Object Adaptor
** @attr Type [EnsEStorableType] Ensembl Storable Object Type
** @attr Padding [ajuint] Padding to alignment boundary
**
** @@
******************************************************************************/

typedef struct EnsSStorable
{
    ajuint Use;
    ajuint Identifier;
    void *Adaptor;
    EnsEStorableType Type;
    ajuint Padding;
} EnsOStorable;

#define EnsPStorable EnsOStorable*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Storable */

EnsPStorable ensStorableNewCpy(const EnsPStorable storable);

EnsPStorable ensStorableNewIni(EnsEStorableType type,
                               ajuint identifier,
                               void *adaptor);

EnsPStorable ensStorableNewRef(EnsPStorable storable);

void ensStorableDel(EnsPStorable *Pstorable);

void *ensStorableGetAdaptor(const EnsPStorable storable);

ajuint ensStorableGetIdentifier(const EnsPStorable storable);

EnsEStorableType ensStorableGetType(const EnsPStorable storable);

AjBool ensStorableSetIdentifier(EnsPStorable storable, ajuint identifier);

AjBool ensStorableSetAdaptor(EnsPStorable storable, void *adaptor);

AjBool ensStorableIsStored(const EnsPStorable storable,
                           const EnsPDatabaseconnection dbc);

/* AJAX List */

AjBool ensListUintSortAscendingUnique(AjPList list);

AjBool ensListUintSortDescendingUnique(AjPList list);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSSTORABLE_H */

enstable.h/     1414437295  1010  513   100644  3280      `
/* @include enstable **********************************************************
**
** Ensembl Table functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.17 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:09:10 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSTABLE_H
#define ENSTABLE_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/*
** AJAX Table of AJAX String key data and
** generic value data.
*/

AjBool ensTablestrFromList(
    AjPTable table,
    AjPStr (*FobjectGetKey) (const void *object),
    AjPList list);

AjBool ensTablestrToList(AjPTable table, AjPList list);

/*
** AJAX Table of AJAX unsigned integer key data and
** generic value data.
*/

AjBool ensTableuintFromList(
    AjPTable table,
    ajuint (*FobjectGetIdentifier) (const void *object),
    AjPList list);

AjBool ensTableuintToList(AjPTable table, AjPList list);

/*
** AJAX Table of
** AJAX unsigned integer key data and
** AJAX String-List value data.
*/

AjPTable ensTableuintliststrNewLen(ajuint size);

void ensTableuintliststrClear(AjPTable table);

void ensTableuintliststrDelete(AjPTable *Ptable);

AjBool ensTableuintliststrRegister(AjPTable table,
                                   ajuint identifier,
                                   AjPStr str);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSTABLE_H */
enstranscript.h/1414437295  1010  513   100644  17312     `
/* @include enstranscript *****************************************************
**
** Ensembl Transcript functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.38 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:09:28 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSTRANSCRIPT_H
#define ENSTRANSCRIPT_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Transcript */

EnsPTranscript ensTranscriptNewCpy(const EnsPTranscript transcript);

EnsPTranscript ensTranscriptNewIni(EnsPTranscriptadaptor tca,
                                   ajuint identifier,
                                   EnsPFeature feature,
                                   EnsPDatabaseentry displaydbe,
                                   AjPStr description,
                                   AjPStr biotype,
                                   EnsETranscriptStatus status,
                                   AjBool current,
                                   AjPStr stableid,
                                   ajuint version,
                                   AjPStr cdate,
                                   AjPStr mdate,
                                   AjPList exons);

EnsPTranscript ensTranscriptNewRef(EnsPTranscript transcript);

AjBool ensTranscriptClearIntronsupportingevidences(EnsPTranscript transcript);

void ensTranscriptDel(EnsPTranscript *Ptranscript);

EnsPTranscriptadaptor ensTranscriptGetAdaptor(const EnsPTranscript transcript);

AjPStr ensTranscriptGetBiotype(const EnsPTranscript transcript);

const AjBool* ensTranscriptGetCanonical(const EnsPTranscript transcript);

AjBool ensTranscriptGetCurrent(const EnsPTranscript transcript);

AjPStr ensTranscriptGetDateCreation(const EnsPTranscript transcript);

AjPStr ensTranscriptGetDateModification(const EnsPTranscript transcript);

AjPStr ensTranscriptGetDescription(const EnsPTranscript transcript);

EnsPDatabaseentry ensTranscriptGetDisplayreference(
    const EnsPTranscript transcript);

EnsPFeature ensTranscriptGetFeature(const EnsPTranscript transcript);

ajuint ensTranscriptGetGeneidentifier(const EnsPTranscript transcript);

ajuint ensTranscriptGetIdentifier(const EnsPTranscript transcript);

AjBool ensTranscriptGetSequenceedits(const EnsPTranscript transcript);

AjPStr ensTranscriptGetStableidentifier(const EnsPTranscript transcript);

EnsETranscriptStatus ensTranscriptGetStatus(const EnsPTranscript transcript);

ajuint ensTranscriptGetVersion(const EnsPTranscript transcript);

const AjPList ensTranscriptLoadAlternativetranslations(
    EnsPTranscript transcript);

const AjPList ensTranscriptLoadAttributes(
    EnsPTranscript transcript);

const AjBool* ensTranscriptLoadCanonical(
    EnsPTranscript transcript);

const AjPList ensTranscriptLoadDatabaseentries(
    EnsPTranscript transcript);

const AjPList ensTranscriptLoadExons(
    EnsPTranscript transcript);

const AjPList ensTranscriptLoadIntronsupportingevidences(
    EnsPTranscript transcript);

const AjPList ensTranscriptLoadSupportingfeatures(
    EnsPTranscript transcript);

EnsPTranslation ensTranscriptLoadTranslation(
    EnsPTranscript transcript);

AjBool ensTranscriptSetAdaptor(EnsPTranscript transcript,
                               EnsPTranscriptadaptor tca);

AjBool ensTranscriptSetBiotype(EnsPTranscript transcript,
                               AjPStr biotype);

AjBool ensTranscriptSetCanonical(EnsPTranscript transcript,
                                 AjBool canonical);

AjBool ensTranscriptSetCurrent(EnsPTranscript transcript,
                               AjBool current);

AjBool ensTranscriptSetDateCreation(EnsPTranscript transcript,
                                    AjPStr cdate);

AjBool ensTranscriptSetDateModification(EnsPTranscript transcript,
                                        AjPStr mdate);

AjBool ensTranscriptSetDescription(EnsPTranscript transcript,
                                   AjPStr description);

AjBool ensTranscriptSetDisplayreference(EnsPTranscript transcript,
                                        EnsPDatabaseentry displaydbe);

AjBool ensTranscriptSetFeature(EnsPTranscript transcript,
                               EnsPFeature feature);

AjBool ensTranscriptSetGeneidentifier(EnsPTranscript transcript,
                                      ajuint geneid);

AjBool ensTranscriptSetIdentifier(EnsPTranscript transcript,
                                  ajuint identifier);

AjBool ensTranscriptSetSequenceedits(EnsPTranscript transcript,
                                     AjBool enablese);

AjBool ensTranscriptSetStableidentifier(EnsPTranscript transcript,
                                        AjPStr stableid);

AjBool ensTranscriptSetStatus(EnsPTranscript transcript,
                              EnsETranscriptStatus status);

AjBool ensTranscriptSetTranslation(EnsPTranscript transcript,
                                   EnsPTranslation translation);

AjBool ensTranscriptSetVersion(EnsPTranscript transcript,
                               ajuint version);

AjBool ensTranscriptAddAlternativetranslation(
    EnsPTranscript transcript,
    EnsPTranslation translation);

AjBool ensTranscriptAddAttribute(
    EnsPTranscript transcript,
    EnsPAttribute attribute);

AjBool ensTranscriptAddDatabaseentry(
    EnsPTranscript transcript,
    EnsPDatabaseentry dbe);

AjBool ensTranscriptAddExon(
    EnsPTranscript transcript,
    EnsPExon exon,
    ajint rank);

AjBool ensTranscriptAddIntronsupportingevidence(
    EnsPTranscript transcript,
    EnsPIntronsupportingevidence ise);

AjBool ensTranscriptTrace(const EnsPTranscript transcript, ajuint level);

AjBool ensTranscriptCalculateCoordinates(EnsPTranscript transcript);

ajuint ensTranscriptCalculateLength(EnsPTranscript transcript);

size_t ensTranscriptCalculateMemsize(const EnsPTranscript transcript);

ajint ensTranscriptCalculatePhaseStart(EnsPTranscript transcript);

ajint ensTranscriptCalculateSliceCodingEnd(
    EnsPTranscript transcript,
    EnsPTranslation translation);

ajint ensTranscriptCalculateSliceCodingStart(
    EnsPTranscript transcript,
    EnsPTranslation translation);

ajuint ensTranscriptCalculateTranscriptCodingEnd(
    EnsPTranscript transcript,
    EnsPTranslation translation);

ajuint ensTranscriptCalculateTranscriptCodingStart(
    EnsPTranscript transcript,
    EnsPTranslation translation);

EnsETranscriptStatus ensTranscriptStatusFromStr(const AjPStr status);

const char *ensTranscriptStatusToChar(EnsETranscriptStatus status);

AjBool ensTranscriptSimilarity(EnsPTranscript transcript1,
                               EnsPTranscript transcript2);

EnsPTranscript ensTranscriptTransfer(EnsPTranscript transcript,
                                     EnsPSlice slice);

EnsPTranscript ensTranscriptTransform(EnsPTranscript transcript,
                                      const AjPStr csname,
                                      const AjPStr csversion);

AjBool ensTranscriptFetchAllAttributes(EnsPTranscript transcript,
                                       const AjPStr code,
                                       AjPList attributes);

AjBool ensTranscriptFetchAllConstitutiveexons(EnsPTranscript transcript,
                                              AjPList exons);

AjBool ensTranscriptFetchAllDatabaseentries(EnsPTranscript transcript,
                                            const AjPStr name,
                                            EnsEExternaldatabaseType type,
                                            AjPList dbes);

AjBool ensTranscriptFetchAllIntrons(EnsPTranscript transcript,
                                    AjPList introns);

AjBool ensTranscriptFetchAllSequenceedits(EnsPTranscript transcript,
                                          AjPList ses);

AjBool ensTranscriptFetchDisplayidentifier(const EnsPTranscript transcript,
                                           AjPStr *Pidentifier);

AjBool ensTranscriptFetchFeatureUtrfive(EnsPTranscript transcript,
                                        EnsPTranslation translation,
                                        EnsPFeature *Pfeature);

AjBool ensTranscriptFetchFeatureUtrthree(EnsPTranscript transcript,
                                         EnsPTranslation translation,
                                         EnsPFeature *Pfeature);

AjBool ensTranscriptFetchGene(const EnsPTranscript transcript,
                              EnsPGene *Pgene);

AjBool ensTranscriptFetchSequenceCodingStr(EnsPTranscript transcript,
                                           EnsPTranslation translation,
                                           AjPStr *Psequence);

AjBool ensTranscriptFetchSequenceTranscriptSeq(EnsPTranscript transcript,
                                               AjPSeq *Psequence);

AjBool ensTranscriptFetchSequenceTranscriptStr(EnsPTranscript transcript,
                                               AjPStr *Psequence);

AjBool ensTranscriptFetchSequenceTranslationSeq(EnsPTranscript transcript,
                                                EnsPTranslation translation,
                                                AjPSeq *Psequence);

AjBool ensTranscriptFetchSequenceTranslationStr(EnsPTranscript transcript,
                                                EnsPTranslation translation,
                                                AjPStr *Psequence);

AjBool ensTranscriptFetchSequenceUtrfiveStr(EnsPTranscript transcript,
                                            EnsPTranslation translation,
                                            AjPStr *Psequence);

AjBool ensTranscriptFetchSequenceUtrthreeStr(EnsPTranscript transcript,
                                             EnsPTranslation translation,
                                             AjPStr *Psequence);

AjBool ensTranscriptMapperInit(EnsPTranscript transcript, AjBool force);

AjBool ensTranscriptMapperCodingToslice(EnsPTranscript transcript,
                                        EnsPTranslation translation,
                                        ajint start,
                                        ajint end,
                                        AjPList mrs);

AjBool ensTranscriptMapperSliceTocoding(EnsPTranscript transcript,
                                        EnsPTranslation translation,
                                        ajint start,
                                        ajint end,
                                        ajint strand,
                                        AjPList mrs);

AjBool ensTranscriptMapperSliceTotranscript(EnsPTranscript transcript,
                                            ajint start,
                                            ajint end,
                                            ajint strand,
                                            AjPList mrs);

AjBool ensTranscriptMapperSliceTotranslation(EnsPTranscript transcript,
                                             EnsPTranslation translation,
                                             ajint start,
                                             ajint end,
                                             ajint strand,
                                             AjPList mrs);

AjBool ensTranscriptMapperTranscriptToslice(EnsPTranscript transcript,
                                            ajuint start,
                                            ajuint end,
                                            AjPList mrs);

AjBool ensTranscriptMapperTranslationToslice(EnsPTranscript transcript,
                                             EnsPTranslation translation,
                                             ajuint start,
                                             ajuint end,
                                             AjPList mrs);

/* AJAX LIst of Ensembl Transcript objects */

AjBool ensListTranscriptSortEndAscending(AjPList transcripts);

AjBool ensListTranscriptSortEndDescending(AjPList transcripts);

AjBool ensListTranscriptSortIdentifierAscending(AjPList transcripts);

AjBool ensListTranscriptSortStartAscending(AjPList transcripts);

AjBool ensListTranscriptSortStartDescending(AjPList transcripts);

AjBool ensSequenceAddFeatureTranscript(AjPSeq seq,
                                       EnsPTranscript transcript,
                                       AjPFeature *Pfeature);

/* Ensembl Transcript Adaptor */

EnsPTranscriptadaptor ensRegistryGetTranscriptadaptor(
    EnsPDatabaseadaptor dba);

EnsPTranscriptadaptor ensTranscriptadaptorNew(
    EnsPDatabaseadaptor dba);

void ensTranscriptadaptorDel(EnsPTranscriptadaptor *Ptca);

EnsPBaseadaptor ensTranscriptadaptorGetBaseadaptor(
    EnsPTranscriptadaptor tca);

EnsPDatabaseadaptor ensTranscriptadaptorGetDatabaseadaptor(
    EnsPTranscriptadaptor tca);

EnsPFeatureadaptor ensTranscriptadaptorGetFeatureadaptor(
    EnsPTranscriptadaptor tca);

AjBool ensTranscriptadaptorFetchAll(
    EnsPTranscriptadaptor tca,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyBiotype(
    EnsPTranscriptadaptor tca,
    const AjPStr biotype,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyExonidentifier(
    EnsPTranscriptadaptor tca,
    ajuint identifier,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyExonstableidentifier(
    EnsPTranscriptadaptor tca,
    const AjPStr stableid,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyExternaldatabasename(
    EnsPTranscriptadaptor tca,
    const AjPStr dbname,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyExternalname(
    EnsPTranscriptadaptor tca,
    const AjPStr name,
    const AjPStr dbname,
    AjBool override,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyGene(
    EnsPTranscriptadaptor tca,
    EnsPGene gene,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyIdentifiers(
    EnsPTranscriptadaptor tca,
    AjPTable transcripts);

AjBool ensTranscriptadaptorFetchAllbySlice(
    EnsPTranscriptadaptor tca,
    EnsPSlice slice,
    const AjPStr anname,
    const AjPStr constraint,
    AjBool loadexons,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchAllbyStableidentifier(
    EnsPTranscriptadaptor tca,
    const AjPStr stableid,
    AjPList transcripts);

AjBool ensTranscriptadaptorFetchByDisplaylabel(
    EnsPTranscriptadaptor tca,
    const AjPStr label,
    EnsPTranscript *Ptranscript);

AjBool ensTranscriptadaptorFetchByIdentifier(
    EnsPTranscriptadaptor tca,
    ajuint identifier,
    EnsPTranscript *Ptranscript);

AjBool ensTranscriptadaptorFetchByStableidentifier(
    EnsPTranscriptadaptor tca,
    const AjPStr stableid,
    ajuint version,
    EnsPTranscript *Ptranscript);

AjBool ensTranscriptadaptorFetchByTranslationidentifier(
    EnsPTranscriptadaptor tca,
    ajuint identifier,
    EnsPTranscript *Ptranscript);

AjBool ensTranscriptadaptorFetchByTranslationstableidentifier(
    EnsPTranscriptadaptor tca,
    const AjPStr stableid,
    EnsPTranscript *Ptranscript);

AjBool ensTranscriptadaptorRetrieveAllIdentifiers(
    EnsPTranscriptadaptor tca,
    AjPList identifiers);

AjBool ensTranscriptadaptorRetrieveAllStableidentifiers(
    EnsPTranscriptadaptor tca,
    AjPList stableids);

AjBool ensTranscriptadaptorRetrieveCanonical(
    EnsPTranscriptadaptor tca,
    EnsPTranscript transcript,
    AjBool *Pcanonical);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSTRANSCRIPT_H */
/524            1414437295  1010  513   100644  9544      `
/* @include enstranslation ****************************************************
**
** Ensembl Translation functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.30 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2013/02/17 13:10:30 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSTRANSLATION_H
#define ENSTRANSLATION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensdata.h"
#include "ensprotein.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

void ensTranslationInit(void);

void ensTranslationExit(void);

const AjPTrn ensTranslationCacheGet(ajint codontable);

/* Ensembl Translation */

EnsPTranslation ensTranslationNewCpy(const EnsPTranslation translation);

EnsPTranslation ensTranslationNewIni(EnsPTranslationadaptor tla,
                                     ajuint identifier,
                                     EnsPExon startexon,
                                     EnsPExon endexon,
                                     ajuint start,
                                     ajuint end,
                                     AjPStr sequence,
                                     AjPStr stableid,
                                     ajuint version,
                                     AjPStr cdate,
                                     AjPStr mdate);

EnsPTranslation ensTranslationNewRef(EnsPTranslation translation);

void ensTranslationDel(EnsPTranslation *Ptranslation);

EnsPTranslationadaptor ensTranslationGetAdaptor(
    const EnsPTranslation translation);

AjPStr ensTranslationGetDateCreation(const EnsPTranslation translation);

AjPStr ensTranslationGetDateModification(const EnsPTranslation translation);

ajuint ensTranslationGetEnd(const EnsPTranslation translation);

EnsPExon ensTranslationGetEndexon(const EnsPTranslation translation);

ajuint ensTranslationGetIdentifier(const EnsPTranslation translation);

AjPStr ensTranslationGetStableidentifier(const EnsPTranslation translation);

ajuint ensTranslationGetStart(const EnsPTranslation translation);

EnsPExon ensTranslationGetStartexon(const EnsPTranslation translation);

ajuint ensTranslationGetVersion(const EnsPTranslation translation);

const AjPList ensTranslationLoadAttributes(EnsPTranslation translation);

const AjPList ensTranslationLoadDatabaseentries(EnsPTranslation translation);

const AjPList ensTranslationLoadProteinfeatures(EnsPTranslation translation);

AjBool ensTranslationSetAdaptor(EnsPTranslation translation,
                                EnsPTranslationadaptor tla);

AjBool ensTranslationSetIdentifier(EnsPTranslation translation,
                                   ajuint identifier);

AjBool ensTranslationSetStartexon(EnsPTranslation translation,
                                  EnsPExon exon);

AjBool ensTranslationSetEndexon(EnsPTranslation translation,
                                EnsPExon exon);

AjBool ensTranslationSetStart(EnsPTranslation translation,
                              ajuint start);

AjBool ensTranslationSetEnd(EnsPTranslation translation,
                            ajuint end);

AjBool ensTranslationSetStableidentifier(EnsPTranslation translation,
                                         AjPStr stableid);

AjBool ensTranslationSetVersion(EnsPTranslation translation,
                                ajuint version);

AjBool ensTranslationSetDateCreation(EnsPTranslation translation,
                                     AjPStr cdate);

AjBool ensTranslationSetDateModification(EnsPTranslation translation,
                                         AjPStr mdate);

AjBool ensTranslationAddAttribute(EnsPTranslation translation,
                                  EnsPAttribute attribute);

AjBool ensTranslationAddDatabaseentry(EnsPTranslation translation,
                                      EnsPDatabaseentry dbe);

AjBool ensTranslationAddProteinfeature(EnsPTranslation translation,
                                       EnsPProteinfeature pf);

size_t ensTranslationCalculateMemsize(const EnsPTranslation translation);

ajint ensTranslationCalculateSliceEnd(EnsPTranslation translation);

ajint ensTranslationCalculateSliceStart(EnsPTranslation translation);

ajuint ensTranslationCalculateTranscriptEnd(EnsPTranslation translation);

ajuint ensTranslationCalculateTranscriptStart(EnsPTranslation translation);

AjBool ensTranslationFetchAllAttributes(EnsPTranslation translation,
                                        const AjPStr code,
                                        AjPList attributes);

AjBool ensTranslationFetchAllDatabaseentries(EnsPTranslation translation,
                                             const AjPStr name,
                                             EnsEExternaldatabaseType type,
                                             AjPList dbes);

AjBool ensTranslationFetchAllDomains(EnsPTranslation translation,
                                     AjPList pfs);

AjBool ensTranslationFetchAllProteinfeatures(EnsPTranslation translation,
                                             const AjPStr name,
                                             AjPList pfs);

AjBool ensTranslationFetchAllSequenceedits(EnsPTranslation translation,
                                           AjPList ses);

AjBool ensTranslationFetchDisplayidentifier(const EnsPTranslation translation,
                                            AjPStr *Pidentifier);

AjBool ensTranslationTrace(const EnsPTranslation translation, ajuint level);

AjBool ensTranslationFetchSequenceSeq(EnsPTranslation translation,
                                      AjPSeq *Psequence);

AjBool ensTranslationFetchSequenceStr(EnsPTranslation translation,
                                      AjPStr *Psequence);

/* Ensembl Translation Adaptor */

EnsPTranslationadaptor ensRegistryGetTranslationadaptor(
    EnsPDatabaseadaptor dba);

EnsPTranslationadaptor ensTranslationadaptorNew(
    EnsPDatabaseadaptor dba);

void ensTranslationadaptorDel(EnsPTranslationadaptor *Ptla);

EnsPBaseadaptor ensTranslationadaptorGetBaseadaptor(
    EnsPTranslationadaptor tla);

EnsPDatabaseadaptor ensTranslationadaptorGetDatabaseadaptor(
    EnsPTranslationadaptor tla);

AjBool ensTranslationadaptorFetchAllbyExternaldatabasename(
    EnsPTranslationadaptor tla,
    const AjPStr dbname,
    AjPList translations);

AjBool ensTranslationadaptorFetchAllbyExternalname(
    EnsPTranslationadaptor tla,
    const AjPStr name,
    const AjPStr dbname,
    AjBool override,
    AjPList translations);

AjBool ensTranslationadaptorFetchAllbyIdentifiers(
    EnsPTranslationadaptor tla,
    AjPTable translations);

AjBool ensTranslationadaptorFetchAllbyTranscript(
    EnsPTranslationadaptor tla,
    EnsPTranscript transcript);

AjBool ensTranslationadaptorFetchByIdentifier(
    EnsPTranslationadaptor tla,
    ajuint identifier,
    EnsPTranslation *Ptranslation);

AjBool ensTranslationadaptorFetchByStableidentifier(
    EnsPTranslationadaptor tla,
    const AjPStr stableid,
    ajuint version,
    EnsPTranslation *Ptranslation);

AjBool ensTranslationadaptorFetchByTranscript(EnsPTranslationadaptor tla,
                                              EnsPTranscript transcript);

AjBool ensTranslationadaptorFetchAllbyTranscriptsList(
    EnsPTranslationadaptor tla,
    AjPList transcripts);

AjBool ensTranslationadaptorFetchAllbyTranscriptsTable(
    EnsPTranslationadaptor tla,
    AjPTable transcripts);

AjBool ensTranslationadaptorRetrieveAllIdentifiers(
    EnsPTranslationadaptor tla,
    AjPList identifiers);

AjBool ensTranslationadaptorRetrieveAllStableidentifiers(
    EnsPTranslationadaptor tla,
    AjPList stableids);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSTRANSLATION_H */
ensutility.h/   1414437295  1010  513   100644  2716      `
/* @include ensutility ********************************************************
**
** Ensembl Utility functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.11 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2011/09/29 15:45:05 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSUTILITY_H
#define ENSUTILITY_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ajax.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

void ensInit(void);

void ensExit(void);

AjBool ensTraceQuery(const AjPQuery qry, ajuint level);

AjBool ensTraceSeqin(const AjPSeqin seqin, ajuint level);

AjBool ensTraceSeqdesc(const AjPSeqDesc seqdesc, ajuint level);

AjBool ensTraceSeq(const AjPSeq seq, ajuint level);

AjBool ensTraceTextin(const AjPTextin textin, ajuint level);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSUTILITY_H */
ensvariation.h/ 1414437295  1010  513   100644  14289     `
/* @include ensvariation ******************************************************
**
** Ensembl Genetic Variation functions
**
** @author Copyright (C) 1999 Ensembl Developers
** @author Copyright (C) 2006 Michael K. Schuster
** @version $Revision: 1.31 $
** @modified 2009 by Alan Bleasby for incorporation into EMBOSS core
** @modified $Date: 2012/08/05 11:39:02 $ by $Author: mks $
** @@
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License as published by the Free Software Foundation; either
** version 2.1 of the License, or (at your option) any later version.
**
** This library is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
** Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public
** License along with this library; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
** MA  02110-1301,  USA.
**
******************************************************************************/

#ifndef ENSVARIATION_H
#define ENSVARIATION_H

/* ========================================================================= */
/* ============================= include files ============================= */
/* ========================================================================= */

#include "ensgvdata.h"

AJ_BEGIN_DECLS




/* ========================================================================= */
/* =============================== constants =============================== */
/* ========================================================================= */

/* @const EnsPGvtranscriptvariationadaptor ************************************
**
** Ensembl Genetic Variation Transcript Variation Adaptor
** Defined as an alias in EnsPGvbaseadaptor
**
** #alias EnsPGvbaseadaptor
** ##
******************************************************************************/

#define EnsPGvtranscriptvariationadaptor EnsPGvbaseadaptor




/* @enum EnsEGvconsequenceType ************************************************
**
** Ensembl Genetic Variation Consequence Type enumeration
**
** @value ensEGvconsequenceTypeNULL Null
** @value ensEGvconsequenceTypeEssentialsplicesite Essential splice site
** @value ensEGvconsequenceTypeStopgained Stop codon gained
** @value ensEGvconsequenceTypeStoplost Top codon lost
** @value ensEGvconsequenceTypeComplexindel Complex insertion or deletion
** @value ensEGvconsequenceTypeFrameshiftcoding Frameshift in coding sequence
** @value ensEGvconsequenceTypeSplicesite Splice site
** @value ensEGvconsequenceTypePartialcodon Partial codon
** @value ensEGvconsequenceTypeSynonymouscoding Synonymous
** @value ensEGvconsequenceTypeRegulatoryregion Regulatory region
** @value ensEGvconseqeunceTypeWithinmaturemirna Within a mature miRNA
** @value ensEGvconsequenceType5primeutr 5-prime untranslated region
** @value ensEGvconsequenceType3primeutr 3-prime untranslated region
** @value ensEGvconsequenceTypeUtr Untranslated region
** @value ensEGvconsequenceTypeIntronic Intronic
** @value ensEGvconsequenceTypeNmdtranscript Nonsense-mediated decay transcript
** @value ensEGvconsequenceTypeWithinnoncodinggene Non-coding gene
** @value ensEGvconsequenceTypeUpstream Upstream
** @value ensEGvconsequenceTypeDownstream Downstream
** @value ensEGvconsequenceTypeHgmdmutation HGMD Mutation
** @value ensEGvconsequenceTypeNoconsequence No consequence
** @value ensEGvconsequenceTypeIntergenic Intergenic
** @value ensEGvconsequenceType_ _
** @@
******************************************************************************/

typedef enum EnsOGvconsequenceType
{
    ensEGvconsequenceTypeNULL,
    ensEGvconsequenceTypeEssentialsplicesite,
    ensEGvconsequenceTypeStopgained,
    ensEGvconsequenceTypeStoplost,
    ensEGvconsequenceTypeComplexindel,
    ensEGvconsequenceTypeFrameshiftcoding,
    ensEGvconsequenceTypeSplicesite,
    ensEGvconsequenceTypePartialcodon,
    ensEGvconsequenceTypeSynonymouscoding,
    ensEGvconsequenceTypeRegulatoryregion,
    ensEGvconseqeunceTypeWithinmaturemirna,
    ensEGvconsequenceType5primeutr,
    ensEGvconsequenceType3primeutr,
    ensEGvconsequenceTypeUtr,
    ensEGvconsequenceTypeIntronic,
    ensEGvconsequenceTypeNmdtranscript,
    ensEGvconsequenceTypeWithinnoncodinggene,
    ensEGvconsequenceTypeUpstream,
    ensEGvconsequenceTypeDownstream,
    ensEGvconsequenceTypeHgmdmutation,
    ensEGvconsequenceTypeNoconsequence,
    ensEGvconsequenceTypeIntergenic,
    ensEGvconsequenceType_
} EnsEGvconsequenceType;




/* ========================================================================= */
/* ============================== public data ============================== */
/* ========================================================================= */

/* @data EnsPGvconsequence ****************************************************
**
** Ensembl Genetic Variation Consequence.
**
** @alias EnsSGvconsequence
** @alias EnsOGvconsequence
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Variation::ConsequenceType
** @attr Transcriptidentifier [ajuint] Ensembl Transcript identifier
** @attr Gvvariationfeatureidentifier [ajuint] Ensembl Genetic Variation
**                                             Variation Feature identifier
** @attr Start [ajuint] Start
** @attr End [ajuint] End
** @attr Strand [ajuint] Strand
** @attr Alleles [AjPList] AJAX List of AJAX String objects
** @attr Types [AjPList] AJAX List of AJAX String objects
** @@
******************************************************************************/

typedef struct EnsSGvconsequence
{
    ajuint Use;
    ajuint Transcriptidentifier;
    ajuint Gvvariationfeatureidentifier;
    ajuint Start;
    ajuint End;
    ajuint Strand;
    AjPList Alleles;
    AjPList Types;
} EnsOGvconsequence;

#define EnsPGvconsequence EnsOGvconsequence*




/* @data EnsPGvtranscriptvariation ********************************************
**
** Ensembl Genetic Variation Transcript Variation.
**
** @alias EnsSGvtranscriptvariation
** @alias EnsOGvtranscriptvariation
**
** @attr Use [ajuint] Use counter
** @cc Bio::EnsEMBL::Storable
** @attr Identifier [ajuint] SQL database-internal identifier
** @attr Adaptor [EnsPGvtranscriptvariationadaptor]
** Ensembl Genetic Variation Transcript Variation Adaptor
** @cc Bio::EnsEMBL::Variation::TranscriptVariation
** @attr Gvvariationfeature [EnsPGvvariationfeature]
** Ensembl Genetic Variation Variation Feature
** @attr TranscriptObject [EnsPTranscript] Ensembl Transcript
** @attr TranslationAllele [AjPStr] Ensembl Translation allele
** @attr TranscriptStart [ajuint] Transcript start
** @attr TranscriptEnd [ajuint] Transcript end
** @attr CodingStart [ajuint] Coding start
** @attr CodingEnd [ajuint] Coding end
** @attr TranslationStart [ajuint] Translation start
** @attr TranslationEnd [ajuint] Translation end
** @attr GvconsequenceTypes [ajuint] Ensembl Genetic Variation Consequence Type
** bit field
** @attr Padding [ajuint] Padding to alignment boundary
** @@
******************************************************************************/

typedef struct EnsSGvtranscriptvariation
{
    ajuint Use;
    ajuint Identifier;
    EnsPGvtranscriptvariationadaptor Adaptor;
    EnsPGvvariationfeature Gvvariationfeature;
    EnsPTranscript TranscriptObject;
    AjPStr TranslationAllele;
    ajuint TranscriptStart;
    ajuint TranscriptEnd;
    ajuint CodingStart;
    ajuint CodingEnd;
    ajuint TranslationStart;
    ajuint TranslationEnd;
    ajuint GvconsequenceTypes;
    ajuint Padding;
} EnsOGvtranscriptvariation;

#define EnsPGvtranscriptvariation EnsOGvtranscriptvariation*




/* ========================================================================= */
/* =========================== public functions ============================ */
/* ========================================================================= */

/*
** Prototype definitions
*/

/* Ensembl Genetic Variation Consequence */

EnsPGvconsequence ensGvconsequenceNewCpy(const EnsPGvconsequence gvc);

EnsPGvconsequence ensGvconsequenceNewIni(ajuint transcriptid,
                                         ajuint gvvfid,
                                         ajint start,
                                         ajint end,
                                         ajint strand);

EnsPGvconsequence ensGvconsequenceNewRef(EnsPGvconsequence gvc);

void ensGvconsequenceDel(EnsPGvconsequence *Pgvc);

ajint ensGvconsequenceGetEnd(
    const EnsPGvconsequence gvc);

ajuint ensGvconsequenceGetGvvariationfeatureidentifier(
    const EnsPGvconsequence gvc);

ajint ensGvconsequenceGetStart(
    const EnsPGvconsequence gvc);

ajint ensGvconsequenceGetStrand(
    const EnsPGvconsequence gvc);

ajuint ensGvconsequenceGetTranscriptidentifier(
    const EnsPGvconsequence gvc);

AjBool ensGvconsequenceSetEnd(EnsPGvconsequence gvc,
                              ajint end);

AjBool ensGvconsequenceSetGvvariationfeatureidentifier(EnsPGvconsequence gvc,
                                                       ajuint gvvfid);

AjBool ensGvconsequenceSetStart(EnsPGvconsequence gvc,
                                ajint start);

AjBool ensGvconsequenceSetStrand(EnsPGvconsequence gvc,
                                 ajint strand);

AjBool ensGvconsequenceSetTranscriptidentifier(EnsPGvconsequence gvc,
                                               ajuint transcriptid);

AjBool ensGvconsequenceTrace(const EnsPGvconsequence gvc,
                             ajuint level);

size_t ensGvconsequenceCalculateMemsize(const EnsPGvconsequence gvc);

/* Ensembl Genetic Variation Consequence Type */

EnsEGvconsequenceType ensGvconsequenceTypeFromStr(
    const AjPStr consequencetype);

const char *ensGvconsequenceTypeToChar(
    EnsEGvconsequenceType gvct);

ajuint ensGvconsequenceTypesFromSet(const AjPStr gvctset);

AjBool ensGvconsequenceTypesToSet(ajuint gvctbf, AjPStr *Pgvctset);

/* Ensembl Genetic Variation Transcript Variation */

EnsPGvtranscriptvariation ensGvtranscriptvariationNewCpy(
    const EnsPGvtranscriptvariation gvtv);

EnsPGvtranscriptvariation ensGvtranscriptvariationNewIni(
    EnsPGvtranscriptvariationadaptor gvtva,
    ajuint identifier,
    EnsPTranscript transcript,
    EnsPGvvariationfeature gvvf,
    AjPStr translationallele,
    AjPStr consequencetype,
    ajuint codingstart,
    ajuint codingend,
    ajuint transcriptstart,
    ajuint transcriptend,
    ajuint translationstart,
    ajuint translationend);

EnsPGvtranscriptvariation ensGvtranscriptvariationNewRef(
    EnsPGvtranscriptvariation gvtv);

void ensGvtranscriptvariationDel(EnsPGvtranscriptvariation *Pgvtv);

EnsPGvtranscriptvariationadaptor ensGvtranscriptvariationGetAdaptor(
    const EnsPGvtranscriptvariation gvtv);

ajuint ensGvtranscriptvariationGetCodingEnd(
    const EnsPGvtranscriptvariation gvtv);

ajuint ensGvtranscriptvariationGetCodingStart(
    const EnsPGvtranscriptvariation gvtv);

EnsPGvvariationfeature ensGvtranscriptvariationGetGvvariationfeature(
    const EnsPGvtranscriptvariation gvtv);

ajuint ensGvtranscriptvariationGetIdentifier(
    const EnsPGvtranscriptvariation gvtv);

ajuint ensGvtranscriptvariationGetTranscriptEnd(
    const EnsPGvtranscriptvariation gvtv);

EnsPTranscript ensGvtranscriptvariationGetTranscriptObject(
    const EnsPGvtranscriptvariation gvtv);

ajuint ensGvtranscriptvariationGetTranscriptStart(
    const EnsPGvtranscriptvariation gvtv);

AjPStr ensGvtranscriptvariationGetTranslationAllele(
    const EnsPGvtranscriptvariation gvtv);

ajuint ensGvtranscriptvariationGetTranslationEnd(
    const EnsPGvtranscriptvariation gvtv);

ajuint ensGvtranscriptvariationGetTranslationStart(
    const EnsPGvtranscriptvariation gvtv);

AjBool ensGvtranscriptvariationSetAdaptor(
    EnsPGvtranscriptvariation gvtv,
    EnsPGvtranscriptvariationadaptor gvtva);

AjBool ensGvtranscriptvariationSetCodingEnd(
    EnsPGvtranscriptvariation gvtv,
    ajuint codingend);

AjBool ensGvtranscriptvariationSetCodingStart(
    EnsPGvtranscriptvariation gvtv,
    ajuint codingstart);

AjBool ensGvtranscriptvariationSetGvvariationfeature(
    EnsPGvtranscriptvariation gvtv,
    EnsPGvvariationfeature gvvf);

AjBool ensGvtranscriptvariationSetIdentifier(
    EnsPGvtranscriptvariation gvtv,
    ajuint identifier);

AjBool ensGvtranscriptvariationSetTranscriptEnd(
    EnsPGvtranscriptvariation gvtv,
    ajuint transcriptend);

AjBool ensGvtranscriptvariationSetTranscriptObject(
    EnsPGvtranscriptvariation gvtv,
    EnsPTranscript transcript);

AjBool ensGvtranscriptvariationSetTranscriptStart(
    EnsPGvtranscriptvariation gvtv,
    ajuint transcriptstart);

AjBool ensGvtranscriptvariationSetTranslationAllele(
    EnsPGvtranscriptvariation gvtv,
    AjPStr translationallele);

AjBool ensGvtranscriptvariationSetTranslationEnd(
    EnsPGvtranscriptvariation gvtv,
    ajuint translationend);

AjBool ensGvtranscriptvariationSetTranslationStart(
    EnsPGvtranscriptvariation gvtv,
    ajuint translationstart);

AjBool ensGvtranscriptvariationTrace(const EnsPGvtranscriptvariation gvtv,
                                     ajuint level);

size_t ensGvtranscriptvariationCalculateMemsize(
    const EnsPGvtranscriptvariation gvtv);

/* Ensembl Genetic Variation Transcript Variation Adaptor */

EnsPGvtranscriptvariationadaptor ensRegistryGetGvtranscriptvariationadaptor(
    EnsPDatabaseadaptor dba);

EnsPGvtranscriptvariationadaptor ensGvtranscriptvariationadaptorNew(
    EnsPDatabaseadaptor dba);

void ensGvtranscriptvariationadaptorDel(
    EnsPGvtranscriptvariationadaptor *Pgvtva);

EnsPBaseadaptor ensGvtranscriptvariationadaptorGetBaseadaptor(
    EnsPGvtranscriptvariationadaptor gvtva);

EnsPDatabaseadaptor ensGvtranscriptvariationadaptorGetDatabaseadaptor(
    EnsPGvtranscriptvariationadaptor gvtva);

EnsPGvbaseadaptor ensGvtranscriptvariationadaptorGetGvbaseadaptor(
    EnsPGvtranscriptvariationadaptor gvtva);

EnsPGvdatabaseadaptor ensGvtranscriptvariationadaptorGetGvdatabaseadaptor(
    EnsPGvtranscriptvariationadaptor gvtva);

/*
** End of prototype definitions
*/




AJ_END_DECLS

#endif /* !ENSVARIATION_H */

